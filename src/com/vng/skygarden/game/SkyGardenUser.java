package com.vng.skygarden.game;

import com.google.common.base.Strings;
import com.vng.netty.*;
import com.vng.util.*;
import com.vng.log.*;
import com.vng.db.*;
import com.vng.skygarden.*;
import com.vng.skygarden._gen_.ProjectConfig;
import java.util.*;
import java.io.*;
import java.net.*;
import java.nio.*;
import java.nio.channels.DatagramChannel;

import com.zing.zalo.zalosdk.payment.direct.HMACHelper;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.Map.Entry;
import java.util.HashMap;
import java.util.concurrent.ConcurrentHashMap;
import org.apache.commons.lang3.ArrayUtils;

public class SkyGardenUser
{
	Client		_client = null;
	String		_ip = "";
	String		_country = "";
	
	public DBKeyValue 	base;

	long		_user_id 				= -1;
	String		_device_id				= "";
	String		_device_name			= "";
	String		_device_firmware		= "";
	String		_device_platform		= "";
	int			_update_status			= DatabaseID.VERSION_HAS_NOT_UPDATE;
	String		_distributor			= "";
	String		_reference_src			= "";
	String		_phone_number			= "";
	String		_session_id 			= "";
	String		_last_session			= "";
	String		_new_session_id 		= "";
	boolean		_save_new_session		= false;
	long		_request_id 			= 0;
	int			_command_id 			= -1;
	int			_return_id 				= -1;
	
	long		_friend_id				= -1;
	String		_friend_device_id		= "";
	long		_friend_user_id			= -1;
	int			_npc_daily_reset_time	= -1;
	
	String		_update_link			= "";
	boolean		_update_force			= false;
	public String		_client_version			= "";
	public String		_client_OS				= "";
	
	public boolean		_is_login				= false;
	boolean		_is_stable_user			= false;
	boolean		_is_order_bug_pearl		= false;
	
	static final short	USER_REQUEST_DELTA		= 20; // should reduce later
	static final int NEW_USER_EXPIRE_TIME 		= 108000;
	
	boolean		bCheatTest				= true;
	boolean		bCheatFriendList		= true;
	boolean		bCheatDeliveryOrder		= false;
	
	boolean		bUseDailyGift			= true;
	boolean		bUseOwl					= false;
	boolean		bUseGiftCode			= true;
	boolean		bUseNPCBuyItem			= false;
	boolean		bUseEvent				= false;
	
	public List<Floor> 				floor = new ArrayList<Floor>();
	public List<Stock> 				stock = new ArrayList<Stock>();
	public List<Machine> 			machine = new ArrayList<Machine>();
	public List<MachineDurability> 	machineDurability = new ArrayList<MachineDurability>();
	public List<MachineDurability> 	npcMachineDurability = new ArrayList<MachineDurability>();
	public UserInfo 				userInfo;
	public OrderManager 			orderManager;
	public MoneyManager				money_mgr;
	public PrivateShopManager		PShopMgr;
	public PrivateShopManager		NPCShopMgr;
	public FriendManager			friend_mgr;
	public NewsBoard				newsBoard;
	public AchievementManager		acm_mgr;
	public DailyGift				dailygift;
	public MachineRepairLimit		machineRepairLimit;
	public TutorialManager			tutorialManager;
	public String					FBFriendList = "";
	public String					ZingFriendList = "";
	public String					ZaloFriendList = "";
	public GiftManager				gift_mgr;
	public Owl						owl;
	public GiftCodeEnter			giftCodeEnter;
//	public Event					mainEvent;
	public EventMainObject			eventMainObject;
	public MerchantManager			merchant_mgr;
	public Alert 					_alert;
	public Special_Offer			_offer;
	public OfferManager				_user_offer_manager;
	public NewDailyGift				_new_dailygift;
	public ComboManager				_combo_manager;
	public CloseFriend				_close_friend;
	public TreasureTrunk			_trunk;
	
	// airship
	public Airship airship;
	
	// tom kid
	public TomKid tomkid;
	
	// rota fortunae
	public RotaFortunaeManager fortune_manager;
	
	// ranking
	public RankingTarget ranking_target;
	
	// invite friend
	public InviteFriend invite_friend;
	
	// private info
	public PrivateInfo private_info;
	
	// cross promotion
	public CrossPromotion cross_promotion;
	boolean _use_cross_promotion = !true;
	
	// use new newsboard
	boolean _use_newsboard_udp = true;
	
	// new achievement
	boolean	_use_achievement	= true;
	boolean	_use_airship		= true;
	boolean	_use_tomkid			= true;
	boolean	_use_fortune		= true;
	boolean _use_invite_friend	= true;
	boolean _use_new_offer		= true;
	boolean _use_ref_code		= true;
	boolean _use_new_dailygift	= true;
	boolean _use_combo_decor	= true;
	boolean _use_new_broadcast	= true;
	boolean _use_close_friend	= true;
	boolean _use_treasure_trunk = (ProjectConfig.IS_SERVER_FREESTYLE == 1);
	boolean _use_user_birthday	= true;
	
	// stock event
	public Stock stock_event;
	boolean _use_stock_event	= false;
	
	private List<String> DropItemInfo = new ArrayList<String>();
	int[] DropItemList = 			{
															DatabaseID.DROP_ITEM_GACH, 
															DatabaseID.DROP_ITEM_SONDO, 
															DatabaseID.DROP_ITEM_GO, 
															DatabaseID.DROP_ITEM_DA, 
															DatabaseID.DROP_ITEM_SONVANG, 
															DatabaseID.DROP_ITEM_DINH, 
															DatabaseID.DROP_ITEM_NGOI, 
															DatabaseID.DROP_ITEM_SONDEN, 
															DatabaseID.DROP_ITEM_SAT, 
															DatabaseID.DROP_ITEM_VOT,
															DatabaseID.DROP_ITEM_VOTDAI,
															DatabaseID.DROP_ITEM_BANH_TRUNG_THU,
															DatabaseID.DROP_ITEM_EVENT_1,
															DatabaseID.DROP_ITEM_EVENT_2,
															DatabaseID.DROP_ITEM_EVENT_3
														};
	int[] DropItemListFriendHome = {
															DatabaseID.DROP_ITEM_NUOCTHAN,
															DatabaseID.DROP_ITEM_KEODANMAY,
															DatabaseID.DROP_ITEM_BANH_TRUNG_THU,
															DatabaseID.DROP_ITEM_EVENT_1,
															DatabaseID.DROP_ITEM_EVENT_2,
															DatabaseID.DROP_ITEM_EVENT_3
														};
	private static final String[] ItemNotSale = {"type_id"};
	
	// bug at friend house
	public List<String> BugAppearRatio = new ArrayList<String>();// ratio of bug appearing at friend's house
	public List<String> BugInfo = new ArrayList<String>(); // bug info at friend's house
	public int bug_appear_time;
	private boolean catched_bug = false;
	
	// garden's appraisal
	private long pot_appraisal = 0;
	private long floor_appraisal = 0;
	private long machine_appraisal = 0;
	private long stock_appraisal = 0;
	private long decor_appraisal = 0;
	public long garden_appraisal = 0;
	
	private boolean user_level_up = false;
	private int last_level = 1;
	
	private int payment_flag = 0;
	
	// reward when share game on social (FB, ZM ...)
	public List<String> ShareFBLevelUpRewardPool = new LinkedList<String>();
	
	// lazy sync
	private final boolean _use_lazy_sync				= ProjectConfig.USE_LAZY_SYNC;
	private final boolean _use_lazy_sync_user_info		= ProjectConfig.USE_LAZY_SYNC_USER_INFOS;
	private final boolean _use_lazy_sync_achievement	= ProjectConfig.USE_LAZY_SYNC_ACHIEVEMENT;
	
	// cached offline user
	private final boolean _use_cached_offline_user = ProjectConfig.USE_CACHE_OFFLINE;
	private boolean _load_result = false;
	
	// NPC buy item timer
	private int npc_buy_item_timer	= -1;
	
	private boolean useWifi = true;
	
	private boolean _is_simple_login = false;
	private boolean _response_login_data = true;
	
	String		_origin_device_id				= "";
	
	private boolean _is_waiting_for_confirm_login = false;
	
	public String _zalo_id = "";
	public String _zalo_token = ""; 
	
	// num of event items
	private int _event_item_num = 0;
	private boolean _use_event_mid_autumn_festival = false;
	private final String _start_time_event_mid_autumn_festival = "13/09/2014 06:00:00";
	private final String _end_time_event_mid_autumn_festival = "20/09/2014 23:59:59";
	private int _event_mid_autumn_ranking = 0;
	
	private boolean _use_event_big_offer = false;
	private final String _start_time_event_big_offer = "04/10/2014 06:00:00";
	private final String _end_time_event_big_offer = "06/10/2014 23:59:59";
	
	private boolean _use_event_export = false;
	private final String _start_time_event_export = "04/10/2014 06:00:00";
	private final String _end_time_event_export = "11/10/2014 23:59:59";
	
	private boolean _use_event_halloween = false;
	private String _start_time_event_halloween = "";
	private String _end_time_event_halloween = "";
	private String _banned_ibshop_package = "";
	
	private boolean _use_event_xmas_2014 = false;
	private String	_start_time_event_xmas_2014 = "";
	private String	_end_time_event_xmas_2014 = "";

	private boolean _use_event_x2 = false;
	private String _start_time_event_x2 = "";
	private String _end_time_event_x2 = "";
	
	private boolean _use_event_happy_weekend = false;
	private String _start_time_event_happy_weekend = "";
	private String _end_time_event_happy_weekend = "";
	
	private boolean _use_event_20_11 = false;
	private String _start_time_event_20_11 = "";
	private String _end_time_event_20_11 = "";
	
	private boolean _use_event_xmas_mini = false;
	private String _start_time_event_xmas_mini = "";
	private String _end_time_event_xmas_mini = "";
	
	private boolean _use_event_xmas_tree = false;
	private String _start_time_event_xmas_tree = "";
	private String _end_time_event_xmas_tree = "";
	
	private boolean _use_event_new_year_2015 = false;
	private String _start_time_event_new_year_2015 = "";
	private String _end_time_event_new_year_2015 = "";
	
	private boolean _use_event_8_3_2015 = false;
	private String _start_time_event_8_3_2015 = "";
	private String _end_time_event_8_3_2015 = "";
	
	private boolean _use_event_uprade_pot = false;
	private String _start_event_upgrade_pot = "";
	private String _end_event_upgrade_pot = "";
	
	private boolean _use_event_order = false;
	private String _start_event_order = "";
	private String _end_event_order = "";
	
	private boolean _use_event_new_comer = false;
	private String _start_time_event_new_comer = "";
	private String _end_time_event_new_comer = "";
	
	private boolean _use_event_button = false;
	private String _start_use_button = "";
	private String _end_use_button = "";
	
	private String _event_web_link = "";
	
	private String _facebook_id = "";
	private String _zing_id		= "";
	private boolean _should_map_social_id = false;
	
	// payment android
	private String	_android_product_id = "";
	
	// payment win
	private String	_win_product_id = "";
	
	// APPFLYER
	public String _appflyer_media_source = "null";
	public String _appflyer_campaign_name = "null";
	public String _appflyer_campaign_id = "null";
	public String _appflyer_is_fb = "null";
	public String _appflyer_adgroup_name = "null";
	public String _appflyer_adgroup_id = "null";
	public String _appflyer_adset_name = "null";
	public String _appflyer_adset_id = "null";
	public String _appflyer_ad_id = "null";
	public String _appflyer_af_siteid = "null";
	public String _appflyer_af_sub1 = "null";
	public String _appflyer_af_sub2 = "null";
	public String _appflyer_af_sub3 = "null";
	public String _appflyer_af_sub4 = "null";
	public String _appflyer_af_sub5 = "null";
	public String _appflyer_install_time = "null";
	public String _appflyer_af_id = "null";
	public String _pig_id = "null";
	public String _ref_code = "null";
	
	public SkyGardenUser(Client client, String ip_address)
	{
		_client = client;
		_ip = ip_address;
	}
	
	public void MessageReceived(byte[] data)
	{
		FBEncrypt encrypt = new FBEncrypt(data.length);
		
		if (encrypt.decode(data) == false)
		{
			LogHelper.Log(LogHelper.LogType.HACK, "err! decode data failed. ip=" + _ip);
			requestError();
			return;
		}
		
		if (encrypt.hasKey(KeyID.KEY_GM_ID) && encrypt.hasKey(KeyID.KEY_GM_TOKEN))
		{
			// check ip address
			String[] ip_list = ProjectConfig.GM_IPLIST.split(";");
			if (!Arrays.asList(ip_list).contains(_ip))
			{
				LogHelper.Log(LogHelper.LogType.HACK, "err! invalid gm ip address: " + _ip);
				return;
			}
			
			// get gm_id
			String gm_id = encrypt.getString(KeyID.KEY_GM_ID);
			
			// get login_time
			long login_time = encrypt.getLong(KeyID.KEY_GM_LOGIN_TIME);
			
			// get gm_token
			int gm_token = encrypt.getInt(KeyID.KEY_GM_TOKEN);
			int re_token = Misc.MurmurHash(gm_id + login_time); // TODO: should choose another way to check token here, dont use murmurhash
			
			if (gm_token == re_token)
			{
				GMMessageExecute(encrypt);
			}
			else
			{
				LogHelper.Log(LogHelper.LogType.HACK, "err! invalid gm session, ip = " + _ip);
				return;
			}
			
			return;
		}

		//get command id
		int previous_command_id = _command_id;
		_command_id = encrypt.getShort(KeyID.KEY_USER_COMMAND_ID);
		
		StringBuilder msg = new StringBuilder("MessageReceived [");
		msg.append(_origin_device_id).append("]: ");
		msg.append('\t').append(_device_id); // TODO: under attack ?
		msg.append('\t').append(_user_id);
		msg.append('\t').append(Misc.GetCommandString(_command_id));
		LogHelper.Log(msg.toString());
		
		//check valid param
		if (_command_id < CommandID.CMD_TEST || _command_id > CommandID.CMD_MAX_VALUE)
		{
			LogHelper.Log(LogHelper.LogType.HACK, "err! invalid command ID, value = " + _command_id + "&ip=" + _ip);
			requestError();
			return;
		}
		
		if (ProjectConfig.IS_SERVER_CDN == 1)
		{
			if (_command_id == CommandID.CMD_CDN_LOADER)
			{
				handleCDNLoader(encrypt);
			}
			return;
		}
		
		if (Server._server_status == DatabaseID.SERVER_STATUS_FORWARD)
		{
			FBEncrypt response = new FBEncrypt();
			_command_id = CommandID.CMD_FORCE_CHANGE_SERVER;
			_return_id = ReturnCode.RESPONSE_OK;
			response.addString(KeyID.KEY_FORWARD_SERVER_IP, Server._forward_server_ip);
			response.addInt(KeyID.KEY_FORWARD_SERVER_PORT, Server._forward_server_port);

			try
			{
				_client.WriteZip(response.toByteArray());
				LogHelper.Log("Forwarded user [" + _user_id + "] to " + Server._forward_server_ip + ":" + Server._forward_server_port);
			}
			catch (Exception ex) 
			{
				LogHelper.LogException("MessageReceived.SERVER_STATUS_FORWARD", ex);
			}
			return;
		}
		
		if (!_is_login)
		{
			if (_is_waiting_for_confirm_login)
			{
				if (_command_id == CommandID.CMD_CONFIRM_LOGIN)
				{
					long request_id = encrypt.getLong(KeyID.KEY_USER_REQUEST_ID);
					if (checkValidRequest(request_id, ""))
					{
						handleConfirmLogin();
					}
				}
			}
			else
			{
				//handle login command
				if (_command_id == CommandID.CMD_LOGIN || _command_id == CommandID.CMD_RECONNECT)
				{
					logIn(encrypt);
				}
				else if (_command_id == CommandID.CMD_SIMPLE_LOGIN)
				{
					_is_simple_login = true;
					logIn(encrypt);
				}
				else
				{
					LogHelper.Log("MessageReceived.. err! User does not log in yet !");
					_command_id = CommandID.CMD_REQUEST_LOGIN;
					_return_id = ReturnCode.RESPONSE_REQUIRE_LOGIN;
					_last_session = encrypt.getString(KeyID.KEY_USER_SESSION_ID);
					requestError();
					return;
				}
			}
		}
		else
		{
			if (!encrypt.hasKey(KeyID.KEY_USER_ID) || !encrypt.hasKey(KeyID.KEY_USER_REQUEST_ID) || !encrypt.hasKey(KeyID.KEY_USER_SESSION_ID))
			{
				LogHelper.Log(LogHelper.LogType.HACK, "err! mesage does not contain enough params. ip=" + _ip);
				requestError();
				return;
			}
			
			//get params
			long previous_user_id = _user_id;
//			_user_id = encrypt.getLong(KeyID.KEY_USER_ID);
			
			// debug to fix bug mismatch user id
			if (_user_id != previous_user_id) {
				LogHelper.Log(LogHelper.LogType.HACK, "err! user id is not consist: previous user id = " + previous_user_id + ", new user id = " + _user_id + ", previous command id = " + previous_command_id + ", current command id = " + _command_id);
			}
			
			long request_id = encrypt.getLong(KeyID.KEY_USER_REQUEST_ID);
			String session = encrypt.getString(KeyID.KEY_USER_SESSION_ID);
			
			//check valid params
			if (_user_id < 0 ||
				request_id < 0 ||
				session == null ||
				session.length() == 0)
			{
				LogHelper.Log(LogHelper.LogType.HACK, "err! invalid params. ip=" + _ip);
				requestError();
				return;
			}
			
			//check valid request
			if (!checkValidRequest(request_id, session))
			{
				LogHelper.Log("MessageReceived.. err! check valid request fail !");
				requestError(data);
				return;
			}
		
			_return_id = ReturnCode.RESPONSE_OK;
		
			//execute command
			messageExecute(encrypt);
		}
	}
	
	public void messageExecute(FBEncrypt encrypt)
	{
		switch (_command_id)
		{
			case CommandID.CMD_TEST:
				handleCommandTest(encrypt);
				return;
			
			case CommandID.CMD_GET_GAME_CONSTANT:
				getGameConstantData();
				break;
				
			case CommandID.CMD_COME_BACK_HOME:
				handleComeBackHome();
				break;
			
			case CommandID.CMD_PLACE_POT:
				handlePlacePot(encrypt);
				break;
			
			case CommandID.CMD_HIDE_POT:
				handleHidePot(encrypt);
				break;
			
			case CommandID.CMD_UPGRADE_POT:
				handleUpgradePot(encrypt);
				break;
			
			case CommandID.CMD_PLANT:
				handlePlantFlower(encrypt);
				break;
			
			case CommandID.CMD_HARVEST:
				handleHarvest(encrypt);
				break;
			
			case CommandID.CMD_OPEN_NEW_FLOOR:
				handleOpenNewFloor();
				break;
				
			case CommandID.CMD_BUY_ITEM_UPGRADE_STOCK:
				buyItemUpgradeStock(encrypt);
				break;
				
			case CommandID.CMD_BUY_ITEM_UPGRADE_STOCK_OPTIMIZE_DATA_OUT:
				buyItemUpgradeStock_OptimizeDataOut(encrypt);
				break;
				
			case CommandID.CMD_BUY_ITEM_OPEN_FLOOR:
				buyItemOpenFloor(encrypt);
				break;
				
			case CommandID.CMD_COMPLETE_ORDER:
				completeOrder(encrypt);
				break;
				
			case CommandID.CMD_RECEIVE_REWARD:
				receiveOrderReward(encrypt);
				break;
				
			case CommandID.CMD_UPGRADE_STOCK:
				upgradeStock(encrypt);
				break;
				
			case CommandID.CMD_UPGRADE_STOCK_OPTIMIZE_DATA_OUT:
				upgradeStock_OptimizeDataOut(encrypt);
				break;
				
			case CommandID.CMD_START_MACHINE:
				startMachine(encrypt);
				break;
				
			case CommandID.CMD_SKIP_MACHINE_UNLOCK_TIME:
				skipMachineUnlockTime(encrypt);
				break;
				
			case CommandID.CMD_READY_MACHINE:
				readyMachine(encrypt);
				break;
				
			case CommandID.CMD_UPGRADE_MACHINE:
				upgradeMachine(encrypt);
				break;
				
			case CommandID.CMD_REPAIR_MACHINE:
				repairMachine(encrypt);
				break;
				
			case CommandID.CMD_RECEIVE_MACHINE_DURABILITY:
				receiveMachineDurability(encrypt);
				break;
				
			case CommandID.CMD_CREATE_PRODUCT:
				createProduct(encrypt);
				break;

			case CommandID.CMD_CREATE_PRODUCT_OPTIMIZE_DATA_OUT:
				createProduct_OptimizeDataOut(encrypt);
				break;

			case CommandID.CMD_COMPLETE_ITEMS_TO_PRODUCT:
				completeItemsToProduct(encrypt);
				break;

			case CommandID.CMD_UPGRADE_PRODUCT_SLOT:
				upgradeProductSlot(encrypt);
				break;

			case CommandID.CMD_PRODUCT_COMPLETED:
				productCompleted(encrypt);
				break;

			case CommandID.CMD_PRODUCT_COMPLETED_OPTIMIZE_DATA_OUT:
				productCompleted_OptimizeDataOut(encrypt);
				break;

			case CommandID.CMD_MOVE_MACHINE_PRODUCT:
				moveMachineProduct(encrypt);
				break;
				
			case CommandID.CMD_MOVE_MACHINE_PRODUCT_OPTIMIZE_DATA_OUT:
				moveMachineProduct_OptimizeDataOut(encrypt);
				break;
				
			case CommandID.CMD_PRODUCT_SKIP_TIME:
				productSkipTime(encrypt);
				break;
				
			case CommandID.CMD_PRODUCT_SKIP_TIME_OPTIMIZE_DATA_OUT:
				productSkipTime_OptimizeDataOut(encrypt);
				break;
				
			case CommandID.CMD_CREATE_ORDER:
				handleCreateOrder(encrypt);
				break;

			case CommandID.CMD_SKIP_ORDER_WAIT_TIME:
				skipOrderWaitTime(encrypt);
				break;
			
			case CommandID.CMD_DELIVERY_ORDER:
				deliveryOrder(encrypt);
				break;
				
			case CommandID.CMD_SKIP_ORDER:
				skipOrder(encrypt);
				break;
			
			case CommandID.CMD_MOVE_POT:
				handleMovePot(encrypt);
				break;
				
			case CommandID.CMD_CATCH_BUG:
				handleCatchBug(encrypt);
				break;
				
			case CommandID.CMD_PLANT_INSTANT_GROW_UP:
				handlePlantInstantGrowUp(encrypt);
				break;
				
			case CommandID.CMD_BUY_IBSHOP_PACKAGE:
				handleBuyIBShopPackage(encrypt);
				break;
				
			case CommandID.CMD_UNLOCK_PS_SLOT_FRIEND:
				handleUnlockFriendSlot();
				break;
				
			case CommandID.CMD_UNLOCK_PS_SLOT_DIAMOND:
				handleUnlockDiamondSlot();
				break;
			
			case CommandID.CMD_PLACE_ITEM_PSHOP:
				handlePlaceItemPShop(encrypt);
				break;
				
			case CommandID.CMD_CANCEL_ITEM_PSHOP:
				handleCancelItemPShop(encrypt);
				break;
				
			case CommandID.CMD_SKIP_ADS_PSHOP:
				handleSkipAdsPendingTimeInPShop();
				break;
				
			case CommandID.CMD_SET_ADS_PSHOP:
				handleSetAdsPShop(encrypt);
				break;
			
			case CommandID.CMD_LOAD_FRIEND_LIST:
				loadFriendList(encrypt);
				break;
				
			case CommandID.CMD_LOAD_FRIEND_LIST_STEP:
				loadFriendListStep(encrypt);
				break;
				
			case CommandID.CMD_LOAD_SPECIAL_OFFER:
				loadSpecialOffer(encrypt);
				break;
				
			case CommandID.CMD_BUY_SALE_OFF_SPECIAL_OFFER:
				buySaleOffSpecialOffer(encrypt);
				break;
			
			case CommandID.CMD_PRELOAD_IMG_SPECIAL_OFFER:
				preLoadImgSpecialOffer(encrypt);
				break;
			
			case CommandID.CMD_LOAD_FRIEND_GARDEN:
				loadFriendGarden(encrypt);
				break;
				
			case CommandID.CMD_REPAIR_MACHINE_FRIEND:
				repairMachine_Friend(encrypt);
				break;
				
			case CommandID.CMD_LOAD_FRIEND_PSHOP:
				handleLoadFriendPShop(encrypt);
				break;
				
			case CommandID.CMD_BUY_ITEM_PRIVATE_SHOP:
				handleBuyItemPShop(encrypt);
				break;
				
			case CommandID.CMD_COLLECT_MONEY_PSHOP:
				handleCollectMoneyPShop(encrypt);
				break;
				
			case CommandID.CMD_BUY_MATERIAL_UPGRADE_POT:
				handleBuyItemUpgradePot(encrypt);
				break;
				
			case CommandID.CMD_BUY_PEARL_UPGRADE_POT:
				handleBuyPearlUpgradePot(encrypt);
				break;
				
			case CommandID.CMD_LOAD_FRIEND_FB:
				Server._task_queue.AddTask(new FBLoadFriendTask(_client, encrypt));
				break;
				
			case CommandID.CMD_LOAD_GAME_ACCOUNT_VIA_FB:
				Server._task_queue.AddTask(new FBLoadAccountTask(_client, encrypt));
				break;
				
			case CommandID.CMD_LEAVE_FRIEND_SHOP:
				handleLeaveFriendShop(encrypt);
				break;
				
			case CommandID.CMD_REFRESH_NEWS_BOARD:
				refreshNewsBoard();
				break;
				
			case CommandID.CMD_LOAD_IBSHOP:
				handleLoadIBShop(encrypt);
				break;
				
			case CommandID.CMD_INSTANT_BUY_SEED:
				handleInstantBuySeed(encrypt);
				break;
				
			case CommandID.CMD_CONFIRM_LOGIN:
				handleConfirmLogin();
				break;
				
			case CommandID.CMD_LOGIN_DIFFERENT_ACCOUNT:
			{
				_is_login = false;
				_is_waiting_for_confirm_login = false;
				_request_id = 0;
				
				LogHelper.Log("CMD_LOGIN_DIFFERENT_ACCOUNT [" + userInfo.getID() + "] delete key online: " + base.Delete(userInfo.getID() + "_" + KeyID.ONLINE));
				LogHelper.logLogOut(GetUserInfo(), GetMoneyManager(), GetIP(), 0, getSessionID());
				Server.s_serverUserOnline.remove(_device_id);
				if (!ServerHandler.isUserOnline(_device_id))
				{
					LogHelper.Log("old user is offline, will start login.");
					logIn(encrypt);
				}
				else
				{
					Server.s_serverUserOnline.remove(_device_id);
					LogHelper.Log("old user still online");
					requestError();
					return;
				}
			}
				break;
				
			case CommandID.CMD_INSTANT_BUY_BUG_ZAPPER:
				handleInstantBuyBugZapper();
				break;

			case CommandID.CMD_LEVEL_UP:
				handleLevelUp();
				break;
				
			case CommandID.CMD_INSTANT_BUY_LUCKY_LEAF:
				handleInstantBuyLuckyLeaf(encrypt);
				break;
				
			case CommandID.CMD_LOAD_NPC_PSHOP:
				handleLoadNPCShop();
				break;
				
			case CommandID.CMD_LOAD_OWN_PSHOP:
				handleLoadOwnShop();
				break;
				
			case CommandID.CMD_REFILL_CARD:
				Server._task_queue.AddTask(new CardPaymentTask(_client, encrypt));
				break;
				
			case CommandID.CMD_ORDER_LETTER_SELECT:
				orderLetterSelect(encrypt);
				break;

			case CommandID.CMD_ORDER_LETTER_RESELECT:
				orderLetterReselect(encrypt);
				break;

			case CommandID.CMD_RECEIVE_DAILY_ORDER_FREE:
				receiveDailyOrderFree(encrypt);
				break;
				
			case CommandID.CMD_RECEIVE_DAILY_ORDER_PAID:
				receiveDailyOrderPaid(encrypt);
				break;
			
			case CommandID.CMD_TUTORIAL_UPDATE_STEP:
				tutorialUpdateStep(encrypt);
				break;
				
			case CommandID.CMD_CATCH_BUG_FRIEND:
				handleCatchBugFriend(encrypt);
				break;
				
			case CommandID.CMD_INSTANT_BUY_LONG_HANDNET:
				handleInstantBuyLongHandnet();
				break;
				
			case CommandID.CMD_PLACE_DECOR:
				handlePlaceDecor(encrypt);
				break;
				
			case CommandID.CMD_HIDE_DECOR:
				handleHideDecor(encrypt);
				break;
				
			case CommandID.CMD_USE_FERTILIZER:
				handleUseFertilizer(encrypt);
				break;
							
			/*	
			 * In case user already connected, but due to network problem, this command is sent to server multiple times.
			 */
			case CommandID.CMD_RECONNECT: 
				handleReconnect();
				break;
			
			/*	
			 * In case user already connected, but due to network problem, this command is sent to server multiple times.
			 */
			case CommandID.CMD_SIMPLE_LOGIN:
				handleSimpleLogin();
				break;
				
			case CommandID.CMD_OPEN_GIFT:
				handleOpenGift();
				break;
				
			case CommandID.CMD_ACCEPT_GIFT:
				handleAcceptGift(encrypt);
				break;
				
			case CommandID.CMD_DISCARD_GIFT:
				handleDiscardGift(encrypt);
				break;
				
			case CommandID.CMD_FEED_OWL:
				feedOwl(encrypt);
				break;
				
			case CommandID.CMD_BUY_OWL_LOT:
				unlockOwlSlot(encrypt);
				break;

			case CommandID.CMD_DIGEST_COMPLETED:
				digestCompleted();
				break;
				
			case CommandID.CMD_DIGEST_COMPLETE_INSTANT:
				digestCompleteInstant();
				break;
			
			case CommandID.CMD_NOTIFY_SHARE_FB_FINISH:
				handleNotifyShareFBFinish(encrypt);
				break;
							
			case CommandID.CMD_LOAD_FRIEND_ZING:
				Server._task_queue.AddTask(new ZingLoadFriendTask(_client, encrypt));
				break;
				
			case CommandID.CMD_LOAD_ACCOUNT_VIA_ZING:
				Server._task_queue.AddTask(new ZingLoadAccountTask(_client, encrypt));
				break;
				
			case CommandID.CMD_REGISTER_PHONE:
				Server._task_queue.AddTask(new SMSRegisterTask(_client, encrypt));
				break;
				
			case CommandID.CMD_VERIFY_PHONE:
				Server._task_queue.AddTask(new SMSVerifyTask(_client, encrypt));
				break;

			case CommandID.CMD_AUTHENTICATE_GIFT_CODE:
				authenticateGiftCode(encrypt);
				break;
			
			case CommandID.CMD_ACCEPT_NPC_BUY_ITEM:
				acceptNPCBuyItem();
				break;
				
			case CommandID.CMD_CANCEL_NPC_BUY_ITEM:
				cancelNPCBuyItem();
				break;
				
			case CommandID.CMD_NOTIFY_LIKE_FB_FINISH:
				handleNotifyLikeFBFinish();
				break;

			case CommandID.CMD_RECEIVE_DAILY_GIFT:
				receiveDailyGift();
				break;
				
			case CommandID.CMD_DISCARD_DAILY_GIFT:
				discardDailyGift();
				break;
				
			case CommandID.CMD_REFILL_ATM:
				handleRefillATM();
				break;

			case CommandID.CMD_INTERACT_EMO:
				interactEMO(encrypt);
				break;

			case CommandID.CMD_BUY_ITEM_EMI:
				buyEMI(encrypt);
				break;
				
			case CommandID.CMD_ACCEPT_MERCHANT_REQUEST:
				handleAcceptMerchantRequest(encrypt);
				break;
				
			case CommandID.CMD_DISCARD_MERCHANT_REQUEST:
				handleDiscardMerchantRequest(encrypt);
				break;
				
			case CommandID.CMD_REQUEST_MERCHANT:
				handleRequestMerchant();
				break;
				
			case CommandID.CMD_BUY_ITEMS_FOR_MERCHANT:
				handleBuyItemsForMerchant(encrypt);
				break;
				
			case CommandID.CMD_SET_STATE_MERCHANT:
				handleSetStateMerchant(encrypt);
				break;

			case CommandID.CMD_LIKE_GARDEN:
				handleLikeGarden(encrypt);
				break;
				
			case CommandID.CMD_REQUEST_FEED_INFO:
				handleRequestFeedInfo(encrypt);
				break;
				
			case CommandID.CMD_PROVIDE_GCM_REG_ID:
				handleAcceptGCMRegID(encrypt);
				break;

			case CommandID.CMD_CDN_LOADER:
				handleCDNLoader(encrypt);
				break;
				
			case CommandID.CMD_PROVIDE_FB_SHORT_TOKEN:
				handleAcceptFBToken(encrypt);
				break;
				
			case CommandID.CMD_PROVIDE_FB_BIRTHDAY:
				handleAcceptFBBirthday(encrypt);
				break;
				
			case CommandID.CMD_GET_ACTIVE_RANKING_INFO:
				handleGetActiveRankingInfo();
				break;
				
			case CommandID.CMD_GET_PREVIOUS_RANKING_INFO:
				handleGetPreviousRankingInfo();
				break;
				
			case CommandID.CMD_GET_RANKING_ACCUMULATION:
				handleGetActiveRankingAccumulation();
				break;
				
			case CommandID.CMD_GET_ACTIVE_RANKING_RESULT:
				handleGetActiveRankingResult();
				break;
				
			case CommandID.CMD_GET_ALL_RANKING_INFO:
				handleGetAllRankingInfo();
				break;
				
			case CommandID.CMD_GET_BASIC_RANKING_GIFT:
				handleGetRankingBasicGift();
				break;
				
			case CommandID.CMD_UNLOCK_AIRSHIP:
				handleUnlockAirship();
				break;
				
			case CommandID.CMD_SKIP_UNLOCK_TIME_AIRSHIP:
				handleSkipUnlockTimeAirship();
				break;
				
			case CommandID.CMD_SKIP_DEPART_TIME_AIRSHIP:
				handleSkipDepartTimeAirship();
				break;
				
			case CommandID.CMD_DISPOSE_AIRSHIP:
				handleDisposeAirship();
				break;
				
			case CommandID.CMD_COMPLETE_CARGO:
				handleCompleteCargo(encrypt);
				break;
				
			case CommandID.CMD_QUICK_COMPLETE_CARGO:
				handleQuickCompleteCargo(encrypt);
				break;
				
			case CommandID.CMD_LOAD_AIRSHIP:
				handleLoadAirship();
				break;
				
			case CommandID.CMD_DELETE_AIRSHIP:
				handleDeleteAirship();
				break;
				
			case CommandID.CMD_COMPLETE_AIRSHIP:
				handleCompleteAirship();
				break;
				
			case CommandID.CMD_ASK_FOR_HELP_AIRSHIP:
				handleAskForHelpAirship(encrypt);
				break;
				
			case CommandID.CMD_HELP_FRIEND_AIRSHIP:
				handleHelpFriendAirship(encrypt);
				break;
				
			case CommandID.CMD_QUICK_HELP_FRIEND_AIRSHIP:
				handleQuickHelpFriendAirship(encrypt);
				break;
				
			case CommandID.CMD_LOAD_TOM_KID:
				handleLoadTomKid();
				break;
				
			case CommandID.CMD_START_TOM:
				handleStartUsingTom();
				break;
				
			case CommandID.CMD_REQUEST_TOM_KID_ITEM:
				handleRequestFindItem(encrypt);
				break;
				
			case CommandID.CMD_ACCEPT_TOM_KID_ITEM:
				handleAcceptTomKidGoods(encrypt);
				break;
				
			case CommandID.CMD_DENY_TOM_KID_ITEM:
				handleDenyTomKidGoods();
				break;
				
			case CommandID.CMD_HIRE_TOM_KID:
				handleRequestHireTomKid(encrypt);
				break;
				
			case CommandID.CMD_DELETE_TOM_KID:
				handleDeleteTomKid();
				break;
				
			case CommandID.CMD_CANCEL_AIRSHIP:
				handleCancelAirship();
				break;
				
			case CommandID.CMD_RECEIVE_ACM_GIFT:
				handleReceiveAcmGift(encrypt);
				break;
				
			case CommandID.CMD_DELETE_ACM:
				handleDeleteAcm(encrypt);
				break;
				
			case CommandID.CMD_LOAD_FORTUNE:
				handleLoadFortune();
				break;
				
			case CommandID.CMD_LOAD_ACM:
				handleLoadAchievement();
				break;
				
			case CommandID.CMD_BUY_FORTUNE:
				handleBuyFortune(encrypt);
				break;
				
			case CommandID.CMD_USE_FORTUNE:
				handleUseFortune(encrypt);
				break;
				
			case CommandID.CMD_LOAD_FRIEND_ZALO:
			{
				LogHelper.Log("receive command load friend zalo");
				Server._task_queue.AddTask(new ZaloLoadFriendTask(_client, encrypt));
			}
				break;
				
			case CommandID.CMD_LOAD_ACCOUNT_VIA_ZALO:
				Server._task_queue.AddTask(new ZaloLoadAccountTask(_client, encrypt));
				break;
				
			case CommandID.CMD_UNLINK_ZALO:
				handleUnlinkZalo();
				break;
				
			case CommandID.CMD_QUICK_REFRESH_NEWSBOARD:
				handleQuickRefreshNewsboard();
				break;
				
			case CommandID.CMD_RECEIVED_GIFT_INVITE_FRIEND:
				handleReceiveGiftInviteFriend(encrypt);
				break;
				
			case CommandID.CMD_RESET_INVITE_FRIEND:
				handleResetInviteFriend();
				break;
				
			case CommandID.CMD_NOTIFY_INVITE_FRIEND:
				handleNotifyInviteFriend(encrypt);
				break;
				
			case CommandID.CMD_FILTER_ZING_FRIEND:
				handleFilterZingFriend(encrypt);
				break;
				
			case CommandID.CMD_UPDATE_PHONE_NUMBER:
				handleUpdatePhoneNumber(encrypt);
				break;
				
			case CommandID.CMD_RECEIVED_GIFT_CROSS_INSTALL:
				handleReceiveGiftCrossInstall(encrypt);
				break;
				
			case CommandID.CMD_HANDLE_REFILL_ZALO:
				handleRefillZalo();
				break;
				
			case CommandID.CMD_RECEIVED_BANNER_CROSS_INSTALL:
				handleReceivedBannerCrossInstall(encrypt);
				break;
				
			case CommandID.CMD_RECEIVED_GIFT_MID_AUTUMN_FESTIVAL:
//				handleReceiveGiftEvent2011();
				handleReceiveGiftEventUpgradePot();
				break;
				
			case CommandID.CMD_VIEW_EVENT_SCORE:
				handleViewEventScore();
				break;
				
			case CommandID.CMD_LOAD_USER_INFO:
				handleLoadUserInfo(encrypt);
				break;
				
			case CommandID.CMD_LOAD_MAIL_BOX:
				handleLoadMailbox();
				break;
				
			case CommandID.CMD_SET_MAIL_READ:
				handleSetMailRead(encrypt);
				break;
				
			case CommandID.CMD_DELETE_MAIL:
				handleDeleteMail(encrypt);
				break;
				
			case CommandID.CMD_SEND_MAIL:
				handleSendMail(encrypt);
				break;
				
			case CommandID.CMD_ACCEPT_MAIL_GIFT:
				handleAcceptMailGift(encrypt);
				break;
				
			case CommandID.CMD_VALIDATE_APPLE_IAP:
				AppleValidatingReceiptTask(encrypt);
				break;
				
			case CommandID.CMD_GET_ANDROID_DEVELOPER_PAYLOAD:
				handleRequestAndroidDeveloperPayload(encrypt);
				break;
				
			case CommandID.CMD_VALIDATE_ANDROID_RECEIPT:
				AndroidValidatingReceiptTask(encrypt);
				break;
				
			case CommandID.CMD_VALIDATE_WP_RECEIPT:
				WinPhoneValidatingReceiptTask(encrypt);
				break;
				
			case CommandID.CMD_SET_STATE_NEW_TUTORIAL:
				handleSetStateNewTutorial(encrypt);
				break;
				
			case CommandID.CMD_PLACE_ITEM_XMAS_TREE:
				handlePlaceItemXmasTree();
				break;
				
			case CommandID.CMD_BUY_OFFER_BUG:
				handleBuyOfferBug(encrypt);
				break;
				
			case CommandID.CMD_BUY_OFFER_GEM:
				handleBuyOfferGem(encrypt);
				break;
				
			case CommandID.CMD_BUY_OFFER_FLOOR:
				handleBuyOfferFloor(encrypt);
				break;
				
			case CommandID.CMD_BUY_OFFER_MACHINE:
				handleBuyOfferMachine(encrypt);
				break;
				
			case CommandID.CMD_REQUEST_OFFER_FLOOR:
				handleRequestOfferFloor(encrypt);
				break;
				
			case CommandID.CMD_REQUEST_OFFER_MACHINE:
				handleRequestOfferMachine(encrypt);
				break;
				
			case CommandID.CMD_BUY_OFFER_LUCKY_LEAF:
				handleBuyOfferLuckyLeaf(encrypt);
				break;
				
			case CommandID.CMD_BUY_OFFER_LUCKY_LEAF_PURPLE:
				handleBuyOfferLuckyLeafPurple(encrypt);
				break;
				
			case CommandID.CMD_REQUEST_OFFER_GOLD:
				handleRequestOfferGold(encrypt);
				break;
				
			case CommandID.CMD_BUY_OFFER_GOLD:
				handleBuyOfferGold(encrypt);
				break;
				
			case CommandID.CMD_GIVE_FRIEND_EVENT_GIFT:
				handleGiveFriendEventGift(encrypt);
				break;
				
			case CommandID.CMD_RECEIVE_EVENT_GIFT_FROM_FRIEND:
				handleReceiveEventGiftFromFriend();
				break;
				
			case CommandID.CMD_OPEN_ITEM_EVENT_GIFT:
				handleOpenItemEvent(encrypt);
				break;
				
			case CommandID.CMD_GET_EVENT_GIFT_LIST:
				handleGetEventGiftList(encrypt);
				break;
				
			case CommandID.CMD_REATTEND_DAILY:
				handleReattend();
				break;
				
			case CommandID.CMD_ADD_CLOSE_FRIEND:
				handleAddCloseFriend(encrypt);
				break;
				
			case CommandID.CMD_OPEN_TREASURE_TRUNK:
				handleOpenTreasureTrunk(encrypt);
				break;

			// -------------------- for test ----------------------------
			
			case CommandID.CMD_KEEP_ALIVE:
				keepAlive();
				break;
				
			case CommandID.CMD_RESET_ACCOUNT:
				LogHelper.Log("err! not support this function anymore.");
				break;
				
			case CommandID.CMD_RESET_ALL_DATA:
				LogHelper.Log("err! not support this function anymore.");
				break;
				
			case CommandID.CMD_CHANGE_TO_STABLE_USER:
				LogHelper.Log("err! not support this function anymore.");
				break;
				
			case CommandID.CMD_ADD_DIAMOND:
				if (ProjectConfig.RUN_LOCAL == 1 || ProjectConfig.IS_SERVER_FREESTYLE == 1)	AddMoneyFreeStyle(encrypt);
				else	
				LogHelper.Log("err! not support this function anymore.");
				break;
			
			case CommandID.CMD_CRASH_LOG:
				handleCrashLog(encrypt);
				break;
				
			case CommandID.CMD_GET_ZALO_TOKEN:
				handleGetZaloToken(encrypt);
				break;
				
			default:
				requestError();
				break;
		}
		
		if (_request_id % 10 == 0)
		{
			LazySync();
		}
	}
	
	public byte[] getResponseStatus()
	{
		FBEncrypt responseInfos = new FBEncrypt();
		
		// these fields must have when response message to client
		responseInfos.addShort(KeyID.KEY_USER_COMMAND_ID, _command_id);
		responseInfos.addByte(KeyID.KEY_USER_REQUEST_STATUS, _return_id);
		responseInfos.addLong(KeyID.KEY_USER_ID, _user_id);
		responseInfos.addLong(KeyID.KEY_USER_REQUEST_ID, _request_id);
		
		if (_is_login)
		{
			responseInfos.addStringANSI(KeyID.KEY_USER_SESSION_ID, _session_id);
		}
		else
		{
			responseInfos.addStringANSI(KeyID.KEY_USER_SESSION_ID, _last_session);
		}
		
//		if (_new_session_id.length() > 0 && !_new_session_id.equals(_session_id))
		if (_new_session_id.length() > 0 && !_new_session_id.equals(""))
		{
			if (_command_id == CommandID.CMD_LOGIN || _command_id == CommandID.CMD_RECONNECT || _command_id == CommandID.CMD_SIMPLE_LOGIN || _save_new_session)
			{
				responseInfos.addStringANSI(KeyID.KEY_USER_NEW_SESSION_ID, _new_session_id);
			}
		}

		return responseInfos.toByteArray();
	}
	
	private void handleCrashLog(FBEncrypt encrypt)
	{
		try
		{
			String user_action = encrypt.getString(KeyID.KEY_USER_ACTION);
			
			LogHelper.logCrash(userInfo.getID(),
								userInfo.getName(),
								userInfo.getLevel(),
								GetIP(),
								0,
								_device_name,
								_device_firmware,
								_distributor,
								useWifi,
								user_action);
		}
		catch (Exception e)
		{
			LogHelper.LogException("handleCrashLog", e);
		}
		
		FBEncrypt result = new FBEncrypt();
		result.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		
		try
		{
			_client.WriteZip(result.toByteArray());
			LogHelper.Log("handleCrashLog.. response to client OK.");
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("handleCrashLog", ex);
		}
	}
	
	private void AddMoneyFreeStyle(FBEncrypt encrypt)
	{
		long money_type = encrypt.getLong("money_type");
		long amount = encrypt.getLong("money_amount");
		long copy_user_id = encrypt.getLong("copy_to_happy");
		long exp_amount = encrypt.getLong("exp_amount");
		
		if (encrypt.hasKey("exp_amount"))
		{
			String add_exp = GMTools.AddEXPFreestyle(_user_id, exp_amount);
			
			LogHelper.Log("add_exp = " + add_exp);
			
			if (add_exp.equals("fail") == false)
			{
				// load user info from db
				byte[] userbin = null;
				try
				{
					userbin = GET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS);
				}
				catch (Exception e)
				{
					LogHelper.Log("AddMoneyFreeStyle.. can not get user data.");
					LogHelper.LogException("AddMoneyFreeStyle", e);
					userbin = null;
				}
				
				if (userbin == null || userbin.length == 0)
				{
					return;
				}
				
				userInfo = new UserInfo(userbin);
				if (userInfo.isLoadSuccess() == false)
				{
					return;
				}
			}
			else
			{
				LogHelper.Log("---------------------- add exp fail!!!");
			}
		}
		else if (encrypt.hasKey("copy_to_happy"))
		{
			LogHelper.Log("Does not support this feature!!!");
			
			/*
			// load user info from db
			byte[] userbin = null;
			try
			{
				userbin = DBConnector.GetMembaseServer(copy_user_id).GetRaw(copy_user_id + "_" + KeyID.KEY_USER_INFOS);
			}
			catch (Exception e)
			{
				LogHelper.Log("AddMoneyFreeStyle.. can not get user data.");
				LogHelper.LogException("AddMoneyFreeStyle", e);
				userbin = null;
			}
			
			if (userbin == null || userbin.length == 0)
			{
				LogHelper.Log("----------- userbin = null"); 
				return;
			}
			
			UserInfo accInfo = new UserInfo(userbin);
			if (userInfo.isLoadSuccess() == false)
			{
				LogHelper.Log("----------- can not load user " + copy_user_id); 
				return;
			}
			
			String device_id = accInfo.getDeviceID();
			LogHelper.Log("----------- device_id = " + device_id); 
			
			boolean bCopy = GMTools.CopyUser("real", "happy", device_id, true);
			
			if (bCopy)
			{
				LogHelper.Log("----------- Copy to freestyle ok");
			}
			else
			{
				LogHelper.Log("------------------ Copy Error!!!");
			}
			*/
		}
		else
		{
			LogHelper.Log("money_type = " + money_type);
			LogHelper.Log("amount = " + amount);
			
			String add_money = GMTools.AddMoneyFreeStyle(_user_id, amount, money_type);
			
			LogHelper.Log("add_money = " + add_money);
			
			if (add_money.equals("fail") == false)
			{
				// load user info from db
				byte[] userbin = null;
				try
				{
					userbin = GET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS);
				}
				catch (Exception e)
				{
					LogHelper.Log("AddMoneyFreeStyle.. can not get user data.");
					LogHelper.LogException("AddMoneyFreeStyle", e);
					userbin = null;
				}
				
				if (userbin == null || userbin.length == 0)
				{
					return;
				}
				
				userInfo = new UserInfo(userbin);
				if (userInfo.isLoadSuccess() == false)
				{
					return;
				}
				
				//load money
				money_mgr = new MoneyManager(Long.toString(_user_id));
				
				// if (ProjectConfig.IS_SERVER_FREESTYLE == 1)
					money_mgr.SetDatabase(DBConnector.GetMembaseServerForFreestyleData());
				// else
					// money_mgr.SetDatabase(DBConnector.GetMembaseServer(_user_id));
				
				money_mgr.LoadFromDatabase(KeyID.KEY_MONEY_REAL, KeyID.KEY_MONEY_TOTAL, KeyID.KEY_MONEY_BONUS);
			}
			else
			{
				LogHelper.Log("---------------------- add money fail!!!");
			}
		}
		
		FBEncrypt result = new FBEncrypt();
		result.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		result.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		result.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		
		try
		{
			_client.WriteZip(result.toByteArray());
			LogHelper.Log("AddMoneyFreeStyle.. response to client OK.");
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("AddMoneyFreeStyle", ex);
		}
	}
	
	private void authenticateGiftCode(FBEncrypt encrypt)
	{
		if (bUseGiftCode == false) return;
		
		boolean gift_added = false;
		
		try
		{
			if (giftCodeEnter.getEnterNum() > 0)
			{
				String client_code = encrypt.getString(KeyID.KEY_GIFT_CODE_CLIENT_CODE);
				
				// use UPPERCASE for gift code
				client_code = client_code.toUpperCase();
				
				
				if (client_code.length() != Misc.MAX_GIFT_CODE_LENGTH)
				{
					giftCodeEnter.decreaseEnterNum();
					SET_DB_VALUE_BINARY(KeyID.KEY_GIFT_CODE_ENTER, giftCodeEnter.getData());
					
					LogHelper.Log("The gift code " + client_code + " is not available! Code size != " + Misc.GIFT_CODE_LENGTH);
					requestError_authenticateGiftCode(ReturnCode.RESPONSE_INVALID_GIFT_CODE_SIZE);
					return;
				}
				
				DBKeyValue gift_base = DBConnector.GetMembaseServerForTemporaryData();
				
				byte[] gift_code_bin = null;
				
				try
				{
					gift_code_bin = gift_base.GetRaw(client_code);
				}
				catch (Exception ex)
				{
					gift_code_bin = null;
				}

				if (gift_code_bin == null || gift_code_bin.length == 0)
				{
					giftCodeEnter.decreaseEnterNum();
					SET_DB_VALUE_BINARY(KeyID.KEY_GIFT_CODE_ENTER, giftCodeEnter.getData());

					LogHelper.Log("The gift code " + client_code + " is not available! Code is not existed");
					requestError_authenticateGiftCode(ReturnCode.RESPONSE_GIFT_CODE_NOT_EXISTED);
					return;
				}
				
				GiftCode gift_code = new GiftCode(gift_code_bin);
				
				// kiem tra client_code da duoc dung chua, neu roi thi tra ve ma loi
				if (gift_code.getReceived())
				{
					giftCodeEnter.decreaseEnterNum();
					SET_DB_VALUE_BINARY(KeyID.KEY_GIFT_CODE_ENTER, giftCodeEnter.getData());
					LogHelper.Log("The gift code " + client_code + " had been received! Server ignore this request.");
					requestError_authenticateGiftCode(ReturnCode.RESPONSE_GIFT_TYPE_HAD_BEEN_RECEIVED);
					return;
				}
				
				int valid_code = gift_code.checkValidCode(client_code);
				
				if (valid_code == ReturnCode.RESPONSE_AUTHENTICATE_GIFT_CODE_OK)
				{
					// kiem tra loai gift da duoc dung het chua, neu roi thi tra ve ma loi -------------------------------------
					String gift_type = client_code.substring(0, Misc.GIFT_CODE_HEADER);

					if (giftCodeEnter.getUseTimeOfType(gift_type) == 0)
					{
						giftCodeEnter.decreaseEnterNum();
						SET_DB_VALUE_BINARY(KeyID.KEY_GIFT_CODE_ENTER, giftCodeEnter.getData());

						LogHelper.Log("The gift type " + gift_type + " had been received! Server ignore this request.");
						requestError_authenticateGiftCode(ReturnCode.RESPONSE_GIFT_TYPE_HAD_BEEN_RECEIVED);
						return;
					}
					
					LogHelper.logGiftCode(userInfo.getID(),
										userInfo.getName(),
										userInfo.getLevel(),
										GetIP(),
										0,
										_device_name,
										_device_firmware,
										client_code);
					
					// LogHelper.Log("\nRECEIVE_GIFT:\t" + userInfo.getDeviceID() + '\t' + userInfo.getID() + '\t' + client_code + "\n");
					
					if (gift_base.Set(client_code, gift_code.getData(), gift_code.getExpireTime()))
					{
						giftCodeEnter.resetEnterNum();
						
						if (giftCodeEnter.hasType(gift_type))
						{
							giftCodeEnter.decreaseUseTimeOfType(gift_type);
						}
						else
						{
							giftCodeEnter.addType(gift_type, gift_code.getUseTime() - 1);
						}
						
						
						gift_added = gift_mgr.AddGiftBox(gift_code.getName(), gift_code.getDescription(), gift_code.getGift());
						gift_added = gift_mgr.SaveDataToDatabase(KeyID.KEY_GIFT);
						MoveGiftBoxToMailBox();
						
						// LogHelper.Log("--- authenticateGiftCode.. add gift box: " + gift_added);
						StringBuilder log = new StringBuilder();
						log.append(Misc.getCurrentDateTime());						//  1. log time
						log.append('\t').append(_command_id);						//  2. action name
						log.append('\t').append(_user_id);							//  3. account name
						log.append('\t').append(_user_id);							//  4. role id
						log.append('\t').append(GetUserInfo().getName());			//  5. role name
						log.append('\t').append("0");								//  6. server id
						log.append('\t').append(GetUserInfo().getLevel());			//  7. user level
						log.append('\t').append(GetUserInfo().GetUserIP());			//  8. user ip
						log.append('\t').append(gift_code.getName());				//  9. user gift name
						log.append('\t').append(gift_code.getDescription());		//  10. user gift description
						log.append('\t').append(gift_code.getGift());				//  11. user gift items
						LogHelper.Log(LogHelper.LogType.GIFT_BOX, log.toString());
					}
				}
				else
				{
					switch (valid_code)
					{
						case ReturnCode.RESPONSE_AUTHENTICATE_GIFT_CODE_FAILED:
							LogHelper.Log("The gift code " + client_code + " is wrong!");
							break;
							
						case ReturnCode.RESPONSE_GIFT_CODE_HAD_BEEN_RECEIVED:
							LogHelper.Log("The gift code " + client_code + " had been received!");
							break;
						
						case ReturnCode.RESPONSE_GIFT_CODE_OUT_OF_DATE:
							LogHelper.Log("The gift code " + client_code + " is out of date!");
							break;
					}
					
					_return_id = valid_code;
					
					giftCodeEnter.decreaseEnterNum();
				}
				
				SET_DB_VALUE_BINARY(KeyID.KEY_GIFT_CODE_ENTER, giftCodeEnter.getData());
				
				// giftCodeEnter.displayDataPackage();
			}
			else
			{
				LogHelper.Log("Limited enter gift code! Please try tomorrow!");
				_return_id = ReturnCode.RESPONSE_GIFT_CODE_ENTER_LIMITED;
			}
		}
		catch (Exception ex)
		{
			LogHelper.LogException("authenticateGiftCode", ex);
		}

		FBEncrypt result = new FBEncrypt();
		result.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		result.addByte(KeyID.KEY_GIFT_CODE_ENTER_NUM, giftCodeEnter.getEnterNum());
		
		if (gift_mgr._gifts.size() > 0 && gift_added)
		{
			result.addInt(KeyID.KEY_GIFT_ID, gift_mgr._gifts.getLast().GetId());
			result.addString(KeyID.KEY_GIFT_NAME, gift_mgr._gifts.getLast().GetName());
			result.addString(KeyID.KEY_GIFT_DESCRIPTION, gift_mgr._gifts.getLast().GetDescription());
			result.addString(KeyID.KEY_GIFT_ITEM_LIST, gift_mgr._gifts.getLast().GetItemList());
		}
		result.addBoolean(KeyID.KEY_NEW_MAIL, true);
		
		try
		{
			_client.WriteZip(result.toByteArray());
			// LogHelper.Log("authenticateGiftCode.. response to client OK.");
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("authenticateGiftCode", ex);
		}
	}
	
	private void requestError_authenticateGiftCode(int error_code)
	{
		_return_id = error_code;
		
		FBEncrypt result = new FBEncrypt();
		result.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		result.addByte(KeyID.KEY_GIFT_CODE_ENTER_NUM, giftCodeEnter.getEnterNum());
		
		try
		{
			_client.WriteZip(result.toByteArray());
			LogHelper.Log("requestError_authenticateGiftCode.. Server returned ERROR code to client: " + _return_id + " *****");
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("requestError_authenticateGiftCode", ex);
		}
	}
	
	private void npcRequestItem()
	{
		try
		{
			if (Misc.SECONDS() > npc_buy_item_timer)
			{
				// check kho
				String item_buy = "";
				int rnd = 0;
				int need_buy_item_num = 1;
				
				need_buy_item_num = Misc.RANDOM_RANGE(1, 4);
				
				HashMap<String, Integer> items = new HashMap<String, Integer>();
				
				ConcurrentHashMap<String, Integer> stock_items = GetStock(DatabaseID.STOCK_SILO).getItems();
				
				for (Entry<String,Integer> item: stock_items.entrySet())
				{
					if (item.getValue() > need_buy_item_num)
					{
						items.put(item.getKey(), need_buy_item_num);
					}
				}
				
				if (items.isEmpty())
				{
					need_buy_item_num = 1;
					for (Entry<String,Integer> item: stock_items.entrySet())
					{
						if (item.getValue() > 0)
						{
							items.put(item.getKey(), need_buy_item_num);
						}
					}
				}

				StringBuilder sbItem = new StringBuilder();
				
				rnd = Misc.RANDOM_RANGE(0, items.size());
				
				int i = 0;
				int itemID = -1;
				for (Entry<String,Integer> item: items.entrySet())
				{
					if (i == rnd)
					{
						itemID = Integer.parseInt(item.getKey().split("_")[1]);
						sbItem.append(item.getKey());
						
						sbItem.append(":");
						sbItem.append(need_buy_item_num);
						break;
					}
					
					i++;
				}
				
				if (itemID < 0)
				{
					LogHelper.Log("npcRequestItem.. invalid itemID. Need check!!!");
				}
				
				long min_price = (long)(Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_SEED][itemID][DatabaseID.SEED_GOLD_SELL_MIN]) * need_buy_item_num);
				float item_default_max_price = Misc.PARSE_FLOAT(Server.s_globalDB[DatabaseID.SHEET_SEED][itemID][DatabaseID.SEED_GOLD_SELL_MAX]);
				long max_price = (long)(Math.ceil(item_default_max_price * need_buy_item_num));
				
				long price = (long)Misc.RANDOM_RANGE((int)min_price, (int)max_price);
				
				sbItem.append(":");
				sbItem.append(price);
			
				initNPCBuyItemTimer();
				
				boolean saved = true;
				
				if (!_is_stable_user)
				{
					saved = base.Set(_device_id + "_" + KeyID.KEY_NPC_BUY_ITEM_TIMER, npc_buy_item_timer);
				}
				else
				{
					saved = base.Set(_user_id + "_" + KeyID.KEY_NPC_BUY_ITEM_TIMER, npc_buy_item_timer);
				}
				
				if (!saved)
				{
					LogHelper.Log("loadFriendGarden.. err! can't write npc_buy_item_timer to db");
					return;
				}
				
				// return to client
				FBEncrypt result = new FBEncrypt();
				result.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
				// result.addInt(KeyID.KEY_NPC_BUY_ITEM_TIMER, npc_buy_item_timer);
				
				if (sbItem.length() > 0)
				{
					result.addStringANSI(KeyID.KEY_NPC_BUY_ITEM_TIMER, sbItem.toString());
				}
				
				try
				{
					_client.WriteZip(result.toByteArray());
					// LogHelper.Log("npcRequestItem.. response to client OK.");
				}
				catch (Exception ex) 
				{
					LogHelper.LogException("npcRequestItem", ex);
				}
				
			}
		}
		catch (Exception ex)
		{
			LogHelper.LogException("npcRequestItem", ex);
		}
	}
	
	private void acceptNPCBuyItem()
	{
	
	}
	
	private void cancelNPCBuyItem()
	{

	}
	
	private void initNPCBuyItemTimer()
	{
		int rnd = Misc.RANDOM_RANGE(0, 4);
		int time = 300;
		
		// this read from excel data
		switch (rnd)
		{
			case 0: time = 60;	break;
			case 1: time = 120; break;
			case 2: time = 180; break;
			case 3: time = 240; break;
			case 4: time = 300; break;
		}

		npc_buy_item_timer = Misc.SECONDS() + time;
	}
	
	private void keepAlive()
	{
		FBEncrypt result = new FBEncrypt();
		result.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		try
		{
			_client.WriteZip(result.toByteArray());
			// LogHelper.Log("keepAlive.. response to client OK.");
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("keepAlive", ex);
		}
	}
	
	private void handleComeBackHome()
	{
		// check receive gift event halloween
		if (_use_event_halloween)
		{
			handleReceiveGiftEventHalloween();
		}
		else if (_use_event_20_11)
		{
			checkReceiveGiftEvent2011();
		}
		else if (_use_event_xmas_mini)
		{
			checkReceiveGiftEventXmasMini();
		}
		else if (_use_event_xmas_tree)
		{
			handleReceiveGiftEventXmasTree();
//			handleReceiveGiftEventXmasTreeAllServer();
		}
		else if (_use_event_uprade_pot)
		{
			handleReceiveGiftEventUpgradePot();
		}
		else if (_use_event_xmas_2014)
		{
			handleReceiveGiftEventXmas2014();
		}
		else if (_use_event_new_year_2015)
		{
			handleReceiveGiftEventNewYear2015();
		}
		else if (_use_event_8_3_2015)
		{
			handleReceiveGiftEvent8March2015();
		}
		
		// response to client
		FBEncrypt response = new FBEncrypt();
		
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addInt(KeyID.KEY_SERVER_TIME_INT, Misc.SECONDS());
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney())); //user's diamond
		
		for (Floor f: floor)
		{
			response.addBinary(KeyID.KEY_FLOORS + floor.indexOf(f), f.getData(false));
		}
		for (Stock s: stock)
		{
			response.addBinary(KeyID.KEY_STOCKS + stock.indexOf(s), s.getDataToClient());
		}
		for (Machine m: machine)
		{
			response.addBinary(KeyID.KEY_MACHINES + machine.indexOf(m), m.getData());
		}
		for (MachineDurability d: machineDurability)
		{
			response.addBinary(KeyID.KEY_MACHINES_DURABILITY + machineDurability.indexOf(d), d.getData());
		}
		
		response.addBinary(KeyID.KEY_ORDER, orderManager.getData());

		response.addBinary(KeyID.KEY_IBSHOP, IBShopManager().getItemListSendToClient(userInfo.getLevel(), _banned_ibshop_package)); // ibshop
		
		response.addBinary(KeyID.KEY_PRIVATE_SHOP, PShopMgr.getDataToClient()); // private shop

		//encoder.addBinary(KeyID.KEY_FRIENDS, friend_mgr.getData());
		
		response.addBinary(KeyID.KEY_NEWS_BOARD, newsBoard.getDataToClient());

		if (bUseDailyGift) response.addBinary(KeyID.KEY_DAILY_GIFT, dailygift.getData());
		
		response.addBinary(KeyID.KEY_MACHINES_REPAIR_LIMIT, machineRepairLimit.getData());
		
		if (bUseOwl) response.addBinary(KeyID.KEY_OWL, owl.getData());
		
		if (bUseGiftCode) response.addBinary(KeyID.KEY_GIFT_CODE_ENTER, giftCodeEnter.getData());
		
//		if (bUseEvent)
//		{
//			response.addBinary(KeyID.KEY_EVENT, mainEvent.getData());
//			response.addBinary(KeyID.KEY_EVENT_MAIN_OBJECT, eventMainObject.getData());
//		}
		
		response.addLong(KeyID.KEY_USER_LIKED_COUNT, getLikedCount(_user_id));
		
		response.addBinary(KeyID.KEY_TUTORIAL, tutorialManager.getData());
		response.addLong(KeyID.KEY_GARDEN_APPRAISAL, garden_appraisal);
		response.addBinary(KeyID.KEY_ALERT, _alert.getData());
		
		MailBox mailbox = new MailBox(userInfo);
		mailbox.Load();
		response.addBinary(KeyID.KEY_MAIL_BOX, mailbox.GetData());
		
		if (_use_event_mid_autumn_festival)
		{
			response.addInt(KeyID.KEY_EVENT_CURRENT_TOTAL_NUM, userInfo.GetEventNum(KeyID.KEY_EVENT_MID_AUTUMN_FESTIVAL));
		}
		
		if (_use_event_20_11)
		{
			response.addInt(KeyID.KEY_EVENT_CURRENT_TOTAL_NUM, userInfo.GetEventNum(KeyID.KEY_EVENT_20_11));
		}
		if (_use_event_xmas_mini)
		{
			response.addInt(KeyID.KEY_EVENT_CURRENT_TOTAL_NUM, userInfo.GetEventNum(KeyID.KEY_EVENT_XMAS_MINI));
		}
		
		if ((_use_event_halloween || _use_event_xmas_2014 || _use_event_xmas_tree || _use_event_new_year_2015 || _use_event_8_3_2015) && _use_stock_event)
		{
			response.addBinary(KeyID.KEY_STOCK_EVENT, stock_event.getDataToClient());
		}
		
		if (_use_event_new_year_2015)
		{
			response.addInt(KeyID.KEY_NUM_GIFT_FROM_FRIEND, GetNumEventGiftFromFriend());
		}
		
		if (_use_close_friend) {
			// reload close friend list
			try {
				byte[] ba = DBConnector.GetMembaseServer(_user_id).GetRaw(_user_id + "_" + KeyID.KEY_CLOSE_FRIEND);
				if (ba != null && ba.length > 0) {
					_close_friend = new CloseFriend(ba);
					response.addBinary(KeyID.KEY_CLOSE_FRIEND, CloseFriend().GetData());
				}
			} catch (Exception e) {
				LogHelper.LogException("LoadCloseFriend",e );
			}
		}

		try
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("handleComeBackHome.. reponse to client OK.");
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("handleComeBackHome", ex);
		}
	}
	
	private long getLikedCount(long user_id)
	{
		long liked_count = 0;
		
		try
		{
			liked_count = Long.parseLong((String)DBConnector.GetMembaseServer(user_id).Get(user_id + "_" + KeyID.KEY_USER_LIKED_COUNT));
			// liked_count = (long)DBConnector.GetMembaseServer(user_id).Get(user_id + "_" + KeyID.KEY_USER_LIKED_COUNT);
		}
		catch (Exception e)
		{
			// LogHelper.LogException("getLikedCount", e);
		}
		
		return liked_count;
	}
	
	private void handleReconnect()
	{
		if (_is_login)
		{
			FBEncrypt response = new FBEncrypt();
			_return_id = ReturnCode.RESPONSE_ALREADY_LOGIN;
			response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
			
			try 
			{
				_client.WriteZip(response.toByteArray());
				 LogHelper.Log("handleReconnect.. response to client OK.");
			} 
			catch (Exception ex) 
			{
				LogHelper.LogException("handleReconnect", ex);
			}
		}
		else
		{
			_command_id = CommandID.CMD_REQUEST_LOGIN;
			_return_id = ReturnCode.RESPONSE_REQUIRE_LOGIN;
			requestError();
			return;
		}
	}
	
	private void handleSimpleLogin()
	{
		if (_is_login)
		{
			FBEncrypt response = new FBEncrypt();
			_return_id = ReturnCode.RESPONSE_ALREADY_LOGIN;
			response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
			
			try 
			{
				_client.WriteZip(response.toByteArray());
			} 
			catch (Exception ex) 
			{
				LogHelper.LogException("handleSimpleLogin", ex);
			}
		}
		else
		{
			// LogHelper.Log("handleReconnect.. response require login code");
			_command_id = CommandID.CMD_REQUEST_LOGIN;
			_return_id = ReturnCode.RESPONSE_REQUIRE_LOGIN;
			requestError();
			return;
		}
	}
	
	private void handleOpenNewFloor() 
	{
//		StringBuilder log = new StringBuilder();
		
		int floor_num = userInfo.getTotalFloor();
		
//		log.append(floor_num);
		
		long level_unlock = Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_FLOOR_UNLOCK][floor_num][DatabaseID.FLOOR_UNLOCK_USER_LEVEL]);
		long gold_unlock = Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_FLOOR_UNLOCK][floor_num][DatabaseID.FLOOR_UNLOCK_GOLD]);
//		long reputation_unlock = Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_FLOOR_UNLOCK][floor_num][DatabaseID.FLOOR_UNLOCK_REPUTATION]);
		
		String[] product_unlock = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_FLOOR_UNLOCK][floor_num][DatabaseID.FLOOR_UNLOCK_MATERIAL_ID_NUM]).split(":");
		
		if (product_unlock.length < 3)
		{
			LogHelper.Log("handleOpenNewFloor.. Need re-check product unlock condition in database, it must have 3 params");
			requestError();
			return;
		}
		
		if (userInfo.getLevel() < level_unlock)
		{
			LogHelper.Log("handleOpenNewFloor.. Not enough level! " + userInfo.getLevel() + "/" + level_unlock);
			requestError_handleOpenNewFloor(ReturnCode.RESPONSE_NOT_ENOUGH_LEVEL);
			return;
		}
		
		if (userInfo.getGold() < gold_unlock || gold_unlock < 0)
		{
			LogHelper.Log("handleOpenNewFloor.. Not enough gold! " + userInfo.getGold() + "/" + gold_unlock);
			requestError_handleOpenNewFloor(ReturnCode.RESPONSE_NOT_ENOUGH_GOLD);
			return;
		}
		
//		if (userInfo.getReputation() < reputation_unlock)
//		{
//			LogHelper.Log("handleOpenNewFloor.. Not enough reputation! " + userInfo.getReputation() + "/" + reputation_unlock);
//			requestError_handleOpenNewFloor(ReturnCode.RESPONSE_NOT_ENOUGH_REPUTATION);
//			return;
//		}
		
		boolean hasEnoughProduct = true;
		
		for (int i = 0; i < product_unlock.length - 2; i += 3)
		{
			int type = Integer.parseInt(product_unlock[i]);
			int id = Integer.parseInt(product_unlock[i+1]);
			int num = Integer.parseInt(product_unlock[i+2]);
			
			if (type == DatabaseID.IT_PLANT)
			{
				int product_stock_num = GetStock(DatabaseID.STOCK_SILO).getProductNum(type, id);
				
				if (product_stock_num < num)
				{
					hasEnoughProduct = false;
					break;
				}
			}
			else if (type == DatabaseID.IT_PRODUCT)
			{
				int product_stock_num = GetStock(DatabaseID.STOCK_BARN).getProductNum(type, id);
				
				if (product_stock_num < num)
				{
					hasEnoughProduct = false;
					break;
				}
			}
			else if (type == DatabaseID.IT_MATERIAL)
			{
				int product_stock_num = GetStock(DatabaseID.STOCK_WAREHOUSE).getProductNum(type, id);
				
				if (product_stock_num < num)
				{
					hasEnoughProduct = false;
					break;
				}
			}
			else
			{
				LogHelper.Log("handleOpenNewFloor.. err! invalid type");
				hasEnoughProduct = false;
				break;
			}
		}
		
		if (hasEnoughProduct == false)
		{
			LogHelper.Log("handleOpenNewFloor.. Not enough product!");
			requestError_handleOpenNewFloor(ReturnCode.RESPONSE_NOT_ENOUGH_PRODUCT);
			return;
		}
		
		if (floor_num + 1 > Server.s_globalDB[DatabaseID.SHEET_MACHINE].length)
		{
			LogHelper.Log("handleOpenNewFloor.. Floor is limited, please check with game designer!");
			requestError_handleOpenNewFloor(ReturnCode.RESPONSE_ERROR);
			return;
		}
		
		boolean save_stock_silo = false;
		boolean save_stock_barn = false;
		boolean save_stock_warehouse = false;
		
		// check condition done, update product in stock ------------------------------------------------------
		for (int i = 0; i < product_unlock.length - 2; i += 3)
		{
			int type = Integer.parseInt(product_unlock[i]);
			int id = Integer.parseInt(product_unlock[i+1]);
			int num = Integer.parseInt(product_unlock[i+2]);
			
//			log.append('\t').append(type);
//			log.append('\t').append(id);
//			log.append('\t').append(num);
		
			if (type == DatabaseID.IT_PLANT)
			{
				int product_stock_num = GetStock(DatabaseID.STOCK_SILO).getProductNum(type, id);
//				log.append('\t').append(product_stock_num);
				
				int new_value = product_stock_num - num;
				
				GetStock(DatabaseID.STOCK_SILO).updateValue(_command_id, type, id, new_value);
//				log.append('\t').append(GetStock(DatabaseID.STOCK_SILO).getProductNum(type, id));
				
				save_stock_silo = true;
			}
			else if (type == DatabaseID.IT_PRODUCT)
			{
				int product_stock_num = GetStock(DatabaseID.STOCK_BARN).getProductNum(type, id);
//				log.append('\t').append(product_stock_num);
				
				int new_value = product_stock_num - num;
				
				GetStock(DatabaseID.STOCK_BARN).updateValue(_command_id, type, id, new_value);
//				log.append('\t').append(GetStock(DatabaseID.STOCK_BARN).getProductNum(type, id));
				
				save_stock_barn = true;
			}
			else if (type == DatabaseID.IT_MATERIAL)
			{
				int product_stock_num = GetStock(DatabaseID.STOCK_WAREHOUSE).getProductNum(type, id);
//				log.append('\t').append(product_stock_num);
				
				int new_value = product_stock_num - num;
				
				GetStock(DatabaseID.STOCK_WAREHOUSE).updateValue(_command_id, type, id, new_value);
//				log.append('\t').append(GetStock(DatabaseID.STOCK_WAREHOUSE).getProductNum(type, id));
				
				save_stock_warehouse = true;
			}
		}
		
//		log.append('\t').append(userInfo.getGold());
		long gold_used = gold_unlock;
		userInfo.setGold(userInfo.getGold() - gold_unlock, 				// 1. gold use
												_command_id,			//  2. hanh dong cua gamer
												-1, 					// 11. received item type
												-1,						// 12. received item id
												"",						// 13. received item name
												0);						// 14. received item num
		
//		log.append('\t').append(userInfo.getGold());
		
//		log.append('\t').append(userInfo.getReputation());
//		long reputation_used = reputation_unlock;
//		userInfo.setReputation(userInfo.getReputation() - reputation_unlock, // log
//												_command_id,			//  2. hanh dong cua gamer
//												_ip,					// 10. ip login v4 cua gamer
//												-1, 					// 11. id cua loai item
//												-1,						// 12. id cua item
//												"",						// 13. ten item
//												reputation_unlock,		// 14. gia game money cua item
//												0,						// 15. so luong vat pham
//												0);						// 19. so item co truoc khi nhan them
//		
//		log.append('\t').append(userInfo.getReputation());
		
		userInfo.increaseFloorNumber();
//		log.append('\t').append(userInfo.getTotalFloor());
		
		int newFloorIndex = userInfo.getTotalFloor() - 1;
		Floor f = new Floor(newFloorIndex);
		floor.add(newFloorIndex, f);
		
		Machine mc = new Machine(newFloorIndex);
		machine.add(newFloorIndex, mc);

		MachineDurability md = new MachineDurability(newFloorIndex);
		machineDurability.add(newFloorIndex, md);
		// --------------------------------------------------------------------------------------------------------
		
		// save to db
		if (!_use_lazy_sync_user_info) SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
		if (save_stock_silo) SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToDatabase());
		if (save_stock_barn) SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToDatabase());
		if (save_stock_warehouse) SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToDatabase());
		ADD_DB_VALUE_BINARY(KeyID.KEY_FLOORS + newFloorIndex, floor.get(newFloorIndex).getData(true));
		ADD_DB_VALUE_BINARY(KeyID.KEY_MACHINES + newFloorIndex, machine.get(newFloorIndex).getData());
		ADD_DB_VALUE_BINARY(KeyID.KEY_MACHINES_DURABILITY + newFloorIndex, machineDurability.get(newFloorIndex).getData());
		
		int acm_index = -1;
		if (_use_achievement)
		{
			acm_index = GetAchievementManager().Increase(CommandID.CMD_OPEN_NEW_FLOOR, 1);
		}
		
		// update garden appraisal
		try
		{
			garden_appraisal = UpdateAppraisal(DatabaseID.APPRAISAL_FLOOR);
		}
		catch (Exception e)
		{
			LogHelper.LogException("handleOpenNewFloor.UpdateAppraisal", e);
		}
		
		// send result to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addLong(KeyID.KEY_GOLD_USED, gold_used);
		response.addLong(KeyID.KEY_REPUTATION_USED, 0);
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
		response.addBinary(KeyID.KEY_MACHINES + newFloorIndex, machine.get(newFloorIndex).getData());
		response.addBinary(KeyID.KEY_MACHINES_DURABILITY + newFloorIndex, machineDurability.get(newFloorIndex).getData());
		
		response.addShort(KeyID.KEY_TOTAL_FLOOR_CHANGED, 1);
		response.addBinary(KeyID.KEY_FLOORS + 0, floor.get(newFloorIndex).getData(false));
		response.addLong(KeyID.KEY_GARDEN_APPRAISAL, garden_appraisal);
		
		if (_use_achievement && acm_index != -1)
		{
			response.addInt(KeyID.KEY_ACHIEVEMENT_ID, acm_index);
			response.addBinary(KeyID.KEY_ACHIEVEMENT_INDEX + acm_index, GetAchievementManager().GetAchievement(acm_index).getData());
		}
		
		try 
		{
			_client.WriteZip(response.toByteArray());
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("handleOpenNewFloor", ex);
		}
	}

	private void requestError_handleOpenNewFloor(int return_id)
	{
		_return_id = return_id;
		
		int floor_num = userInfo.getTotalFloor() - 1;
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
		response.addBinary(KeyID.KEY_MACHINES + floor_num, machine.get(floor_num).getData());
		response.addBinary(KeyID.KEY_MACHINES_DURABILITY + floor_num, machineDurability.get(floor_num).getData());
		
		try 
		{
			_client.WriteZip(response.toByteArray());
			LogHelper.Log("requestError_handleOpenNewFloor.. Server returned ERROR code to client: " + _return_id + " *****");
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("requestError_handleOpenNewFloor", ex);
		}
	}
	
	
	private void buyItemUpgradeStock(FBEncrypt encrypt)
	{
		byte _stock_id = encrypt.getByte(KeyID.KEY_STOCK_ID);
		byte _material_id = encrypt.getByte(KeyID.KEY_MATERIAL_ID);

		Stock _stock = stock.get(DatabaseID.STOCK_WAREHOUSE);

		long user_diamond = money_mgr.GetRealMoney() + money_mgr.GetBonusMoney();
		
		int product_num = _stock.getProductNum(DatabaseID.IT_MATERIAL, _material_id);
		
		int stock_level = GetStock(_stock_id).getLevel();
		
		if (stock_level >= Server.s_globalDB[DatabaseID.SHEET_STOCK_UPGRADE].length)
		{
			LogHelper.Log("buyItemUpgradeStock.. Out of stock level (" + stock_level + "), cannot buy item"); 
			requestError();
			return;
		}
		
		String[] product_unlock = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_STOCK_UPGRADE][stock.get(_stock_id).getLevel() + 1][_stock_id]).split(":");
		
		int material_buy_num = 0;
		int material_need = 0;
		boolean can_upgrade = true;
		
		for (int i = 0; i < product_unlock.length; i += 2)
		{
			short material_id_unlock = Short.parseShort(product_unlock[i]);
			short material_num_unlock = Short.parseShort(product_unlock[i+1]);
			
			if (material_id_unlock == _material_id)
			{
				int material_stock_num = _stock.getProductNum(DatabaseID.IT_MATERIAL, material_id_unlock);

				if (material_stock_num >= material_num_unlock)
				{
					can_upgrade = false;
					break;
				}
				
				material_need = material_num_unlock - product_num;
				material_buy_num = material_num_unlock;
			}
		}
		
		if (can_upgrade == false)
		{
			LogHelper.Log("buyItemUpgradeStock.. buyItem " + _material_id + ": FAILED!"); 
			LogHelper.Log("buyItemUpgradeStock.. Still have material in stock, dont need to buy!"); 
			requestError_buyItemUpgradeStock(ReturnCode.RESPONSE_NOT_ENOUGH_PRODUCT);
			return;
		}
		
		// calc diamond num need to buy _material_id
		
//		long diamond_need = Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_MATERIAL][_material_id][DatabaseID.MATERIAL_DIAMOND_BUY]);
//		diamond_need *= material_need;
		long item_price = Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_MATERIAL][_material_id][DatabaseID.MATERIAL_DIAMOND_BUY]);
		long diamond_need = item_price * material_need;
		
		long diamond_used = 0;
		
		if (user_diamond >= diamond_need && can_upgrade)
		{
			diamond_used = diamond_need;
			UseMoneyResult result = money_mgr.UseRealMoneyAndBonusMoney((int)diamond_need,					// log
													CommandID.CMD_BUY_ITEM_UPGRADE_STOCK_OPTIMIZE_DATA_OUT,	//  2. hanh dong cua gamer
													userInfo.getName(),										//  3. ten tai khoan
													userInfo.getLevel(),									//  7. level cua gamer
													_ip,													//  9. ip login v4 cua gamer
													DatabaseID.IT_MATERIAL,									// 10. id cua loai item
													_material_id,											// 11. id cua item
													"00",													// 12. ten item
													item_price,												// 13. gia game coin cua item
													material_need);											// 14. so luong vat pham
			
			if (result._code == UseMoneyResult.CODE.SUCCESS)
			{
				// LogHelper.Log("buyItemUpradeStock.. reduce user money Ok");
				
				if (_stock.addGift(DatabaseID.IT_MATERIAL, _material_id, material_need, _command_id))
				{
					// LogHelper.Log("buyItemUpgradeStock.. add item to stock " + _material_id + ": OK!");
					
					// save db
					if (!_use_lazy_sync_user_info) SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, _stock.getDataToDatabase());
				}
				else
				{
					LogHelper.Log("buyItemUpgradeStock.. add item to stock " + _material_id + ": Fail! Should refund money to user");
					_return_id = ReturnCode.RESPONSE_CANT_INCREASE_OBJECT;
				}
			}
			else
			{
				LogHelper.Log("buyItemUpradeStock.. reduce user money fail");
				_return_id = ReturnCode.RESPONSE_CANT_SUBSTRACT_MONEY;
			}
		}
		else
		{
			LogHelper.Log("buyItemUpgradeStock.. buyItem " + _material_id + ": FAILED!"); 
			
			if (user_diamond < diamond_need) LogHelper.Log("buyItemUpgradeStock.. Not enough diamond"); 
			requestError_buyItemUpgradeStock(ReturnCode.RESPONSE_NOT_ENOUGH_DIAMOND);
			return;
		}
		
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, _stock.getDataToClient());
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addLong(KeyID.KEY_DIAMOND_USED, diamond_used);
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));

		try
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("buyItemUpgradeStock.. Response to client: OK");
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("buyItemUpgradeStock", ex);
		}
	}
	
	private void buyItemUpgradeStock_OptimizeDataOut(FBEncrypt encrypt)
	{
		byte _stock_id = encrypt.getByte(KeyID.KEY_STOCK_ID);
		byte _material_id = encrypt.getByte(KeyID.KEY_MATERIAL_ID);

		Stock _stock = stock.get(DatabaseID.STOCK_WAREHOUSE);

		long user_diamond = money_mgr.GetRealMoney() + money_mgr.GetBonusMoney();
		
		int product_num = _stock.getProductNum(DatabaseID.IT_MATERIAL, _material_id);
		
		int stock_level = GetStock(_stock_id).getLevel();
		
		if (stock_level >= Server.s_globalDB[DatabaseID.SHEET_STOCK_UPGRADE].length)
		{
			LogHelper.Log("buyItemUpgradeStock.. Out of stock level (" + stock_level + "), cannot buy item"); 
			requestError();
			return;
		}
		
		String[] product_unlock = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_STOCK_UPGRADE][stock.get(_stock_id).getLevel() + 1][_stock_id]).split(":");
		
		int material_buy_num = 0;
		int material_need = 0;
		boolean can_upgrade = true;
		
		for (int i = 0; i < product_unlock.length; i += 2)
		{
			short material_id_unlock = Short.parseShort(product_unlock[i]);
			short material_num_unlock = Short.parseShort(product_unlock[i+1]);
			
			if (material_id_unlock == _material_id)
			{
				int material_stock_num = _stock.getProductNum(DatabaseID.IT_MATERIAL, material_id_unlock);

				if (material_stock_num >= material_num_unlock)
				{
					can_upgrade = false;
					break;
				}
				
				material_need = material_num_unlock - product_num;
				material_buy_num = material_num_unlock;
			}
		}
		
		if (can_upgrade == false)
		{
			LogHelper.Log("buyItemUpgradeStock.. buyItem " + _material_id + ": FAILED!"); 
			LogHelper.Log("buyItemUpgradeStock.. Still have material in stock, dont need to buy!"); 
			requestError_buyItemUpgradeStock(ReturnCode.RESPONSE_NOT_ENOUGH_PRODUCT);
			return;
		}
		
		// calc diamond num need to buy _material_id
		
//		long diamond_need = Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_MATERIAL][_material_id][DatabaseID.MATERIAL_DIAMOND_BUY]);
//		diamond_need *= material_need;
		long item_price = Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_MATERIAL][_material_id][DatabaseID.MATERIAL_DIAMOND_BUY]);
		long diamond_need = item_price * material_need;
		
		long diamond_used = 0;
		
		if (user_diamond >= diamond_need && can_upgrade)
		{
			diamond_used = diamond_need;
			UseMoneyResult result = money_mgr.UseRealMoneyAndBonusMoney((int)diamond_need,					// log
													_command_id,											//  2. hanh dong cua gamer
													userInfo.getName(),										//  3. ten tai khoan
													userInfo.getLevel(),									//  7. level cua gamer
													_ip,													//  9. ip login v4 cua gamer
													DatabaseID.IT_MATERIAL,									// 10. id cua loai item
													_material_id,											// 11. id cua item
													"00",													// 12. ten item
													item_price,												// 13. gia game coin cua item
													material_need);											// 14. so luong vat pham
			
			if (result._code == UseMoneyResult.CODE.SUCCESS)
			{
				// LogHelper.Log("buyItemUpradeStock.. reduce user money Ok");
				
				if (_stock.addGift(DatabaseID.IT_MATERIAL, _material_id, material_need, _command_id))
				{
					// LogHelper.Log("buyItemUpgradeStock.. add item to stock " + _material_id + ": OK!");
					
					// save db
					if (!_use_lazy_sync_user_info) SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, _stock.getDataToDatabase());
				}
				else
				{
					LogHelper.Log("buyItemUpgradeStock.. add item to stock " + _material_id + ": Fail! Should refund money to user");
					_return_id = ReturnCode.RESPONSE_CANT_INCREASE_OBJECT;
				}
			}
			else
			{
				LogHelper.Log("buyItemUpradeStock.. reduce user money fail");
				_return_id = ReturnCode.RESPONSE_CANT_SUBSTRACT_MONEY;
			}
		}
		else
		{
			LogHelper.Log("buyItemUpgradeStock.. buyItem " + _material_id + ": FAILED!"); 
			
			if (user_diamond < diamond_need) LogHelper.Log("buyItemUpgradeStock.. Not enough diamond"); 
			requestError_buyItemUpgradeStock(ReturnCode.RESPONSE_NOT_ENOUGH_DIAMOND);
			return;
		}
		
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addLong(KeyID.KEY_DIAMOND_USED, diamond_used);
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));

		LogHelper.Log("buyItemUpgradeStock.. _return_id = " + _return_id + ": RESPONSE_VALUE!"); 
		if (_return_id != ReturnCode.RESPONSE_OK)
		{
			response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToClient());
			response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToClient());
			response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
		}
		else
		{
			response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, _stock.getDataToClient());
		}
		
		try
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("buyItemUpgradeStock.. Response to client: OK");
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("buyItemUpgradeStock", ex);
		}
	}
	
	private void requestError_buyItemUpgradeStock(int return_id)
	{
		_return_id = return_id;
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		
		try 
		{
			_client.WriteZip(response.toByteArray());
			LogHelper.Log("requestError_buyItemUpgradeStock.. Server returned ERROR code to client: " + _return_id + " *****");
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("requestError_buyItemUpgradeStock", ex);
		}
	}
	
	private void buyItemOpenFloor(FBEncrypt encrypt)
	{
		int user_floor = userInfo.getTotalFloor();
		long user_reputation = userInfo.getReputation();
//		int user_clouds_glue = GetStock(DatabaseID.STOCK_WAREHOUSE).getProductNum(DatabaseID.IT_MATERIAL, DatabaseID.MATERIAL_MAGIC_WATER_BOTTLE);

		long user_diamond = money_mgr.GetRealMoney() + money_mgr.GetBonusMoney();
		
		int material_id = (int)encrypt.getByte(KeyID.KEY_MATERIAL_ID);
		
		int item_buy = 0;
		short item_unlock;
		int material_need = 0;
		long diamond_need = 0;

		long diamond_used = 0;
		long reputation_used = 0;
		
		if (material_id == DatabaseID.MATERIAL_MAGIC_WATER_BOTTLE || material_id == DatabaseID.MATERIAL_CLOUD_CLUE)
		{
			String[] material_unlock = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_FLOOR_UNLOCK][user_floor][DatabaseID.FLOOR_UNLOCK_MATERIAL_ID_NUM]).split(":");
			
			if (material_unlock.length < 3)
			{
				LogHelper.Log("buyItemOpenFloor.. Server should re-check database"); 
				requestError_buyItemOpenFloor(ReturnCode.RESPONSE_ERROR);
				return;
			}
			
			for (int i = 0; i < material_unlock.length - 2; i+= 3)
			{
//				int type = Integer.parseInt(material_unlock[i]);
				int id = Integer.parseInt(material_unlock[i+1]);
				int num = Integer.parseInt(material_unlock[i+2]);
				
				if (id == material_id)
				{
					int num_product_in_stock = GetStock(DatabaseID.STOCK_WAREHOUSE).getProductNum(DatabaseID.IT_MATERIAL, material_id);
					
					if (num_product_in_stock < num)
					{
						material_need = num - num_product_in_stock;
						
						diamond_need = Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_MATERIAL][material_id][DatabaseID.MATERIAL_DIAMOND_BUY]);
						diamond_need *= material_need;
						item_buy = material_need;
						
						// do not check stock
						/*
						if (GetStock(DatabaseID.STOCK_WAREHOUSE).checkFull(GetStock(DatabaseID.STOCK_WAREHOUSE).getCapacityCurrent() + material_need) == true)
						{
							LogHelper.Log("buyItemOpenFloor.. err! Stock is FULL!"); 
							requestError_buyItemOpenFloor(ReturnCode.RESPONSE_STOCK_IS_FULL);
							return;
						}
						*/
					}
					else
					{
						LogHelper.Log("buyItemOpenFloor.. Failed! Product is enough, dont need to buy"); 
						requestError_buyItemOpenFloor(ReturnCode.RESPONSE_ERROR);
						return;
					}
				}
				
			}
		}
		else
		{
			LogHelper.Log("buyItemOpenFloor.. buyItem " + material_id + ": FAILED! ID is not exist"); 
			requestError_buyItemOpenFloor(ReturnCode.RESPONSE_ERROR);
			return;
		}
		
		if (diamond_need <= 0)
		{
			LogHelper.Log("buyItemOpenFloor.. invalid diamond price " + diamond_need);
			_return_id = ReturnCode.RESPONSE_IBS_INVALID_PRICE;
			requestError();
			return;
		}
		
		if (user_diamond >= diamond_need)
		{
			long item_price = Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_MATERIAL][material_id][DatabaseID.MATERIAL_DIAMOND_BUY]);
			
			diamond_used = diamond_need;
			UseMoneyResult umr = money_mgr.UseRealMoneyAndBonusMoney((int)diamond_need,						// log
													_command_id,											//  2. hanh dong cua gamer
													userInfo.getName(),										//  3. ten tai khoan
													userInfo.getLevel(),									//  7. level cua gamer
													_ip,													//  9. ip login v4 cua gamer
													DatabaseID.IT_MATERIAL,									// 10. id cua loai item
													material_id,											// 11. id cua item
													"00",													// 12. ten item
													item_price,												// 13. gia game coin cua item
													item_buy);												// 14. so luong vat pham

			
			if (umr._code == UseMoneyResult.CODE.SUCCESS)
			{
				if (material_id == DatabaseID.MATERIAL_MAGIC_WATER_BOTTLE || material_id == DatabaseID.MATERIAL_CLOUD_CLUE)
				{
					GetStock(DatabaseID.STOCK_WAREHOUSE).addGift(DatabaseID.IT_MATERIAL, material_id, material_need, _command_id);
					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, GetStock(DatabaseID.STOCK_WAREHOUSE).getDataToDatabase());
				}
			}
			
			try
			{
				
			}
			catch (Exception ex)
			{
				LogHelper.LogException("buyItemOpenFloor", ex);
				requestError_buyItemOpenFloor(ReturnCode.RESPONSE_SAVE_ERROR);
				return;
			}
			
			// LogHelper.Log("buyItemOpenFloor.. " + material_id + ": OK!"); 
		}
		else
		{
			LogHelper.Log("buyItemOpenFloor.. FAILED!"); 
			LogHelper.Log("buyItemOpenFloor.. Not enough diamond"); 
			requestError_buyItemOpenFloor(ReturnCode.RESPONSE_NOT_ENOUGH_DIAMOND);
			return;
		}
		
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addLong(KeyID.KEY_REPUTATION_USED, reputation_used);
		response.addLong(KeyID.KEY_DIAMOND_USED, diamond_used);
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));

		try
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("buyItemOpenFloor.. Response to client: OK!");
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("buyItemOpenFloor", ex);
		}
	}
	
	private void requestError_buyItemOpenFloor(int return_id)
	{
		_return_id = return_id;
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		
		try 
		{
			_client.WriteZip(response.toByteArray());
			LogHelper.Log("requestError_buyItemOpenFloor.. Server returned ERROR code to client: " + _return_id + " *****");
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("requestError_buyItemOpenFloor", ex);
		}
	}
	
	
	private void completeOrder(FBEncrypt encrypt)
	{
		byte _order_type = encrypt.getByte(KeyID.KEY_ORDER_TYPE);
		short _order_index = encrypt.getByte(KeyID.KEY_ORDER_INDEX);

		if (_order_type == DatabaseID.ORDER_DAILY && _order_index != DatabaseID.ORDER_DAILY_INDEX)
		{
			LogHelper.Log("completeOrder.. invalid _order_daily_type");
			requestError(ReturnCode.RESPONSE_INVALID_ORDER_TYPE);
			return;
		}
		
		if (_order_type < 0 || _order_type >= DatabaseID.ORDER_TYPE_MAX)
		{
			LogHelper.Log("completeOrder.. invalid _order_type");
			requestError(ReturnCode.RESPONSE_INVALID_ORDER_TYPE);
			return;
		}
		
		if (_order_index < DatabaseID.ORDER_EVENT_SLOT_INDEX) {
			if (_order_index < 0 || _order_index > orderManager.getOrderCount()) {
				LogHelper.Log("completeOrder.. invalid _order_index");
				requestError(ReturnCode.RESPONSE_INVALID_ORDER_INDEX);
				return;
			}
		}
		
		
		if (bUseOwl)
		{
			if (owl.getPowerCurrent() <= 0)
			{
				LogHelper.Log("deliveryOrder.. Owl's power is empty");
				requestError();
				return;
			}
		}
		
		if (!bCheatDeliveryOrder)
		if (orderManager.getRewardPackage() == true)
		{
			LogHelper.Log("completeOrder.. FAILED!!! Must be receive old order reward before delivery next order.");
			
			// response to client
			FBEncrypt response = new FBEncrypt();
			response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
			response.addBinary(KeyID.KEY_ORDER, orderManager.getData());
			response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToClient());
			response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToClient());
			response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
			response.addLong(KeyID.KEY_DIAMOND_USED, 0);
			response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));

			try
			{
				_client.WriteZip(response.toByteArray());
				// LogHelper.Log("completeOrder.. response to client OK.");
			} 
			catch (Exception ex) 
			{
				LogHelper.LogException("completeOrder", ex);
			}
			
			return;
		}
		
//		StringBuilder log = new StringBuilder();
//		log.append("complete_order");
//		log.append('\t').append(_order_type);
//		log.append('\t').append(_order_index);
//		log.append('\t').append(userInfo.getGold());
//		log.append('\t').append(userInfo.getExp());
//		log.append('\t').append(money_mgr.GetRealMoney());
//		log.append('\t').append(money_mgr.GetBonusMoney());
		
		long user_diamond = money_mgr.GetBonusMoney() + money_mgr.GetRealMoney();
		long diamond_need = 0;
		long diamond_used = 0;
		
		Stock stock_silo = stock.get(DatabaseID.STOCK_SILO);
		Stock stock_barn = stock.get(DatabaseID.STOCK_BARN);
		Order order;
		if (_order_index == DatabaseID.ORDER_EVENT_SLOT_INDEX) {
			order = orderManager.getOrderEvent();
		} else {
			order = orderManager.getOrder(_order_index);
		}
		
		if (order.getType() == DatabaseID.ORDER_DAILY && order.getReceiveDailyOrder() == false)
		{
			LogHelper.Log("Daily order is not received! Complete failed.");
			requestError(ReturnCode.RESPONSE_INVALID_ORDER_INDEX);
			return;
		}

		if (_order_index == DatabaseID.ORDER_DAILY_INDEX && orderManager.isNewDate())
		{
			LogHelper.Log("completeOrder: isNewDate() = true! Cannot delivery this order");
			requestError(ReturnCode.RESPONSE_NEW_DATE);
			return;
		}
		
		StringBuilder logProduct = new StringBuilder();
		boolean second_product = false;
		
		for (int i = 0; i < order.getProductCount(); i++)
		{
			byte[] order_stock_data = order.stock.get(i);
			
			if (order_stock_data == null)
			{
				LogHelper.Log("completeOrder.. FAILED!"); 
				LogHelper.Log("completeOrder.. order_stock_data: null!"); 
				requestError();
				return;
			}
			
			FBEncrypt prod = new FBEncrypt(order_stock_data);
			
			byte type = prod.getByte(KeyID.KEY_PROD_TYPE);
			short id = prod.getShort(KeyID.KEY_PROD_ID);
			short num = prod.getShort(KeyID.KEY_PROD_NUM);
			
			if (type == DatabaseID.IT_PLANT)
			{
				int stock_product_num = stock_silo.getProductNum(type, id);
				
				long plant_diamond = Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_SEED][id][DatabaseID.SEED_DIAMOND_BUY]);
				
				if (stock_product_num < num)
				{
					int real_num = num - stock_product_num;
					diamond_need += real_num * plant_diamond;
					// dont need to check stock is full, due to we use diamond to complete this order
					
					if (second_product) logProduct.append(":");

					logProduct.append(type);
					logProduct.append(":");
					logProduct.append(id);
					logProduct.append(":");
					logProduct.append(real_num);
					logProduct.append(":");
					logProduct.append(plant_diamond);
					
					second_product = true;
				}
			}
			else if (type == DatabaseID.IT_PRODUCT)
			{
				int stock_product_num = stock_barn.getProductNum(type, id);
				
				long product_diamond = Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_PRODUCT][id][DatabaseID.PRODUCT_DIAMOND_BUY]);
				
				if (stock_product_num < num)
				{
					int real_num = num - stock_product_num;
					diamond_need += real_num * product_diamond;
					// dont need to check stock is full, due to we use diamond to complete this order

					if (second_product) logProduct.append(":");
					
					logProduct.append(type);
					logProduct.append(":");
					logProduct.append(id);
					logProduct.append(":");
					logProduct.append(real_num);
					logProduct.append(":");
					logProduct.append(product_diamond);
					
					second_product = true;
				}
			}
			else if (type == DatabaseID.IT_BUG)
			{
				int stock_pest_num = stock_barn.getProductNum(type, id);
				
				long pest_diamond = Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_PEST][id][DatabaseID.PEST_DIAMOND_BUY]);
				
				if (stock_pest_num < num)
				{
					int real_num = num - stock_pest_num;
					diamond_need += real_num * pest_diamond;

					if (second_product) logProduct.append(":");

					logProduct.append(type);
					logProduct.append(":");
					logProduct.append(id);
					logProduct.append(":");
					logProduct.append(real_num);
					logProduct.append(":");
					logProduct.append(pest_diamond);
					
					second_product = true;
				}
			}
			else if (type == DatabaseID.IT_EVENT)
			{
				int stock_product_num = stock_event.getProductNum(type, id);
				
				long product_diamond = 0;
				switch (id)
				{
					case DatabaseID.ITEM_EVENT_HALLOWEEN_1:
						product_diamond = DatabaseID.ITEM_EVENT_HALLOWEEN_1_PRICE;
						break;
					case DatabaseID.ITEM_EVENT_HALLOWEEN_2:
						product_diamond = DatabaseID.ITEM_EVENT_HALLOWEEN_2_PRICE;
						break;
					case DatabaseID.ITEM_EVENT_HALLOWEEN_3:
						product_diamond = DatabaseID.ITEM_EVENT_HALLOWEEN_3_PRICE;
						break;
					case DatabaseID.ITEM_EVENT_XMAS_2014_1:
						product_diamond = DatabaseID.ITEM_EVENT_HALLOWEEN_1_PRICE;
						break;
					case DatabaseID.ITEM_EVENT_XMAS_2014_2:
						product_diamond = DatabaseID.ITEM_EVENT_HALLOWEEN_2_PRICE;
						break;
					case DatabaseID.ITEM_EVENT_XMAS_2014_3:
						product_diamond = DatabaseID.ITEM_EVENT_HALLOWEEN_3_PRICE;
						break;
					default:
						LogHelper.Log("Does not suppor this item id = " + id);
						requestError();
						return;
				}
				
				if (stock_product_num < num)
				{
					int real_num = num - stock_product_num;
					diamond_need += real_num * product_diamond;
					// dont need to check stock is full, due to we use diamond to complete this order

					if (second_product) logProduct.append(":");
					
					logProduct.append(type);
					logProduct.append(":");
					logProduct.append(id);
					logProduct.append(":");
					logProduct.append(real_num);
					logProduct.append(":");
					logProduct.append(product_diamond);
					
					second_product = true;
					LogHelper.LogHappy("product need to buy := " + logProduct.toString());
				}
			}
		}
		
//		log.append('\t').append(diamond_need);

		// make sure enough params to execute command
		String[] params = logProduct.toString().split(":");
		for (int p = 0; p < params.length; p++)
		{
			if (params[p].equals(""))
			{
				LogHelper.Log("Parsed db error ? " + _order_type + " " + _order_index);
				requestError(ReturnCode.RESPONSE_INVALID_ORDER_INDEX);
				return;
			}
		}
		
		int acm_index = -1;
		if (user_diamond >= diamond_need && diamond_need > 0)
		{
			if (bUseOwl)
			{
				owl.setPowerCurrent(owl.getPowerCurrent() - 1);
				SET_DB_VALUE_BINARY(KeyID.KEY_OWL, owl.getData());
			}
			
			diamond_used = diamond_need;
			// money_mgr.UseRealMoneyAndBonusMoney_ExtendItems((int)diamond_need,				// log
													// _command_id,							//  2. hanh dong cua gamer
													// userInfo.getName(),						//  3. ten tai khoan
													// userInfo.getLevel(),					//  7. level cua gamer
													// _ip,									//  9. ip login v4 cua gamer
													// DatabaseID.IT_PRODUCT,					// 10. id cua loai item
													// -1,										// 11. id cua item
													// "",										// 12. ten item
													// diamond_need,							// 13. gia game coin cua item
													// 1,										// 14. so luong vat pham
													// logProduct.toString());


			String[] productsBought = logProduct.toString().split(":");
			for (int i = 0; i < productsBought.length; i += 4)
			{
				int _type = Integer.parseInt(productsBought[i]);
				int _id = Integer.parseInt(productsBought[i+1]);
				int _num = Integer.parseInt(productsBought[i+2]);
				int _price = Integer.parseInt(productsBought[i+3]);
				
				UseMoneyResult result = money_mgr.UseRealMoneyAndBonusMoney((_price * _num),								// log
																			_command_id,									//  2. hanh dong cua gamer
																			userInfo.getName(),								//  3. ten tai khoan
																			userInfo.getLevel(),							//  7. level cua gamer
																			_ip,											//  9. ip login v4 cua gamer
																			_type,											// 10. id cua loai item
																			_id,												// 11. id cua item
																			"00",											// 12. ten item
																			_price,											// 13. gia game coin cua item
																			_num);											// 14. so luong vat pham
				
				if (result._code != UseMoneyResult.CODE.SUCCESS)
				{
					_return_id = ReturnCode.RESPONSE_CANT_SUBSTRACT_MONEY;
					LogHelper.Log("completeOrder.. can't substract money [" + _type + "," + _id + "," + _num + "," + _price + "]");
				}
			}
			
			
//			log.append('\t').append(userInfo.getExp());
//			log.append('\t').append(userInfo.getGold());
//			log.append('\t').append(money_mgr.GetRealMoney());
//			log.append('\t').append(money_mgr.GetBonusMoney());

			boolean save_stock_silo = false;
			boolean save_stock_barn = false;
			boolean save_stock_event = false;
			
			for (int i = 0; i < order.getProductCount(); i++)
			{
				byte[] order_stock_data = order.stock.get(i);
				
				FBEncrypt prod = new FBEncrypt(order_stock_data);
				
				byte type = prod.getByte(KeyID.KEY_PROD_TYPE);
				short id = prod.getShort(KeyID.KEY_PROD_ID);
				short num = prod.getShort(KeyID.KEY_PROD_NUM);
				
//				log.append('\t').append(type);
//				log.append('\t').append(id);
//				log.append('\t').append(Misc.GetItemName((int)type, (int)id));
//				log.append('\t').append(num);
				
				if (type == DatabaseID.IT_PLANT)
				{
					int stock_product_num = stock_silo.getProductNum(type, id);
//					log.append('\t').append(stock_product_num);
					
					if (stock_product_num < num)
					{
						stock_silo.updateValue(_command_id, type, id, 0);
					}
					else
					{
						stock_silo.updateValue(_command_id, type, id, stock_product_num - num);
					}

					save_stock_silo = true;
				}
				else if (type == DatabaseID.IT_PRODUCT || type == DatabaseID.IT_BUG)
				{
					int stock_product_num = stock_barn.getProductNum(type, id);

					if (stock_product_num < num)
					{
						stock_barn.updateValue(_command_id, type, id, 0);
					}
					else
					{
						stock_barn.updateValue(_command_id, type, id, stock_product_num - num);
					}
					
					save_stock_barn = true;
				}
				else if (type == DatabaseID.IT_EVENT)
				{
					int stock_product_num = stock_event.getProductNum(type, id);

					if (stock_product_num < num)
					{
						stock_event.updateValue(_command_id, type, id, 0);
					}
					else
					{
						stock_event.updateValue(_command_id, type, id, stock_product_num - num);
					}
					save_stock_event = true;
				}
			}
			
			userInfo.increaseDeliveryOrderNum();
			
			if (!_use_lazy_sync_user_info) SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
			
			if (save_stock_silo)
			{
				SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock_silo.getDataToDatabase());
			}
			
			if (save_stock_barn)
			{
				SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock_barn.getDataToDatabase());
			}
			
			if (save_stock_event)
			{
				SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
			}
			
			orderManager.addRewards(order.getRewardGold(), order.getRewardGoldBonus(), order.getRewardExp(), order.getRewardExpBonus(), order.getRewardItems());
			
			// tracking action
			if (_order_index == DatabaseID.ORDER_DAILY_INDEX && order.getReceiveDailyOrderDiamond() > 0)
			{
				StringBuilder log = new StringBuilder();
				log.append(Misc.getCurrentDateTime());								//  1. thoi gian tieu tien
				log.append('\t').append("CompletePayingOrder");			//  2. hanh dong cua gamer
				log.append('\t').append(userInfo.getID());							//  3. id
				log.append('\t').append(userInfo.getID());							//  4. role id
				log.append('\t').append(userInfo.getName());						//  5. name
				log.append('\t').append(0);											//  6. server id
				log.append('\t').append(userInfo.getLevel());						//  7. level
				LogHelper.Log(LogHelper.LogType.TRACKING_ACTION, log.toString());
			}
			
			if ((_use_event_halloween || _use_event_xmas_2014) && _order_index == DatabaseID.ORDER_EVENT_SLOT_INDEX)
			{
				orderManager.createOrderEvent(machine, floor, userInfo.getLevel());
			}
			else
			{
				orderManager.createOrder(_order_type, _order_index, getRandomProducts(_order_index), null, machine, floor, userInfo.getLevel(), _is_order_bug_pearl, ComboManager().GetBonusDailyOrder(), ComboManager().GetBonusNormalOrder());
			}

			// complete order
			if (_order_index == DatabaseID.ORDER_DAILY_INDEX)
			{
				updateDailyOrderDeliveredNum(_order_index);
			}
			
			SET_DB_VALUE_BINARY(KeyID.KEY_ORDER, orderManager.getData());
			
//			GetRankingTarget().Increase(CommandID.CMD_DELIVERY_ORDER, 1);
			
			if (_use_event_order)
			{
				SetEventScore(KeyID.KEY_EVENT_ORDER_JAN_2015, 1, CommandID.CMD_DELIVERY_ORDER);
			}
			
			if (_use_achievement)
			{
				acm_index = GetAchievementManager().Increase(CommandID.CMD_DELIVERY_ORDER, 1);
			}
			SET_DB_VALUE_BINARY(KeyID.KEY_USER_RANKING_TARGET, GetRankingTarget().GetData());
			
			if (_order_index == DatabaseID.ORDER_DAILY_INDEX && _use_event_mid_autumn_festival)
			{
				SetEventScore(KeyID.KEY_EVENT_MID_AUTUMN_FESTIVAL, GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, 2));
			}
			
			if (_order_index == DatabaseID.ORDER_DAILY_INDEX && _use_event_20_11)
			{
				SetEventScore(KeyID.KEY_EVENT_20_11, GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, 2));
			}
			
			if (_order_index == DatabaseID.ORDER_DAILY_INDEX && _use_event_xmas_tree)
			{
				stock_event.add(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_CANDLE, GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, 2), _command_id);
				SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
				_event_item_num = GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, 2);
			}
			
			if (_order_index == DatabaseID.ORDER_DAILY_INDEX && _use_event_new_year_2015)
			{
				stock_event.add(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_BANH_CHUNG, GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, 2), _command_id);
				SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
				_event_item_num = GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, 2);
			}
			
			if (_order_index == DatabaseID.ORDER_DAILY_INDEX && _use_event_8_3_2015)
			{
				stock_event.add(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_GLASS_ROSE, GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, 2), _command_id);
				SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
				_event_item_num = GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, 2);
			}
			
			if (_use_event_halloween)
			{
				if (_order_index == DatabaseID.ORDER_DAILY_INDEX)
				{
					stock_event.addGift(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_HALLOWEEN_3, GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_HALLOWEEN_3, DatabaseID.FEATURE_ID_ORDER));
					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
				}
				else if (_order_index == DatabaseID.ORDER_EVENT_SLOT_INDEX)
				{
					String[] reward_items = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_ORDER_EVENT][userInfo.getLevel()][DatabaseID.ORDER_EVENT_REWARD_ITEMS]).split(":");
					stock_event.addGift(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_HALLOWEEN_4, Integer.parseInt(reward_items[2]));
					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
					
					// ranking
					GetRankingTarget().Set(CommandID.CMD_UPDATE_GARDEN_APPRAISAL, -1, stock_event.getProductNum(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_HALLOWEEN_4));
				}
				else
				{
					stock_event.addGift(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_HALLOWEEN_2, DatabaseID.ORDER_NORMAL_ITEM_EVENT_NUM);
					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
				}
			}
			else if (_use_event_xmas_2014)
			{
				if (_order_index == DatabaseID.ORDER_DAILY_INDEX)
				{
					stock_event.addGift(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_XMAS_2014_2, GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_HALLOWEEN_1, DatabaseID.FEATURE_ID_ORDER));
					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
				}
				else if (_order_index == DatabaseID.ORDER_EVENT_SLOT_INDEX)
				{
					String[] reward_items = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_ORDER_EVENT][userInfo.getLevel()][DatabaseID.ORDER_EVENT_REWARD_ITEMS]).split(":");
					stock_event.addGift(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_XMAS_2014_4, Integer.parseInt(reward_items[2]));
					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
					
					// ranking
					GetRankingTarget().Set(CommandID.CMD_UPDATE_GARDEN_APPRAISAL, -1, stock_event.getProductNum(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_XMAS_2014_4));
				}
//				else
//				{
//					stock_event.addGift(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_XMAS_2014_2, DatabaseID.ORDER_NORMAL_ITEM_EVENT_NUM);
//					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
//				}
			}
		}
		else
		{
			LogHelper.Log("completeOrder.. completeOrder: FAILED! Not enough diamond!"); 
			_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_DIAMOND;
		}
		
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_ORDER, orderManager.getData());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock_silo.getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock_barn.getDataToClient());
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addLong(KeyID.KEY_DIAMOND_USED, diamond_used);
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));

		if (bUseOwl)
		{
			response.addBinary(KeyID.KEY_OWL, owl.getData());
		}
		
		if (_use_achievement && acm_index != -1)
		{
			response.addInt(KeyID.KEY_ACHIEVEMENT_ID, acm_index);
			response.addBinary(KeyID.KEY_ACHIEVEMENT_INDEX + acm_index, GetAchievementManager().GetAchievement(acm_index).getData());
		}
		
		if ((_use_event_halloween || _use_event_xmas_2014 || _use_event_xmas_tree || _use_event_new_year_2015 || _use_event_8_3_2015) && _use_stock_event)
		{
			response.addBinary(KeyID.KEY_STOCK_EVENT, stock_event.getDataToClient());
		}
		
		try
		{
			_client.WriteZip(response.toByteArray());
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("completeOrder", ex);
		}
	}
	
	private void updateDailyOrderDeliveredNum(int _order_index)
	{
		orderManager.setTotalDeliveredNum(orderManager.getTotalDeliveredNum()+1);
		
		int total_delivered_num = orderManager.getTotalDeliveredNum();
		int order_daily_free_delivered_num = orderManager.getOrderDailyFreeDeliveredNum();
		int order_daily_paid_delivered_num = orderManager.getOrderDailyPaidDeliveredNum();
		int order_daily_free_max = orderManager.getOrderDailyFreeMax();
		int order_daily_paid_max = orderManager.getOrderDailyPaidMax();

		if (orderManager.isNewDate() && 							// da qua ngay moi va
			order_daily_free_delivered_num <= order_daily_free_max)	// chua lam toi order paid
		{
			// reset daily order
			orderManager.resetDailyOrder();
			orderManager.createOrder(DatabaseID.ORDER_DAILY, _order_index, getRandomProducts(_order_index), null, machine, floor, userInfo.getLevel(), _is_order_bug_pearl, ComboManager().GetBonusDailyOrder(), ComboManager().GetBonusNormalOrder());
			return;
		}
		
		Order new_order_daily = orderManager.getOrder(_order_index);
		
		if (total_delivered_num == order_daily_free_max)
		{
			orderManager.setOrderDailyFreeDeliveredNum(order_daily_free_delivered_num+1);
			
			int diamond_need = Misc.initReceiveDailyOrderDiamond(userInfo.getLevel(), order_daily_paid_delivered_num, new_order_daily.getRewardExp());
			new_order_daily.setReceiveDailyOrderDiamond(diamond_need);
			new_order_daily.setReceiveDailyOrder(false);
		}
		
		if (total_delivered_num < order_daily_free_max)	// free
		{
			new_order_daily.setReceiveDailyOrder(true);
			orderManager.setOrderDailyFreeDeliveredNum(order_daily_free_delivered_num+1);
		}
		else if (total_delivered_num > order_daily_free_max && order_daily_paid_delivered_num <= order_daily_paid_max)	// paid
		{
			orderManager.setOrderDailyPaidDeliveredNum(order_daily_paid_delivered_num+1);
			
			if (orderManager.getOrderDailyPaidDeliveredNum() < orderManager.getOrderDailyPaidMax())
			{
				int diamond_need = Misc.initReceiveDailyOrderDiamond(userInfo.getLevel(), orderManager.getOrderDailyPaidDeliveredNum(), new_order_daily.getRewardExp());
				new_order_daily.setReceiveDailyOrderDiamond(diamond_need);
			}
			else
			{
				new_order_daily.setReceiveDailyOrderDiamond(0);
			}
		}
	}
	
	private void receiveOrderReward(FBEncrypt encrypt)
	{
		OrderReward reward = null;
		
		boolean has_update_stock = false;
		long gold_used = 0;
		long exp_used = 0;
		long gold_used_bonus = 0;
		long exp_used_bonus = 0;
		
		if (orderManager.getRewardPackage() == true)
		{
			reward = orderManager.reward;
			
			if (reward == null)
			{
				LogHelper.Log("receiveOrderReward.. Reward NULL!"); 
				requestError_receiveOrderReward(ReturnCode.RESPONSE_ERROR);
				return;
			}
			
			long reward_gold = reward.getRewardGold();
			long reward_gold_bonus = reward.getRewardGoldBonus();
			long reward_exp = reward.getRewardExp();
			long reward_exp_bonus = reward.getRewardExpBonus();
			
			ArrayList<byte[]> reward_items = reward.getItems();
			if (reward_gold > 0 && reward_exp > 0)
			{
				gold_used = reward_gold;
				gold_used_bonus = reward_gold_bonus;
				userInfo.setGold(userInfo.getGold() + reward_gold + reward_gold_bonus);

				exp_used = reward_exp;
				exp_used_bonus = reward_exp_bonus;
				userInfo.setExp(userInfo.getExp() + reward_exp + reward_exp_bonus);
				
				checkLevelUp();
				if (!_use_lazy_sync_user_info) SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
			}
			
			StringBuilder log_item = new StringBuilder();
			log_item.append(DatabaseID.IT_MONEY + "_" + DatabaseID.EXP_ID);
			log_item.append(":").append(reward_exp + reward_exp_bonus);
			log_item.append(":").append(DatabaseID.IT_MONEY + "_" + DatabaseID.GOLD_ID);
			log_item.append(":").append(reward_gold + reward_gold_bonus);

			if (reward_items.size() > 0)
			{
				boolean result = false;
				
				for (int i = 0; i < reward_items.size(); i++)
				{
					FBEncrypt item = new FBEncrypt(reward_items.get(i));
					
					int type = item.getByte(KeyID.KEY_PROD_TYPE);
					int id = item.getShort(KeyID.KEY_PROD_ID);
					int num = item.getShort(KeyID.KEY_PROD_NUM);
					
					// due to user delivery order before receive any items, so its should as a gift if the stock is full.
					switch(type)
					{
						case DatabaseID.IT_POT:
						case DatabaseID.IT_MATERIAL:
							result = GetStock(DatabaseID.STOCK_WAREHOUSE).addGift(type, id, num, _command_id);
							break;

						case DatabaseID.IT_BUG:
						case DatabaseID.IT_PRODUCT:
							result = GetStock(DatabaseID.STOCK_BARN).addGift(type, id, num, _command_id);
							break;
							
						case DatabaseID.IT_PLANT:
							result = GetStock(DatabaseID.STOCK_SILO).addGift(type, id, num, _command_id);
							break;
							
						default:
							// not support
							LogHelper.Log("receiveOrderReward.. invalid gift type.");
							result = false;
							break;
					}

					if (result == false)
					{
						LogHelper.Log("receiveOrderReward.. add gift fail! should re-check DB");
						break;
					}
					
					log_item.append(":").append(type + "_" + id);
					log_item.append(":").append(num);
				}
				
				if (result == true)
				{
					has_update_stock = true;
					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, GetStock(DatabaseID.STOCK_SILO).getDataToDatabase());
					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, GetStock(DatabaseID.STOCK_BARN).getDataToDatabase());
					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, GetStock(DatabaseID.STOCK_WAREHOUSE).getDataToDatabase());
				}
			}
			
			StringBuilder log = new StringBuilder();
			log.append(Misc.getCurrentDateTime());						//  1. thoi gian tieu tien
			log.append('\t').append(Misc.getActionName(_command_id));	//  2. hanh dong cua gamer
			log.append('\t').append(userInfo.getID());					//  3. ten tai khoan
			log.append('\t').append(userInfo.getID());					//  4. id cua role nap tien
			log.append('\t').append(userInfo.getName());				//  5. ten role
			log.append('\t').append(SkyGarden._server_id);									//  6. id cua server
			log.append('\t').append(userInfo.getLevel());				//  7. level cua gamer
			log.append('\t').append("");								//	8. id item nhan
			log.append('\t').append(SkyGarden._server_id);									//	9. so luong item
			log.append('\t').append(1);									//	10. result
			log.append('\t').append(log_item);							//	11. desciption as item list
			LogHelper.Log(LogHelper.LogType.RECEIVING_ITEM, log.toString());
			
			orderManager.setRewardPackage(false);
			
			SET_DB_VALUE_BINARY(KeyID.KEY_ORDER, orderManager.getData());
			if (!_use_lazy_sync_user_info) SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
			
			// LogHelper.Log("receiveOrderReward.. receiveOrderReward: OK!"
		}
		else
		{
			LogHelper.Log("receiveOrderReward.. Cannot receive order reward!"); 
			requestError_receiveOrderReward(ReturnCode.RESPONSE_ERROR);
			return;
		}
		
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_ORDER, orderManager.getData());
		response.addBinary(KeyID.KEY_ORDER_REWARD, reward.getData());
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addLong(KeyID.KEY_GOLD_USED, gold_used);
		response.addLong(KeyID.KEY_GOLD_USED + "_bonus", gold_used_bonus);
		response.addLong(KeyID.KEY_EXP_USED, exp_used);
		response.addLong(KeyID.KEY_EXP_USED + "_bonus", exp_used_bonus);
		
		if (has_update_stock)
		{
			response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToClient());
			response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToClient());
			response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
		}

		if (user_level_up) checkAndUnlockItems();
		
		try
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("receiveOrderReward.. Reponse to client OK");
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("receiveOrderReward", ex);
		}
	}
	
	private void requestError_receiveOrderReward(int return_id)
	{
		_return_id = return_id;
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		
		try 
		{
			_client.WriteZip(response.toByteArray());
			LogHelper.Log("requestError_receiveOrderReward.. Server returned ERROR code to client: " + _return_id + " *****");
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("requestError_receiveOrderReward", ex);
		}
	}
	
	private void upgradeStock(FBEncrypt encrypt)
	{
		byte stock_id = encrypt.getByte(KeyID.KEY_STOCK_ID);
		
		Stock _stock = GetStock(stock_id);

		// LogHelper.Log("upgradeStock.. stock_id = " + stock_id);

		boolean can_upgrade = true;
		
		String[] material_unlock = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_STOCK_UPGRADE][_stock.getLevel() + 1][stock_id]).split(":");
		
		if (material_unlock.length % 2 == 1)
		{
			can_upgrade = false;
		}
		else
		{
			for (int i = 0; i < material_unlock.length; i += 2)
			{
				short material_id_unlock = Short.parseShort(material_unlock[i]);
				short metarial_num_unlock = Short.parseShort(material_unlock[i+1]);
				
				int metarial_stock_num = stock.get(DatabaseID.STOCK_WAREHOUSE).getProductNum(DatabaseID.IT_MATERIAL, material_id_unlock);
				
				if (metarial_stock_num < metarial_num_unlock)
				{
					LogHelper.Log("upgradeStock.. not enough material");
					can_upgrade = false;
					break;
				}
			}
		}

		int acm_index = -1;
		if (can_upgrade)
		{
			int capacity_max = _stock.getCapacityMax();
			capacity_max += _stock.getCapacityAdd();
			capacity_max += _stock.getCapacityPlus();
				
			if (userInfo.getVIP() > 0)
			{
				capacity_max += _stock.getVipPlus();
			}
			
			_stock.setCapacityMax(capacity_max);
			_stock.setLevel(_stock.getLevel() + 1);
			
			stock.get(DatabaseID.STOCK_WAREHOUSE).updateProducts(_command_id, material_unlock, DatabaseID.IT_MATERIAL);
			
			SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + stock_id, _stock.getDataToDatabase());
			SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToDatabase());
			
			// LogHelper.Log("upgradeStock.. OK!"); 
			if (_use_achievement)
			{
				acm_index = GetAchievementManager().Increase(CommandID.CMD_UPGRADE_STOCK, 1);
			}
		}
		else
		{
			LogHelper.Log("upgradeStock.. Failed!"); 
			_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_PRODUCT;
		}
		
		// update garden appraisal
		try
		{
			garden_appraisal = UpdateAppraisal(DatabaseID.APPRAISAL_STOCK);
		}
		catch (Exception e)
		{
			LogHelper.LogException("upgradeStock.UpdateAppraisal", e);
		}
			
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		
		if (stock_id != DatabaseID.STOCK_WAREHOUSE)
		{
			response.addByte(KeyID.KEY_STOCK_ID, stock_id);
			response.addBinary(KeyID.KEY_STOCKS + stock_id, _stock.getDataToClient());
		}
		else
		{
			response.addByte(KeyID.KEY_STOCK_ID, -1);
		}

		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
		response.addLong(KeyID.KEY_GARDEN_APPRAISAL, garden_appraisal);
		
		if (_use_achievement && acm_index != -1)
		{
			response.addInt(KeyID.KEY_ACHIEVEMENT_ID, acm_index);
			response.addBinary(KeyID.KEY_ACHIEVEMENT_INDEX + acm_index, GetAchievementManager().GetAchievement(acm_index).getData());
		}

		try
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("upgradeStock.. Response data to client OK"); 
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("upgradeStock", ex);
		}
	}
	
	private void upgradeStock_OptimizeDataOut(FBEncrypt encrypt)
	{
		byte stock_id = encrypt.getByte(KeyID.KEY_STOCK_ID);
		
		Stock _stock = GetStock(stock_id);

		// LogHelper.Log("upgradeStock.. stock_id = " + stock_id);

		boolean can_upgrade = true;
		
		String[] material_unlock = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_STOCK_UPGRADE][_stock.getLevel() + 1][stock_id]).split(":");
		
		if (material_unlock.length % 2 == 1)
		{
			can_upgrade = false;
		}
		else
		{
			for (int i = 0; i < material_unlock.length; i += 2)
			{
				short material_id_unlock = Short.parseShort(material_unlock[i]);
				short metarial_num_unlock = Short.parseShort(material_unlock[i+1]);
				
				int metarial_stock_num = stock.get(DatabaseID.STOCK_WAREHOUSE).getProductNum(DatabaseID.IT_MATERIAL, material_id_unlock);
				
				if (metarial_stock_num < metarial_num_unlock)
				{
					LogHelper.Log("upgradeStock.. not enough material");
					can_upgrade = false;
					break;
				}
			}
		}

		int acm_index = -1;
		if (can_upgrade)
		{
			int capacity_max = _stock.getCapacityMax();
			capacity_max += _stock.getCapacityAdd();
			capacity_max += _stock.getCapacityPlus();
				
			if (userInfo.getVIP() > 0)
			{
				capacity_max += _stock.getVipPlus();
			}
			
			_stock.setCapacityMax(capacity_max);
			_stock.setLevel(_stock.getLevel() + 1);
			
			stock.get(DatabaseID.STOCK_WAREHOUSE).updateProducts(_command_id, material_unlock, DatabaseID.IT_MATERIAL);
			
			SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + stock_id, _stock.getDataToDatabase());
			SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToDatabase());
			
			// LogHelper.Log("upgradeStock.. OK!"); 
			if (_use_achievement)
			{
				acm_index = GetAchievementManager().Increase(CommandID.CMD_UPGRADE_STOCK, 1);
			}
		}
		else
		{
			LogHelper.Log("upgradeStock.. Failed!"); 
			_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_PRODUCT;
		}
		
		// update garden appraisal
		try
		{
			garden_appraisal = UpdateAppraisal(DatabaseID.APPRAISAL_STOCK);
		}
		catch (Exception e)
		{
			LogHelper.LogException("upgradeStock.UpdateAppraisal", e);
		}
			
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		
		if (_return_id != ReturnCode.RESPONSE_OK)
		{
			response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToClient());
			response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToClient());
			response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
		}

		
		response.addLong(KeyID.KEY_GARDEN_APPRAISAL, garden_appraisal);
		
		if (_use_achievement && acm_index != -1)
		{
			response.addInt(KeyID.KEY_ACHIEVEMENT_ID, acm_index);
			response.addBinary(KeyID.KEY_ACHIEVEMENT_INDEX + acm_index, GetAchievementManager().GetAchievement(acm_index).getData());
		}

		try
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("upgradeStock.. Response data to client OK"); 
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("upgradeStock", ex);
		}
	}
	
	private void startMachine(FBEncrypt encrypt)
	{
		byte _floor = encrypt.getByte(KeyID.KEY_MACHINE_FLOOR);

		if (_floor < 0 || _floor >= userInfo.getTotalFloor())
		{
			LogHelper.Log("startMachine.. invalid machine id.");
			requestError(ReturnCode.RESPONSE_INVALID_MACHINE_ID);
			return;
		}
		
		Machine _machine = machine.get(_floor);
		MachineDurability _machine_durability = machineDurability.get(_floor);

		short user_level = userInfo.getLevel();
		long user_gold = userInfo.getGold();

		short user_level_need = (short)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_MACHINE][_floor][DatabaseID.MACHINE_LEVEL_UNLOCK]);
		long user_gold_need = Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_MACHINE][_floor][DatabaseID.MACHINE_GOLD_START]);
		long gold_used = 0;
		
		if (user_level >= user_level_need && 
			user_gold >= user_gold_need &&
				user_gold_need > 0 &&
			_machine.getStatus() == DatabaseID.MACHINE_LOCK
			)
		{
			gold_used = user_gold_need;
			userInfo.setGold(user_gold - user_gold_need, 							// log
													_command_id,					//  2. hanh dong cua gamer
													-1, 							// 11. id cua loai item
													-1,								// 12. id cua item
													"",								// 13. name
													0);								// num
			
			_machine.setStatus(DatabaseID.MACHINE_UNLOCK);
			
			int start_time = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_MACHINE][_floor][DatabaseID.MACHINE_TIME_START]);
			start_time += Misc.SECONDS();
			_machine.setStartTime(start_time);
			
			if (!_use_lazy_sync_user_info) SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
			SET_DB_VALUE_BINARY(KeyID.KEY_MACHINES + _floor, _machine.getData());
			
			// LogHelper.Log("startMachine.. Start machine: OK!");
		}
		else
		{
			LogHelper.Log("startMachine.. Can not start machine"); 
			if (user_level < user_level_need) LogHelper.Log("startMachine.... user_level should be >= " + user_level_need); 
			if (user_gold < user_gold_need) LogHelper.Log("startMachine.... user_gold should be >= " + user_gold_need); 
			if (_machine.getStatus() != DatabaseID.MACHINE_LOCK) LogHelper.Log("startMachine.. _machine status should be LOCK status to start"); 
			
			_return_id = ReturnCode.RESPONSE_ERROR;
		}
		
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_MACHINES, _machine.getData());
		response.addBinary(KeyID.KEY_MACHINES_DURABILITY, _machine_durability.getData());
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addLong(KeyID.KEY_GOLD_USED, gold_used);
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));

		try
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("startMachine.. reponse to client OK.");
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("startMachine", ex);
		}
	}

	private void skipMachineUnlockTime(FBEncrypt encrypt)
	{
		byte _floor = encrypt.getByte(KeyID.KEY_MACHINE_FLOOR);

		if (_floor < 0 || _floor >= userInfo.getTotalFloor())
		{
			LogHelper.Log("skipMachineUnlockTime.. invalid machine id.");
			requestError(ReturnCode.RESPONSE_INVALID_MACHINE_ID);
			return;
		}
		
		Machine _machine = machine.get(_floor);
		MachineDurability _machine_durability = machineDurability.get(_floor);

		long user_diamond = money_mgr.GetRealMoney() + money_mgr.GetBonusMoney();

		long machine_diamond_skip_time = Misc.getDiamondEstimate(DatabaseID.DIAMOND_SKIP_TIME_MACHINE, _machine.getStartTime());
		long diamond_used = 0;
		
		if (user_diamond >= machine_diamond_skip_time && 
			_machine.getStatus() == DatabaseID.MACHINE_UNLOCK
			)
		{
			diamond_used = machine_diamond_skip_time;
			money_mgr.UseRealMoneyAndBonusMoney((int)machine_diamond_skip_time,				// log
													_command_id, "" + _floor,				//  2. hanh dong cua gamer
													userInfo.getName(),						//  3. ten tai khoan
													userInfo.getLevel(),					//  7. level cua gamer
													_ip,									//  9. ip login v4 cua gamer
													-1,										// 10. id cua loai item
													_floor,									// 11. id cua item
													Misc.getMachineName(_floor),			// 12. ten item
													machine_diamond_skip_time,				// 13. gia game coin cua item
													1);										// 14. so luong vat pham
													
			int start_time = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_MACHINE][_floor][DatabaseID.MACHINE_TIME_START]);
			_machine.setStartTime(_machine.getStartTime() - start_time);
			
			SET_DB_VALUE_BINARY(KeyID.KEY_MACHINES + _floor, _machine.getData());
			
			// LogHelper.Log("skipMachineUnlockTime.. OK!"); 
		}
		else
		{
			LogHelper.Log("skipMachineUnlockTime.. Failed!"); 
			if (user_diamond < machine_diamond_skip_time) LogHelper.Log("skipMachineUnlockTime.. user_diamond should be >= machine_diamond_skip_time"); 
			if (_machine.getStatus() != DatabaseID.MACHINE_UNLOCK) LogHelper.Log("skipMachineUnlockTime.. _machine.getStatus() should be == DatabaseID.MACHINE_UNLOCK"); 
			
			_return_id = ReturnCode.RESPONSE_ERROR;
		}
		
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_MACHINES, _machine.getData());
		response.addBinary(KeyID.KEY_MACHINES_DURABILITY, _machine_durability.getData());
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addLong(KeyID.KEY_DIAMOND_USED, diamond_used);
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));

		try
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("skipMachineUnlockTime.. response to client OK");
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("skipMachineUnlockTime", ex);
		}
	}
	
	private void readyMachine(FBEncrypt encrypt)
	{
		byte _floor = encrypt.getByte(KeyID.KEY_MACHINE_FLOOR);

		if (_floor < 0 || _floor >= userInfo.getTotalFloor())
		{
			LogHelper.Log("readyMachine.. invalid machine id.");
			requestError(ReturnCode.RESPONSE_INVALID_MACHINE_ID);
			return;
		}
		
		// lock machine, make sure only one user can repair this machine
		StringBuilder lock_info = new StringBuilder(32);
		lock_info.append(_user_id).append('_');
		lock_info.append("readyMachine").append('_');
		lock_info.append(Misc.SECONDS());
		
		if (!base.Add(_user_id + "_" + KeyID.KEY_MACHINE_LOCK_DATA, lock_info.toString(), DatabaseID.MACHINE_DATA_LOCK_TIME))
		{
			LogHelper.Log("readyMachine.. error: this machine is being locked.");
			requestError(ReturnCode.RESPONSE_MACHINE_DATA_IS_LOCKED);
			return;
		}
		
		Machine _machine = machine.get(_floor);
		MachineDurability _machine_durability = machineDurability.get(_floor);
		
		if (_machine.getStatus() == DatabaseID.MACHINE_UNLOCK && _machine.getStartTime() < Misc.SECONDS() && _machine.getStartTime() != -1)
		{
			_machine.setStatus(DatabaseID.MACHINE_READY);
			_machine_durability.setDurability(_machine_durability.getDurabilityMax());
			
			SET_DB_VALUE_BINARY(KeyID.KEY_MACHINES + _floor, _machine.getData());
			SET_DB_VALUE_BINARY(KeyID.KEY_MACHINES_DURABILITY + _floor, _machine_durability.getData());
			
			// LogHelper.Log("readyMachine.. Machine ready to use: OK!"); 
		}
		else
		{
			LogHelper.Log("readyMachine.. Machine ready to use: Failed!"); 
			_return_id = ReturnCode.RESPONSE_ERROR;
		}
		
		boolean process_result = base.Delete(_user_id + "_" + KeyID.KEY_MACHINE_LOCK_DATA);
		// LogHelper.Log("repairMachine.. unlock machine data: " + process_result);
		
		// update garden appraisal
		try
		{
			garden_appraisal = UpdateAppraisal(DatabaseID.APPRAISAL_MACHINE);
		}
		catch (Exception e)
		{
			LogHelper.LogException("readyMachine.UpdateAppraisal", e);
		}
		
		// response to client
		FBEncrypt result = new FBEncrypt();
		result.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		result.addBinary(KeyID.KEY_MACHINES, _machine.getData());
		result.addBinary(KeyID.KEY_MACHINES_DURABILITY, _machine_durability.getData());
		result.addLong(KeyID.KEY_GARDEN_APPRAISAL, garden_appraisal);

		try
		{
			_client.WriteZip(result.toByteArray());
			// LogHelper.Log("readyMachine.. response to client OK.");
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("readyMachine", ex);
		}
	}
	
	private void upgradeMachine(FBEncrypt encrypt)
	{
		byte _floor = encrypt.getByte(KeyID.KEY_MACHINE_FLOOR);
		short luckyLeafID = encrypt.getShort(KeyID.KEY_LUCKY_LEAF);

		if (_floor < 0 || _floor >= userInfo.getTotalFloor())
		{
			LogHelper.Log("upgradeMachine.. invalid machine id.");
			requestError(ReturnCode.RESPONSE_INVALID_MACHINE_ID);
			return;
		}

		// check if user uses lucky leaf or not
		if (
			(luckyLeafID >= DatabaseID.MATERIAL_LUCKY_LEAF_PURPLE_SMALL && luckyLeafID <= DatabaseID.MATERIAL_LUCKY_LEAF_PURPLE_LARGE) || 
			luckyLeafID == DatabaseID.MATERIAL_LUCKY_LEAF_PURPLE_SUPER_LARGE ||
			luckyLeafID == DatabaseID.MATERIAL_LUCKY_LEAF_PURPLE_39 ||
			luckyLeafID == DatabaseID.MATERIAL_LUCKY_LEAF_PURPLE_40 ||
			luckyLeafID == DatabaseID.MATERIAL_LUCKY_LEAF_PURPLE_41 ||
			luckyLeafID == DatabaseID.MATERIAL_LUCKY_LEAF_PURPLE_42 ||
			luckyLeafID == DatabaseID.MATERIAL_LUCKY_LEAF_PURPLE_43
			)
		{
			if (stock.get(DatabaseID.STOCK_WAREHOUSE).getProductNum(DatabaseID.IT_MATERIAL, luckyLeafID) <= 0)
			{
				LogHelper.Log("upgradeMachine. not enough lucky leaf.");
				requestError(ReturnCode.RESPONSE_NOT_ENOUGH_PRODUCT);
				return;
			}
		}
		
		Machine _machine = machine.get(_floor);
		MachineDurability _machine_durability = machineDurability.get(_floor);
		
//		short user_level = userInfo.getLevel();
		long user_gold = userInfo.getGold();
		long gold_used = 0;
		
		// String[] machine_unlock_infos = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_MACHINE_UNLOCK][_floor][_machine.getLevel() + 1]).split(":");
		// int active_time = Integer.parseInt(machine_unlock_infos[DatabaseID.MACHINE_ACTIVE_TIME]);
		// long gold_unlock = Long.parseLong(machine_unlock_infos[DatabaseID.MACHINE_GOLD_UNLOCK]);
		// byte upgrade_ratio = Byte.parseByte(machine_unlock_infos[DatabaseID.MACHINE_UPGRADE_RATIO]);

		int machine_next_level = _machine.getLevel() + 1;
		
		if (machine_next_level >= Server.s_globalDB[DatabaseID.SHEET_MACHINE_UNLOCK][_floor].length)
		{
			LogHelper.Log("upgradeMachine.. limit machine level");
			requestError(ReturnCode.RESPONSE_INVALID_MACHINE_ID);
			return;
		}
		
		int active_time = (int)Server.s_globalMachineUnlockData[_floor][machine_next_level][DatabaseID.MACHINE_ACTIVE_TIME];
		long gold_unlock = Server.s_globalMachineUnlockData[_floor][machine_next_level][DatabaseID.MACHINE_GOLD_UNLOCK];
		byte upgrade_ratio = (byte)Server.s_globalMachineUnlockData[_floor][machine_next_level][DatabaseID.MACHINE_UPGRADE_RATIO];

		boolean freeUpgrade = false;
		if (ProjectConfig.IS_SERVER_FREESTYLE == 1)
		{
			freeUpgrade = true;
		}
		
		if (freeUpgrade || (_machine.getActiveTime() >= active_time && user_gold >= gold_unlock && gold_unlock > 0))
		
		//check condition to upgrade machine
		// if (_machine.getActiveTime() >= active_time && user_gold >= gold_unlock && gold_unlock > 0)
		{
			gold_used = gold_unlock;
			userInfo.setGold(user_gold - gold_unlock, 						// log
													_command_id,			//  2. hanh dong cua gamer
													-1, 					// 11. id cua loai item
													-1,					// 12. id cua item
													"",// 13. ten item
													0);
			
			if (!_use_lazy_sync_user_info) SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
			
			StringBuilder item_info_used = new StringBuilder();
			String log_update_item = null;
			
			int minus = 0;
			
			if (
				(luckyLeafID >= DatabaseID.MATERIAL_LUCKY_LEAF_PURPLE_SMALL && luckyLeafID <= DatabaseID.MATERIAL_LUCKY_LEAF_PURPLE_LARGE) ||
				luckyLeafID == DatabaseID.MATERIAL_LUCKY_LEAF_PURPLE_SUPER_LARGE ||
				luckyLeafID == DatabaseID.MATERIAL_LUCKY_LEAF_PURPLE_39 ||
				luckyLeafID == DatabaseID.MATERIAL_LUCKY_LEAF_PURPLE_40 ||
				luckyLeafID == DatabaseID.MATERIAL_LUCKY_LEAF_PURPLE_41 ||
				luckyLeafID == DatabaseID.MATERIAL_LUCKY_LEAF_PURPLE_42 ||
				luckyLeafID == DatabaseID.MATERIAL_LUCKY_LEAF_PURPLE_43
				)
			{
				// decrease the lucky leaft number in stock
				log_update_item = stock.get(DatabaseID.STOCK_WAREHOUSE).decreaseObject_Log(DatabaseID.IT_MATERIAL, luckyLeafID, _command_id);
				SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToDatabase());
				
				minus = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_MATERIAL][luckyLeafID][DatabaseID.MATERIAL_4_LEAF_LUCKY_PERCENT]);
			}
			
			if (log_update_item == null) item_info_used.append(-1);
			else item_info_used.append(log_update_item);

			int random_ratio = Misc.RANDOM_RANGE(0, 100);
			
			if (random_ratio <= upgrade_ratio + minus)
			{
				_machine.setLevel(machine_next_level);
				_machine_durability.setDurabilityMax(_machine_durability.getDurabilityMax() + DatabaseID.MACHINE_DURABILITY_ADD);

				SET_DB_VALUE_BINARY(KeyID.KEY_MACHINES + _floor, _machine.getData());
				SET_DB_VALUE_BINARY(KeyID.KEY_MACHINES_DURABILITY + _floor, _machine_durability.getData());
				
				// LogHelper.Log("upgradeMachine.. Upgrade machine: OK!"); 
				_return_id = ReturnCode.RESPONSE_UPGRADE_MACHINE_SUCCESS;
				
				if (_use_new_broadcast && _machine.getLevel() >= 5) {
					String message = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_NOTIFY_TEXT][14][DatabaseID.NOTIFY_TEXT_DESCRIPTION]);
					message = message.replace("%s1", userInfo.getName());
					message = message.replace("%s2", Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_MACHINE][_floor][DatabaseID.MACHINE_NAME]));
					SkyGarden.AddBroadcast(message);
				}
			}
			else
			{
				LogHelper.Log("upgradeMachine.. Upgrade machine not successful!");
				_return_id = ReturnCode.RESPONSE_UPGRADE_MACHINE_FAIL;
				
				if (_use_event_big_offer)
				{
					GetUserInfo().setGold(GetUserInfo().getGold() + gold_unlock/2, _command_id, DatabaseID.IT_MONEY, DatabaseID.GOLD_ID, Misc.GetItemName(DatabaseID.IT_MONEY, DatabaseID.GOLD_ID), (int)(gold_unlock/2));
				}
			}
			
			// log VD
			StringBuilder log = new StringBuilder();
			log.append(Misc.getCurrentDateTime());								//  1. thoi gian tieu tien
			log.append('\t').append(Misc.getActionName(_command_id));			//  2. hanh dong cua gamer
			log.append('\t').append(userInfo.getID());							//  3. ten tai khoan
			log.append('\t').append(userInfo.getID());							//  4. id cua role nap tien
			log.append('\t').append(userInfo.getName());						//  5. ten role
			log.append('\t').append(SkyGarden._server_id);											//  6. id cua server
			log.append('\t').append(userInfo.getLevel());						//  7. level cua gamer
			log.append('\t').append("Machine" + "_" + _machine.GetID());		//  8. id cua item truoc khi cuong hoa
			log.append('\t').append(machine_next_level - 1);					//  9. level cua item truoc khi cuong hoa
			log.append('\t').append(item_info_used);							//	10. material
			log.append('\t').append(upgrade_ratio);								//	11. success rate
			log.append('\t').append("Machine" + "_" + _machine.GetID());		//	12. new item id
			log.append('\t').append(_machine.getLevel());						//	13. new item level
			log.append('\t').append(random_ratio <= upgrade_ratio + minus ? 1 : 0);		//	14. result
			log.append('\t').append(random_ratio);								//	15. random result
			log.append('\t').append(luckyLeafID);								//	16. id of luckey leaf
			log.append('\t').append(0);											//	17. use amulet or not
			LogHelper.Log(LogHelper.LogType.UPGRADE_ITEM, log.toString());
		}
		else
		{
			LogHelper.Log("upgradeMachine.. Can not upgrade machine"); 
			_return_id = ReturnCode.RESPONSE_ERROR;
		}
		
		// update garden appraisal
		try
		{
			garden_appraisal = UpdateAppraisal(DatabaseID.APPRAISAL_MACHINE);
		}
		catch (Exception e)
		{
			LogHelper.LogException("upgradeMachine.UpdateAppraisal", e);
		}
		
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_MACHINES, _machine.getData());
		response.addBinary(KeyID.KEY_MACHINES_DURABILITY, _machine_durability.getData());
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addLong(KeyID.KEY_GOLD_USED, gold_used);
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		
		if (
			(luckyLeafID >= DatabaseID.MATERIAL_LUCKY_LEAF_PURPLE_SMALL && luckyLeafID <= DatabaseID.MATERIAL_LUCKY_LEAF_PURPLE_LARGE) ||
			luckyLeafID == DatabaseID.MATERIAL_LUCKY_LEAF_PURPLE_SUPER_LARGE ||
			luckyLeafID == DatabaseID.MATERIAL_LUCKY_LEAF_PURPLE_39 ||
			luckyLeafID == DatabaseID.MATERIAL_LUCKY_LEAF_PURPLE_40 ||
			luckyLeafID == DatabaseID.MATERIAL_LUCKY_LEAF_PURPLE_41 ||
			luckyLeafID == DatabaseID.MATERIAL_LUCKY_LEAF_PURPLE_42 ||
			luckyLeafID == DatabaseID.MATERIAL_LUCKY_LEAF_PURPLE_43
			)
		{
			response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
		}
		
		response.addLong(KeyID.KEY_GARDEN_APPRAISAL, garden_appraisal);

		try
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("upgradeMachine.. response to client OK.");
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("upgradeMachine", ex);
		}
	}
	
	private void repairMachine(FBEncrypt encrypt)
	{
		byte _floor = encrypt.getByte(KeyID.KEY_MACHINE_FLOOR);

		if (_floor < 0 || _floor >= userInfo.getTotalFloor())
		{
			LogHelper.Log("repairMachine.. invalid machine id.");
			requestError(ReturnCode.RESPONSE_INVALID_MACHINE_ID);
			return;
		}
		
		// update notify status of this machine for myself
		SetNotifyStatus(_user_id, GetNotifyIndex(DatabaseID.NOTIFY_TYPE_MACHINE, _floor), false);
		
		// lock machine, make sure only one user can repair this machine
		// who & why & when
		StringBuilder lock_info = new StringBuilder(32);
		lock_info.append(_user_id).append('_');
		lock_info.append("repairMachine").append('_');
		lock_info.append(Misc.SECONDS());
		
		if (!base.Add(_user_id + "_" + KeyID.KEY_MACHINE_LOCK_DATA, lock_info.toString(), DatabaseID.MACHINE_DATA_LOCK_TIME))
		{
			LogHelper.Log("repairMachine.. error: this machine is being locked.");
			requestError(ReturnCode.RESPONSE_MACHINE_DATA_IS_LOCKED);
			return;
		}
		
		Machine _machine = machine.get(_floor);
		MachineDurability _machine_durability = machineDurability.get(_floor);
		
		boolean hasFriendRepairMachine = false;
		
		// check if someone had been repaired my machine yet
		if (_machine_durability.getUser() != null && _machine_durability.getDurabilityRepaired() > 0 && _machine_durability.getDurability() < _machine_durability.getDurabilityMax())
		{
			_machine_durability.setDurability(_machine_durability.getDurabilityMax());
			_machine_durability.setUser(null);	// reset repairer

			SET_DB_VALUE_BINARY(KeyID.KEY_MACHINES + _floor, _machine.getData());
			SET_DB_VALUE_BINARY(KeyID.KEY_MACHINES_DURABILITY + _floor, _machine_durability.getData());

			hasFriendRepairMachine = true;
		}
		
		long user_gold = userInfo.getGold();
		
		int durability_need = _machine_durability.getDurabilityMax() - _machine_durability.getDurability();
		long gold_maintain = Server.s_globalMachineUnlockData[_floor][_machine.getLevel()][DatabaseID.MACHINE_GOLD_MAINTAIN];
		
		long gold_need = (gold_maintain * durability_need);
		long gold_used = 0;
		// -----------------------------------------------------------
		
		// check condition
		if (_machine_durability.getDurability() < _machine_durability.getDurabilityMax() && user_gold >= gold_need && gold_need > 0)
		{
			gold_used = gold_need;
			userInfo.setGold(user_gold - gold_need, 						// log
													_command_id,			//  2. hanh dong cua gamer
													-1, 					// 11. id cua loai item
													-1,						// 12. id cua item
													"",						// 13. ten item
													0);
													
			_machine_durability.setDurability(_machine_durability.getDurabilityMax());
			
			SET_DB_VALUE_BINARY(KeyID.KEY_MACHINES + _floor, _machine.getData());
			SET_DB_VALUE_BINARY(KeyID.KEY_MACHINES_DURABILITY + _floor, _machine_durability.getData());
			if (!_use_lazy_sync_user_info) SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
		}
		else
		{
			if (_machine_durability.getDurability() >= _machine_durability.getDurabilityMax())
			{
				if (hasFriendRepairMachine)
				{
					_return_id = ReturnCode.RESPONSE_MACHINE_HAD_BEEN_REPAIRED;
				}
				else
				{
					_return_id = ReturnCode.RESPONSE_ERROR;
				}
			}
			else
			{
				_return_id = ReturnCode.RESPONSE_ERROR;
			}
		}
		base.Delete(_user_id + "_" + KeyID.KEY_MACHINE_LOCK_DATA);

		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_MACHINES, _machine.getData());
		response.addBinary(KeyID.KEY_MACHINES_DURABILITY, _machine_durability.getData());
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addLong(KeyID.KEY_GOLD_USED, gold_used);
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));

		try
		{
			_client.WriteZip(response.toByteArray());
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("repairMachine", ex);
		}
	}
	
	private void receiveMachineDurability(FBEncrypt encrypt)
	{
		byte _floor = encrypt.getByte(KeyID.KEY_MACHINE_FLOOR);

		if (_floor < 0 || _floor >= userInfo.getTotalFloor())
		{
			LogHelper.Log("receiveMachineDurability.. invalid machine id.");
			requestError(ReturnCode.RESPONSE_INVALID_MACHINE_ID);
			return;
		}
		
		// Machine _machine = machine.get(_floor);
		MachineDurability _machine_durability = machineDurability.get(_floor);
		
		short durability_repaired = _machine_durability.getDurabilityRepaired();
		if (durability_repaired < 0) durability_repaired = 0;
		
		if (_machine_durability.getUser() != null && _machine_durability.getDurabilityRepaired() > 0 && _machine_durability.getDurability() < _machine_durability.getDurabilityMax())
		{
			_machine_durability.setDurability(_machine_durability.getDurabilityMax());
			_machine_durability.setUser(null);	// reset repairer

			// SET_DB_VALUE_BINARY(KeyID.KEY_MACHINES + _floor, _machine.getData());
			SET_DB_VALUE_BINARY(KeyID.KEY_MACHINES_DURABILITY + _floor, _machine_durability.getData());
			
			// LogHelper.Log("receiveMachineDurability.. Receive machine's durability: OK!");
		}
		else
		{
			LogHelper.Log("receiveMachineDurability.. Receive machine's durability: Failed!");
			if (_machine_durability.getUser() == null) LogHelper.Log("Nobody had repaired this machine"); 
			if (_machine_durability.getDurabilityRepaired() <= 0) LogHelper.Log("_machine_durability.getDurabilityRepaired() should be > 0"); 
			if (_machine_durability.getDurability() >= _machine_durability.getDurabilityMax()) LogHelper.Log("receiveMachineDurability.. Machine durability should be < " + _machine_durability.getDurabilityMax()); 

			_return_id = ReturnCode.RESPONSE_ERROR;
		}
		
		
		// _machine_durability.displayDataPackage();
		
		// response to client
		FBEncrypt result = new FBEncrypt();
		result.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		result.addBinary(KeyID.KEY_MACHINES, machine.get(_floor).getData());
		result.addBinary(KeyID.KEY_MACHINES_DURABILITY, _machine_durability.getData());
		result.addShort(KeyID.KEY_MACHINE_DURABILITY_REPAIRED, durability_repaired);

		try
		{
			_client.WriteZip(result.toByteArray());
			// LogHelper.Log("receiveMachineDurability.. response to client OK.");
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("receiveMachineDurability", ex);
		}
	}
	
	private void createProduct(FBEncrypt encrypt)
	{
		byte _floor = encrypt.getByte(KeyID.KEY_MACHINE_FLOOR);
		short _product_id = encrypt.getShort(KeyID.KEY_PRODUCT_ID);

		if (_floor < 0 || _floor >= userInfo.getTotalFloor())
		{
			LogHelper.Log("createProduct.. invalid machine id.");
			requestError(ReturnCode.RESPONSE_INVALID_MACHINE_ID);
			return;
		}

		if (_product_id < 0)
		{
			LogHelper.Log("createProduct.. invalid product id.");
			requestError(ReturnCode.RESPONSE_INVALID_PRODUCT_ID);
			return;
		}
		

		// lock machine, make sure only one user can repair this machine
		// who & why & when
		StringBuilder lock_info = new StringBuilder(32);
		lock_info.append(_user_id).append('_');
		lock_info.append("createProduct").append('_');
		lock_info.append(Misc.SECONDS());
		
		if (!base.Add(_user_id + "_" + KeyID.KEY_MACHINE_LOCK_DATA, lock_info.toString(), DatabaseID.MACHINE_DATA_LOCK_TIME))
		{
			LogHelper.Log("createProduct.. error: this machine is being locked.");
			requestError(ReturnCode.RESPONSE_MACHINE_DATA_IS_LOCKED);
			return;
		}
		
		Machine _machine = machine.get(_floor);
		MachineDurability _machine_durability = machineDurability.get(_floor);
		
		
		// check if someone had been repaired my machine yet
		if (_machine_durability.getUser() != null && _machine_durability.getDurabilityRepaired() > 0 && _machine_durability.getDurability() < _machine_durability.getDurabilityMax())
		{
			_machine_durability.setDurability(_machine_durability.getDurabilityMax());
			_machine_durability.setUser(null);	// reset repairer

			SET_DB_VALUE_BINARY(KeyID.KEY_MACHINES + _floor, _machine.getData());
			SET_DB_VALUE_BINARY(KeyID.KEY_MACHINES_DURABILITY + _floor, _machine_durability.getData());
		}
		
		
		String[] machine_products = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_MACHINE][_floor][DatabaseID.MACHINE_PRODUCT_ID]).split(":");

		// check product_id exist in products list
		boolean product_available = false;
		for (int i = 0; i < machine_products.length; i++)
		{
			if (_product_id == Short.parseShort(machine_products[i]))
			{
				product_available = true;
				break;
			}
		}
		
		// check condition to create product
		if (_machine.getStatus() != DatabaseID.MACHINE_READY || 
			(_machine_durability.getDurability() <= 0 || _machine_durability.getDurability() > _machine_durability.getDurabilityMax()) ||
			product_available == false ||
			_machine.isFull()
			)
		{
			_return_id = ReturnCode.RESPONSE_ERROR;
			FBEncrypt response = new FBEncrypt();
			response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
			response.addBinary(KeyID.KEY_MACHINES, _machine.getData());
			response.addBinary(KeyID.KEY_MACHINES_DURABILITY, _machine_durability.getData());
			response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToClient());
			response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToClient());

			try
			{
				_client.WriteZip(response.toByteArray());
			} 
			catch (Exception ex) 
			{
				LogHelper.LogException("createProduct", ex);
			}		
			
			return;
		}
		
		boolean can_create = true;
		
		String[] items_need = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_PRODUCT][_product_id][DatabaseID.PRODUCT_ITEMS_TYPE_ID_NUM]).split(":");
		
		if (items_need.length % 3 != 0)
		{
			requestError();
			return;
		}
		
		for (int i = 0; i < items_need.length; i += 3)
		{
			int type = Integer.parseInt(items_need[i]);
			int id = Integer.parseInt(items_need[i+1]);
			int num = Integer.parseInt(items_need[i+2]);
			
			if (type == DatabaseID.IT_PLANT && can_create)
			{
				can_create = stock.get(DatabaseID.STOCK_SILO).checkEnoughProductInStock(type, id, num);
			}
			else
			{
				can_create = stock.get(DatabaseID.STOCK_BARN).checkEnoughProductInStock(type, id, num);
			}
			
			if (can_create == false) break;
		}
		
		// ------------------------------------------------------
		
		if (can_create && _machine.isFull() == false)
		{
			_machine_durability.setDurability(_machine_durability.getDurability() - 1);
			
			_machine.addProduct(_product_id);

			_machine.setActiveTime(_machine.getActiveTime() + _machine.getProductCompleteTime(_product_id));
			
			// update products in stocks
			for (int i = 0; i < items_need.length; i += 3)
			{
				int type = Integer.parseInt(items_need[i]);
				int id = Integer.parseInt(items_need[i+1]);
				int num = Integer.parseInt(items_need[i+2]);
			
				if (type == DatabaseID.IT_PLANT)
				{
					stock.get(DatabaseID.STOCK_SILO).decreaseProductInStock(_command_id, type, id, num);
				}
				else
				{
					stock.get(DatabaseID.STOCK_BARN).decreaseProductInStock(_command_id, type, id, num);
				}
			}
			
			SET_DB_VALUE_BINARY(KeyID.KEY_MACHINES + _floor, _machine.getData());
			SET_DB_VALUE_BINARY(KeyID.KEY_MACHINES_DURABILITY + _floor, _machine_durability.getData());
			SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToDatabase());
			SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToDatabase());
			
			// update notify status of this machine for myself
			SetNotifyStatus(_user_id, GetNotifyIndex(DatabaseID.NOTIFY_TYPE_MACHINE, _floor), true);
		}
		else
		{
			_return_id = ReturnCode.RESPONSE_ERROR;
		}
		
		base.Delete(_user_id + "_" + KeyID.KEY_MACHINE_LOCK_DATA);
		
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_MACHINES, _machine.getData());
		response.addBinary(KeyID.KEY_MACHINES_DURABILITY, _machine_durability.getData());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToClient());

		try
		{
			_client.WriteZip(response.toByteArray());
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("createProduct", ex);
		}		
	}
	
	private void createProduct_OptimizeDataOut(FBEncrypt encrypt)
	{
		byte _floor = encrypt.getByte(KeyID.KEY_MACHINE_FLOOR);
		short _product_id = encrypt.getShort(KeyID.KEY_PRODUCT_ID);

		if (_floor < 0 || _floor >= userInfo.getTotalFloor())
		{
			LogHelper.Log("createProduct.. invalid machine id.");
			requestError(ReturnCode.RESPONSE_INVALID_MACHINE_ID);
			return;
		}

		if (_product_id < 0)
		{
			LogHelper.Log("createProduct.. invalid product id.");
			requestError(ReturnCode.RESPONSE_INVALID_PRODUCT_ID);
			return;
		}
		

		// lock machine, make sure only one user can repair this machine
		// who & why & when
		StringBuilder lock_info = new StringBuilder(32);
		lock_info.append(_user_id).append('_');
		lock_info.append("createProduct").append('_');
		lock_info.append(Misc.SECONDS());
		
		if (!base.Add(_user_id + "_" + KeyID.KEY_MACHINE_LOCK_DATA, lock_info.toString(), DatabaseID.MACHINE_DATA_LOCK_TIME))
		{
			LogHelper.Log("createProduct.. error: this machine is being locked.");
			requestError(ReturnCode.RESPONSE_MACHINE_DATA_IS_LOCKED);
			return;
		}
		
		Machine _machine = machine.get(_floor);
		MachineDurability _machine_durability = machineDurability.get(_floor);
		
		
		// check if someone had been repaired my machine yet
		if (_machine_durability.getUser() != null && _machine_durability.getDurabilityRepaired() > 0 && _machine_durability.getDurability() < _machine_durability.getDurabilityMax())
		{
			_machine_durability.setDurability(_machine_durability.getDurabilityMax());
			_machine_durability.setUser(null);	// reset repairer

			SET_DB_VALUE_BINARY(KeyID.KEY_MACHINES + _floor, _machine.getData());
			SET_DB_VALUE_BINARY(KeyID.KEY_MACHINES_DURABILITY + _floor, _machine_durability.getData());
			
			// LogHelper.Log("createProduct.. Receive machine's durability: OK!");
		}
		
		
		String[] machine_products = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_MACHINE][_floor][DatabaseID.MACHINE_PRODUCT_ID]).split(":");

		// check product_id exist in products list
		boolean product_available = false;
		for (int i = 0; i < machine_products.length; i++)
		{
			if (_product_id == Short.parseShort(machine_products[i]))
			{
				product_available = true;
				break;
			}
		}
		
		// check condition to create product
		if (_machine.getStatus() != DatabaseID.MACHINE_READY || 
			(_machine_durability.getDurability() <= 0 || _machine_durability.getDurability() > _machine_durability.getDurabilityMax()) ||
			product_available == false ||
			_machine.isFull()
			)
		{
			_return_id = ReturnCode.RESPONSE_ERROR;
			FBEncrypt response = new FBEncrypt();
			response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
			response.addBinary(KeyID.KEY_MACHINES, _machine.getData());
			response.addBinary(KeyID.KEY_MACHINES_DURABILITY, _machine_durability.getData());
			response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToClient());
			response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToClient());

			try
			{
				_client.WriteZip(response.toByteArray());
			} 
			catch (Exception ex) 
			{
				LogHelper.LogException("createProduct", ex);
			}		
			
			return;
		}
		
		boolean can_create = true;
		
		String[] items_need = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_PRODUCT][_product_id][DatabaseID.PRODUCT_ITEMS_TYPE_ID_NUM]).split(":");
		
		if (items_need.length % 3 != 0)
		{
			LogHelper.Log("invalid product need " + items_need.length);
			requestError();
			return;
		}
		
		for (int i = 0; i < items_need.length; i += 3)
		{
			int type = Integer.parseInt(items_need[i]);
			int id = Integer.parseInt(items_need[i+1]);
			int num = Integer.parseInt(items_need[i+2]);
			
			if (type == DatabaseID.IT_PLANT && can_create)
			{
				can_create = stock.get(DatabaseID.STOCK_SILO).checkEnoughProductInStock(type, id, num);
			}
			else
			{
				can_create = stock.get(DatabaseID.STOCK_BARN).checkEnoughProductInStock(type, id, num);
			}
			
			if (can_create == false) break;
		}
		
		// ------------------------------------------------------
		
		if (can_create && _machine.isFull() == false)
		{
			_machine_durability.setDurability(_machine_durability.getDurability() - 1);
			
			_machine.addProduct(_product_id);

			_machine.setActiveTime(_machine.getActiveTime() + _machine.getProductCompleteTime(_product_id));
			
			// update products in stocks
			for (int i = 0; i < items_need.length; i += 3)
			{
				int type = Integer.parseInt(items_need[i]);
				int id = Integer.parseInt(items_need[i+1]);
				int num = Integer.parseInt(items_need[i+2]);

				if (type == DatabaseID.IT_PLANT)
				{
					stock.get(DatabaseID.STOCK_SILO).decreaseProductInStock(_command_id, type, id, num);
				}
				else
				{
					stock.get(DatabaseID.STOCK_BARN).decreaseProductInStock(_command_id, type, id, num);
				}
			}
			
			SET_DB_VALUE_BINARY(KeyID.KEY_MACHINES + _floor, _machine.getData());
			SET_DB_VALUE_BINARY(KeyID.KEY_MACHINES_DURABILITY + _floor, _machine_durability.getData());
			SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToDatabase());
			SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToDatabase());
			
			// update notify status of this machine for myself
			SetNotifyStatus(_user_id, GetNotifyIndex(DatabaseID.NOTIFY_TYPE_MACHINE, _floor), true);
		}
		else
		{
			_return_id = ReturnCode.RESPONSE_ERROR;
		}
		
		base.Delete(_user_id + "_" + KeyID.KEY_MACHINE_LOCK_DATA);
		
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		
		if (_return_id != ReturnCode.RESPONSE_OK)
		{
			response.addBinary(KeyID.KEY_MACHINES, _machine.getData());
			response.addBinary(KeyID.KEY_MACHINES_DURABILITY, _machine_durability.getData());
			response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToClient());
			response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToClient());
		}

		try
		{
			_client.WriteZip(response.toByteArray());
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("createProduct", ex);
		}		
	}
	
	private void completeItemsToProduct(FBEncrypt encrypt)
	{
		byte _floor = encrypt.getByte(KeyID.KEY_MACHINE_FLOOR);
		short _product_id = encrypt.getShort(KeyID.KEY_PRODUCT_ID);

		if (_floor < 0 || _floor >= userInfo.getTotalFloor())
		{
			LogHelper.Log("completeItemsToProduct.. invalid machine id.");
			requestError(ReturnCode.RESPONSE_INVALID_MACHINE_ID);
			return;
		}

		if (_product_id < 0)
		{
			LogHelper.Log("completeItemsToProduct.. invalid product id.");
			requestError(ReturnCode.RESPONSE_INVALID_PRODUCT_ID);
			return;
		}
		
		// lock machine, make sure only one user can repair this machine
		// who & why & when
		StringBuilder lock_info = new StringBuilder(32);
		lock_info.append(_user_id).append('_');
		lock_info.append("completeItems").append('_');
		lock_info.append(Misc.SECONDS());
		
		if (!base.Add(_user_id + "_" + KeyID.KEY_MACHINE_LOCK_DATA, lock_info.toString(), DatabaseID.MACHINE_DATA_LOCK_TIME))
		{
			LogHelper.Log("completeItemsToProduct.. error: this machine is being locked.");
			requestError(ReturnCode.RESPONSE_MACHINE_DATA_IS_LOCKED);
			return;
		}
		
		Machine _machine = machine.get(_floor);
		MachineDurability _machine_durability = machineDurability.get(_floor);
		
		
		// check if someone had been repaired my machine yet
		if (_machine_durability.getUser() != null && _machine_durability.getDurabilityRepaired() > 0 && _machine_durability.getDurability() < _machine_durability.getDurabilityMax())
		{
			_machine_durability.setDurability(_machine_durability.getDurabilityMax());
			_machine_durability.setUser(null);	// reset repairer

			SET_DB_VALUE_BINARY(KeyID.KEY_MACHINES + _floor, _machine.getData());
			SET_DB_VALUE_BINARY(KeyID.KEY_MACHINES_DURABILITY + _floor, _machine_durability.getData());
		}

		
		Stock stock_silo = stock.get(DatabaseID.STOCK_SILO);
		Stock stock_barn = stock.get(DatabaseID.STOCK_BARN);
		
		String[] machine_products = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_MACHINE][_floor][DatabaseID.MACHINE_PRODUCT_ID]).split(":");

		// check product_id exist in products list
		boolean product_available = false;
		for (int i = 0; i < machine_products.length; i++)
		{
			if (_product_id == Short.parseShort(machine_products[i]))
			{
				product_available = true;
				break;
			}
		}
		
		// check condition to create product
		if (_machine.getStatus() != DatabaseID.MACHINE_READY || 
			(_machine_durability.getDurability() <= 0 || _machine_durability.getDurability() > _machine_durability.getDurabilityMax()) ||
			product_available == false ||
			_machine.isFull()
			)
		{
			_return_id = ReturnCode.RESPONSE_ERROR;
			FBEncrypt response = new FBEncrypt();
			response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
			response.addBinary(KeyID.KEY_MACHINES, _machine.getData());
			response.addBinary(KeyID.KEY_MACHINES_DURABILITY, _machine_durability.getData());
			response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
			response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock_silo.getDataToClient());
			response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock_barn.getDataToClient());

			try
			{
				_client.WriteZip(response.toByteArray());
			} 
			catch (Exception ex) 
			{
			}		
			
			base.Delete(_user_id + "_" + KeyID.KEY_MACHINE_LOCK_DATA);
		
			return;
		}
		
		long user_diamond = money_mgr.GetBonusMoney() + money_mgr.GetRealMoney();
		long diamond_need = 0;
		long diamond_used = 0;
		
		String[] items_need = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_PRODUCT][_product_id][DatabaseID.PRODUCT_ITEMS_TYPE_ID_NUM]).split(":");
		
		if (items_need.length % 3 != 0)
		{
			LogHelper.Log("invalid product need " + items_need.length);
			requestError();
		
			boolean process_result = base.Delete(_user_id + "_" + KeyID.KEY_MACHINE_LOCK_DATA);
			LogHelper.Log("completeItemsToProduct.. unlock machine data: " + process_result);
		
			return;
		}
		
		StringBuilder logProduct = new StringBuilder();
		boolean second_product = false;
		
		for (int i = 0; i < items_need.length; i += 3)
		{
			int type = Integer.parseInt(items_need[i]);
			int id = Integer.parseInt(items_need[i+1]);
			int num = Integer.parseInt(items_need[i+2]);
			
			if (type == DatabaseID.IT_PLANT)
			{
				if (stock_silo.checkEnoughProductInStock(type, id, num) == false)
				{
					int plant_stock_num = stock_silo.getProductNum(type, id);
					long plant_diamond_buy = Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_SEED][id][DatabaseID.SEED_DIAMOND_BUY]);
					int real_num = (num - plant_stock_num);
					diamond_need += (plant_diamond_buy * real_num);
					
					if (second_product) logProduct.append(":");

					logProduct.append(type);
					logProduct.append(":");
					logProduct.append(id);
					logProduct.append(":");
					logProduct.append(real_num);
					logProduct.append(":");
					logProduct.append(plant_diamond_buy);
					
					second_product = true;
				}
			}
			else // DatabaseID.IT_PRODUCT, DatabaseID.IT_BUG
			{
				if (stock_barn.checkEnoughProductInStock(type, id, num) == false)
				{
					int product_stock_num = stock_barn.getProductNum(type, id);
					long product_diamond_buy = 0;
					
					if (type == DatabaseID.IT_PRODUCT)
					{
						product_diamond_buy = Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_PRODUCT][id][DatabaseID.PRODUCT_DIAMOND_BUY]);
					}
					else
					{
						product_diamond_buy = Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_PEST][id][DatabaseID.PEST_DIAMOND_BUY]);
					}
					
					int real_num = (num - product_stock_num);
					diamond_need += (product_diamond_buy * real_num);
					
					if (second_product) logProduct.append(":");

					logProduct.append(type);
					logProduct.append(":");
					logProduct.append(id);
					logProduct.append(":");
					logProduct.append(real_num);
					logProduct.append(":");
					logProduct.append(product_diamond_buy);
					
					second_product = true;
				}
			}
		}
		
		// make sure enough params to execute command
		String[] params = logProduct.toString().split(":");
		for (int p = 0; p < params.length; p++)
		{
			if (params[p].equals(""))
			{
				base.Delete(_user_id + "_" + KeyID.KEY_MACHINE_LOCK_DATA);
				requestError(ReturnCode.RESPONSE_INVALID_PRODUCT_ID);
				return;
			}
		}

		if (user_diamond >= diamond_need)
		{
			int type = -1;
			int id = -1;
			int num = -1;
			
			for (int i = 0; i < items_need.length; i += 3)
			{
				type = Integer.parseInt(items_need[i]);
				id = Integer.parseInt(items_need[i+1]);
				num = Integer.parseInt(items_need[i+2]);
				
				if (type == DatabaseID.IT_PLANT)
				{
					int stock_product_num = stock_silo.getProductNum(type, id);
					
					if (stock_product_num < num)
					{
						stock_silo.updateValue(_command_id, type, id, 0);
					}
					else
					{
						stock_silo.updateValue(_command_id, type, id, stock_product_num - num);
					}
				}
				else
				{
					int stock_product_num = stock_barn.getProductNum(type, id);
					
					if (stock_product_num < num)
					{
						stock_barn.updateValue(_command_id, type, id, 0);
					}
					else
					{
						stock_barn.updateValue(_command_id, type, id, stock_product_num - num);
					}
				}
			}
			
			diamond_used = diamond_need;
			
			String[] productsBought = logProduct.toString().split(":");
			for (int i = 0; i < productsBought.length; i += 4)
			{
				int _type = Integer.parseInt(productsBought[i]);
				int _id = Integer.parseInt(productsBought[i+1]);
				int _num = Integer.parseInt(productsBought[i+2]);
				int _price = Integer.parseInt(productsBought[i+3]);
				
				UseMoneyResult result = money_mgr.UseRealMoneyAndBonusMoney((_price * _num),								// log
																			_command_id,									//  2. hanh dong cua gamer
																			userInfo.getName(),								//  3. ten tai khoan
																			userInfo.getLevel(),							//  7. level cua gamer
																			_ip,											//  9. ip login v4 cua gamer
																			_type,											// 10. id cua loai item
																			_id,											// 11. id cua item
																			"00",											// 12. ten item
																			_price,											// 13. gia game coin cua item
																			_num);											// 14. so luong vat pham
																			
				if (result._code != UseMoneyResult.CODE.SUCCESS)
				{
					_return_id = ReturnCode.RESPONSE_CANT_SUBSTRACT_MONEY;
					LogHelper.Log("completeItemsToProduct.. can't substract money [" + _type + "," + _id + "," + _num + "," + _price + "]");
				}
			}
			
			
			_machine_durability.setDurability(_machine_durability.getDurability() - 1);
			
			_machine.addProduct(_product_id);

			_machine.setActiveTime(_machine.getActiveTime() + _machine.getProductCompleteTime(_product_id));
			
			SET_DB_VALUE_BINARY(KeyID.KEY_MACHINES + _floor, _machine.getData());
			SET_DB_VALUE_BINARY(KeyID.KEY_MACHINES_DURABILITY + _floor, _machine_durability.getData());
			SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock_silo.getDataToDatabase());
			SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock_barn.getDataToDatabase());
			
			// update notify status of this machine for myself
			SetNotifyStatus(_user_id, GetNotifyIndex(DatabaseID.NOTIFY_TYPE_MACHINE, _floor), true);
		}
		else
		{
			_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_DIAMOND;
		}

		base.Delete(_user_id + "_" + KeyID.KEY_MACHINE_LOCK_DATA);
		
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_MACHINES, _machine.getData());
		response.addBinary(KeyID.KEY_MACHINES_DURABILITY, _machine_durability.getData());
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		response.addLong(KeyID.KEY_DIAMOND_USED, diamond_used);
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock_silo.getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock_barn.getDataToClient());

		try
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex) 
		{
		}		
	}
	
	private void upgradeProductSlot(FBEncrypt encrypt)
	{
		byte _floor = encrypt.getByte(KeyID.KEY_MACHINE_FLOOR);

		if (_floor < 0 || _floor >= userInfo.getTotalFloor())
		{
			LogHelper.Log("upgradeProductSlot.. invalid machine id.");
			requestError(ReturnCode.RESPONSE_INVALID_MACHINE_ID);
			return;
		}
		
		Machine _machine = machine.get(_floor);
		MachineDurability _machine_durability = machineDurability.get(_floor);
		
		long user_diamond = money_mgr.GetRealMoney() + money_mgr.GetBonusMoney();
		
		long diamond_unlock = Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_MACHINE_UNLOCK_PROD_SLOT][_floor][_machine.getSlotMax()]);
		
		long diamond_used = 0;
		
		if (_machine.isLimit() == false)
		{
			if (user_diamond >= diamond_unlock)
			{
				//log
//				StringBuilder log = new StringBuilder();
//				log.append("CMD_UPGRADE_PRODUCT_SLOT");
//				log.append('\t').append(userInfo.getID());
//				log.append('\t').append(userInfo.getID());
//				log.append('\t').append(userInfo.getName());
//				log.append('\t').append(0);
//				log.append('\t').append(userInfo.getLevel());
//				log.append('\t').append("transaction_id");
//				log.append('\t').append(_ip);
//				log.append('\t').append("");
//				log.append('\t').append("");
//				log.append('\t').append("diamond");
//				log.append('\t').append(diamond_unlock);
//				log.append('\t').append(0);
//				log.append('\t').append(0);
//				log.append('\t').append(money_mgr.GetRealMoney());
//				log.append('\t').append(money_mgr.GetBonusMoney());
				
				diamond_used = diamond_unlock;
				UseMoneyResult umr = money_mgr.UseRealMoneyAndBonusMoney((int)diamond_unlock,	// log
														_command_id, "" + _floor + "_" + (_machine.getSlotMax()+1),	//  2. hanh dong cua gamer
														userInfo.getName(),						//  3. ten tai khoan
														userInfo.getLevel(),					//  7. level cua gamer
														_ip,									//  9. ip login v4 cua gamer
														-1,										// 10. id cua loai item
														_machine.getSlotMax()+1,				// 11. id cua item
														Misc.getMachineName(_floor),			// 12. ten item
														diamond_unlock,							// 13. gia game coin cua item
														1);										// 14. so luong vat pham

				if (umr._code == UseMoneyResult.CODE.SUCCESS)
				{
//					log.append('\t').append(money_mgr.GetRealMoney());
//					log.append('\t').append(money_mgr.GetBonusMoney());
//					log.append('\t').append(_machine.GetID());
//					log.append('\t').append(_machine.getSlotMax());
					
					_machine.increaseSlot();
					
//					log.append('\t').append(_machine.getSlotMax());
					
					SET_DB_VALUE_BINARY(KeyID.KEY_MACHINES + _floor, _machine.getData());
					if (!_use_lazy_sync_user_info) SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
					
					// LogHelper.Log("--------- Upgrade Product Slot: OK!"); 
//					LogHelper.Log(log.toString());
				}
				else
				{
					LogHelper.Log("upgradeProductSlot.. err! can't substract user money");
					_return_id = ReturnCode.RESPONSE_CANT_SUBSTRACT_MONEY;
				}
			}
			else
			{
				LogHelper.Log("upgradeProductSlot.. err! not enough money.");
				_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_DIAMOND;
			}
		}
		else
		{
			LogHelper.Log("upgradeProductSlot.. err! machine is limited");
			_return_id = ReturnCode.RESPONSE_ERROR;
		}

		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_MACHINES, _machine.getData());
		response.addBinary(KeyID.KEY_MACHINES_DURABILITY, _machine_durability.getData());
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addLong(KeyID.KEY_DIAMOND_USED, diamond_used);
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));

		try
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("upgradeProductSlot.. response to client ok");
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("upgradeProductSlot", ex);
		}		
	}
	
	private void productCompleted(FBEncrypt encrypt)
	{
		byte _floor = encrypt.getByte(KeyID.KEY_MACHINE_FLOOR);

		if (_floor < 0 || _floor >= userInfo.getTotalFloor())
		{
			LogHelper.Log("productCompleted.. invalid machine id = " + _floor);
			PrintUserDebugInfo(Thread.currentThread().getStackTrace()[1].getLineNumber());
			requestError(ReturnCode.RESPONSE_INVALID_MACHINE_ID);
			return;
		}
		
		Machine _machine = machine.get(_floor);
		MachineDurability _machine_durability = machineDurability.get(_floor);
		
		if (_machine.slot.size() <= 0)
		{
			LogHelper.Log("productCompleted.. machine is empty.");
			// requestError(ReturnCode.RESPONSE_MACHINE_IS_EMPTY);
			
			requestError_productCompleted(ReturnCode.RESPONSE_MACHINE_IS_EMPTY, _machine, _machine_durability);
			return;
		}
		
		StringBuilder dropList = new StringBuilder(8);
		int product_id = _machine.slot.get(0).getID();
		int product_time = _machine.slot.get(0).getProductTime();

		if (product_time <= Misc.SECONDS())
		{
			_machine.removeFirstSlot();

			_machine.addProductToStock(product_id);

			// check if drops extra item when harvest product
			int drop_item_id = -1;
			
			try
			{
				drop_item_id = GetDropItemAdvance(DropItemInfo, DatabaseID.ACTION_HARVEST_PRODUCT);
			}
			catch (Exception e)
			{
				LogHelper.LogException("productCompleted_OptimizeDataOut", e);
				drop_item_id = -1;
			}
			
			if (drop_item_id > -1)
			{
				int item_type = DatabaseID.IT_MATERIAL;
				int item_id = drop_item_id;
				int item_num = 1;
				
				// handle event mooncake
				if (_use_event_mid_autumn_festival && item_id == DatabaseID.MATERIAL_MOON_CAKE)
				{
					item_type = DatabaseID.IT_EVENT;
					item_id = DatabaseID.ITEM_EVENT_MOON_CAKE;
				}
				
				// handle event 20-11
				if (_use_event_20_11 && item_id == DatabaseID.MATERIAL_ITEM_EVENT_FLOWER_20_11)
				{
					item_type = DatabaseID.IT_EVENT;
					item_id = DatabaseID.ITEM_EVENT_FLOWER_20_11;
				}
				
				// handle event xmas mini
				if (_use_event_xmas_mini && item_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_1)
				{
					item_type = DatabaseID.IT_EVENT;
					item_id = DatabaseID.ITEM_EVENT_XMAS_2014_1;
				}
				
				// handle event xmas tree
				if (_use_event_xmas_tree && item_id == DatabaseID.MATERIAL_ITEM_CANDLE)
				{
					item_type = DatabaseID.IT_EVENT;
					item_id = DatabaseID.ITEM_EVENT_CANDLE;
				}
				
				if (_use_event_new_year_2015 && item_id == DatabaseID.MATERIAL_ITEM_BANH_CHUNG)
				{
					item_type = DatabaseID.IT_EVENT;
					item_id = DatabaseID.ITEM_EVENT_BANH_CHUNG;
				}
				
				if (_use_event_8_3_2015 && item_id == DatabaseID.MATERIAL_ITEM_GLASS_ROSE)
				{
					item_type = DatabaseID.IT_EVENT;
					item_id = DatabaseID.ITEM_EVENT_GLASS_ROSE;
				}
				
				// handle event halloween
				if (_use_event_halloween && (item_id == DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_1 || item_id == DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_2 || item_id == DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_3))
				{
					item_type = DatabaseID.IT_EVENT;
					switch (item_id)
					{
						case DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_1:
							item_id = DatabaseID.ITEM_EVENT_HALLOWEEN_1;
							break;
						case DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_2:
							item_id = DatabaseID.ITEM_EVENT_HALLOWEEN_2;
							break;
						case DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_3:
							item_id = DatabaseID.ITEM_EVENT_HALLOWEEN_3;
							break;
					}
				}
				else if (_use_event_xmas_2014 && (item_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_1 || item_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_2 || item_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_3))
				{
					item_type = DatabaseID.IT_EVENT;
					switch (item_id)
					{
						case DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_1:
							item_id = DatabaseID.ITEM_EVENT_XMAS_2014_1;
							break;
						case DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_2:
							item_id = DatabaseID.ITEM_EVENT_XMAS_2014_2;
							break;
						case DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_3:
							item_id = DatabaseID.ITEM_EVENT_XMAS_2014_3;
							break;
					}
				}
				
				dropList.append(item_type);
				dropList.append(":").append(item_id);
				dropList.append(":").append(item_num);
				
				_machine.addDropItem(dropList.toString());
			}
			
			SET_DB_VALUE_BINARY(KeyID.KEY_MACHINES + _floor, _machine.getData());
		}
		else
		{
			LogHelper.Log("--------- Product complete: Failed!");
			LogHelper.Log("Product didn't completed yet!");
			_return_id = ReturnCode.RESPONSE_PRODUCT_NOT_COMPLETE;
		}
		
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_MACHINES, _machine.getData());
		response.addBinary(KeyID.KEY_MACHINES_DURABILITY, _machine_durability.getData());
		
		if ((_use_event_halloween || _use_event_xmas_2014) && _use_stock_event)
		{
			response.addBinary(KeyID.KEY_STOCK_EVENT, stock_event.getDataToClient());
		}
		
		try
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("productCompleted.. response to client OK.");
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("productCompleted", ex);
		}		
	}
	
	private void productCompleted_OptimizeDataOut(FBEncrypt encrypt)
	{
		if (userInfo == null)
		{
			return;
		}
		
		byte _floor = encrypt.getByte(KeyID.KEY_MACHINE_FLOOR);

		if (_floor < 0 || _floor >= userInfo.getTotalFloor())
		{
			LogHelper.Log("productCompleted.. invalid machine id = " + _floor);
			PrintUserDebugInfo(Thread.currentThread().getStackTrace()[1].getLineNumber());
			requestError(ReturnCode.RESPONSE_INVALID_MACHINE_ID);
			return;
		}
		
		Machine _machine = machine.get(_floor);
		MachineDurability _machine_durability = machineDurability.get(_floor);
		
		if (_machine.slot.size() <= 0)
		{
			LogHelper.Log("productCompleted_OptimizeDataOut.. machine is empty.");
			// requestError(ReturnCode.RESPONSE_MACHINE_IS_EMPTY);
			
			requestError_productCompleted(ReturnCode.RESPONSE_MACHINE_IS_EMPTY, _machine, _machine_durability);
			return;
		}
		
		StringBuilder dropList = new StringBuilder(8);
		
		int product_id = _machine.slot.get(0).getID();
		int product_time = _machine.slot.get(0).getProductTime();

		if (product_time <= Misc.SECONDS())
		{
			_machine.removeFirstSlot();

			_machine.addProductToStock(product_id);

			// check if drops extra item when harvest product
			int drop_item_id = -1;
			
			try
			{
				drop_item_id = GetDropItemAdvance(DropItemInfo, DatabaseID.ACTION_HARVEST_PRODUCT);
			}
			catch (Exception e)
			{
				LogHelper.LogException("productCompleted_OptimizeDataOut", e);
				drop_item_id = -1;
			}
			
			if (drop_item_id > -1)
			{
				int item_type = DatabaseID.IT_MATERIAL;
				int item_id = drop_item_id;
				int item_num = 1;
				
				// handle event
				if (_use_event_mid_autumn_festival && item_id == DatabaseID.MATERIAL_MOON_CAKE)
				{
					item_type = DatabaseID.IT_EVENT;
					item_id = DatabaseID.ITEM_EVENT_MOON_CAKE;
				}
				
				// handle event 20-11
				if (_use_event_20_11 && item_id == DatabaseID.MATERIAL_ITEM_EVENT_FLOWER_20_11)
				{
					item_type = DatabaseID.IT_EVENT;
					item_id = DatabaseID.ITEM_EVENT_FLOWER_20_11;
				}
				
				// handle event xmas mini
				if (_use_event_xmas_mini && item_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_1)
				{
					item_type = DatabaseID.IT_EVENT;
					item_id = DatabaseID.ITEM_EVENT_XMAS_2014_1;
				}
				
				// handle event xmas tree
				if (_use_event_xmas_tree && item_id == DatabaseID.MATERIAL_ITEM_CANDLE)
				{
					item_type = DatabaseID.IT_EVENT;
					item_id = DatabaseID.ITEM_EVENT_CANDLE;
				}

				if (_use_event_new_year_2015 && item_id == DatabaseID.MATERIAL_ITEM_BANH_CHUNG)
				{
					item_type = DatabaseID.IT_EVENT;
					item_id = DatabaseID.ITEM_EVENT_BANH_CHUNG;
				}
				
				if (_use_event_8_3_2015 && item_id == DatabaseID.MATERIAL_ITEM_GLASS_ROSE)
				{
					item_type = DatabaseID.IT_EVENT;
					item_id = DatabaseID.ITEM_EVENT_GLASS_ROSE;
				}
				
				// handle event halloween
				if (_use_event_halloween && (item_id == DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_1 || item_id == DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_2 || item_id == DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_3))
				{
					item_type = DatabaseID.IT_EVENT;
					switch (item_id)
					{
						case DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_1:
							item_id = DatabaseID.ITEM_EVENT_HALLOWEEN_1;
							break;
						case DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_2:
							item_id = DatabaseID.ITEM_EVENT_HALLOWEEN_2;
							break;
						case DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_3:
							item_id = DatabaseID.ITEM_EVENT_HALLOWEEN_3;
							break;
					}
				}
				else if (_use_event_xmas_2014 && (item_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_1 || item_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_2 || item_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_3))
				{
					item_type = DatabaseID.IT_EVENT;
					switch (item_id)
					{
						case DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_1:
							item_id = DatabaseID.ITEM_EVENT_XMAS_2014_1;
							break;
						case DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_2:
							item_id = DatabaseID.ITEM_EVENT_XMAS_2014_2;
							break;
						case DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_3:
							item_id = DatabaseID.ITEM_EVENT_XMAS_2014_3;
							break;
					}
				}
				
				dropList.append(item_type);
				dropList.append(":").append(item_id);
				dropList.append(":").append(item_num);
				
				_machine.addDropItem(dropList.toString());
				LogHelper.Log("drop list: " + dropList.toString());
			}
			
			SET_DB_VALUE_BINARY(KeyID.KEY_MACHINES + _floor, _machine.getData());
		}
		else
		{
			LogHelper.Log("--------- Product complete: Failed!");
			LogHelper.Log("Product didn't completed yet!");
			_return_id = ReturnCode.RESPONSE_PRODUCT_NOT_COMPLETE;
		}
		
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_MACHINES, _machine.getData());
		response.addBinary(KeyID.KEY_MACHINES_DURABILITY, _machine_durability.getData());
		if (_use_event_mid_autumn_festival || _use_event_20_11 || _use_event_xmas_mini)
		{
			response.addString(GetEventKeyName(), GetEventItems());
		}
		
		if ((_use_event_halloween || _use_event_xmas_2014 || _use_event_xmas_tree || _use_event_new_year_2015 || _use_event_8_3_2015) && _use_stock_event)
		{
			response.addBinary(KeyID.KEY_STOCK_EVENT, stock_event.getDataToClient());
			response.addString(GetEventKeyName(), GetEventItems());
		}

		try
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("productCompleted.. response to client OK.");
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("productCompleted", ex);
		}		
	}
	
	private void requestError_productCompleted(int error_code, Machine _machine, MachineDurability _machine_durability)
	{
		_return_id = error_code;
			
		// response to client
		FBEncrypt reponse = new FBEncrypt();
		reponse.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		reponse.addBinary(KeyID.KEY_MACHINES, _machine.getData());
		reponse.addBinary(KeyID.KEY_MACHINES_DURABILITY, _machine_durability.getData());

		try
		{
			_client.WriteZip(reponse.toByteArray());
			LogHelper.Log("requestError_productCompleted.. Server returned ERROR code to client: " + _return_id + " *****");
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("requestError_productCompleted", ex);
		}
	}
	
	private void productSkipTime(FBEncrypt encrypt)
	{
		byte _floor = encrypt.getByte(KeyID.KEY_MACHINE_FLOOR);
		
		if (_floor < 0 || _floor >= userInfo.getTotalFloor())
		{
			LogHelper.Log("productCompleted.. invalid machine id.");
			requestError(ReturnCode.RESPONSE_INVALID_MACHINE_ID);
			return;
		}

		Machine _machine = machine.get(_floor);
		MachineDurability _machine_durability = machineDurability.get(_floor);
		
		if (_machine.slot.size() <= 0)
		{
			LogHelper.Log("productCompleted.. machine is empty.");
			requestError(ReturnCode.RESPONSE_MACHINE_IS_EMPTY);
			return;
		}

		if (_machine.getSlotCur() == 0)
		{
			LogHelper.Log("--------- Product skip time: Failed!"); 
			requestError();
			return;
		}

		StringBuilder dropList = new StringBuilder(8);
		int product_id = _machine.slot.get(0).getID();
		int product_time = _machine.slot.get(0).getProductTime();

		long diamond_skip_time = Misc.getDiamondEstimate(DatabaseID.DIAMOND_SKIP_TIME_PRODUCT, product_time);
		long diamond_used = 0;
		long user_diamond = money_mgr.GetBonusMoney() + money_mgr.GetRealMoney();

		if (user_diamond >= diamond_skip_time)
		{
			diamond_used = diamond_skip_time;
			money_mgr.UseRealMoneyAndBonusMoney((int)diamond_skip_time,										// log
													CommandID.CMD_PRODUCT_SKIP_TIME_OPTIMIZE_DATA_OUT, "" + _floor,								//  2. hanh dong cua gamer
													userInfo.getName(),										//  3. ten tai khoan
													userInfo.getLevel(),									//  7. level cua gamer
													_ip,													//  9. ip login v4 cua gamer
													-1,														// 10. id cua loai item
													_floor,													// 11. id cua item
													Misc.GetItemName(DatabaseID.IT_PRODUCT, product_id),	// 12. ten item
													diamond_skip_time,										// 13. gia game coin cua item
													1);														// 14. so luong vat pham			

			int prod_time = _machine.getFirstSlotTime() - Misc.SECONDS();

			_machine.removeFirstSlot();

			_machine.updateProductListTime(prod_time);

			_machine.addProductToStock(product_id);

			// check if drops extra item when harvest product
			int drop_item_id = -1;
			
			try
			{
				drop_item_id = GetDropItemAdvance(DropItemInfo, DatabaseID.ACTION_HARVEST_PRODUCT);
			}
			catch (Exception e)
			{
				LogHelper.LogException("productCompleted_OptimizeDataOut", e);
				drop_item_id = -1;
			}
			
			if (drop_item_id > -1)
			{
				int item_type = DatabaseID.IT_MATERIAL;
				int item_id = drop_item_id;
				int item_num = 1;
				
				// handle event
				if (_use_event_mid_autumn_festival && item_id == DatabaseID.MATERIAL_MOON_CAKE)
				{
					item_type = DatabaseID.IT_EVENT;
					item_id = DatabaseID.ITEM_EVENT_MOON_CAKE;
//					SetEventScore(KeyID.KEY_EVENT_MID_AUTUMN_FESTIVAL, 1);
				}
				
				// handle event 20-11
				if (_use_event_20_11 && item_id == DatabaseID.MATERIAL_ITEM_EVENT_FLOWER_20_11)
				{
					item_type = DatabaseID.IT_EVENT;
					item_id = DatabaseID.ITEM_EVENT_FLOWER_20_11;
//					SetEventScore(KeyID.KEY_EVENT_20_11, 1);
				}
				
				// handle event xmas mini
				if (_use_event_xmas_mini && item_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_1)
				{
					item_type = DatabaseID.IT_EVENT;
					item_id = DatabaseID.ITEM_EVENT_XMAS_2014_1;
//					SetEventScore(KeyID.KEY_EVENT_XMAS_MINI, 1);
				}
				
				// handle event xmas tree
				if (_use_event_xmas_tree && item_id == DatabaseID.MATERIAL_ITEM_CANDLE)
				{
					item_type = DatabaseID.IT_EVENT;
					item_id = DatabaseID.ITEM_EVENT_CANDLE;
//					stock_event.add(item_type, item_id, 1, _command_id);
//					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
//					_event_item_num = 1;
				}
				
				// handle event drop 3
				if (_use_event_halloween && (item_id == DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_1 || item_id == DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_2 || item_id == DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_3))
				{
					item_type = DatabaseID.IT_EVENT;
					switch (item_id)
					{
						case DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_1:
							item_id = DatabaseID.ITEM_EVENT_HALLOWEEN_1;
							break;
						case DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_2:
							item_id = DatabaseID.ITEM_EVENT_HALLOWEEN_2;
							break;
						case DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_3:
							item_id = DatabaseID.ITEM_EVENT_HALLOWEEN_3;
							break;
					}
				}
				else if (_use_event_xmas_2014 && (item_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_1 || item_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_2 || item_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_3))
				{
					item_type = DatabaseID.IT_EVENT;
					switch (item_id)
					{
						case DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_1:
							item_id = DatabaseID.ITEM_EVENT_XMAS_2014_1;
							break;
						case DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_2:
							item_id = DatabaseID.ITEM_EVENT_XMAS_2014_2;
							break;
						case DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_3:
							item_id = DatabaseID.ITEM_EVENT_XMAS_2014_3;
							break;
					}
				}
				
				dropList.append(item_type);
				dropList.append(":").append(item_id);
				dropList.append(":").append(item_num);
				
				_machine.addDropItem(dropList.toString());
				
			}
			
			SET_DB_VALUE_BINARY(KeyID.KEY_MACHINES + _floor, _machine.getData());
			if (!_use_lazy_sync_user_info) SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));

			// LogHelper.Log("--------- Product skip time: OK!");
		}
		else
		{
			LogHelper.Log("--------- Product skip time: Failed!");
			_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_DIAMOND;
			// requestError();
			// return;
		}
		
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_MACHINES, _machine.getData());
		response.addBinary(KeyID.KEY_MACHINES_DURABILITY, _machine_durability.getData());
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addLong(KeyID.KEY_DIAMOND_USED, diamond_used);
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		if (_use_event_mid_autumn_festival || _use_event_20_11 || _use_event_xmas_mini)
		{
			response.addString(GetEventKeyName(), GetEventItems());
		}
		
		if ((_use_event_halloween || _use_event_xmas_2014 || _use_event_xmas_tree || _use_event_new_year_2015 || _use_event_8_3_2015) && _use_stock_event)
		{
			response.addBinary(KeyID.KEY_STOCK_EVENT, stock_event.getDataToClient());
			response.addString(GetEventKeyName(), GetEventItems());
		}

		try
		{
			_client.WriteZip(response.toByteArray());
//			LogHelper.Log("productSkipTime.. Response to client OK");
		}
		catch (Exception ex) 
		{
			ex.printStackTrace();
		}
	}
	
	private void productSkipTime_OptimizeDataOut(FBEncrypt encrypt)
	{
		byte _floor = encrypt.getByte(KeyID.KEY_MACHINE_FLOOR);
		
		if (_floor < 0 || _floor >= userInfo.getTotalFloor())
		{
			LogHelper.Log("productSkipTime_OptimizeDataOut.. invalid machine id.");
			requestError(ReturnCode.RESPONSE_INVALID_MACHINE_ID);
			return;
		}

		Machine _machine = machine.get(_floor);
		MachineDurability _machine_durability = machineDurability.get(_floor);
		
		if (_machine.slot.size() <= 0)
		{
			LogHelper.Log("productSkipTime_OptimizeDataOut.. machine is empty.");
			requestError(ReturnCode.RESPONSE_MACHINE_IS_EMPTY);
			return;
		}

		if (_machine.getSlotCur() == 0)
		{
			LogHelper.Log("--------- Product skip time: Failed!"); 
			requestError();
			return;
		}

		StringBuilder dropList = new StringBuilder(8);
		int product_id = _machine.slot.get(0).getID();
		int product_time = _machine.slot.get(0).getProductTime();

		long diamond_skip_time = Misc.getDiamondEstimate(DatabaseID.DIAMOND_SKIP_TIME_PRODUCT, product_time);
		long diamond_used = 0;
		long user_diamond = money_mgr.GetBonusMoney() + money_mgr.GetRealMoney();

		if (user_diamond >= diamond_skip_time)
		{
			diamond_used = diamond_skip_time;
			money_mgr.UseRealMoneyAndBonusMoney((int)diamond_skip_time,										// log
													_command_id, "" + _floor,								//  2. hanh dong cua gamer
													userInfo.getName(),										//  3. ten tai khoan
													userInfo.getLevel(),									//  7. level cua gamer
													_ip,													//  9. ip login v4 cua gamer
													-1,														// 10. id cua loai item
													_floor,													// 11. id cua item
													Misc.GetItemName(DatabaseID.IT_PRODUCT, product_id),	// 12. ten item
													diamond_skip_time,										// 13. gia game coin cua item
													1);														// 14. so luong vat pham			

			int prod_time = _machine.getFirstSlotTime() - Misc.SECONDS();

			_machine.removeFirstSlot();

			_machine.updateProductListTime(prod_time);

			_machine.addProductToStock(product_id);
			

			// check if drops extra item when harvest product
			int drop_item_id = -1;
			
			try
			{
				drop_item_id = GetDropItemAdvance(DropItemInfo, DatabaseID.ACTION_HARVEST_PRODUCT);
			}
			catch (Exception e)
			{
				LogHelper.LogException("productCompleted_OptimizeDataOut", e);
				drop_item_id = -1;
			}
			
			if (drop_item_id > -1)
			{
				int item_type = DatabaseID.IT_MATERIAL;
				int item_id = drop_item_id;
				int item_num = 1;
				
				// handle event
				if (_use_event_mid_autumn_festival && item_id == DatabaseID.MATERIAL_MOON_CAKE)
				{
					item_type = DatabaseID.IT_EVENT;
					item_id = DatabaseID.ITEM_EVENT_MOON_CAKE;
				}
				
				// handle event
				if (_use_event_20_11 && item_id == DatabaseID.MATERIAL_ITEM_EVENT_FLOWER_20_11)
				{
					item_type = DatabaseID.IT_EVENT;
					item_id = DatabaseID.ITEM_EVENT_FLOWER_20_11;;
				}
				
				// handle event xmas mini
				if (_use_event_xmas_mini && item_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_1)
				{
					item_type = DatabaseID.IT_EVENT;
					item_id = DatabaseID.ITEM_EVENT_XMAS_2014_1;
				}
				
				// handle event xmas tree
				if (_use_event_xmas_tree && item_id == DatabaseID.MATERIAL_ITEM_CANDLE)
				{
					item_type = DatabaseID.IT_EVENT;
					item_id = DatabaseID.ITEM_EVENT_CANDLE;;
				}
				
				if (_use_event_new_year_2015 && item_id == DatabaseID.MATERIAL_ITEM_BANH_CHUNG)
				{
					item_type = DatabaseID.IT_EVENT;
					item_id = DatabaseID.ITEM_EVENT_BANH_CHUNG;
				}
				
				if (_use_event_8_3_2015 && item_id == DatabaseID.MATERIAL_ITEM_GLASS_ROSE)
				{
					item_type = DatabaseID.IT_EVENT;
					item_id = DatabaseID.ITEM_EVENT_GLASS_ROSE;
				}
				
				// handle event halloween
				if (_use_event_halloween && (item_id == DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_1 || item_id == DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_2 || item_id == DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_3))
				{
					item_type = DatabaseID.IT_EVENT;
					switch (item_id)
					{
						case DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_1:
							item_id = DatabaseID.ITEM_EVENT_HALLOWEEN_1;
							break;
						case DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_2:
							item_id = DatabaseID.ITEM_EVENT_HALLOWEEN_2;
							break;
						case DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_3:
							item_id = DatabaseID.ITEM_EVENT_HALLOWEEN_3;
							break;
					}
				}
				else if (_use_event_xmas_2014 && (item_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_1 || item_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_2 || item_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_3))
				{
					item_type = DatabaseID.IT_EVENT;
					switch (item_id)
					{
						case DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_1:
							item_id = DatabaseID.ITEM_EVENT_XMAS_2014_1;
							break;
						case DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_2:
							item_id = DatabaseID.ITEM_EVENT_XMAS_2014_2;
							break;
						case DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_3:
							item_id = DatabaseID.ITEM_EVENT_XMAS_2014_3;
							break;
					}
				}
				
				dropList.append(item_type);
				dropList.append(":").append(item_id);
				dropList.append(":").append(item_num);
				
				_machine.addDropItem(dropList.toString());
			}
			

			SET_DB_VALUE_BINARY(KeyID.KEY_MACHINES + _floor, _machine.getData());
			if (!_use_lazy_sync_user_info) SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));

			// LogHelper.Log("--------- Product skip time: OK!");
		}
		else
		{
			LogHelper.Log("--------- Product skip time: Failed!");
			_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_DIAMOND;
			// requestError();
			// return;
		}
		
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_MACHINES, _machine.getData());
		response.addBinary(KeyID.KEY_MACHINES_DURABILITY, _machine_durability.getData());
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addLong(KeyID.KEY_DIAMOND_USED, diamond_used);
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		
		if ((_use_event_halloween || _use_event_xmas_2014 || _use_event_xmas_tree || _use_event_new_year_2015 || _use_event_8_3_2015) && _use_stock_event)
		{
			response.addBinary(KeyID.KEY_STOCK_EVENT, stock_event.getDataToClient());
		}

		try
		{
			_client.WriteZip(response.toByteArray());
//			LogHelper.Log("productSkipTime.. Response to client OK");
		}
		catch (Exception ex) 
		{
			ex.printStackTrace();
		}
	}
		
	private void moveMachineProduct(FBEncrypt encrypt)
	{
		byte _floor = encrypt.getByte(KeyID.KEY_MACHINE_FLOOR);

		if (_floor < 0 || _floor >= userInfo.getTotalFloor())
		{
			LogHelper.Log("moveMachineProduct.. invalid machine id.");
			requestError(ReturnCode.RESPONSE_INVALID_MACHINE_ID);
			return;
		}
		
		Machine _machine = machine.get(_floor);
		MachineDurability _machine_durability = machineDurability.get(_floor);
		
		long product_exp = -1;
		long exp_used = 0;
		
		StringBuilder dropList = new StringBuilder(8);
		int acm_index = -1;
		if (stock.get(DatabaseID.STOCK_BARN).isFull() == false)
		{
			product_exp = _machine.getFirstProductExpInstock();
			if (product_exp < 0)
			{
				LogHelper.Log("moveMachineProduct.. can not get product exp.");
				requestError();
				return;
			}
			
			int _product_id = _machine.getFirstProductIDInstock();
			
			if (_machine.removeFirstProductInStock() == true && _product_id > -1)
			{
				stock.get(DatabaseID.STOCK_BARN).increaseObject(_command_id, DatabaseID.IT_PRODUCT, _product_id, SkyGarden._server_id);
				
				int item_drop_id = _machine.removeFirstDropItem();
				if (item_drop_id > -1 && stock.get(DatabaseID.STOCK_WAREHOUSE).isFull() == false)
				{
					stock.get(DatabaseID.STOCK_WAREHOUSE).increaseObject(_command_id, DatabaseID.IT_MATERIAL, item_drop_id, SkyGarden._server_id);
				}
				
				exp_used = product_exp;
				userInfo.setExp(userInfo.getExp() + product_exp);
				
				checkLevelUp();
				if (!_use_lazy_sync_user_info) SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
				
				SET_DB_VALUE_BINARY(KeyID.KEY_MACHINES + _floor, _machine.getData());
				SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToDatabase());
				
				// DONT USE DROP ITEM IN NEW FEATURE BUT STILL RETURN TO CLIENT
				// check if drops extra item when harvest product
				int drop_item_id = -1;
				
				try
				{
					drop_item_id = GetDropItemAdvance(DropItemInfo, DatabaseID.ACTION_HARVEST_PRODUCT);
				}
				catch (Exception e)
				{
					LogHelper.LogException("moveMachineProduct", e);
					drop_item_id = -1;
				}
				
				if (drop_item_id > -1)
				{
					int item_type = DatabaseID.IT_MATERIAL;
					int item_id = drop_item_id;
					int item_num = 1;
					boolean addstock = false;
					boolean result = false;
					
					// handle event
					if (_use_event_mid_autumn_festival && item_id == DatabaseID.MATERIAL_MOON_CAKE)
					{
						item_type = DatabaseID.IT_EVENT;
						item_id = DatabaseID.ITEM_EVENT_MOON_CAKE;
						SetEventScore(KeyID.KEY_EVENT_MID_AUTUMN_FESTIVAL, 1);
					}
					
					// handle event
					if (_use_event_20_11 && item_id == DatabaseID.MATERIAL_ITEM_EVENT_FLOWER_20_11)
					{
						item_type = DatabaseID.IT_EVENT;
						item_id = DatabaseID.ITEM_EVENT_FLOWER_20_11;
						SetEventScore(KeyID.KEY_EVENT_20_11, 1);
					}
					
					// handle event xmas mini
					if (_use_event_xmas_mini && item_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_1)
					{
						item_type = DatabaseID.IT_EVENT;
						item_id = DatabaseID.ITEM_EVENT_XMAS_2014_1;
						SetEventScore(KeyID.KEY_EVENT_XMAS_MINI, 1);
					}
					
					// handle event xmas tree
					if (_use_event_xmas_tree && item_id == DatabaseID.MATERIAL_ITEM_CANDLE)
					{
						item_type = DatabaseID.IT_EVENT;
						item_id = DatabaseID.ITEM_EVENT_CANDLE;
					}
					
					if (_use_event_new_year_2015 && item_id == DatabaseID.MATERIAL_ITEM_BANH_CHUNG)
					{
						item_type = DatabaseID.IT_EVENT;
						item_id = DatabaseID.ITEM_EVENT_BANH_CHUNG;
					}
					
					if (_use_event_8_3_2015 && item_id == DatabaseID.MATERIAL_ITEM_GLASS_ROSE)
					{
						item_type = DatabaseID.IT_EVENT;
						item_id = DatabaseID.ITEM_EVENT_GLASS_ROSE;
					}
					
					// handle event halloween
					if (_use_event_halloween && (item_id == DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_1 || item_id == DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_2 || item_id == DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_3))
					{
						item_type = DatabaseID.IT_EVENT;
						switch (item_id)
						{
							case DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_1:
								item_id = DatabaseID.ITEM_EVENT_HALLOWEEN_1;
								break;
							case DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_2:
								item_id = DatabaseID.ITEM_EVENT_HALLOWEEN_2;
								break;
							case DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_3:
								item_id = DatabaseID.ITEM_EVENT_HALLOWEEN_3;
								break;
						}
						stock_event.addGift(item_type, item_id, item_num, _command_id);
						SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
					}
					else if (_use_event_xmas_2014 && (item_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_1 || item_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_2 || item_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_3))
					{
						item_type = DatabaseID.IT_EVENT;
						switch (item_id)
						{
							case DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_1:
								item_id = DatabaseID.ITEM_EVENT_XMAS_2014_1;
								break;
							case DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_2:
								item_id = DatabaseID.ITEM_EVENT_XMAS_2014_2;
								break;
							case DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_3:
								item_id = DatabaseID.ITEM_EVENT_XMAS_2014_3;
								break;
						}
						stock_event.addGift(item_type, item_id, item_num, _command_id);
						SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
					}
					
					if (!GetStock(DatabaseID.STOCK_WAREHOUSE).isFull() && item_type != DatabaseID.IT_EVENT/* && item_id == DatabaseID.MATERIAL_MOON_CAKE*/)
					{
						result = GetStock(DatabaseID.STOCK_WAREHOUSE).add(item_type, item_id, item_num, _command_id);
						addstock = true;
					}
					
					if (addstock == true && result == false)
					{
						requestError(ReturnCode.RESPONSE_STOCK_ADD_ITEM_FAILED);
						return;
					}
					
					dropList.append(_floor);
					dropList.append(":").append(item_type);
					dropList.append(":").append(item_id);
					dropList.append(":").append(item_num);
					dropList.append(":").append(addstock == true ? "1" : "0");
					
					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToDatabase());
					
					GetRankingTarget().Increase(CommandID.CMD_MOVE_MACHINE_PRODUCT, _floor, 1);
					SET_DB_VALUE_BINARY(KeyID.KEY_USER_RANKING_TARGET, GetRankingTarget().GetData());
					
					if (_use_achievement)
					{
						acm_index = GetAchievementManager().Increase(CommandID.CMD_MOVE_MACHINE_PRODUCT, _floor, 1);
					}
				}
				else
				{
//					LogHelper.Log("productCompleted.. invalid drop item " + drop_item_id);
				}
			}
			else
			{
				LogHelper.Log("--------- moveMachineProduct: Failed!"); 
				_return_id = ReturnCode.RESPONSE_STOCK_IS_FULL;
			}
		}
		else
		{
			LogHelper.Log("--------- moveMachineProduct: Failed!"); 
			LogHelper.Log("--------- stock barn is FULL!"); 
			_return_id = ReturnCode.RESPONSE_STOCK_IS_FULL;
		}
		
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_MACHINES, _machine.getData());
		response.addBinary(KeyID.KEY_MACHINES_DURABILITY, _machine_durability.getData());
		response.addLong(KeyID.KEY_PRODUCT_EXP, product_exp < 0 ? 0 : product_exp);
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToClient());
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addLong(KeyID.KEY_EXP_USED, exp_used);
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));

		if (dropList.length() > 0)
		{
			response.addStringANSI(KeyID.KEY_DROP_BONUS_ITEM, dropList.toString());
			response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
		}

		if (user_level_up) checkAndUnlockItems();
		
		if (_use_achievement && acm_index != -1)
		{
			response.addInt(KeyID.KEY_ACHIEVEMENT_ID, acm_index);
			response.addBinary(KeyID.KEY_ACHIEVEMENT_INDEX + acm_index, GetAchievementManager().GetAchievement(acm_index).getData());
		}
		
		if ((_use_event_halloween || _use_event_xmas_2014 || _use_event_xmas_tree || _use_event_new_year_2015 || _use_event_8_3_2015) && _use_stock_event)
		{
			response.addBinary(KeyID.KEY_STOCK_EVENT, stock_event.getDataToClient());
		}
		
		try
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("moveMachineProduct", ex);
		}
	}
	
	private void moveMachineProduct_OptimizeDataOut(FBEncrypt encrypt)
	{
		byte _floor = encrypt.getByte(KeyID.KEY_MACHINE_FLOOR);

		if (_floor < 0 || _floor >= userInfo.getTotalFloor())
		{
			LogHelper.Log("moveMachineProduct.. invalid machine id.");
			requestError(ReturnCode.RESPONSE_INVALID_MACHINE_ID);
			return;
		}
		
		Machine _machine = machine.get(_floor);
		MachineDurability _machine_durability = machineDurability.get(_floor);
		
		long product_exp = -1;
		long exp_used = 0;
		int acm_index = -1;
		if (stock.get(DatabaseID.STOCK_BARN).isFull() == false)
		{
			product_exp = _machine.getFirstProductExpInstock();
			if (product_exp < 0)
			{
				LogHelper.Log("moveMachineProduct.. can not get product exp.");
				requestError();
				return;
			}
			
			int _product_id = _machine.getFirstProductIDInstock();
//			LogHelper.Log("###DEBUG: _product_id := " + _product_id);
			
			if (_machine.removeFirstProductInStock() == true && _product_id > -1)
			{
				stock.get(DatabaseID.STOCK_BARN).increaseObject(_command_id, DatabaseID.IT_PRODUCT, _product_id, SkyGarden._server_id);

				String item_drop = _machine.GetFirstDropItem();
				if (item_drop.length() > 0)
				{
					int item_drop_type = Integer.parseInt(item_drop.split(":")[0]);
					int item_drop_id = Integer.parseInt(item_drop.split(":")[1]);
					
					if (item_drop_type == DatabaseID.IT_EVENT)
					{
						if (_use_event_halloween && (item_drop_id == DatabaseID.ITEM_EVENT_HALLOWEEN_1 || item_drop_id == DatabaseID.ITEM_EVENT_HALLOWEEN_2 || item_drop_id == DatabaseID.ITEM_EVENT_HALLOWEEN_3))
						{
							LogHelper.LogHappy("Add item halloween: " + item_drop_type + ":" + item_drop_id);
							stock_event.addGift(item_drop_type, item_drop_id, 1, _command_id);
							SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
						}
						else if (_use_event_xmas_2014 && (item_drop_id == DatabaseID.ITEM_EVENT_XMAS_2014_1 || item_drop_id == DatabaseID.ITEM_EVENT_XMAS_2014_2 || item_drop_id == DatabaseID.ITEM_EVENT_XMAS_2014_3))
						{
							LogHelper.LogHappy("Add item xmas 2014: " + item_drop_type + ":" + item_drop_id);
							stock_event.addGift(item_drop_type, item_drop_id, 1, _command_id);
							SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
						}
						else if (_use_event_xmas_tree && (item_drop_id == DatabaseID.ITEM_EVENT_CANDLE))
						{
							LogHelper.LogHappy("Add item xmas tree 2014: " + item_drop_type + ":" + item_drop_id);
							stock_event.add(item_drop_type, item_drop_id, 1, _command_id);
							SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
							_event_item_num = 1;
						}
						else if (_use_event_new_year_2015 && (item_drop_id == DatabaseID.ITEM_EVENT_BANH_CHUNG))
						{
							LogHelper.LogHappy("Add item new year 2015: " + item_drop_type + ":" + item_drop_id);
							stock_event.add(item_drop_type, item_drop_id, 1, _command_id);
							SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
							_event_item_num = 1;
						}
						else if (_use_event_8_3_2015 && (item_drop_id == DatabaseID.MATERIAL_ITEM_GLASS_ROSE))
						{
							LogHelper.LogHappy("Add item 8/3 2015: " + item_drop_type + ":" + item_drop_id);
							stock_event.add(item_drop_type, item_drop_id, 1, _command_id);
							SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
							_event_item_num = 1;
						}
						else if (_use_event_xmas_mini && item_drop_id == DatabaseID.ITEM_EVENT_XMAS_2014_1)
						{
							LogHelper.LogHappy("Add item xmas mini 2014: " + item_drop_type + ":" + item_drop_id);
							SetEventScore(KeyID.KEY_EVENT_XMAS_MINI, 1);
						}
					}
					else if (item_drop_type == DatabaseID.IT_MATERIAL)
					{
						if (item_drop_id > -1 && stock.get(DatabaseID.STOCK_WAREHOUSE).isFull() == false)
						{
							stock.get(DatabaseID.STOCK_WAREHOUSE).increaseObject(_command_id, item_drop_type, item_drop_id, SkyGarden._server_id);
							SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToDatabase());
						}
					}
				}
				
				exp_used = product_exp;
				userInfo.setExp(userInfo.getExp() + product_exp);
				
				checkLevelUp();
				if (!_use_lazy_sync_user_info) SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
				
				SET_DB_VALUE_BINARY(KeyID.KEY_MACHINES + _floor, _machine.getData());
				SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToDatabase());
				
				GetRankingTarget().Increase(CommandID.CMD_MOVE_MACHINE_PRODUCT, _floor, 1);
				SET_DB_VALUE_BINARY(KeyID.KEY_USER_RANKING_TARGET, GetRankingTarget().GetData());
				
				if (_use_achievement)
				{
					acm_index = GetAchievementManager().Increase(CommandID.CMD_MOVE_MACHINE_PRODUCT, _floor, 1);
				}
			}
			else
			{
				LogHelper.Log("--------- moveMachineProduct: Failed!"); 
				_return_id = ReturnCode.RESPONSE_STOCK_IS_FULL;
			}
		}
		else
		{
			LogHelper.Log("--------- moveMachineProduct: Failed!"); 
			LogHelper.Log("--------- stock barn is FULL!"); 

			_return_id = ReturnCode.RESPONSE_STOCK_IS_FULL;
		}
		
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());

		if (user_level_up) checkAndUnlockItems();
		if (_use_achievement && acm_index != -1)
		{
			response.addInt(KeyID.KEY_ACHIEVEMENT_ID, acm_index);
			response.addBinary(KeyID.KEY_ACHIEVEMENT_INDEX + acm_index, GetAchievementManager().GetAchievement(acm_index).getData());
		}
		
		if ((_use_event_halloween || _use_event_xmas_2014 || _use_event_xmas_tree || _use_event_new_year_2015 || _use_event_8_3_2015) && _use_stock_event)
		{
			response.addBinary(KeyID.KEY_STOCK_EVENT, stock_event.getDataToClient());
		}
		
		try
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("moveMachineProduct", ex);
		}
	}
	
	private void handleUpgradePot(FBEncrypt encrypt)
	{
		// get params
		short floorIndex = encrypt.getShort(KeyID.KEY_FLOOR_INDEX);
		short slotIndex = encrypt.getShort(KeyID.KEY_SLOT_INDEX);
		short luckyLeafID = encrypt.getShort(KeyID.KEY_LUCKY_LEAF);
		boolean use_amulet = encrypt.getBoolean(KeyID.KEY_AMULET);
		
		// valid
		if (floorIndex < 0 || floorIndex >= userInfo.getTotalFloor())
		{
			LogHelper.Log("handleUpgradePot.. err! invalid floor param.");
			_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
			requestError();
			return;
		}
		
		if (slotIndex < 0 || slotIndex >= DatabaseID.MAX_SLOT_PER_FLOOR)
		{
			LogHelper.Log("handleUpgradePot.. err! invalid slot param.");
			_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
			requestError();
			return;
		}
		
		// make sure the slot is not empty
		short pot_id = floor.get(floorIndex).slot[slotIndex].pot.getID();

		if (pot_id == -1)
		{
			LogHelper.Log("handleUpgradePot.. err! can not find pot at slot [" + floorIndex + "," + slotIndex + "].");
			_return_id = ReturnCode.RESPONSE_CANT_FIND_POT;
			requestError();
			return;
		}
		
		// check if pot reached MAX_POT
		if (pot_id >= Server.s_globalDB[DatabaseID.SHEET_POT].length)
		{
			LogHelper.Log("handleUpgradePot.. reached max pot id.");
			_return_id = ReturnCode.RESPONSE_POT_AT_MAX_ID;
			requestError();
			return;
		}		
		// check if user has enough level to unlock the pot
		int next_pot_unlock_level = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_POT][pot_id + 1][DatabaseID.POT_LEVEL_UNLOCK]);
		if (userInfo.getLevel() < next_pot_unlock_level)
		{
			LogHelper.Log("handleUpgradePot.. not enough level to upgrade pot.");
			_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
			requestError();
			return;
		}
		
		// check if next pot upgradable
		boolean upgradable = ((int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_POT][pot_id + 1][DatabaseID.POT_UPGRADABLE])) == 1;
		if (!upgradable)
		{
			LogHelper.Log("handleUpgrade.. next pot is not upgradable.");
			requestError();
			return;
		}
		
		// make sure pot is empty
		// Fixed: allow user to upgrade pot when there is plant in it.
//		if (floor.get(floorIndex).slot[slotIndex].pot.plant.getID() != -1)
//		{
//			LogHelper.Log("handleUpgradePot.. pot is not empty.");
//			_return_id = ReturnCode.RESPONSE_POT_IS_NOT_EMPTY;
//			requestError();
//			return;
//		}
		
		// check user gold.
		long current_gold = userInfo.getGold();
		long gold_need = floor.get(floorIndex).slot[slotIndex].pot.getGoldUpgrade();
		if (current_gold < gold_need)
		{
			LogHelper.Log("handleUpgradePot.. not enough gold. Current gold / required gold: " + userInfo.getGold() + "/" + floor.get(floorIndex).slot[slotIndex].pot.getGoldUpgrade());
			_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_GOLD;
			requestError();
			return;
		}
		
		int stock_id = -1;
		
		// Check if user has enough pearl
		String requireMaterial = floor.get(floorIndex).slot[slotIndex].pot.getRequiredPearl();
		String[] sa_requiredPearl = requireMaterial.split(":"); 
		if (sa_requiredPearl.length >= 3) {
			for (int i = 0; i < sa_requiredPearl.length; i += 3)
			{
				short required_pearl_type	= Short.parseShort(sa_requiredPearl[i]);
				short required_pearl_id		= Short.parseShort(sa_requiredPearl[i+1]);
				short required_pearl_number = Short.parseShort(sa_requiredPearl[i+2]);

				switch (required_pearl_type)
				{
					case DatabaseID.IT_MATERIAL:
						stock_id = DatabaseID.STOCK_WAREHOUSE;
						break;
					case DatabaseID.IT_BUG:
					case DatabaseID.IT_PRODUCT:
						stock_id = DatabaseID.STOCK_BARN;
						break;
					case DatabaseID.IT_PLANT:
						stock_id = DatabaseID.STOCK_SILO;
						break;
					default:
						LogHelper.Log("handleUpgradePot.. invalid item type.");
						_return_id = ReturnCode.RESPONSE_IBS_INVALID_ITEM_TYPE;
						requestError();
						return;
				}

				int required_pearl_in_stock = stock.get(stock_id).getProductNum(required_pearl_type, required_pearl_id);

				if (required_pearl_in_stock < required_pearl_number)
				{
					LogHelper.Log("handleUpgradePot.. err! not enough pearl");
					_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_PRODUCT;
					requestError();
					return;
				}
			}
		}
		
		// check if use amulet
		if (use_amulet)
		{
			if (stock.get(DatabaseID.STOCK_WAREHOUSE).getProductNum(DatabaseID.IT_MATERIAL, DatabaseID.MATERIAL_PROTECT_AMULET) <= 0)
			{
				LogHelper.Log("handleUpgradePot.. err! not enough amulet.");
				_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_PRODUCT;
				requestError();
				return;
			}
		}
		
		// check if user uses lucky leaf or not
		boolean use_lucky_leaf = false;
		
		if (
			(luckyLeafID >= DatabaseID.MATERIAL_LUCKY_LEAF_GREEN_SMALL && luckyLeafID <= DatabaseID.MATERIAL_LUCKY_LEAF_GREEN_LARGE) ||
			luckyLeafID == DatabaseID.MATERIAL_LUCKY_LEAF_GREEN_SUPER_LARGE ||
			luckyLeafID == DatabaseID.MATERIAL_LUCKY_LEAF_GREEN_34 ||
			luckyLeafID == DatabaseID.MATERIAL_LUCKY_LEAF_GREEN_35 ||
			luckyLeafID == DatabaseID.MATERIAL_LUCKY_LEAF_GREEN_36 ||
			luckyLeafID == DatabaseID.MATERIAL_LUCKY_LEAF_GREEN_37 ||
			luckyLeafID == DatabaseID.MATERIAL_LUCKY_LEAF_GREEN_38
			)
		{
			use_lucky_leaf = true;
			
			if (stock.get(DatabaseID.STOCK_WAREHOUSE).getProductNum(DatabaseID.IT_MATERIAL, luckyLeafID) <= 0)
			{
				LogHelper.Log("handleUpgradePot.. err! not enough lucky leaf.");
				_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_PRODUCT;
				requestError();
				return;
			}
		}
				
		StringBuilder item_info_used = new StringBuilder();
		String log_update_item = null;
			
		// reduce
		boolean result = true;
		if (use_amulet)
		{
			log_update_item = GetStock(DatabaseID.STOCK_WAREHOUSE).decreaseObject_Log(DatabaseID.IT_MATERIAL, DatabaseID.MATERIAL_PROTECT_AMULET, _command_id);
			
			if (log_update_item == null)
			{
				LogHelper.Log("handleUpgradePot.. err! decrease object amulet in stock failed");
				_return_id = ReturnCode.RESPONSE_CANT_DECREASE_OBJECT;
				requestError();
				return;
			}
			
			item_info_used.append(log_update_item);
		}
		
		int minus = 0;
		if (use_lucky_leaf)
		{
			log_update_item = GetStock(DatabaseID.STOCK_WAREHOUSE).decreaseObject_Log(DatabaseID.IT_MATERIAL, luckyLeafID, _command_id);
			if (log_update_item == null)
			{
				LogHelper.Log("handleUpgradePot.. err! decrease object lucky leaf in stock failed");
				_return_id = ReturnCode.RESPONSE_CANT_DECREASE_OBJECT;
				requestError();
				return;
			}
			
			minus = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_MATERIAL][luckyLeafID][DatabaseID.MATERIAL_4_LEAF_LUCKY_PERCENT]);
			
			if (item_info_used.length() > 0) item_info_used.append(':');
			
			item_info_used.append(log_update_item);
		}
		
		result = userInfo.setGold(userInfo.getGold() - gold_need,								// log
												_command_id,									//  2. hanh dong cua gamer
												DatabaseID.IT_POT, 								// 11. id cua loai item
												pot_id,											// 12. id cua item
												Misc.GetItemName(DatabaseID.IT_POT, pot_id),	// 13. ten item
												1);
		
		if (result == false) {
			LogHelper.Log("handleUpgradePot.. err! decrease user gold failed");
			_return_id = ReturnCode.RESPONSE_CANT_SUBSTRACT_MONEY;
			requestError();
			return;
		}
		
		// log_update_item = GetStock(DatabaseID.STOCK_BARN).updateProducts_Log(_command_id, sa_requiredPearl, DatabaseID.IT_PRODUCT); // reduce pearl
		
		StringBuilder logUpdateItem = new StringBuilder();

		if (sa_requiredPearl.length >= 3) {
			for (int i = 0; i < sa_requiredPearl.length; i += 3)
			{
				short item_type_need = Short.parseShort(sa_requiredPearl[i]);
				short item_id_need = Short.parseShort(sa_requiredPearl[i+1]);
				short item_num_need = Short.parseShort(sa_requiredPearl[i+2]);

				switch (item_type_need)
				{
					case DatabaseID.IT_MATERIAL:
						stock_id = DatabaseID.STOCK_WAREHOUSE;
						break;
					case DatabaseID.IT_BUG:
					case DatabaseID.IT_PRODUCT:
						stock_id = DatabaseID.STOCK_BARN;
						break;
					case DatabaseID.IT_PLANT:
						stock_id = DatabaseID.STOCK_SILO;
						break;
					default:
						LogHelper.Log("handleUpgradePot.. invalid item type 1.");
						_return_id = ReturnCode.RESPONSE_IBS_INVALID_ITEM_TYPE;
						requestError();
						return;
				}

				Stock _stock = GetStock(stock_id);

				String product_key = item_type_need + "_" + item_id_need;
				short product_stock_num = (short)_stock.getProductNum(item_type_need, item_id_need);
				short new_product_num = (short)(product_stock_num - item_num_need);

				if (i != 0) logUpdateItem.append(':');
				logUpdateItem.append(item_type_need);																	// 12. id cua loai item su dung
				logUpdateItem.append(':').append(item_id_need);														// 13. id cua item su dung
				logUpdateItem.append(':').append(item_num_need);														// 14. so luong vat pham su dung
				logUpdateItem.append(':').append(_stock.getProductNum(item_type_need, item_id_need));					// 15. so item co truoc khi su dung

				boolean resultUpdateStock = _stock.updateValue(_command_id, item_type_need, item_id_need, new_product_num);

				if (!resultUpdateStock)
				{
					LogHelper.Log("handleUpgradePot.. cannot upgrade stock");
					requestError();
					return;
				}

				logUpdateItem.append(':').append(_stock.getProductNum(item_type_need, item_id_need));					// 16. so item con sau khi su dung
			}
		}
		
		log_update_item = logUpdateItem.toString();
		
		if (log_update_item == null)
		{
			LogHelper.Log("handleUpgradePot.. err! decrease user pearl failed");
			_return_id = ReturnCode.RESPONSE_CANT_DECREASE_OBJECT;
			requestError();
			return;
		}
		
		if (item_info_used.length() > 0) item_info_used.append(':');
		
		item_info_used.append(log_update_item);
		
		// proceed upgrade pot
		// int random_result = Misc.RANDOM_RANGE(0, 100 - minus);
		int success_ratio = floor.get(floorIndex).slot[slotIndex].pot.getUpgradeRatio();
		if (GetPot(floorIndex, slotIndex).getID() <= 3) {
			success_ratio = 100;
		} else if (GetPot(floorIndex, slotIndex).getID() == 4) {
			success_ratio = 80;
		}
		// boolean is_success = random_result <= success_ratio;
		// Misc.test_RANDOM_RATE(100, (success_ratio+minus));
		
		int bonus_event = 0;
		String start_event_time = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_EVENT_GLOBAL][11][DatabaseID.EVENT_GLOBAL_START_DATE]);
		String end_event_time = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_EVENT_GLOBAL][11][DatabaseID.EVENT_GLOBAL_END_DATE]);
		if(Misc.InEvent(start_event_time, end_event_time))
		{
			bonus_event = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_EVENT_GLOBAL][11][DatabaseID.EVENT_GLOBAL_BONUS_EXP_RATE]);
			LogHelper.LogHappy("Bonus percent event := " + bonus_event);
		}
		
		boolean is_success = Misc.RANDOM_RATE(100,(success_ratio + minus + bonus_event));
		
		boolean first_time_use_amulet = false;
		
		if (use_amulet && !userInfo.GetUsedAmulet()) // first time use amulet
		{
			first_time_use_amulet = true;
			userInfo.SetUsedAmulet(true);
		}
		
		if (first_time_use_amulet)
			is_success = true;
		
//		if (ProjectConfig.IS_SERVER_FREESTYLE == 1)
//		{
//			is_success = true;
//		}
		
		int acm_index = -1;
		boolean is_blessing = false;
		if (is_success)
		{
			// check if blessing
			double blessing_ratio = floor.get(floorIndex).slot[slotIndex].pot.GetBlessingRatio();
			
			// increase blessing ratio if using amulet
			if (use_amulet) blessing_ratio += 1.0;
			
			is_blessing = Misc.RANDOM_DOUBLE_RANGE(0.0, 100.0) <= blessing_ratio;
			
			if (first_time_use_amulet) is_blessing = true;

//			if (ProjectConfig.IS_SERVER_FREESTYLE == 1)
//			{
//				is_blessing = true;
//			}
			
			// LogHelper.Log("handleUpgradePot.. blessing: " + blessing_ratio + ":" + is_blessing);
			
			floor.get(floorIndex).slot[slotIndex].pot.increasePotID();
			
			_return_id = ReturnCode.RESPONSE_UPGRADE_POT_SUCCESS;
			
			short new_pot_id = floor.get(floorIndex).slot[slotIndex].pot.getID();
			if (new_pot_id >= Server.s_globalDB[DatabaseID.SHEET_POT].length)
			{
				is_blessing = false;
			}
			
			if (is_blessing) {
				floor.get(floorIndex).slot[slotIndex].pot.increasePotID(); // increase pot id again if blessing
				_return_id = ReturnCode.RESPONSE_UPGRADE_POT_BLESSING;
			}
			
			if (_use_achievement) {
				acm_index = GetAchievementManager().Increase(CommandID.CMD_UPGRADE_POT, 1, 1);
			}
			
			if (_use_new_broadcast && new_pot_id >= 15) {
				String message = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_NOTIFY_TEXT][13][DatabaseID.NOTIFY_TEXT_DESCRIPTION]);
				message = message.replace("%s1", userInfo.getName());
				message = message.replace("%s2", Misc.GetShortItemName(DatabaseID.IT_POT, new_pot_id));
				SkyGarden.AddBroadcast(message);
			}
		}
		else
		{
			_return_id = ReturnCode.RESPONSE_UPGRADE_POT_FAIL;
			
			// check if bad luck
			double bad_luck_ratio = floor.get(floorIndex).slot[slotIndex].pot.GetBadLuckRatio();
			boolean is_bad_luck = Misc.RANDOM_DOUBLE_RANGE(0.0, 100.0) <= bad_luck_ratio;
			
			// LogHelper.Log("handleUpgradePot.. bad luck: " + bad_luck_ratio + ":" + is_bad_luck);

			if (!use_amulet && is_bad_luck)
			{
				floor.get(floorIndex).slot[slotIndex].pot.decreasePotID();
				_return_id = ReturnCode.RESPONSE_UPGRADE_FAIL_LOSE_POT;
			}
			
			// LogHelper.Log("handleUpgradePot.. upgrade pot FAILED. ");
			if (_use_achievement)
			{
				acm_index = GetAchievementManager().Increase(CommandID.CMD_UPGRADE_POT, 0, 1);
			}
		}
		
		if (_use_event_uprade_pot)
		{
			if (is_success)
			{
				int score = Misc.GetItemValues(DatabaseID.IT_POT, pot_id + 1, 2);
				if (is_blessing)
				{
					score += Misc.GetItemValues(DatabaseID.IT_POT, pot_id + 2, 2);
				}
				
				SetEventScore(KeyID.KEY_EVENT_UPGRADE_POT, score);
			}
			else
			{
				int score = Misc.GetItemValues(DatabaseID.IT_POT, pot_id + 1, 3);
				SetEventScore(KeyID.KEY_EVENT_UPGRADE_POT, score);
			}
		}
		
		// log VD
		StringBuilder log = new StringBuilder();
		log.append(Misc.getCurrentDateTime());								//  1. thoi gian tieu tien
		log.append('\t').append(Misc.getActionName(_command_id));			//  2. hanh dong cua gamer
		log.append('\t').append(userInfo.getID());							//  3. ten tai khoan
		log.append('\t').append(userInfo.getID());							//  4. id cua role nap tien
		log.append('\t').append(userInfo.getName());						//  5. ten role
		log.append('\t').append(SkyGarden._server_id);											//  6. id cua server
		log.append('\t').append(userInfo.getLevel());						//  7. level cua gamer
		log.append('\t').append(DatabaseID.IT_POT + "_" + pot_id);			//  8. id cua item truoc khi cuong hoa
		log.append('\t').append(pot_id);									//  9. level cua item truoc khi cuong hoa
		log.append('\t').append(item_info_used);							//	10. material
		log.append('\t').append(success_ratio);								//	11. success rate
		log.append('\t').append(floor.get(floorIndex).slot[slotIndex].pot.getID() != -1 ? DatabaseID.IT_POT + "_" + floor.get(floorIndex).slot[slotIndex].pot.getID() : "-1");	//	12. new item id
		log.append('\t').append(floor.get(floorIndex).slot[slotIndex].pot.getID());								//	13. new item level
		log.append('\t').append(is_success == true ? 1 : 0);				//	14. result
		log.append('\t').append(0);								//	15. random result
		log.append('\t').append(luckyLeafID);								//	16. id of luckey leaf
		log.append('\t').append(use_amulet ? 1 : 0);						//	15. use amulet or not
		LogHelper.Log(LogHelper.LogType.UPGRADE_ITEM, log.toString());
		
		if (!_use_lazy_sync_user_info)
		{
			result = SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
			if (result == false)
			{
				_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
				requestError();
				return;
			}
		}
		
		result = SET_DB_VALUE_BINARY(KeyID.KEY_FLOORS + floorIndex,floor.get(floorIndex).getData(true));
		if (result == false)
		{
			_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
			requestError();
			return;
		}
		
		result = SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, GetStock(DatabaseID.STOCK_BARN).getDataToDatabase());
		if (result == false)
		{
			_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
			requestError();
			return;
		}
		
		result = SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, GetStock(DatabaseID.STOCK_WAREHOUSE).getDataToDatabase());
		if (result == false)
		{
			_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
			requestError();
			return;
		}
		
		// LogHelper.Log("handleUpradePot.. save to db OK.");
		
		// update garden appraisal
		try
		{
			garden_appraisal = UpdateAppraisal(DatabaseID.APPRAISAL_POT);
		}
		catch (Exception e)
		{
			LogHelper.LogException("handleUpgradePot.UpdateAppraisal", e);
		}
		
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addLong(KeyID.KEY_GOLD_USED, gold_need);
		response.addShort(KeyID.KEY_TOTAL_FLOOR_CHANGED, 1);
		response.addBinary(KeyID.KEY_FLOORS + 0, floor.get(floorIndex).getData(false));
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
		response.addLong(KeyID.KEY_GARDEN_APPRAISAL, garden_appraisal);
		
		if (_use_achievement && acm_index != -1)
		{
			response.addInt(KeyID.KEY_ACHIEVEMENT_ID, acm_index);
			response.addBinary(KeyID.KEY_ACHIEVEMENT_INDEX + acm_index, GetAchievementManager().GetAchievement(acm_index).getData());
		}
			
		try
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("handleUpgradePot.. response to client OK.");
		}
		catch (Exception e)
		{
			LogHelper.LogException("handleUpragePot", e);
		}
	}
	
	private void handleBuyItemUpgradePot(FBEncrypt encrypt)
	{
		boolean process_result = true;
		
		int material_id = encrypt.getShort(KeyID.KEY_MATERIAL_ID);
		// LogHelper.Log("handleBuyItemUpgradePot.. client material id " + material_id);
		
		long diamond_used = 0;
		
		if (material_id != DatabaseID.MATERIAL_PROTECT_AMULET && 
			material_id != DatabaseID.MATERIAL_LUCKY_LEAF_GREEN_SMALL && 
			material_id != DatabaseID.MATERIAL_LUCKY_LEAF_GREEN_MEDIUM && 
			material_id != DatabaseID.MATERIAL_LUCKY_LEAF_GREEN_LARGE && 
			material_id != DatabaseID.MATERIAL_LUCKY_LEAF_GREEN_SUPER_LARGE)
		{
			_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
			requestError();
			LogHelper.Log("handleBuyItemUpgradePot.. invalid params.");
			return;
		}
		
		int material_price = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_MATERIAL][material_id][DatabaseID.MATERIAL_DIAMOND_BUY]);
		if (material_price <= 0)
		{
			_return_id = ReturnCode.RESPONSE_IBS_INVALID_PRICE;
			requestError();
			LogHelper.Log("handleBuyItemUpgradePot.. invalid price");
			return;
		}
		
		if (money_mgr.GetRealMoney() + money_mgr.GetBonusMoney() < material_price)
		{
			process_result = false;
			_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_DIAMOND;
			LogHelper.Log("handleBuyItemUpgradePot.. not enough diamond.");
		}
		
		if (process_result && GetStock(DatabaseID.STOCK_WAREHOUSE).isFull())
		{
			process_result = false;
			_return_id = ReturnCode.RESPONSE_STOCK_IS_FULL;
			LogHelper.Log("handleBuyItemUpgradePot.. stock is full");
		}
		
		if (process_result)
		{
			// substract user money
			diamond_used = material_price;
			UseMoneyResult result = money_mgr.UseRealMoneyAndBonusMoney(material_price,						// log
													_command_id,											//  2. hanh dong cua gamer
													userInfo.getName(),										//  3. ten tai khoan
													userInfo.getLevel(),									//  7. level cua gamer
													_ip,													//  9. ip login v4 cua gamer
													DatabaseID.IT_MATERIAL,									// 10. id cua loai item
													material_id,											// 11. id cua item
													"00",													// 12. ten item
													material_price,											// 13. gia game coin cua item
													1);														// 14. so luong vat pham	
			
			if (result._code == UseMoneyResult.CODE.SUCCESS)
			{
				// LogHelper.Log("handleBuyItemUpgradePot.. substrack user money OK.");
				
				// add item into stock
				GetStock(DatabaseID.STOCK_WAREHOUSE).add(DatabaseID.IT_MATERIAL, material_id, 1, _command_id);

				// LogHelper.Log("handleBuyItemUpgradePot.. add item into stock OK.");
				
				// save to db
				boolean saveResult = SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToDatabase());
				if (saveResult == false)
				{
					LogHelper.Log("handleBuyItemUpgradePot.. Can not save STOCK_BARN to database");
					requestError(ReturnCode.RESPONSE_SAVE_ERROR);
					return;
				}
				// LogHelper.Log("handleBuyItemUpgradePot.. save to db OK.");
			}
			else
			{
				process_result = false;
				_return_id = ReturnCode.RESPONSE_CANT_SUBSTRACT_MONEY;
				LogHelper.Log("handleBuyItemUpgradePot.. can't substract money");
			}
		}
		
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addLong(KeyID.KEY_DIAMOND_USED, diamond_used);
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, GetStock(DatabaseID.STOCK_WAREHOUSE).getDataToClient());

		try 
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("handleBuyItemUpgradePot.. response to client OK.");
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("handleBuyItemUpgradePot", ex);
		}
	}
	
	// currently not used
	private void handleBuyProduct(FBEncrypt encrypt)
	{
		boolean process_result = true;
		
		int product_id = encrypt.getShort(KeyID.KEY_PRODUCT_ID);
		int product_num = encrypt.getShort(KeyID.KEY_PRODUCT_NUM);
		
		// LogHelper.Log("handleBuyProduct.. client product id " + product_id + " = " + product_num);
		
		if (product_id < 0 || product_id > Server.s_globalDB[DatabaseID.SHEET_PRODUCT].length - 1)
		{
			requestError(ReturnCode.RESPONSE_INVALID_PARAMS);
			LogHelper.Log("handleBuyProduct.. invalid params.");
			return;
		}

		if (product_num <= 0)
		{
			requestError(ReturnCode.RESPONSE_INVALID_PARAMS);
			LogHelper.Log("handleBuyProduct.. invalid params. product_num should be > 0");
			return;
		}
		
		int product_price = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_PRODUCT][product_id][DatabaseID.PRODUCT_DIAMOND_BUY]);
		product_price = product_num * product_price;
		
		if (product_price <= 0)
		{
			requestError(ReturnCode.RESPONSE_IBS_INVALID_PRICE);
			LogHelper.Log("handleBuyProduct.. invalid price");
			return;
		}
		
		if (money_mgr.GetRealMoney() + money_mgr.GetBonusMoney() < product_price)
		{
			process_result = false;
			_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_DIAMOND;
			LogHelper.Log("handleBuyProduct.. not enough diamond.");
		}
		
		if (process_result && stock.get(DatabaseID.STOCK_BARN).isFull())
		{
			process_result = false;
			_return_id = ReturnCode.RESPONSE_STOCK_IS_FULL;
			LogHelper.Log("handleBuyProduct.. stock is full");
		}
		
		if (process_result)
		{
			long item_price = Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_PRODUCT][product_id][DatabaseID.PRODUCT_DIAMOND_BUY]);
			
			UseMoneyResult result = money_mgr.UseRealMoneyAndBonusMoney(product_price,						// log
													_command_id,											//  2. hanh dong cua gamer
													userInfo.getName(),										//  3. ten tai khoan
													userInfo.getLevel(),									//  7. level cua gamer
													_ip,													//  9. ip login v4 cua gamer
													DatabaseID.IT_PRODUCT,									// 10. id cua loai item
													product_id,												// 11. id cua item
													Misc.GetItemName(DatabaseID.IT_PRODUCT, product_id),	// 12. ten item
													item_price,												// 13. gia game coin cua item
													product_num);											// 14. so luong vat pham
			
			if (result._code == UseMoneyResult.CODE.SUCCESS)
			{
				// LogHelper.Log("handleBuyProduct.. substrack user money OK.");
				
				// add item into stock
				stock.get(DatabaseID.STOCK_BARN).add(DatabaseID.IT_PRODUCT, product_id, product_num, _command_id);
				LogHelper.Log("handleBuyProduct.. add item into stock OK.");
				
				// save to db
				boolean saveResult = SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToDatabase());
				if (saveResult == false)
				{
					LogHelper.Log("Can not save STOCK_BARN to database");
					requestError(ReturnCode.RESPONSE_SAVE_ERROR);
					return;
				}
				LogHelper.Log("handleBuyProduct.. save to db OK.");
			}
			else
			{
				process_result = false;
				_return_id = ReturnCode.RESPONSE_CANT_SUBSTRACT_MONEY;
				LogHelper.Log("handleBuyProduct.. can't substract money");
			}
		}
		
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToClient());

		try 
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("handleBuyProduct.. response to client OK.");
		} 
		catch (Exception ex) 
		{
		}
	}

	private void handleBuyPearlUpgradePot(FBEncrypt encrypt)
	{
		boolean process_result = true;
		
		int pot_id = encrypt.getShort(KeyID.KEY_POT_ID);
		
		if (pot_id < 0 || pot_id > Server.s_globalDB[DatabaseID.SHEET_POT].length - 1)
		{
			requestError(ReturnCode.RESPONSE_INVALID_PARAMS);
			LogHelper.Log("handleBuyPearlUpgradePot.. invalid params.");
			return;
		}

		long diamond_used = 0;
		int diamond_need = 0;
		int num_require_stock_warehouse = 0;
		int num_require_stock_barn = 0;
		int num_require_stock_silo = 0;
		
		String[] items_need = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_POT][pot_id][DatabaseID.POT_UPGRADE_REQUIREMENT]).split(":");
		
		if (items_need.length % 3 != 0)
		{
			LogHelper.Log("handleBuyPearlUpgradePot.. err! server data input is invalid, need re-check!!!");
			requestError();
			return;
		}
		
		for (int i = 0; i < items_need.length; i += 3)
		{
			int item_type_require			= Integer.parseInt(items_need[i]);
			int item_id_require				= Integer.parseInt(items_need[i+1]);
			int num_require					= Integer.parseInt(items_need[i+2]);
			
			int stock_id = -1;
			switch (item_type_require)
			{
				case DatabaseID.IT_MATERIAL:
					stock_id = DatabaseID.STOCK_WAREHOUSE;
					break;
				case DatabaseID.IT_BUG:
				case DatabaseID.IT_PRODUCT:
					stock_id = DatabaseID.STOCK_BARN;
					break;
				case DatabaseID.IT_PLANT:
					stock_id = DatabaseID.STOCK_SILO;
					break;
				default:
					LogHelper.Log("handleBuyIBShopPackage.. invalid item type.");
					_return_id = ReturnCode.RESPONSE_IBS_INVALID_ITEM_TYPE;
					requestError();
					return;
			}
			
			int num_in_stock = GetStock(stock_id).getProductNum(item_type_require, item_id_require);
			
			if (num_require > num_in_stock)
			{
				num_require = num_require - num_in_stock;
				
				int price = 0;
				switch (item_type_require)
				{
					case DatabaseID.IT_MATERIAL:
						price = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_MATERIAL][item_id_require][DatabaseID.MATERIAL_DIAMOND_BUY]);
						num_require_stock_warehouse += num_require;
						break;
					case DatabaseID.IT_BUG:
						price = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_PEST][item_id_require][DatabaseID.PEST_DIAMOND_BUY]);
						num_require_stock_barn += num_require;
						break;
					case DatabaseID.IT_PRODUCT:
						price = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_PRODUCT][item_id_require][DatabaseID.PRODUCT_DIAMOND_BUY]);
						num_require_stock_barn += num_require;
						break;
					case DatabaseID.IT_PLANT:
						price = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_SEED][item_id_require][DatabaseID.SEED_DIAMOND_BUY]);
						num_require_stock_silo += num_require;
						break;
					default:
						LogHelper.Log("handleBuyIBShopPackage.. invalid item type.");
						_return_id = ReturnCode.RESPONSE_IBS_INVALID_ITEM_TYPE;
						requestError();
						return;
				}
				
				diamond_need += (num_require * price);
			}
		}
		
		if (diamond_need <= 0)
		{
			requestError(ReturnCode.RESPONSE_IBS_INVALID_PRICE);
			LogHelper.Log("handleBuyPearlUpgradePot.. err! invalid price");
			return;
		}
		
		// check diamond
		if (money_mgr.GetRealMoney() + money_mgr.GetBonusMoney() < diamond_need)
		{
			process_result = false;
			_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_DIAMOND;
			LogHelper.Log("handleBuyPearlUpgradePot.. err! not enough diamond.");
		}

		// not check stock
//		// check stock
//		if (process_result)
//		{
//			if (GetStock(DatabaseID.STOCK_WAREHOUSE).checkFull(GetStock(DatabaseID.STOCK_WAREHOUSE).getCapacityCurrent() + num_require_stock_warehouse)
//				|| GetStock(DatabaseID.STOCK_SILO).checkFull(GetStock(DatabaseID.STOCK_SILO).getCapacityCurrent() + num_require_stock_silo)
//				|| GetStock(DatabaseID.STOCK_BARN).checkFull(GetStock(DatabaseID.STOCK_BARN).getCapacityCurrent() + num_require_stock_barn))
//			{
//				process_result = false;
//				_return_id = ReturnCode.RESPONSE_STOCK_IS_FULL;
//				LogHelper.Log("handleBuyPearlUpgradePot.. err! stock is full");
//			}
//		}
		
		if (process_result)
		{
			for (int i = 0; i < items_need.length; i += 3)
			{
				int item_type_require			= Integer.parseInt(items_need[i]);
				int item_id_require				= Integer.parseInt(items_need[i+1]);
				int num_require					= Integer.parseInt(items_need[i+2]);

				int stock_id = -1;
				switch (item_type_require)
				{
					case DatabaseID.IT_MATERIAL:
						stock_id = DatabaseID.STOCK_WAREHOUSE;
						break;
					case DatabaseID.IT_BUG:
					case DatabaseID.IT_PRODUCT:
						stock_id = DatabaseID.STOCK_BARN;
						break;
					case DatabaseID.IT_PLANT:
						stock_id = DatabaseID.STOCK_SILO;
						break;
					default:
						LogHelper.Log("handleBuyIBShopPackage.. invalid item type.");
						_return_id = ReturnCode.RESPONSE_IBS_INVALID_ITEM_TYPE;
						requestError();
						return;
				}
			
				int num_in_stock = GetStock(stock_id).getProductNum(item_type_require, item_id_require);
			
				if (num_require > num_in_stock)
				{
					num_require = num_require - num_in_stock;

					int price = 0;
					switch (item_type_require)
					{
						case DatabaseID.IT_MATERIAL:
							price = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_MATERIAL][item_id_require][DatabaseID.MATERIAL_DIAMOND_BUY]);
							num_require_stock_warehouse += num_require;
							break;
						case DatabaseID.IT_BUG:
							price = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_PEST][item_id_require][DatabaseID.PEST_DIAMOND_BUY]);
							num_require_stock_barn += num_require;
							break;
						case DatabaseID.IT_PRODUCT:
							price = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_PRODUCT][item_id_require][DatabaseID.PRODUCT_DIAMOND_BUY]);
							num_require_stock_barn += num_require;
							break;
						case DatabaseID.IT_PLANT:
							price = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_SEED][item_id_require][DatabaseID.SEED_DIAMOND_BUY]);
							num_require_stock_silo += num_require;
							break;
						default:
							LogHelper.Log("handleBuyIBShopPackage.. invalid item type.");
							_return_id = ReturnCode.RESPONSE_IBS_INVALID_ITEM_TYPE;
							requestError();
							return;
					}
					
					int total_price = (num_require * price);
					if (total_price <= 0)
					{
						requestError(ReturnCode.RESPONSE_IBS_INVALID_PRICE);
						LogHelper.Log("handleBuyPearlUpgradePot.. invalid price");
						return;
					}
				
					UseMoneyResult result = money_mgr.UseRealMoneyAndBonusMoney(total_price,			// 1. amount log
																	_command_id,						//  2. hanh dong cua gamer
																	userInfo.getName(),					//  3. ten tai khoan
																	userInfo.getLevel(),				//  7. level cua gamer
																	_ip,								//  9. ip login v4 cua gamer
																	item_type_require,					// 10. id cua loai item
																	item_id_require,					// 11. id cua item
																	"00",								// 12. ten item
																	price,								// 13. gia game coin cua item
																	num_require							// 14. so luong vat pham
																	);
					
					if (result._code == UseMoneyResult.CODE.SUCCESS)
					{
						// LogHelper.Log("handleBuyPearlUpgradePot.. substrack user money OK.");
						if (GetStock(stock_id).addGift(item_type_require, item_id_require, num_require, _command_id))
						{
							// save to db
							if (!SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + stock_id, GetStock(stock_id).getDataToDatabase()))
							{
								LogHelper.Log("handleBuyPearlUpgradePot.. err! Can not save stock data to database");
								requestError(ReturnCode.RESPONSE_SAVE_ERROR);
								return;
							}
						}
						else
						{
							LogHelper.Log("handleBuyPearlUpgradePot.. err! substracted money ok but can not add item to stock");
						}
						
						// substract user money
						diamond_used += total_price;
					}
					else
					{
						process_result = false;
						_return_id = ReturnCode.RESPONSE_CANT_SUBSTRACT_MONEY;
						LogHelper.Log("handleBuyPearlUpgradePot.. err! can't substract money");
					}
				}
			}
		}
		
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addLong(KeyID.KEY_DIAMOND_USED, diamond_used);
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToClient());

		try 
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("handleBuyPearlUpgradePot.. response to client OK.");
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("handleBuyPearlUpgradePot", ex);
		}
	}
	
	private void handleLoadIBShop(FBEncrypt encrypt)
	{
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_IBSHOP, IBShopManager().getItemListSendToClient(userInfo.getLevel(), _banned_ibshop_package)); // ibshop
		try 
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("handleBuyIBShopPackage.. response to client OK.");
		} 
		catch (Exception ex) 
		{
		}
	}
		
	private void handleBuyIBShopPackage(FBEncrypt encrypt)
	{
		int pack_id = encrypt.getInt(KeyID.KEY_IBS_PACKAGE_ID);
		
		long diamond_used = 0;
		long gold_used = 0;
		long exp_used = 0;
		long reputation_used = 0;
		
		// LogHelper.Log("handleBuyIBShopPackage.. process buying pacskage id " + pack_id);

		if (pack_id < 0/* || pack_id >= Server.s_ibShopManager.GetMaxPack()*/)
		{
			_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
			LogHelper.Log("handleBuyIBShopPackage.. invalid client param.");
			requestError();
			return;
		}
		
		StringBuilder log_item = new StringBuilder();
		
		IBShopPackage pack = IBShopManager().getPack(pack_id);
		do
		{
			if (pack != null)
			{
				// check if this pack is still available to buy
				if (pack.isActive() == false)
				{
					LogHelper.Log("handleBuyIBShopPackage.. pack is not acive.");
					_return_id = ReturnCode.RESPONSE_IBS_PACK_NOT_ACTIVE;
					break;
				}

				// check if user has enough level
				if (userInfo.getLevel() < pack.GetUnlockLevel())
				{
					LogHelper.Log("handleBuyIBShopPackage.. user not enough level");
					_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_LEVEL;
					break;
				}

				// check if this pack already reached the sale limit number.
				if (pack.hasSaleLimit())
				{
					if (IBShopManager().getSaleRemainingNumberFromDatabase(pack) <= 0)
					{
						LogHelper.Log("handleBuyIBShopPackage.. items have been sold out.");
						_return_id = ReturnCode.RESPONSE_IBS_ITEM_SOLD_OUT;
						break;
					}
				}

				// check if the pack is out of date
				if (pack.hasTimeLimit())
				{
					String[] sale_duration = pack.getSaleDuration().split(":");
					if (sale_duration.length != 2)
					{
						LogHelper.Log("handleBuyIBShopPackage.. invalid sale date.");
						_return_id = ReturnCode.RESPONSE_IBS_INVALID_SALE_DATE;
						requestError();
						return;
					}

					int sale_start_date = Integer.parseInt(sale_duration[0]);
					int sale_end_date = Integer.parseInt(sale_duration[1]);
					if (Misc.SECONDS() < sale_start_date || Misc.SECONDS() > sale_end_date)
					{
						LogHelper.Log("handleBuyIBShopPackage.. package is out date.");
						_return_id = ReturnCode.RESPONSE_IBS_PACKAGE_OUT_DATE;
						break;
					}
				}

				// calculate the final price of this package
				boolean is_sale_off = pack.isSaleOff();
				long sale_off_percent = pack.getSaleOffPercent();

				long requiredGold		= is_sale_off == true ? pack.getPriceGold() - (pack.getPriceGold() * sale_off_percent / 100) : pack.getPriceGold();
				long requiredDiamond	= is_sale_off == true ? pack.getPriceDiamond() - (pack.getPriceDiamond() * sale_off_percent / 100 ) : pack.getPriceDiamond();
				long requiredReputation = is_sale_off == true ? pack.getPriceReputation() - (pack.getPriceReputation() * sale_off_percent / 100) : pack.getPriceReputation();

				if (requiredGold < 0 || requiredDiamond < 0 || requiredReputation < 0)
				{
					LogHelper.Log("handleBuyIBShopPackage.. invalid price.");
					_return_id = ReturnCode.RESPONSE_IBS_INVALID_PRICE;
					requestError();
					return;
				}

				// check if user can afford to buy.
				if (userInfo.getGold() < requiredGold)
				{
					_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_GOLD;
					LogHelper.Log("handleBuyIBShopPackage.. not enough gold. " + userInfo.getGold() + "/" + pack.getPriceGold());
					break;
				}

				if ((money_mgr.GetRealMoney() + money_mgr.GetBonusMoney()) < requiredDiamond)
				{
					_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_DIAMOND;
					LogHelper.Log("handleBuyIBShopPackage.. not enough diamond. " + (money_mgr.GetRealMoney() + money_mgr.GetBonusMoney()) + "/" + pack.getPriceDiamond());
					break;
				}

				if (userInfo.getReputation() < requiredReputation)
				{
					_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_REPUTATION;
					LogHelper.Log("handleBuyIBShopPackage.. not enough reputation. " + userInfo.getReputation() + "/" + pack.getPriceReputation());
					break;
				}

				int item_type = -1;
				int item_id = -1;

				if (pack.isMysteryBox())
				{
					String mysteryitem = "";
					try
					{
						mysteryitem = pack.GetRandomItemInMysteryBox();
					}
					catch (Exception e)
					{
						LogHelper.LogException("handleBuyIBShopPackage.GetRandomItemInMysteryBox", e);
						mysteryitem = "";
					}

					String[] s = mysteryitem.split(":");
					if (s.length != 2)
					{
						LogHelper.Log("handleBuyIBShopPackage.. err! invalid mystery item");
						_return_id = ReturnCode.RESPONSE_IBS_INVALID_ITEM_TYPE;
						requestError();
						return;
					}

					item_type = Integer.parseInt(s[0]);
					item_id = Integer.parseInt(s[1]);
				}
				else
				{
					item_type = pack.getItemType();
					item_id = pack.getItemID();
				}


				// handle item event
				if (item_type == DatabaseID.IT_MATERIAL)
				{
					switch (item_id)
					{
						case DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_1:
							item_id = DatabaseID.ITEM_EVENT_HALLOWEEN_1;
							item_type = DatabaseID.IT_EVENT;
							break;
						case DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_2:
							item_id = DatabaseID.ITEM_EVENT_HALLOWEEN_2;
							item_type = DatabaseID.IT_EVENT;
							break;
						case DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_3:
							item_id = DatabaseID.ITEM_EVENT_HALLOWEEN_3;
							item_type = DatabaseID.IT_EVENT;
							break;
						case DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_1:
							item_id = DatabaseID.ITEM_EVENT_XMAS_2014_1;
							item_type = DatabaseID.IT_EVENT;
							break;
						case DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_2:
							item_id = DatabaseID.ITEM_EVENT_XMAS_2014_2;
							item_type = DatabaseID.IT_EVENT;
							break;
						case DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_3:
							item_id = DatabaseID.ITEM_EVENT_XMAS_2014_3;
							item_type = DatabaseID.IT_EVENT;
							break;
						case DatabaseID.MATERIAL_ITEM_BAO_LIXI_NORMAL:
							item_id = DatabaseID.ITEM_EVENT_BAO_LIXI_NORMAL;
							item_type = DatabaseID.IT_EVENT;
							break;
						case DatabaseID.MATERIAL_ITEM_BAO_LIXI_SILVER:
							item_id = DatabaseID.ITEM_EVENT_BAO_LIXI_SILVER;
							item_type = DatabaseID.IT_EVENT;
							break;
						case DatabaseID.MATERIAL_ITEM_BAO_LIXI_GOLD:
							item_id = DatabaseID.ITEM_EVENT_BAO_LIXI_GOLD;
							item_type = DatabaseID.IT_EVENT;
							break;
						case DatabaseID.MATERIAL_ITEM_GLASS_ROSE:
//						case 62:
							item_id = DatabaseID.ITEM_EVENT_GLASS_ROSE;
							item_type = DatabaseID.IT_EVENT;
							break;
					}
				}

				// define stock and check if stock is full
				int stock_id = -1;
				switch (item_type)
				{
					case DatabaseID.IT_MATERIAL:
					case DatabaseID.IT_POT:
					case DatabaseID.IT_DECOR:
						stock_id = DatabaseID.STOCK_WAREHOUSE;
						break;
					case DatabaseID.IT_BUG:
					case DatabaseID.IT_PRODUCT:
						stock_id = DatabaseID.STOCK_BARN;
						break;
					case DatabaseID.IT_PLANT:
						stock_id = DatabaseID.STOCK_SILO;
						break;
					case DatabaseID.IT_MONEY:
						break;
					case DatabaseID.IT_EVENT:
						break;
					default:
						LogHelper.Log("handleBuyIBShopPackage.. invalid item type.");
						_return_id = ReturnCode.RESPONSE_IBS_INVALID_ITEM_TYPE;
						requestError();
						return;
				}

				if (item_type == DatabaseID.IT_MONEY || item_type == DatabaseID.IT_EVENT) {
					LogHelper.Log("handleBuyIBShopPackage.. item_type = " + item_type + ", do not need to check stock");
				} else if (item_type == DatabaseID.IT_MATERIAL && (	
						item_id == DatabaseID.MATERIAL_ITEM_TRUNK_BRONZE ||
						item_id == DatabaseID.MATERIAL_ITEM_TRUNK_SILVER ||
						item_id == DatabaseID.MATERIAL_ITEM_TRUNK_GOLD ||
						item_id == DatabaseID.MATERIAL_ITEM_KEY_BRONZE ||
						item_id == DatabaseID.MATERIAL_ITEM_KEY_SILVER ||
						item_id == DatabaseID.MATERIAL_ITEM_KEY_GOLD)
					) {
					LogHelper.Log("handleBuyIBShopPackage.. item tresuare, do not need to check stock");
				} else {
					if (GetStock(stock_id).checkFull(stock.get(stock_id).getCapacityCurrent() + pack.getItemQuantity())) {
						LogHelper.Log("handleBuyIBShopPackage.. stock is full");
						_return_id = ReturnCode.RESPONSE_STOCK_IS_FULL;
						break;
					}
				}

				// reaching this stage means everything is OK
				// so start substract user's money then add item into his stock.
				UseMoneyResult use_diamond_result = new UseMoneyResult(UseMoneyResult.CODE.INVALID_NUMBER, 0, 0);

				boolean result = false;

				if (requiredDiamond > 0) // price in diamond
				{
					diamond_used = requiredDiamond;
					use_diamond_result = money_mgr.UseRealMoneyAndBonusMoney((int)requiredDiamond,	// log
															_command_id,							//  2. hanh dong cua gamer
															userInfo.getName(),						//  3. ten tai khoan
															userInfo.getLevel(),					//  7. level cua gamer
															_ip,									//  9. ip login v4 cua gamer
															item_type,								// 10. id cua loai item
															item_id,								// 11. id cua item
															"" + pack.getID(),						// 12. ten item
															requiredDiamond,						// 13. gia game coin cua item
															1);										// 14. so luong vat pham
				}
				else if (requiredGold > 0) // price in gold
				{
					gold_used = requiredGold;
					result = userInfo.setGold(userInfo.getGold() - requiredGold,	// log
															_command_id,			//  2. hanh dong cua gamer
															item_type, 				// 11. id cua loai item
															item_id,				// 12. id cua item
															"" + pack.getID(),		// 13. ten item
															1);
				}
				else if (requiredReputation > 0) // price in reputation
				{
					reputation_used = requiredReputation;
					result = userInfo.setReputation(userInfo.getReputation() - requiredReputation,	// log
															_command_id,			//  2. hanh dong cua gamer
															item_type, 				// 11. id cua loai item
															item_id,				// 12. id cua item
															"" + pack.getID(),		// 13. ten item
															1);
				}

				if (use_diamond_result._code == UseMoneyResult.CODE.SUCCESS || result == true) // yayyyy, substract money OK.
				{
					// LogHelper.Log("handleBuyIBShopPackage.. substract money OK.");

					if (!_use_lazy_sync_user_info)
					{
						result = SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
						if (result == false)
						{
							_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
							requestError();
							return;
						}
					}
				}
				else
				{
					_return_id = ReturnCode.RESPONSE_CANT_SUBSTRACT_MONEY;
					requestError();
					return;
				}

				// add items into stock
				switch (item_type)
				{
					case DatabaseID.IT_BUG:
					case DatabaseID.IT_POT:
					case DatabaseID.IT_PRODUCT:
					case DatabaseID.IT_PLANT:
					case DatabaseID.IT_DECOR:
						result = GetStock(stock_id).add(item_type, item_id, pack.getItemQuantity(), _command_id);
						break;
					case DatabaseID.IT_MATERIAL:
						if (item_id == DatabaseID.MATERIAL_ITEM_TRUNK_BRONZE ||
						item_id == DatabaseID.MATERIAL_ITEM_TRUNK_SILVER ||
						item_id == DatabaseID.MATERIAL_ITEM_TRUNK_GOLD ||
						item_id == DatabaseID.MATERIAL_ITEM_KEY_BRONZE ||
						item_id == DatabaseID.MATERIAL_ITEM_KEY_SILVER ||
						item_id == DatabaseID.MATERIAL_ITEM_KEY_GOLD) {
							Trunk().IncreaseItem(item_id, pack.getItemQuantity());
							SET_DB_VALUE_BINARY(KeyID.KEY_TREASURE, Trunk().GetData());
						} else {
							result = GetStock(stock_id).add(item_type, item_id, pack.getItemQuantity(), _command_id);
						}
						break;
					case DatabaseID.IT_MONEY:
					{
						switch(item_id)
						{
							case DatabaseID.GOLD_ID:
								gold_used = (long)pack.getItemQuantity();
								result = userInfo.setGold(userInfo.getGold() + (long)pack.getItemQuantity());
								break;
							case DatabaseID.DIAMOND_ID:
								// not support add diamond manually
								break;
							case DatabaseID.REPUTATION_ID:
								reputation_used = (long)pack.getItemQuantity();
								result = userInfo.setReputation(userInfo.getReputation() + (long)pack.getItemQuantity());
								break;
						}
						break;
					}
					case DatabaseID.IT_EVENT:
						if (_use_event_xmas_mini)
						{
							SetEventScore(KeyID.KEY_EVENT_XMAS_MINI, pack.getItemQuantity());
							LogHelper.LogHappy("Buy ibshop package item event, key := " + KeyID.KEY_EVENT_XMAS_MINI + ", quantity := " + pack.getItemQuantity());
						}
						else
						{
							if (stock_event != null)
							{
								result = stock_event.addGift(item_type, item_id, pack.getItemQuantity(), _command_id);
								SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
							}
						}
						break;
					default:
						LogHelper.Log("handleBuyIBShopPackage.. invalid item type.");
						_return_id = ReturnCode.RESPONSE_IBS_INVALID_ITEM_TYPE;
						requestError();
						return;
				}

				log_item.append(item_type + "_" + item_id);
				log_item.append(':').append(pack.getItemQuantity());

				if (result == false)
				{
					LogHelper.Log("handleBuyIBShopPackage.. add item fail.");
					_return_id = ReturnCode.RESPONSE_STOCK_ADD_ITEM_FAILED;
					requestError();
					return;
				}

				// add gift into stock
				//offer promotion
				boolean offered = false;
				if(_offer != null && _offer.isOfferring() && _offer.getOfferType() == DatabaseID.OFFER_CONTENT_GOLD && pack.getItemType() == DatabaseID.IT_MONEY)
				{
					String[] offercontent = _offer.getOfferContent().split(":");
					if(offercontent.length >= 2)//has offer content
					{
						for(int i = 0; i < offercontent.length-2; i+=2)
						{
							LogHelper.Log("handleBuyIBShopPackage :_offer.getID() 	= "+pack.getID());
							LogHelper.Log("handleBuyIBShopPackage :content id      		 	= "+Integer.parseInt(offercontent[i]));
							if(Integer.parseInt(offercontent[i]) ==  pack.getID())
							{
								offered = true;
								LogHelper.Log("handleBuyIBShopPackage :_offer.value 	= "+Long.parseLong(offercontent[i+1]));
								userInfo.setGold(userInfo.getGold() + Long.parseLong(offercontent[i+1]));
								_offer.setOfferAccept(true,_command_id,userInfo);
								if(_offer.isChange())
								{
									_offer.setChange(false);//saved not need change
									DBConnector.GetMembaseServer(_user_id).SetRaw(_user_id + "_" + KeyID.KEY_SPECIAL_OFFER,_offer.getData());
								}
							}
						}
					}
				}
				
				if (pack.hasPromotion() && !offered)//other promotion
				{
					String[] gift = pack.getGiftWhenBuy().split(":");
					for (int i = 0; i < gift.length - 2; i += 3)
					{
						int gift_item_type = Integer.parseInt(gift[i]);
						int gift_item_id = Integer.parseInt(gift[i+1]);
						int gift_item_quantity = Integer.parseInt(gift[i+2]);

						switch(gift_item_type)
						{
							case DatabaseID.IT_POT:
								result = GetStock(DatabaseID.STOCK_WAREHOUSE).addGift(DatabaseID.IT_POT, gift_item_id, gift_item_quantity, _command_id);
								break;
							case DatabaseID.IT_MATERIAL:
								result = GetStock(DatabaseID.STOCK_WAREHOUSE).addGift(DatabaseID.IT_MATERIAL, gift_item_id, gift_item_quantity, _command_id);
								break;
							case DatabaseID.IT_BUG:
								result = GetStock(DatabaseID.STOCK_BARN).addGift(DatabaseID.IT_BUG, gift_item_id, gift_item_quantity, _command_id);
								break;
							case DatabaseID.IT_PRODUCT:
								result = GetStock(DatabaseID.STOCK_BARN).addGift(DatabaseID.IT_PRODUCT, gift_item_id, gift_item_quantity, _command_id);
								break;
							case DatabaseID.IT_PLANT:
								result = GetStock(DatabaseID.STOCK_SILO).addGift(DatabaseID.IT_PLANT, gift_item_id, gift_item_quantity, _command_id);
								break;
							case DatabaseID.IT_DECOR:
								result = GetStock(DatabaseID.STOCK_WAREHOUSE).addGift(DatabaseID.IT_DECOR, gift_item_id, gift_item_quantity, _command_id);
								break;
							case DatabaseID.IT_MONEY:
							{
								switch(gift_item_id)
								{
									case DatabaseID.GOLD_ID:
										gold_used = (long)gift_item_quantity;
										userInfo.setGold(userInfo.getGold() + (long)gift_item_quantity);
										break;
									case DatabaseID.DIAMOND_ID:
										// not support add diamond manually
										break;
									case DatabaseID.REPUTATION_ID:
										reputation_used = (long)gift_item_quantity;
										userInfo.setReputation(userInfo.getReputation() + (long)gift_item_quantity);
										break;
								}
								break;
							}
							default:
								LogHelper.Log("handleBuyIBShopPackage.. invalid gift type.");
								_return_id = ReturnCode.RESPONSE_IBS_INVALID_ITEM_TYPE;
								requestError();
								return;
						}

						log_item.append(':').append(item_type + "_" + item_id);
						log_item.append(':').append(pack.getItemQuantity());

						if (result == false)
						{
							LogHelper.Log("handleBuyIBShopPackage.. add gift fail.");
							_return_id = ReturnCode.RESPONSE_STOCK_ADD_ITEM_FAILED;
							requestError();
							return;
						}
						else
						{
							// LogHelper.Log("handleBuyIBShopPackage.. add gift OK.");
						}
					}
				}

				// log receive item
				StringBuilder log = new StringBuilder();
				log.append(Misc.getCurrentDateTime());						//  1. thoi gian tieu tien
				log.append('\t').append(Misc.getActionName(_command_id));	//  2. hanh dong cua gamer
				log.append('\t').append(userInfo.getID());					//  3. ten tai khoan
				log.append('\t').append(userInfo.getID());					//  4. id cua role nap tien
				log.append('\t').append(userInfo.getName());				//  5. ten role
				log.append('\t').append(SkyGarden._server_id);									//  6. id cua server
				log.append('\t').append(userInfo.getLevel());				//  7. level cua gamer
				log.append('\t').append("");								//	8. id item nhan
				log.append('\t').append(0);									//	9. so luong item
				log.append('\t').append(1);									//	10. result
				log.append('\t').append(log_item);							//	11. desciption as item list
				LogHelper.Log(LogHelper.LogType.RECEIVING_ITEM, log.toString());

				// reduce sale total quantity and save in general data
				try
				{
					IBShopManager().decreaseSaleTotalQuantity(pack, 1);
				}
				catch (Exception e)
				{
					LogHelper.LogException("handleBuyIBShopPackage", e);
					// just log it, no need to handle here, this is not very important.
				}

				// save stock to db			
				result = SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, GetStock(DatabaseID.STOCK_SILO).getDataToDatabase());
				if (result == false)
				{
					LogHelper.Log("handleBuyIBShopPackage.. save stock silo error."); 
					_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
					requestError();
					return;
				}

				result = SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, GetStock(DatabaseID.STOCK_BARN).getDataToDatabase());
				if (result == false)
				{
					LogHelper.Log("handleBuyIBShopPackage.. save stock barn error."); 
					_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
					requestError();
					return;
				}

				result = SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, GetStock(DatabaseID.STOCK_WAREHOUSE).getDataToDatabase());
				if (result == false)
				{
					LogHelper.Log("handleBuyIBShopPackage.. save stock warehouse error."); 
					_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
					requestError();
					return;
				}

				if (!_use_lazy_sync_user_info)
				{
					result = SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
					if (result == false)
					{
						LogHelper.Log("handleBuyIBShopPackage.. err! save user info error."); 
						_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
						requestError();
						return;
					}
				}

				try
				{
					if (item_type == DatabaseID.IT_POT)
					{
						garden_appraisal = UpdateAppraisal(DatabaseID.APPRAISAL_POT);
					}
					else if (item_type == DatabaseID.IT_DECOR)
					{
						garden_appraisal = UpdateAppraisal(DatabaseID.APPRAISAL_DECOR);
					}
				}
				catch (Exception e)
				{
					LogHelper.LogException("handleBuyIBShopPackage.UpdateAppraisal", e);
				}
			}
			
			break;
		}
		while (pack != null);
		
		// send result to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addLong(KeyID.KEY_DIAMOND_USED, diamond_used);
		response.addLong(KeyID.KEY_GOLD_USED, gold_used);
		response.addLong(KeyID.KEY_EXP_USED, exp_used);
		response.addLong(KeyID.KEY_REPUTATION_USED, reputation_used);
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
		response.addBinary(KeyID.KEY_IBSHOP, IBShopManager().getItemListSendToClient(userInfo.getLevel(), _banned_ibshop_package)); // ibshop
		response.addLong(KeyID.KEY_GARDEN_APPRAISAL, garden_appraisal);
		response.addInt(KeyID.KEY_IBS_PACKAGE_ID, pack_id);
		if (_use_treasure_trunk) {
			response.addBinary(KeyID.KEY_TREASURE, Trunk().GetData());
		}
		
		//offer info
		if(_offer != null)
			response.addBinary(KeyID.KEY_SPECIAL_OFFER, _offer.getData());
		
		if (_use_stock_event)
		{
			response.addBinary(KeyID.KEY_STOCK_EVENT, stock_event.getDataToClient());
		}
		
		try 
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("handleBuyIBShopPackage.. response to client OK.");
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("handleBuyIBShopPackage", ex);
		}
	}
	
	private boolean gift2Stock(String sgift, int command_id, String gift_name)
	{
		try
		{
			// browse item list and add gift to storage base on item type
			String[] item_info = sgift.split(":");
			for (int i = 0; i < item_info.length - 2 ; i += 3)
			{
				int type	= Integer.parseInt(item_info[i]);
				int id		= Integer.parseInt(item_info[i+1]);
				int num		= Integer.parseInt(item_info[i+2]);
				
				switch (type)
				{
					case DatabaseID.IT_POT:
					case DatabaseID.IT_DECOR:
						GetStock(DatabaseID.STOCK_WAREHOUSE).addGift(type, id, num, command_id);
						break;
						
					case DatabaseID.IT_MATERIAL:
						if (id == DatabaseID.MATERIAL_ITEM_TRUNK_BRONZE ||
							id == DatabaseID.MATERIAL_ITEM_TRUNK_SILVER ||
							id == DatabaseID.MATERIAL_ITEM_TRUNK_GOLD ||
							id == DatabaseID.MATERIAL_ITEM_KEY_BRONZE ||
							id == DatabaseID.MATERIAL_ITEM_KEY_SILVER ||
							id == DatabaseID.MATERIAL_ITEM_KEY_GOLD) {
							Trunk().IncreaseItem(id, num);
							SET_DB_VALUE_BINARY(KeyID.KEY_TREASURE, Trunk().GetData());
						} else {
							GetStock(DatabaseID.STOCK_WAREHOUSE).addGift(type, id, num, command_id);
						}
						break;
						
					case DatabaseID.IT_PLANT:
						GetStock(DatabaseID.STOCK_SILO).addGift(type, id, num, command_id);
						break;
						
					case DatabaseID.IT_PRODUCT:
					case DatabaseID.IT_BUG:
						GetStock(DatabaseID.STOCK_BARN).addGift(type, id, num, command_id);
						break;
						
					case DatabaseID.IT_MONEY:
						if (id == DatabaseID.DIAMOND_ID)
						{
							money_mgr.IncreaseBonusMoney(num,
									MoneyManager.Reason.SYSTEM_GIFT, 
									command_id,
									GetUserInfo().getName(), 
									GetUserInfo().getLevel(),
									_ip,
									-1,
									-1,
									gift_name,
									-1,
									-1);
						}
						else if (id == DatabaseID.GOLD_ID)
						{
							GetUserInfo().setGold(GetUserInfo().getGold() + num, command_id, DatabaseID.IT_MONEY, DatabaseID.GOLD_ID, Misc.GetItemName(DatabaseID.IT_MONEY, DatabaseID.GOLD_ID), num);
						}
						else if (id == DatabaseID.REPUTATION_ID)
						{
							GetUserInfo().setReputation(GetUserInfo().getReputation() + num, command_id, DatabaseID.IT_MONEY, DatabaseID.REPUTATION_ID, Misc.GetItemName(DatabaseID.IT_MONEY, DatabaseID.REPUTATION_ID), num);
						}
						else if (id == DatabaseID.EXP_GIFT)
						{
							 GetUserInfo().setExp(GetUserInfo().getExp() + num, command_id, DatabaseID.IT_MONEY, DatabaseID.EXP_GIFT, Misc.GetItemName(DatabaseID.IT_MONEY, DatabaseID.EXP_GIFT), num);
						}
						else if (id == DatabaseID.EXP_ID)
						{
							 GetUserInfo().setExp(GetUserInfo().getExp() + num, command_id, DatabaseID.IT_MONEY, DatabaseID.EXP_ID, Misc.GetItemName(DatabaseID.IT_MONEY, DatabaseID.EXP_ID), num);
						}
						
						break;
						
					case DatabaseID.IT_EVENT:
					{
						switch (id)
						{
							case DatabaseID.ITEM_EVENT_MOON_CAKE:
								if (_use_event_mid_autumn_festival)
								{
									SetEventScore(KeyID.KEY_EVENT_MID_AUTUMN_FESTIVAL, num);
								}
								break;
							case DatabaseID.ITEM_EVENT_FLOWER_20_11:
								if (_use_event_20_11)
								{
									SetEventScore(KeyID.KEY_EVENT_20_11, num);
								}
								break;
							case DatabaseID.ITEM_EVENT_HALLOWEEN_1:
							case DatabaseID.ITEM_EVENT_HALLOWEEN_2:
							case DatabaseID.ITEM_EVENT_HALLOWEEN_3:
							case DatabaseID.ITEM_EVENT_HALLOWEEN_4:
							
							case DatabaseID.ITEM_EVENT_XMAS_2014_2:
							case DatabaseID.ITEM_EVENT_XMAS_2014_3:
							case DatabaseID.ITEM_EVENT_XMAS_2014_4:
							case DatabaseID.ITEM_EVENT_CANDLE:
							case DatabaseID.ITEM_EVENT_BAO_LIXI_GOLD:
							case DatabaseID.ITEM_EVENT_BAO_LIXI_NORMAL:
							case DatabaseID.ITEM_EVENT_BAO_LIXI_SILVER:
							case DatabaseID.ITEM_EVENT_BANH_CHUNG:
							case DatabaseID.ITEM_EVENT_GLASS_ROSE:
								if (_use_stock_event)
								{
									stock_event.addGift(type, id, num, command_id);
									SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
								}
								break;
							case DatabaseID.ITEM_EVENT_XMAS_2014_1:
								if (_use_event_xmas_mini)
								{
									SetEventScore(KeyID.KEY_EVENT_XMAS_MINI, num);
								}
								else
								{
									if (_use_stock_event)
									{
										stock_event.addGift(type, id, num, command_id);
										SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
									}
								}
								break;
								
						}
					}
						break;

					default:
						LogHelper.Log("gift2Stock.. invalid gift info");
						break;
				}
				
				try
				{
					if (type == DatabaseID.IT_POT)
						garden_appraisal = UpdateAppraisal(DatabaseID.APPRAISAL_POT);
					else if (type == DatabaseID.IT_DECOR)
						garden_appraisal = UpdateAppraisal(DatabaseID.APPRAISAL_DECOR);
				}
				catch (Exception e)
				{
					LogHelper.LogException("gift2Stock.UpdateAppraisal", e);
				}
			}
			
			// save stock to db
			boolean result = false;
			
			SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, GetStock(DatabaseID.STOCK_SILO).getDataToDatabase());
			SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, GetStock(DatabaseID.STOCK_BARN).getDataToDatabase());
			SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, GetStock(DatabaseID.STOCK_WAREHOUSE).getDataToDatabase());
			
			if (!_use_lazy_sync_user_info)
			{
				SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, GetUserInfo().getData(true));
			}
			return true;
		}
		catch (Exception e)
		{
			LogHelper.LogException("gift2Stock", e);
			return false;
		}
	}
	
	private void handleUnlockDiamondSlot()
	{
		// lock private shop data
		// who & why & when
		StringBuilder lock_info = new StringBuilder();
		lock_info.append(_user_id).append('_');
		lock_info.append("unlock").append('_');
		lock_info.append(Misc.SECONDS());
		
		if (!base.Add(_user_id + "_" + KeyID.KEY_PS_LOCK_DATA, lock_info.toString(), DatabaseID.PRIVATE_SHOP_LOCK_EXPIRED_DURATION))
		{
			// read current lock key and write log to file
			LogHelper.Log("handleUnlockFriendSlot.. error: private shop data is being locked.");
			_return_id = ReturnCode.RESPONSE_PS_DATA_IS_LOCKED;
			requestError();
			return;
		}
		else
		{
			// LogHelper.Log("handleUnlockFriendSlot.. lock private shop data OK: " + lock_info);
		}
		
		StringBuilder log = new StringBuilder();
		
		boolean process_result = true;
		long diamond_used = 0;
		
		// refresh private shop data from db
		PShopMgr.loadFromDatabase(KeyID.KEY_PRIVATE_SHOP);
		
		// find the next unoccupied slot
		int next_slot_id = -1;
		for (int i = DatabaseID.PRIVATE_SHOP_START_SLOT_DIAMOND; i < DatabaseID.PRIVATE_SHOP_MAX_SLOT; i++)
		{
			boolean found = false;
			for (PrivateShopSlot slot : PShopMgr.slots)
			{
				if (slot.getId() == i)
				{
					found = true;
					break;
				}
			}
			
			if (found == true)
			{
				continue;
			}
			else
			{
				next_slot_id = i;
				break;
			}
		}
		
		if (next_slot_id == -1)
		{
			LogHelper.Log("handleUnlockDiamondSlot.. cant find unoccupied slot."); 
			_return_id = ReturnCode.RESPONSE_PS_CANT_FIND_UNOCCUPIED_SLOT_DIAMOND;
			process_result = false;
		}
		
		// check price and substract user money.
		if (process_result)
		{
			int required_diamond = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_PRIVATE_SHOP][next_slot_id][DatabaseID.PS_SHOP_REQUIRED_DIAMOND]);
			if (required_diamond < 0)
			{
				LogHelper.Log("handleUnlockDiamondSlot.. wrong required diamond number."); 
				_return_id = ReturnCode.RESPONSE_IBS_INVALID_PRICE;
				process_result = false;
			}

			if (process_result)
			{
				if (required_diamond > money_mgr.GetBonusMoney() + money_mgr.GetRealMoney())
				{
					LogHelper.Log("handleUnlockDiamondSlot.. not enough diamond");
					_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_DIAMOND;
					process_result = false;
				}
				
				if (process_result)
				{
					log.append(next_slot_id);
					log.append('\t').append(money_mgr.GetRealMoney());
					log.append('\t').append(money_mgr.GetBonusMoney());
					
					diamond_used = required_diamond;
					UseMoneyResult use_money_result = money_mgr.UseRealMoneyAndBonusMoney(required_diamond,	// log
															_command_id, "" + next_slot_id,					//  2. hanh dong cua gamer
															userInfo.getName(),								//  3. ten tai khoan
															userInfo.getLevel(),							//  7. level cua gamer
															_ip,											//  9. ip login v4 cua gamer
															-1,												// 10. id cua loai item
															-1,												// 11. id cua item
															"",												// 12. ten item
															required_diamond,								// 13. gia game coin cua item
															1);												// 14. so luong vat pham
					
					if (use_money_result._code != UseMoneyResult.CODE.SUCCESS)
					{
						log.append('\t').append(money_mgr.GetRealMoney());
						log.append('\t').append(money_mgr.GetBonusMoney());
						
						LogHelper.Log("handleUnlockDiamondSlot.. can not substract user diamond");
						_return_id = ReturnCode.RESPONSE_CANT_SUBSTRACT_MONEY;
						process_result = false;
					}
				}
			}
		}
		
		// unlock slot
		if (process_result)
		{
			// LogHelper.Log("handleUnlockDiamondSlot.. opening slot " + next_slot_id);
			PrivateShopSlot slot = new PrivateShopSlot(next_slot_id);
			slot.setLockStatus(false);
			
			process_result = PShopMgr.slots.add(slot);

			// LogHelper.Log("handleUnlockDiamondSlot.. open slot " + slot.getId() + " " + process_result);
		}
		
		// save to db
		if (process_result)
		{
			process_result = PShopMgr.saveDataToDatabase(KeyID.KEY_PRIVATE_SHOP);
			
			if (process_result == false)
			{
				LogHelper.Log("handleUnlockDiamondSlot.. save to db fail."); 
				_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
				requestError();
				return;
			}
			
			// LogHelper.Log("handleUnlockDiamondSlot.. save to db OK."); 
		}
		
		// unlock private shop data
		process_result = base.Delete(_user_id + "_" + KeyID.KEY_PS_LOCK_DATA);
		
		// LogHelper.Log("handleUnlockDiamondSlot.. unlock private shop data: " + process_result);
		
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addLong(KeyID.KEY_DIAMOND_USED, diamond_used); //user's diamond
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney())); //user's diamond
		response.addBinary(KeyID.KEY_PRIVATE_SHOP, PShopMgr.getDataToClient());
		try 
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("handleUnlockDiamondSlot.. response to client OK.");
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("handleUnlockDiamondSlot", ex);
		}
	}
	
	private void handleUnlockFriendSlot()
	{
		// lock private shop data
		// who & why & when
		StringBuilder lock_info = new StringBuilder();
		lock_info.append(_user_id).append('_');
		lock_info.append("unlock").append('_');
		lock_info.append(Misc.SECONDS());
		
		if (!base.Add(_user_id + "_" + KeyID.KEY_PS_LOCK_DATA, lock_info.toString(), DatabaseID.PRIVATE_SHOP_LOCK_EXPIRED_DURATION))
		{
			// read current lock key and write log to file
			LogHelper.Log("handleUnlockFriendSlot.. error: private shop data is being locked.");
			_return_id = ReturnCode.RESPONSE_PS_DATA_IS_LOCKED;
			requestError();
			return;
		}
		else
		{
			// LogHelper.Log("handleUnlockFriendSlot.. lock private shop data OK: " + lock_info);
		}
		
		boolean process_result = true;
		
		// refresh private shop data from db
		PShopMgr.loadFromDatabase(KeyID.KEY_PRIVATE_SHOP);
		
		// find next unoccupied slot id
		int next_slot_id = -1;
		for (int i = DatabaseID.PRIVATE_SHOP_START_SLOT_FRIEND; i < DatabaseID.PRIVATE_SHOP_START_SLOT_FRIEND + DatabaseID.PRIVATE_SHOP_NUMBER_OF_SLOT_FRIEND; i++)
		{
			boolean found = false;
			for (PrivateShopSlot slot : PShopMgr.slots)
			{
				if (slot.getId() == i)
				{
					found = true;
					break;
				}
			}
			
			if (found == true)
			{
				continue;
			}
			else
			{
				next_slot_id = i;
				break;
			}
		}
		
		if (next_slot_id == -1)
		{
			LogHelper.Log("handleUnlockFriendSlot.. cant find unoccupied slot."); 
			_return_id = ReturnCode.RESPONSE_PS_CANT_FIND_UNOCCUPIED_SLOT_FRIEND;
			process_result = false;
		}
		
		// calculate required friend
		if (process_result)
		{
			int required_friend = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_PRIVATE_SHOP][next_slot_id][DatabaseID.PS_SHOP_REQUIRED_FRIEND]);
			if (required_friend < 0)
			{
				LogHelper.Log("handleUnlockFriendSlot.. wrong required friend number."); 
				_return_id = ReturnCode.RESPONSE_PS_INVALID_FRIEND_NUMBER;
				process_result = false;
			}

			String[] friendlist = friend_mgr.GetFriendList().split(";");
			
			if (friendlist.length >= required_friend)
			{
				process_result = true;
			}
			else
			{
				_return_id = ReturnCode.RESPONSE_PS_INVALID_FRIEND_NUMBER;
				process_result = false;
			}
			
			// LogHelper.Log("handleUnlockFriendSlot.. current friend number: " + friendlist.length);
			// LogHelper.Log("handleUnlockFriendSlot.. required friend number: " + required_friend);
		}
		
		if (process_result)
		{
			// LogHelper.Log("handleUnlockFriendSlot.. opening slot " + next_slot_id); 
			PrivateShopSlot slot = new PrivateShopSlot(next_slot_id);
			slot.setLockStatus(false);

			process_result = PShopMgr.slots.add(slot);

			// LogHelper.Log("handleUnlockFriendSlot.. open slot " + slot.getId() + " " + process_result); 
		}
		
		// save to db
		if (process_result)
		{
			process_result = PShopMgr.saveDataToDatabase(KeyID.KEY_PRIVATE_SHOP);
			
			if (process_result == false)
			{
				LogHelper.Log("handleUnlockFriendSlot.. save to db fail."); 
				_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
				requestError();
				return;
			}
			
			// LogHelper.Log("handleUnlockFriendSlot.. save to db OK."); 
		}
		
		// unlock private shop data
		process_result = base.Delete(_user_id + "_" + KeyID.KEY_PS_LOCK_DATA);
		
		// LogHelper.Log("handleUnlockFriendSlot.. unlock private shop data: " + process_result);
		
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_PRIVATE_SHOP, PShopMgr.getDataToClient());
		try 
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("handleUnlockFriendSlot.. response to client OK.");
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("handleUnlockFriendSlot", ex);
		}
	}
	
	private void handlePlaceItemPShop(FBEncrypt encrypt)
	{
		// lock private shop data
		// who & why & when
		StringBuilder lock_info = new StringBuilder();
		lock_info.append(_user_id).append('_');
		lock_info.append("sell").append('_');
		lock_info.append(Misc.SECONDS());
		
		if (!base.Add(_user_id + "_" + KeyID.KEY_PS_LOCK_DATA, lock_info.toString(), DatabaseID.PRIVATE_SHOP_LOCK_EXPIRED_DURATION))
		{
			// read current lock key and write log to file
			LogHelper.Log("handleUnlockFriendSlot.. error: private shop data is being locked.");
			_return_id = ReturnCode.RESPONSE_PS_DATA_IS_LOCKED;
			requestError();
			return;
		}
		else
		{
			// LogHelper.Log("handleUnlockFriendSlot.. lock private shop data OK: " + lock_info);
		}
		
		// refresh private shop data from db
		PShopMgr.loadFromDatabase(KeyID.KEY_PRIVATE_SHOP);
		
		// get valid params
		int slotID = encrypt.getInt(KeyID.KEY_PS_SLOT_ID);
		int itemType = encrypt.getInt(KeyID.KEY_PS_ITEM_TYPE);
		int itemID = encrypt.getInt(KeyID.KEY_PS_ITEM_ID);
		int itemNum = encrypt.getInt(KeyID.KEY_PS_ITEM_NUMBER);
		int moneyType = encrypt.getInt(KeyID.KEY_PS_ITEM_MONEY_TYPE);
		long price = encrypt.getLong(KeyID.KEY_PS_ITEM_PRICE);
		boolean hasAdvertise = encrypt.getBoolean(KeyID.KEY_PS_ITEM_ADVERTISE);
		
		if (slotID < 0 || slotID >= DatabaseID.PRIVATE_SHOP_MAX_SLOT)
		{
			LogHelper.Log("handlePlaceItemPShop.. invalid slot id");
			_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
			requestError();
			return;
		}
		
		if (itemType < 0 || itemType > DatabaseID.IT_MATERIAL || itemType == DatabaseID.IT_DECOR)
		{
			LogHelper.Log("handlePlaceItemPShop.. invalid item type.");
			_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
			requestError();
			return;
		}
		
		if (itemID < 0)
		{
			LogHelper.Log("handlePlaceItemPShop.. invalid item id.");
			_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
			requestError();
			return;
		}
		
		if (itemNum <= 0 || itemNum > 10)
		{
			LogHelper.Log("handlePlaceItemPShop.. invalid item quantity.");
			_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
			requestError();
			return;
		}
		
		if (moneyType < 0 || moneyType > 2)
		{
			LogHelper.Log("handlePlaceItemPShop.. invalid money type.");
			_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
			requestError();
			return;
		}
		
		// check if this item is not allowed to sale
		try {
			Object obj = DBConnector.GetMembaseServerForTemporaryData().Get("ps_restricted_item");
			if (obj != null) {
				String ps_restricted_item = ((String)obj);
				if (!ps_restricted_item.equals("null")) {
					String[] aos = ps_restricted_item.split(":");
					for (int i = 0; i < aos.length; i+=2) {
						if (itemType == Integer.parseInt(aos[i]) && itemID == Integer.parseInt(aos[i+1])) {
							LogHelper.LogHappy("Item not for sale");
							_return_id = ReturnCode.RESPONSE_ITEM_IS_NOT_FOR_SALED;
							requestError();
							return;
						}
					}
				}
			}
		} catch (Exception e) {
			LogHelper.LogException("CheckRestrictedItem", e);
		}
                
//		for (String s : ItemNotSale)
//		{
//			if (s.equals(itemType + "_" + itemID))
//			{
//				_return_id = ReturnCode.RESPONSE_ITEM_IS_NOT_FOR_SALED;
//				requestError();
//				return;
//			}
//		}
		
		// update 08/01: not allow to sell pot
		if (itemType == DatabaseID.IT_POT)
		{
			boolean allow = false;
			try
			{
				Object obj = DBConnector.GetMembaseServerForTemporaryData().Get("sell_pot_allowance");
				if (obj != null)
				{
					allow = ((String)obj).equals("1");
				}
			}
			catch (Exception e)
			{
				LogHelper.LogException("PlacePotAllowance", e);
			}
			
			if (!allow)
			{
				LogHelper.LogHappy("Not allow to sell pot");
				_return_id = ReturnCode.RESPONSE_ITEM_IS_NOT_FOR_SALED;
				requestError();
				return;
			}
		}
		
		float item_default_max_price = -1;
		switch(itemType)
		{
			case DatabaseID.IT_PLANT:
				if (itemID < Server.s_globalDB[DatabaseID.SHEET_SEED].length)
				{
					item_default_max_price = Misc.PARSE_FLOAT(Server.s_globalDB[DatabaseID.SHEET_SEED][itemID][DatabaseID.SEED_GOLD_SELL_MAX]);
				}
				break;
			case DatabaseID.IT_POT:
				if (itemID < Server.s_globalDB[DatabaseID.SHEET_POT].length)
				{
					item_default_max_price = Misc.PARSE_FLOAT(Server.s_globalDB[DatabaseID.SHEET_POT][itemID][DatabaseID.POT_GOLD_MAX]);
				}
				break;
			case DatabaseID.IT_PRODUCT:
				if (itemID < Server.s_globalDB[DatabaseID.SHEET_PRODUCT].length)
				{
					item_default_max_price = Misc.PARSE_FLOAT(Server.s_globalDB[DatabaseID.SHEET_PRODUCT][itemID][DatabaseID.PRODUCT_GOLD_MAX]);
				}
				break;
			case DatabaseID.IT_MATERIAL:
				if (itemID < Server.s_globalDB[DatabaseID.SHEET_MATERIAL].length)
				{
					item_default_max_price = Misc.PARSE_FLOAT(Server.s_globalDB[DatabaseID.SHEET_MATERIAL][itemID][DatabaseID.MATERIAL_GOLD_MAX]);
				}
				break;
			case DatabaseID.IT_BUG:
				if (itemID < Server.s_globalDB[DatabaseID.SHEET_PEST].length)
				{
					item_default_max_price = Misc.PARSE_FLOAT(Server.s_globalDB[DatabaseID.SHEET_PEST][itemID][DatabaseID.PEST_GOLD_MAX]);
				}
				break;
//			case DatabaseID.IT_DECOR:
//				if (itemID < Server.s_globalDB[DatabaseID.SHEET_DECOR].length)
//				{
//					item_default_max_price = Misc.PARSE_FLOAT(Server.s_globalDB[DatabaseID.SHEET_DECOR][itemID][DatabaseID.DECOR_GOLD_MAX]);
//				}
//				break;
			default:
				item_default_max_price = -1;
				break;
		}
		
		if (item_default_max_price <= 0)
		{
			LogHelper.Log("handlePlaceItemPShop.. err! invalid item's default max price.");
			_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
			requestError();
			return;
		}
		
		long max_price = (long)(Math.ceil(item_default_max_price * itemNum));
		
		if (price <= 0 || price > max_price)
		{
			LogHelper.Log("handlePlaceItemPShop.. invalid money price.");
			_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
			requestError();
			return;
		}
		
		if (hasAdvertise)
		{
			if (Misc.SECONDS() < PShopMgr.getAdsAvailableTime())
			{
				LogHelper.Log("handlePlaceItemPShop.. ads is not available yet.");
				_return_id = ReturnCode.RESPONSE_PS_ADS_NOT_AVAILABLE;
				requestError();
				return;
			}
		}

		int stock_id = -1;
		
		switch (itemType)
		{
			case DatabaseID.IT_PLANT:
				stock_id = DatabaseID.STOCK_SILO;
				break;
			case DatabaseID.IT_MATERIAL:
			case DatabaseID.IT_POT:
			case DatabaseID.IT_DECOR:
				stock_id = DatabaseID.STOCK_WAREHOUSE;
				break;
			case DatabaseID.IT_PRODUCT:
			case DatabaseID.IT_BUG:
				stock_id = DatabaseID.STOCK_BARN;
				break;
			default:
				LogHelper.Log("handlePlaceItemPShop.. invalid item type");
				_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
				requestError();
				return;
		}
		
		int number_of_item_in_stock = GetStock(stock_id).getProductNum(itemType, itemID);
		
		if (number_of_item_in_stock < itemNum)
		{
			LogHelper.Log("handlePlaceItemPShop.. not enough item in stock");
			_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_PRODUCT;
			requestError();
			return;
		}
		
		// proceed
		boolean result = false;
		int acm_index = -1;
		for (PrivateShopSlot slot : PShopMgr.slots)
		{
			if (slot.getId() == slotID)
			{
				if (slot.item.getStatus() != DatabaseID.PS_ITEM_STATUS_EMPTY)
				{
					LogHelper.Log("handlePlaceItemPShop.. err! slot is not empty.");
					_return_id = ReturnCode.RESPONSE_ERROR;
					result = false;
					break;
				}
				
				if (slot.item.setStatus(DatabaseID.PS_ITEM_STATUS_SELLING) == false)
				{
					LogHelper.Log("handlePlaceItemPShop.. err! concurrent access problem. Cant set item for selling.");
					_return_id = ReturnCode.RESPONSE_ERROR;
					result = false;
					break;
				}
				
				// decrease the item in stocks.
				stock.get(stock_id).updateValue(_command_id, itemType, itemID, number_of_item_in_stock - itemNum);
				
				int cancel_price = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_PRIVATE_SHOP][slotID][DatabaseID.PS_SHOP_REQUIRED_DIAMOND_CANCEL]);
				
				slot.item.setType(itemType);
				slot.item.setId(itemID);
				slot.item.setNumber(itemNum);
				slot.item.setMoneyType(moneyType);
				slot.item.setPrice(price);
				slot.item.setStartDate(Misc.SECONDS());
				slot.item.setEndDate(Misc.SECONDS() + DatabaseID.PRIVATE_SHOP_ITEM_EXPIRE_TIME);
				slot.item.setCancelPrice(cancel_price);
				slot.item.setAdvertise(hasAdvertise);
				
				// LogHelper.Log("handlePlaceItemPShop.. place item in shop OK.");
				
				result = true;
				
				if (hasAdvertise)
				{
					PShopMgr.setAdsAvailableTime(Misc.SECONDS() + DatabaseID.PRIVATE_SHOP_ADS_PENDING_DURATION * 60);
					slot.item.setAdvertiseEndTime(Misc.SECONDS() + DatabaseID.PRIVATE_SHOP_ADS_MAX_TIME);
					addADS(userInfo.getDeviceID() + KeyID.NEWSBOARD_SLOT_CHAR + slotID, slot.item);
					
					if (_use_achievement)
					{
						acm_index = GetAchievementManager().Increase(CommandID.CMD_SET_ADS_PSHOP, 1);
					}
				}
				
				break;
			}
		}
		
		// log selling items
		StringBuilder log = new StringBuilder();
		log.append(Misc.getCurrentDateTime());								//  1. thoi gian tieu tien
		log.append('\t').append(Misc.getActionName(_command_id));			//  2. hanh dong cua gamer
		log.append('\t').append(userInfo.getID());							//  3. ten tai khoan
		log.append('\t').append(userInfo.getID());							//  4. id cua role nap tien
		log.append('\t').append(userInfo.getName());						//  5. ten role
		log.append('\t').append(SkyGarden._server_id);											//  6. id cua server
		log.append('\t').append(userInfo.getLevel());						//  7. level cua gamer
		log.append('\t').append(itemType + "_" + itemID);					//  8. id cua item ban
		log.append('\t').append(itemNum);									//  9. so luong vat pham ban
		log.append('\t').append(DatabaseID.IT_MONEY + "_" + moneyType);		//  10. id cua item nhan duoc
		log.append('\t').append(price);										//  11. so luong cua item nhan duoc
		log.append('\t').append(result == true ? 1 : 0);					//  12. ket qua
		log.append('\t').append("");										//  13. Ten tai khoan giao dich
		log.append('\t').append(userInfo.getID() + "_" + System.currentTimeMillis() + "_" + slotID);	//  14. Transaction id cua giao dich
		LogHelper.Log(LogHelper.LogType.SELLING_ITEM, log.toString());
		
		if (result == true)
		{
			// save to db
			result = SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + stock_id, stock.get(stock_id).getDataToDatabase());
			if (result == false)
			{
				LogHelper.Log("handlePlaceItemPShop.. save to db fail."); 
				_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
				requestError();
				return;
			}

			result = PShopMgr.saveDataToDatabase(KeyID.KEY_PRIVATE_SHOP);
			if (result == false)
			{
				LogHelper.Log("handlePlaceItemPShop.. save to db fail."); 
				_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
				requestError();
				return;
			}
			// LogHelper.Log("handlePlaceItemPShop.. save to db OK.");
		}
		else
		{
			LogHelper.Log("handlePlaceItemPShop.. place item in shop failed.");
			_return_id = ReturnCode.RESPONSE_ERROR;
		}
		
		// unlock private shop data
		base.Delete(_user_id + "_" + KeyID.KEY_PS_LOCK_DATA);
		
		// Get a list of friend who is viewing my private shop.
		// Then ask him to reload my private shop content.
		byte[] viewer_bin = null;
		try
		{
			viewer_bin = base.GetRaw(_user_id + "_" + KeyID.KEY_PS_VIEWER);
			
			if (viewer_bin == null || viewer_bin.length == 0)
			{
				// LogHelper.Log("handlePlaceItemPShop.. empty viewer list. No need to notify friend.");
			}
			else
			{
				FBEncrypt viewer_list = new FBEncrypt();
				viewer_list.decode(viewer_bin, true);

				int i = 0;
				while (viewer_list.hasKey("viewer" + "_" + "did" + "_" + i))
				{
					String viewer_did = viewer_list.getString("viewer" + "_" + "did" + "_" + i);
					String viewer_ip = viewer_list.getString("viewer" + "_" + "ip" + "_" + i);
//					int viewer_port = viewer_list.getInt("viewer" + "_" + "port" + "_" + i);

					FBEncrypt udpreq = new FBEncrypt();
					udpreq.addShort(KeyID.KEY_USER_COMMAND_ID, CommandID.CMD_UDP_REQUEST_RELOAD_PSHOP);
					udpreq.addString(KeyID.KEY_DEVICE_ID, viewer_did);

					ByteBuffer buffer = ByteBuffer.allocate(udpreq.toByteArray().length + 8);
					buffer.put(udpreq.toByteArray());
					buffer.flip();

					SkyGardenUser.udpRequest(buffer, viewer_ip, ProjectConfig.UDP_PORT, false);
					// LogHelper.Log("[udp] handlePlaceItemPShop.. sent notification to " + viewer_did + ":" + viewer_ip + ":" + ProjectConfig.UDP_PORT);

					i++;
				}
			}
		}
		catch (Exception e)
		{
			LogHelper.LogException("SkyGardenUser.handlePlaceItemPShop", e);
		}
		
		try
		{
			if (itemType == DatabaseID.IT_POT)
			{
				garden_appraisal = UpdateAppraisal(DatabaseID.APPRAISAL_POT);
			}
			else if (itemType == DatabaseID.IT_DECOR)
			{
				garden_appraisal = UpdateAppraisal(DatabaseID.APPRAISAL_DECOR);
			}
		}
		catch (Exception e)
		{
			LogHelper.LogException("handlePlaceItemPShop.UpdateAppraisal", e);
		}
		
		// NPC Buy Item pot
		if (itemType == DatabaseID.IT_POT)
		{
			for (PrivateShopSlot slot: PShopMgr.slots)
			{
				// double check
				if (slot.getId() == slotID &&
					slot.item.getStatus() == DatabaseID.PS_ITEM_STATUS_SELLING) 
				{
					 // reset friend item and set its status to SOLD
					if (slot.item.setStatus(DatabaseID.PS_ITEM_STATUS_SOLD) == false)
					{
						LogHelper.Log("ExecuteNPCAI.BuyExpiredItem.. err! can't set item status to sold. Concurrent access error.");
						_return_id = ReturnCode.RESPONSE_CONCURRENT_ACCESS_PROBLEM;
						break;
					}

					slot.item.setAdvertise(false);
					slot.item.setAdvertiseEndTime(-1);
					slot.item.setBuyerID(KeyID.NPC_NAME);

					removeADS(userInfo.getDeviceID() + KeyID.NEWSBOARD_SLOT_CHAR + slot.getId());

					PShopMgr.saveDataToDatabase(KeyID.KEY_PRIVATE_SHOP);

					// log SPENT_ITEM
					StringBuilder sb = new StringBuilder();
					sb.append(Misc.getCurrentDateTime());													//  1. thoi gian tieu tien
					sb.append('\t').append(Misc.getActionName(_command_id));								//  2. hanh dong cua gamer
					sb.append('\t').append(userInfo.getID());												//  3. id
					sb.append('\t').append(userInfo.getID());												//  4. role id
					sb.append('\t').append(userInfo.getName());												//  5. name
					sb.append('\t').append(SkyGarden._server_id);											//  6. server id
					sb.append('\t').append(userInfo.getLevel());											//  7. level
					sb.append('\t').append(slot.item.getType() + "_" + slot.item.getId());					//  8. id item su dung
					sb.append('\t').append(slot.item.getPrice());											//  9. so luong item su dung
					sb.append('\t').append(DatabaseID.IT_MONEY + "_" + slot.item.getMoneyType());			//  10. id item nhan
					sb.append('\t').append(slot.item.getPrice());											//  11. so luong item nhan
					sb.append('\t').append(1);																//  12. result
					sb.append('\t').append(KeyID.NPC_NAME);													//  13. ten tai khoan giao dich
					sb.append('\t').append(userInfo.getID() + "_" + System.currentTimeMillis());			//  14. transaction id
					LogHelper.Log(LogHelper.LogType.SPENT_ITEM, sb.toString());

					break;
				}
			}
		}
		
		// response
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addBinary(KeyID.KEY_PRIVATE_SHOP, PShopMgr.getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + stock_id, stock.get(stock_id).getDataToClient());
		response.addLong(KeyID.KEY_GARDEN_APPRAISAL, garden_appraisal);
		
		if (_use_achievement && acm_index != -1)
		{
			response.addInt(KeyID.KEY_ACHIEVEMENT_ID, acm_index);
			response.addBinary(KeyID.KEY_ACHIEVEMENT_INDEX + acm_index, GetAchievementManager().GetAchievement(acm_index).getData());
		}
		
		try 
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("handlePlaceItemPShop.. response to client OK.");
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("handlePlaceItemPShop", ex);
		}
	}
	
	public void handleLoadOwnShop()
	{
		// reload private shop
		PShopMgr.loadFromDatabase(KeyID.KEY_PRIVATE_SHOP);
		
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_PRIVATE_SHOP, PShopMgr.getDataToClient());
		try 
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("handleLoadOwnShop.. response to client OK.");
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("handleLoadOwnShop", ex);
		}
	}
	
	// TODO: add friend id for client to check before udpate
	public void handleLoadFriendPShop(FBEncrypt encrypt)
	{
		boolean process_result = true;
		
		// get friend user id
		long friend_user_id = -1;
		String friend_device_id = "";
		
		// get friend user id from friend's device id
		if (encrypt.hasKey(KeyID.KEY_FRIEND_DEVICE_ID))
		{
			friend_device_id = encrypt.getString(KeyID.KEY_FRIEND_DEVICE_ID);
			
			// LogHelper.Log("handleLoadFriendPShop.. friend_device_id = " + friend_device_id);
			
			if (bCheatTest)
			{
				if (friend_device_id.equals(KeyID.NPC_NAME))
				{
					handleLoadNPCShop();
					return;
				}
			}
			
			friend_user_id = GetUserID(friend_device_id);
			
			if (friend_user_id < 0)
			{
				LogHelper.Log("handleLoadFriendPShop.. friend is unstable user, does not have private shop data");
				_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
				process_result = false;
			}
		}
		
		// read friend's private shop data
		if (process_result)
		{
//			LogHelper.Log("handleLoadFriendPShop.. loading private shop data of friend id " + friend_user_id);
			
			byte[] friend_ps_bin = null;
			
			try
			{
				friend_ps_bin = DBConnector.GetMembaseServer(friend_user_id).GetRaw(friend_user_id + "_" + KeyID.KEY_PRIVATE_SHOP);
			}
			catch (Exception e)
			{
				LogHelper.LogException("handleLoadFriendPShop", e);
				friend_ps_bin = null;
			}
			
			if (friend_ps_bin == null || friend_ps_bin.length == 0)
			{
				LogHelper.Log("handleLoadFriendPShop.. friend private shop bin is NULL.");
				process_result = false;
			}
			
			if (process_result)
			{
				FBEncrypt friend_ps_data = new FBEncrypt();
				friend_ps_data.decode(friend_ps_bin, true);
				// LogHelper.Log("handleLoadFriendPShop.. read friend private shop data OK.");
				
				// response to client
				FBEncrypt response = new FBEncrypt();
				response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
				response.addString(KeyID.KEY_FRIEND_DEVICE_ID, friend_device_id);
				response.addBinary(KeyID.KEY_PRIVATE_SHOP, friend_ps_data.toByteArray());
				try 
				{
					_client.WriteZip(response.toByteArray());
					// LogHelper.Log("handleLoadFriendPShop.. response to client OK.");
				} 
				catch (Exception ex) 
				{
				}
				
				// notify to previous friend that i'm leaving his shop.
				String previous_friend_device_id = "";
				if (encrypt.hasKey(KeyID.KEY_PREVIOUS_FRIEND_DEVICE_ID))
				{
					// LogHelper.Log("handleLoadFriendPShop.. notify leave previous friend's shop.");
					previous_friend_device_id = encrypt.getString(KeyID.KEY_PREVIOUS_FRIEND_DEVICE_ID);

					// LogHelper.Log("handleLoadFriendPShop.. previous_friend_device_id = " + previous_friend_device_id);

					FBEncrypt e = new FBEncrypt();
					e.addString(KeyID.KEY_FRIEND_DEVICE_ID, previous_friend_device_id);
					e.decode(e.toByteArray());

					_command_id = CommandID.CMD_LEAVE_FRIEND_SHOP;
					_request_id++;
					handleLeaveFriendShop(e);
				}
				else
				{
					// LogHelper.Log("handleLoadFriendPShop.. cant found previous friend id to notify leave shop.");
				}
				
				// notify to current friend that i'm viewing his shop (if he's online).
				notifyViewFriendShop(friend_user_id);
				
				return;
			}
		}
		
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		try 
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("handleLoadFriendPShop.. response to client OK.");
		}
		catch (Exception ex) 
		{
		}
	}
	
	private void handleLoadNPCShop()
	{
		if (!_is_stable_user)
		{
			LogHelper.Log("handleLoadNPCShop.. err! private shop function is not unlocked");
			_return_id = ReturnCode.RESPONSE_ERROR;
			requestError();
			return;
		}

		String key = _user_id + "_" + "npc";

		// LogHelper.Log("handleLoadNPCShop.. load npc private shop data with key: " + key);

		byte[] b = null;

		try
		{
			b = base.GetRaw(key + "_" + KeyID.KEY_PRIVATE_SHOP);
		}
		catch (Exception e)
		{
			LogHelper.LogException("handleLoadNPCShop", e);
			b = null;
		}

		if (b == null || b.length == 0)
		{
			LogHelper.Log("handleLoadNPCShop.. err! friend private shop bin is NULL.");
			_return_id = ReturnCode.RESPONSE_ERROR;
			requestError();
			return;
		}

		FBEncrypt npcshop = new FBEncrypt();
		npcshop.decode(b, true);
		// LogHelper.Log("handleLoadNPCShop.. read npc private shop data OK.");

		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_PRIVATE_SHOP, npcshop.toByteArray());
		try 
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("handleLoadNPCShop.. response to client OK.");
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("handleLoadNPCShop", ex);
		}
	}
	
	/*
	 * Should be very careful here, user can abuse this function to farm free items.
	 */
	private void RefreshNPCShop()
	{
		boolean should_refresh_shop = GetUserInfo().GetLastLoginTime() < Misc.GetServerCurrentResetTime();
		
		if (IsServerHappy()) {
			should_refresh_shop = true;
		}
		
		if (!should_refresh_shop)
		{
			return;
		}
		else
		{
			// just to be safe
			should_refresh_shop = false;
			
			// create a list of unlocked items of all types
			List<String> unlockeditems = new ArrayList<String>();
			int previous_bug_id = -1;
			for (int i = 0; i <= userInfo.getLevel(); i++)
			{
				for (int j = DatabaseID.USER_SEED_ID_UNLOCK; j < DatabaseID.USER_PROD_ID_UNLOCK; j++)
				{
					if (j == DatabaseID.USER_POT_ID_UNLOCK) continue; // not sell pot
					
					String[] items_id = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_USER_LEVEL][i][j]).split(":");
					if (items_id.length < 0)
					{
						LogHelper.Log("err! invalid unlocked info");
						continue;
					}

					for (int k = 0; k < items_id.length; k+=2)
					{
						String item_id = items_id[k];
						
						if (Integer.parseInt(item_id) < 0)
						{
							continue;
						}
						
						// build item info
						StringBuilder item = new StringBuilder();
						item.append(DatabaseID.IT_PLANT);
						item.append(":").append(Integer.parseInt(item_id));

						// add to list
						unlockeditems.add(item.toString());
						
						if (j == DatabaseID.USER_SEED_ID_UNLOCK)
						{
							int bug_id = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_SEED][Integer.parseInt(item_id)][DatabaseID.SEED_BUG_ID]);
							
							if (bug_id != previous_bug_id)
							{
								previous_bug_id = bug_id;
								
								// build item info
								StringBuilder bug = new StringBuilder();
								bug.append(DatabaseID.IT_BUG);
								bug.append(":").append(bug_id);

								// add to list
								unlockeditems.add(bug.toString());
							}
						}
					}
				}
			}
			
			// random item in that list and add to store
			NPCShopMgr.slots.clear();
			
			// JACK sell special items
			try {				
				int slot_id = 0;
				if (userInfo.getLevel() > 11) {
					for (int i = 0; i < DatabaseID.PRIVATE_SHOP_MAX_SLOT; i++) {
						Object obj = DBConnector.GetMembaseServerForTemporaryData().Get("npc_sell_special_item" + "_" + i);

						if (obj == null) {
							break;
						}

						String[] sa = ((String)obj).split(";");
						String start = sa[0];
						String end = sa[1];

						if (Misc.InEvent(start, end)) {
							String[] items = sa[2].split(":");
							int item_type = Integer.parseInt(items[0]);
							int item_id = Integer.parseInt(items[1]);
							int item_num = Integer.parseInt(items[2]);

							int price = Integer.parseInt(sa[3]);

							if (item_type == DatabaseID.IT_MATERIAL && item_id == DatabaseID.MATERIAL_ITEM_GLASS_ROSE) {
								item_type = DatabaseID.IT_EVENT;
								item_id = DatabaseID.ITEM_EVENT_GLASS_ROSE;
							}

							// create item in pshop
							PrivateShopSlot slot = new PrivateShopSlot(slot_id);
							slot.setLockStatus(false);
							slot.item.setStatus(DatabaseID.PS_ITEM_STATUS_SELLING);
							slot.item.setType(item_type);
							slot.item.setId(item_id);
							slot.item.setNumber(item_num);
							slot.item.setMoneyType(DatabaseID.GOLD_ID);
							slot.item.setPrice(price);
							slot.item.setStartDate(Misc.SECONDS());
							slot.item.setEndDate(Misc.SECONDS() + DatabaseID.PRIVATE_SHOP_ITEM_EXPIRE_TIME); // 7 days
							slot.item.setCancelPrice(1);
							slot.item.setAdvertise(false);
							NPCShopMgr.slots.add(slot);

							slot_id++;
							LogHelper.LogHappy("Jack sell special items := " + item_type + "_" + item_id + ":" + item_num + ", price := " + price);
						}
					}
				}
				
				for (int i = 0; i < DatabaseID.NPC_SHOP_NUM_ITEM_SELL; i++){
					if (unlockeditems.size() > 0) {
						// random item
						String s = unlockeditems.get(Misc.RANDOM_RANGE(0, unlockeditems.size() - 1));
						String[] item = s.split(":");
						int item_type = Integer.parseInt(item[0]);
						int item_id = Integer.parseInt(item[1]);

						// create item in pshop
						PrivateShopSlot slot = new PrivateShopSlot(slot_id);
						slot.setLockStatus(false);
						slot.item.setStatus(DatabaseID.PS_ITEM_STATUS_SELLING);
						slot.item.setType(item_type);
						slot.item.setId(item_id);
						slot.item.setNumber(1);
						slot.item.setMoneyType(DatabaseID.GOLD_ID);
						slot.item.setPrice(1);
						slot.item.setStartDate(Misc.SECONDS());
						slot.item.setEndDate(Misc.SECONDS() + DatabaseID.PRIVATE_SHOP_ITEM_EXPIRE_TIME); // 7 days
						slot.item.setCancelPrice(1);
						slot.item.setAdvertise(false);
						NPCShopMgr.slots.add(slot);

						// remove item in list to avoid duplicate
						unlockeditems.remove(s);
						slot_id++;
					}
				}
			} catch (Exception e) {
				LogHelper.LogException("JackSellSpecialItem", e);
			}
			
			// save to db
			NPCShopMgr.saveDataToDatabase(KeyID.KEY_PRIVATE_SHOP);
		}		
	}
	
	/*
	 * Notify to friend that i'm viewing his shop.
	 */
	private void notifyViewFriendShop(long friend_user_id)
	{
		// LogHelper.Log("notifyViewFriendShop.. notify to user " + friend_user_id);
		
		String friend_is_online = "";
		
		try
		{
			friend_is_online = (String)DBConnector.GetMembaseServer(friend_user_id).Get(friend_user_id + "_" + KeyID.ONLINE);
		}
		catch (Exception e)
		{
			LogHelper.LogException("notifyViewFriendShop", e);
			friend_is_online = "";
		}
		
		if (friend_is_online == null || friend_is_online.equals(""))
		{
			// LogHelper.Log("notifyViewFriendShop.. friend is offline. Abort notify friend.");
		}
		else
		{
			byte[] viewer_list = null;
			try
			{
				viewer_list = DBConnector.GetMembaseServer(friend_user_id).GetRaw(friend_user_id + "_" + KeyID.KEY_PS_VIEWER);
			}
			catch (Exception e)
			{
				viewer_list = null;
				LogHelper.LogException("notifyViewFriendShop", e);
			}

			if (viewer_list == null || viewer_list.length == 0) // this key was deleted or never created
			{
				FBEncrypt f = new FBEncrypt();
				f.addString("viewer" + "_" + "did" + "_" + 0, _device_id);
				f.addString("viewer" + "_" + "ip" + "_" + 0, SkyGarden.s_server_local_address);
				f.addInt("viewer" + "_" + "port" + "_" + 0, SkyGarden.s_serverPort);

				// write to friend's db
				DBConnector.GetMembaseServer(friend_user_id).SetRaw(friend_user_id + "_" + KeyID.KEY_PS_VIEWER, f.toByteArray(), 3 * 60);

				// LogHelper.Log("notifyViewFriendShop.. Notified to friend OK.");
			}
			else
			{
				// read key and write continuosly
				FBEncrypt f = new FBEncrypt();
				f.decode(viewer_list, true);

				int i = 0;
				while (f.hasKey("viewer" + "_" + "did" + "_" + i))
				{
					String viewer_did = f.getString("viewer" + "_" + "did" + "_" + i);
					if (viewer_did.equals(_device_id)) // check if my id is existed in the list
					{
						// LogHelper.Log("notifyViewFriendShop.. Account is existed in the list. Abort notify friend.");
						return;
					}
					else
					{
						i++;
					}
				}

				f.addString("viewer" + "_" + "did" + "_" + i, _device_id);
				f.addString("viewer" + "_" + "ip" + "_" + i, SkyGarden.s_server_local_address);
				f.addInt("viewer" + "_" + "port" + "_" + i, SkyGarden.s_serverPort);

				// write to friend's db
				DBConnector.GetMembaseServer(friend_user_id).SetRaw(friend_user_id + "_" + KeyID.KEY_PS_VIEWER, f.toByteArray(), 3 * 60);

				// LogHelper.Log("notifyViewFriendShop.. Notified to friend OK.");
			}
		}
	}
	
	public void handleLeaveFriendShop(FBEncrypt encrypt)
	{
		boolean process_result = true;
		long friend_user_id = -1;
		String friend_device_id = "";
		
		// get friend user id from friend's device id
		if (encrypt.hasKey(KeyID.KEY_FRIEND_DEVICE_ID))
		{
			friend_device_id = encrypt.getString(KeyID.KEY_FRIEND_DEVICE_ID);
			
			friend_user_id = GetUserID(friend_device_id);
			
			// LogHelper.Log("handleLeaveFriendShop.. friend user id = " + friend_user_id);
			
			if (friend_user_id <= 0)
			{
				_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
				LogHelper.Log("handleLeaveFriendShop.. err! friend is not stable -> does not have private shop data");
				process_result = false;
			}
		}
		
		if (process_result)
		{
			// notify to friend that i'm leaving his shop (if he's online).
			String friend_is_online = "";
			try
			{
				friend_is_online = (String)DBConnector.GetMembaseServer(friend_user_id).Get(friend_user_id + "_" + KeyID.ONLINE);
			}
			catch (Exception e)
			{
				friend_is_online = "";
				LogHelper.LogException("handleLeaveFriendShop", e);
			}

			if (friend_is_online != null && !friend_is_online.equals(""))
			{
				// LogHelper.Log("handleLeaveFriendShop.. friend is online.");
				byte[] viewer_list = null;
				try
				{
					viewer_list = DBConnector.GetMembaseServer(friend_user_id).GetRaw(friend_user_id + "_" + KeyID.KEY_PS_VIEWER);
				}
				catch (Exception e)
				{
					viewer_list = null;
					LogHelper.LogException("handleLeaveFriendShop", e);
				}

				if (viewer_list == null || viewer_list.length == 0)
				{
					// good, the key was deleted by somebody else.
					 LogHelper.Log("handleLeaveFriendShop.. friend viewer list key is deleted.");
//					return;
				}
				else
				{
					// read key and remove
					FBEncrypt f = new FBEncrypt();
					f.decode(viewer_list, true);

					int i = 0;
					while (f.hasKey("viewer" + "_" + "did" + "_" + i))
					{
						String viewer_did = f.getString("viewer" + "_" + "did" + "_" + i);
						
						if (viewer_did.equals(_device_id)) // check if my id is existed in the list
						{
							f.removeField("viewer" + "_" + "did" + "_" + i);
							f.removeField("viewer" + "_" + "ip" + "_" + i);
							f.removeField("viewer" + "_" + "port" + "_" + i);
						}
						
						i++;
					}

					// save to friend's db
					if (f.toByteArray().length > 0)
					{
						DBConnector.GetMembaseServer(friend_user_id).SetRaw(friend_user_id + "_" + KeyID.KEY_PS_VIEWER, f.toByteArray(), 3 * 60);
						// LogHelper.Log("handleLeaveFriendShop.. save viewer list to friend db OK.");
					}
					else
					{
						// delete key
						DBConnector.GetMembaseServer(friend_user_id).Delete(friend_user_id + "_" + KeyID.KEY_PS_VIEWER);
						// LogHelper.Log("handleLeaveFriendShop.. delete friend viewer list OK.");
					}
				}
			}
			else
			{
				// LogHelper.Log("handleLeaveFriendShop.. friend is offline.");
			}
		}
		
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		try 
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("handleLeaveFriendShop.. response to client OK.");
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("handleLeaveFriendShop", ex);
		}
	}
	
	public void refreshNewsBoard()
	{
		if (newsBoard.isRefreshNewsBoard())
		{
			if (_use_newsboard_udp)
			{
				byte[] ads_list = null;
				try
				{
					int key_level = GetUserInfo().getLevel() >= 100 ? Misc.RANDOM_RANGE(60, 99) : GetUserInfo().getLevel();
					int news_list_index = Misc.RANDOM_RANGE(0, DatabaseID.RESULT_PER_LEVEL);
					ads_list = DBConnector.GetMembaseServerForTemporaryData().GetRaw("newslist" + "_" + key_level + "_" + news_list_index);
				}
				catch (Exception e)
				{
					ads_list = null;
				}
				
				if (ads_list != null && ads_list.length > 0)
				{
					refreshNewsBoardToClient(ads_list);
					return;
				}
			}
		}

		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_NEWS_BOARD, newsBoard.getDataToClient());

		try
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex) 
		{
		}
	}
	
	public void handleQuickRefreshNewsboard()
	{
		if (newsBoard.isRefreshNewsBoard())
		{
			LogHelper.Log("newsboard is already refreshed");
			_return_id = ReturnCode.RESPONSE_ERROR;
		}
		else
		{
			if ((money_mgr.GetRealMoney() + money_mgr.GetBonusMoney()) >= DatabaseID.NEWS_BOARD_REFRESH_PRICE)
			{
				UseMoneyResult usemoneyresult = money_mgr.UseRealMoneyAndBonusMoney(DatabaseID.NEWS_BOARD_REFRESH_PRICE,	// 1. log
													_command_id,							//  2. hanh dong cua gamer
													userInfo.getName(),						//  3. ten tai khoan
													userInfo.getLevel(),					//  7. level cua gamer
													_ip,									//  9. ip login v4 cua gamer
													-1,										// 10. id cua loai item
													-1,										// 11. id cua item
													"",										// 12. ten item
													DatabaseID.NEWS_BOARD_REFRESH_PRICE,	// 13. gia game coin cua item
													1);										// 14. so luong vat pham

				if (usemoneyresult._code == UseMoneyResult.CODE.SUCCESS)
				{
					if (_use_newsboard_udp)
					{
						byte[] ads_list = null;
						try
						{
							int key_level = GetUserInfo().getLevel() >= 100 ? Misc.RANDOM_RANGE(60, 99) : GetUserInfo().getLevel();
							int news_list_index = Misc.RANDOM_RANGE(0, DatabaseID.RESULT_PER_LEVEL);
							ads_list = DBConnector.GetMembaseServerForTemporaryData().GetRaw("newslist" + "_" + key_level + "_" + news_list_index);
						}
						catch (Exception e)
						{
							ads_list = null;
						}

						if (ads_list != null && ads_list.length > 0)
						{
							refreshNewsBoardToClient(ads_list);
							return;
						}
						else
						{
							LogHelper.Log("can't find ads list");
						}
					}
				}
				else
				{
					_return_id = ReturnCode.RESPONSE_CANT_SUBSTRACT_MONEY;
					LogHelper.Log("can not substract money");
				}
			}
			else
			{
				_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_DIAMOND;
				LogHelper.Log("not enough diamond refresh newsboard");
			}
		}
		
		// reponse to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());

		try
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex)
		{
		}
	}
	
	public void refreshNewsBoardToClient(byte[] ads_list)
	{
		newsBoard.updateNewsBoard(ads_list);
		
		SET_DB_VALUE_BINARY(KeyID.KEY_NEWS_BOARD, newsBoard.getData());
		
		// reponse to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_NEWS_BOARD, newsBoard.getDataToClient());
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney())); //user's diamond

		try
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex)
		{
		}
	}
	
	public void handleSetAdsPShop(FBEncrypt encrypt)
	{
//		StringBuilder log = new StringBuilder();
		
		int slotID = encrypt.getInt(KeyID.KEY_PS_SLOT_ID);
		
		if (slotID < 0 || slotID >= DatabaseID.PRIVATE_SHOP_MAX_SLOT)
		{
			LogHelper.Log("handleSetAdsPShop.. invalid slot id");
			_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
			requestError();
			return;
		}
		
		if (Misc.SECONDS() < PShopMgr.getAdsAvailableTime())
		{
			LogHelper.Log("handleSetAdsPShop.. no free ads is available");
			_return_id = ReturnCode.RESPONSE_PS_ADS_NOT_AVAILABLE;
			requestError();
			return;
		}
		
		// refresh private shop data from db
		PShopMgr.loadFromDatabase(KeyID.KEY_PRIVATE_SHOP);
		
		boolean result = false;
		for (PrivateShopSlot slot : PShopMgr.slots)
		{
			if (slot.getId() == slotID)
			{
				if (slot.item.getStatus() != DatabaseID.PS_ITEM_STATUS_SELLING)
				{
					LogHelper.Log("handleSetAdsPShop.. item at slot " + slotID + " is not selling.");
					_return_id = ReturnCode.RESPONSE_PS_ITEM_NOT_SELLING;
					break;
				}
				
				if (slot.item.getAdvertiseStatus() == true)
				{
					LogHelper.Log("handleSetAdsPShop.. item is already being advertised");
					break;
				}
				
//				log.append(slotID);
//				LogHelper.Log(log.toString());

				slot.item.setAdvertise(true);
				slot.item.setAdvertiseEndTime(Misc.SECONDS() + DatabaseID.PRIVATE_SHOP_ADS_MAX_TIME);
				
				addADS(userInfo.getDeviceID() + KeyID.NEWSBOARD_SLOT_CHAR + slotID, slot.item);

				PShopMgr.setAdsAvailableTime(Misc.SECONDS() + DatabaseID.PRIVATE_SHOP_ADS_PENDING_DURATION * 60);

				result = true;
				
				// LogHelper.Log("handleSetAdsPShop.. set advertise for slot " + slotID + " OK.");
				
				break;
			}
		}
		
		// save to db
		result = PShopMgr.saveDataToDatabase(KeyID.KEY_PRIVATE_SHOP);
		if (result == false)
		{
			LogHelper.Log("handleSetAdsPShop.. save to db fail."); 
			_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
			requestError();
			return;
		}
		// LogHelper.Log("handleSetAdsPShop.. save to db OK.");

		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_PRIVATE_SHOP, PShopMgr.getDataToClient());
		try 
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("handleSetAdsPShop.. response to client OK.");
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("handleSetAdsPShop", ex);
		}
	}
	
	public void handleSkipAdsPendingTimeInPShop()
	{
//		StringBuilder log = new StringBuilder();
		
		// check if user's ads is actually pending
		if (Misc.SECONDS() >= PShopMgr.getAdsAvailableTime())
		{
			LogHelper.Log("handleSkipAdsPendingTimeInPShop.. no ads is pending");
			_return_id = ReturnCode.RESPONSE_ERROR;
			requestError();
			return;
		}
		
		int diamond_cost = Misc.getDiamondEstimate(DatabaseID.DIAMOND_SKIP_TIME_PLANT, PShopMgr.getAdsAvailableTime());
//		log.append(diamond_cost);
//		log.append('\t').append(money_mgr.GetBonusMoney());
//		log.append('\t').append(money_mgr.GetRealMoney());
		
		// check if user has enough diamond
		if (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney() < diamond_cost)
		{
			LogHelper.Log("handleSkipAdsPendingTimeInPShop.. not enough diamond");
			_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_DIAMOND;
			requestError();
			return;
		}
		
		// substract user's dimond
		long diamond_used = diamond_cost;
		UseMoneyResult use_money_result = money_mgr.UseRealMoneyAndBonusMoney(diamond_cost,		// log
												_command_id,									//  2. hanh dong cua gamer
												userInfo.getName(),								//  3. ten tai khoan
												userInfo.getLevel(),							//  7. level cua gamer
												_ip,											//  9. ip login v4 cua gamer
												-1,												// 10. id cua loai item
												-1,												// 11. id cua item
												"",												// 12. ten item
												diamond_cost,									// 13. gia game coin cua item
												1);												// 14. so luong vat pham
		
		if (use_money_result._code == UseMoneyResult.CODE.SUCCESS)
		{
//			log.append('\t').append(money_mgr.GetBonusMoney());
//			log.append('\t').append(money_mgr.GetRealMoney());
//			LogHelper.Log(log.toString());
		
			// reset time of ads
			PShopMgr.setAdsAvailableTime(0);
			// LogHelper.Log("handleSkipAdsPendingTimeInPShop.. reset ads pending time OK.");
			
			// save db
			boolean result = false;
			result = PShopMgr.saveDataToDatabase(KeyID.KEY_PRIVATE_SHOP);
			if (result == false)
			{
				LogHelper.Log("handleSkipAdsPendingTimeInPShop.. save to db fail."); 
				_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
				requestError();
				return;
			}
			// LogHelper.Log("handleSkipAdsPendingTimeInPShop.. save to db OK.");
		
			// response to client
			FBEncrypt response = new FBEncrypt();
			response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
			response.addLong(KeyID.KEY_DIAMOND_USED, diamond_used); //user's diamond
			response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney())); //user's diamond
			response.addBinary(KeyID.KEY_PRIVATE_SHOP, PShopMgr.getDataToClient());
			try 
			{
				_client.WriteZip(response.toByteArray());
				// LogHelper.Log("handleSkipAdsPendingTimeInPShop.. response to client OK.");
			} 
			catch (Exception ex) 
			{
				LogHelper.LogException("handleSkipAdsPendingTimeInPShop", ex);
			}
		}
		else
		{
			LogHelper.Log("handleSkipAdsPendingTimeInPShop.. can't substract user money.");
			_return_id = ReturnCode.RESPONSE_CANT_SUBSTRACT_MONEY;
			requestError();
			return;
		}
	}
	
	private void handleCancelItemPShop(FBEncrypt encrypt)
	{
		// lock private shop data
		StringBuilder lock_info = new StringBuilder();
		lock_info.append(_user_id).append('_');
		lock_info.append("cancel").append('_');
		lock_info.append(Misc.SECONDS());
		
		if (!base.Add(_user_id + "_" + KeyID.KEY_PS_LOCK_DATA, lock_info.toString(), DatabaseID.PRIVATE_SHOP_LOCK_EXPIRED_DURATION))
		{
			// read current lock key and write log to file
			LogHelper.Log("handleUnlockFriendSlot.. error: private shop data is being locked.");
			_return_id = ReturnCode.RESPONSE_PS_DATA_IS_LOCKED;
			requestError();
			return;
		}
		else
		{
			// LogHelper.Log("handleUnlockFriendSlot.. lock private shop data OK: " + lock_info);
		}

		// refresh private shop data from db
		PShopMgr.loadFromDatabase(KeyID.KEY_PRIVATE_SHOP);
		
		// get valid params
		int slotID = encrypt.getInt(KeyID.KEY_PS_SLOT_ID);
		if (slotID < 0 || slotID >= DatabaseID.PRIVATE_SHOP_MAX_SLOT)
		{
			LogHelper.Log("handleCancelItemPShop.. invalid slot id");
			_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
			requestError();
			return;
		}

		boolean result = false;
		int diamond_cost = 0;
		for (PrivateShopSlot slot : PShopMgr.slots)	
		{
			if (slot.getId() == slotID)
			{
				if (slot.item.getStatus() == DatabaseID.PS_ITEM_STATUS_SELLING)
				{
					diamond_cost = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_PRIVATE_SHOP][slotID][DatabaseID.PS_SHOP_REQUIRED_DIAMOND_CANCEL]);

					UseMoneyResult use_money_result = money_mgr.UseRealMoneyAndBonusMoney(diamond_cost,		// log
															_command_id, "" + slotID,						//  2. hanh dong cua gamer
															userInfo.getName(),								//  3. ten tai khoan
															userInfo.getLevel(),							//  7. level cua gamer
															_ip,											//  9. ip login v4 cua gamer
															-1,												// 10. id cua loai item
															-1,												// 11. id cua item
															"",												// 12. ten item
															diamond_cost,									// 13. gia game coin cua item
															1);												// 14. so luong vat pham
					
					if (use_money_result._code == UseMoneyResult.CODE.SUCCESS)
					{
						int item_id = slot.item.getId();
						int item_type = slot.item.getType();
						int item_quantity = slot.item.getNumber();
						
						PrivateShopSlot empty_slot = new PrivateShopSlot(slotID);
						empty_slot.setLockStatus(false);
						PShopMgr.slots.set(PShopMgr.slots.indexOf(slot), empty_slot);
						
						result = true;
						
						// LogHelper.Log("handleCancelItemPShop.. cancel item at slot " + slotID + " OK.");
						
						removeADS(_device_id + KeyID.NEWSBOARD_SLOT_CHAR + slotID);
						
						// log drop item
						StringBuilder log = new StringBuilder();
						log.append(Misc.getCurrentDateTime());								//  1. thoi gian tieu tien
						log.append('\t').append(Misc.getActionName(_command_id, "" + slotID));	//  2. hanh dong cua gamer
						log.append('\t').append(userInfo.getID());							//  3. id
						log.append('\t').append(userInfo.getID());							//  4. role id
						log.append('\t').append(userInfo.getName());						//  5. name
						log.append('\t').append(SkyGarden._server_id);											//  6. server id
						log.append('\t').append(userInfo.getLevel());						//  7. level
						log.append('\t').append(Misc.GetItemName(item_type, item_id) + "_" + slotID);	//  8. id item su dung
						log.append('\t').append(item_quantity);								//  9. so luong item su dung
						log.append('\t').append(1);											//  10. result
						LogHelper.Log(LogHelper.LogType.DROP_ITEM, log.toString());
						
						break;
					}
					else
					{
						LogHelper.Log("handleCancelItemPShop.. can't substract user money");
						_return_id = ReturnCode.RESPONSE_CANT_SUBSTRACT_MONEY;
						requestError();
						return;
					}
				}
				else
				{
					LogHelper.Log("handleCancelItemPShop.. item in slot " + slotID + " is sold or slot is empty");
					_return_id = ReturnCode.RESPONSE_PS_ITEM_NOT_SELLING;
					requestError();
					return;
				}
			}
		}
		
		if (result == true)
		{
			// save to db
			result = PShopMgr.saveDataToDatabase(KeyID.KEY_PRIVATE_SHOP);
			if (result == false)
			{
				LogHelper.Log("handleCancelItemPShop.. save to db fail."); 
				_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
				requestError();
				return;
			}
			// LogHelper.Log("handleCancelItemPShop.. save to db OK.");
			
			// unlock private shop data
			base.Delete(_user_id + "_" + KeyID.KEY_PS_LOCK_DATA);
			
			// Get a list of friend who is viewing my private shop.
			// Then ask him to reload my private shop content.
			byte[] viewer_bin = null;
			try
			{
				viewer_bin = base.GetRaw(_user_id + "_" + KeyID.KEY_PS_VIEWER);

				if (viewer_bin == null || viewer_bin.length == 0)
				{
					// LogHelper.Log("handleCancelItemPShop.. empty viewer list. No need to notify friend.");
				}
				else
				{
					FBEncrypt viewer_list = new FBEncrypt();
					viewer_list.decode(viewer_bin, true);

					int i = 0;
					while (viewer_list.hasKey("viewer" + "_" + "did" + "_" + i))
					{
						String viewer_did = viewer_list.getString("viewer" + "_" + "did" + "_" + i);
						String viewer_ip = viewer_list.getString("viewer" + "_" + "ip" + "_" + i);
//						int viewer_port = viewer_list.getInt("viewer" + "_" + "port" + "_" + i);

						FBEncrypt udpreq = new FBEncrypt();
						udpreq.addShort(KeyID.KEY_USER_COMMAND_ID, CommandID.CMD_UDP_REQUEST_RELOAD_PSHOP);
						udpreq.addString(KeyID.KEY_DEVICE_ID, viewer_did);

						ByteBuffer buffer = ByteBuffer.allocate(udpreq.toByteArray().length + 8);
						buffer.put(udpreq.toByteArray());
						buffer.flip();

						SkyGardenUser.udpRequest(buffer, viewer_ip, ProjectConfig.UDP_PORT, false);
						// LogHelper.Log("[udp] handleCancelItemPShop.. sent notification to " + viewer_did + ":" + viewer_ip + ":" + ProjectConfig.UDP_PORT);

						i++;
					}
				}
			}
			catch (Exception e)
			{
				LogHelper.LogException("SkyGardenUser.handleCancelItemPShop", e);
			}
			
			// response
			FBEncrypt response = new FBEncrypt();
			response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
			response.addLong(KeyID.KEY_DIAMOND_USED, diamond_cost);
			response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
			response.addBinary(KeyID.KEY_PRIVATE_SHOP, PShopMgr.getDataToClient());
			try 
			{
				_client.WriteZip(response.toByteArray());
				// LogHelper.Log("handleCancelItemPShop.. response to client OK.");
			}
			catch (Exception ex) 
			{
				LogHelper.LogException("handleCancelItemPShop", ex);
			}
		}
		else
		{
			LogHelper.Log("handleCancelItemPShop.. can not find slot " + slotID + " to cancel item.");
			_return_id = ReturnCode.RESPONSE_ERROR;
			requestError();
		}
	}
	
	private void handleBuyItemPShop(FBEncrypt encrypt)
	{
		boolean process_result = true;
		
		// get and valid params
		String friend_device_id = "";
		if (encrypt.hasKey(KeyID.KEY_FRIEND_DEVICE_ID))
		{
			friend_device_id = encrypt.getString(KeyID.KEY_FRIEND_DEVICE_ID);
		}
		
		int slotId = -1;
		if (encrypt.hasKey(KeyID.KEY_PS_SLOT_ID))
		{
			slotId = (int)encrypt.getShort(KeyID.KEY_PS_SLOT_ID);
		}
		
		if (friend_device_id.equals("") || friend_device_id.length() == 0 || slotId == -1 || slotId >= DatabaseID.PRIVATE_SHOP_MAX_SLOT)
		{
			LogHelper.Log("handleBuyItemPShop.. invalid params.");
			_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
			process_result = false;
		}
		
		if (friend_device_id.equals(KeyID.NPC_NAME))
		{
			handleBuyItemNPCShop(slotId);
			return;
		}
		
		// get user id from device id
		long friend_uid = GetUserID(friend_device_id);
		
		if (friend_uid <= 0)
		{
			process_result = false;
			_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
			LogHelper.Log("handleBuyItemPShop.. err! friend is unstable user -> friend does not have private shop");
		}
		
		long diamond_used = 0;
		long gold_used = 0;
		long reputation_used = 0;
		
		int stock_id = -1;
		PrivateShopManager friend_PShopMgr = null;
		
		int acm_index = -1;
		if (process_result)
		{
			// lock friend private shop data
			// who & why & when
			StringBuilder lock_info = new StringBuilder();
			lock_info.append(_user_id).append('_');
			lock_info.append("buy").append('_');
			lock_info.append(Misc.SECONDS());

			if (!base.Add(friend_uid + "_" + KeyID.KEY_PS_LOCK_DATA, lock_info.toString(), DatabaseID.PRIVATE_SHOP_LOCK_EXPIRED_DURATION))
			{
				LogHelper.Log("handleBuyItemPShop.. error: private shop data is being locked.");
				_return_id = ReturnCode.RESPONSE_PS_DATA_IS_LOCKED;
				requestError();
				return;
			}
			
			// read friend private shop data from db
			friend_PShopMgr = new PrivateShopManager(Long.toString(friend_uid));
			friend_PShopMgr.SetDatabase(DBConnector.GetMembaseServer(friend_uid));
			process_result = friend_PShopMgr.loadFromDatabase(KeyID.KEY_PRIVATE_SHOP);
				
			if (process_result)
			{
				for (PrivateShopSlot slot : friend_PShopMgr.slots)
				{
					if (slot.getId() == slotId)
					{
						// check if item's status is selling
						if (slot.item.getStatus() != DatabaseID.PS_ITEM_STATUS_SELLING)
						{
							_return_id = ReturnCode.RESPONSE_PS_ITEM_NOT_SELLING;
							LogHelper.Log("handleBuyItemPShop.. item at slot " + slotId + " is not selling.");
							break;
						}

						// check if user have enough money
						int moneyType = slot.item.getMoneyType();
						long itemPrice = slot.item.getPrice();
						if (moneyType == DatabaseID.DIAMOND_ID)
						{
							if (money_mgr.GetRealMoney() + money_mgr.GetBonusMoney() < itemPrice || itemPrice < 0)
							{
								LogHelper.Log("handleBuyItemPShop.. not enough diamond.");
								_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_DIAMOND;
								break;
							}
						}
						else if (moneyType == DatabaseID.GOLD_ID)
						{
							if (userInfo.getGold() < itemPrice || itemPrice < 0)
							{
								LogHelper.Log("handleBuyItemPShop.. not enough gold.");
								_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_GOLD;
								break;
							}
						}
						else if (moneyType == DatabaseID.REPUTATION_ID)
						{
							if (userInfo.getReputation() < itemPrice || itemPrice < 0)
							{
								LogHelper.Log("handleBuyItemPShop.. not enough reputation.");
								_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_REPUTATION;
								break;
							}
						}

						// check if user's stock has enough space
						switch (slot.item.getType())
						{
							case DatabaseID.IT_PLANT:
								stock_id = DatabaseID.STOCK_SILO;
								break;
								
							case DatabaseID.IT_MATERIAL:
							case DatabaseID.IT_POT:
							
								stock_id = DatabaseID.STOCK_WAREHOUSE;
								break;
								
							case DatabaseID.IT_PRODUCT:
							case DatabaseID.IT_BUG:
								stock_id = DatabaseID.STOCK_BARN;
								break;
								
							case DatabaseID.IT_DECOR:
							default:
								break;
						}

						if (stock_id == -1)
						{
							_return_id = ReturnCode.RESPONSE_IBS_INVALID_ITEM_TYPE;
							LogHelper.Log("handleBuyItemPShop.. invalid item type");
							break;
						}

						if (stock.get(stock_id).checkFull(stock.get(stock_id).getCapacityCurrent() + slot.item.getNumber()))
						{
							LogHelper.Log("handleBuyItemPShop.. stock is full");
							_return_id = ReturnCode.RESPONSE_STOCK_IS_FULL;
							break;
						}
						
						// check if user already unlocked this item
						if (slot.item.getType() == DatabaseID.IT_PLANT || slot.item.getType() == DatabaseID.IT_POT || slot.item.getType() == DatabaseID.IT_PRODUCT) {
							ArrayList<String> unlock_list = new ArrayList<String>();
							switch (slot.item.getType())
							{
								case DatabaseID.IT_PLANT:
									unlock_list = Misc.getItemsUnlock(userInfo.getLevel(), DatabaseID.USER_SEED_ID_UNLOCK);
									break;
								case DatabaseID.IT_POT:
									unlock_list = Misc.getItemsUnlock(userInfo.getLevel(), DatabaseID.USER_POT_ID_UNLOCK);
									break;
								case DatabaseID.IT_PRODUCT:
									unlock_list = Misc.getItemsUnlock(userInfo.getLevel(), DatabaseID.USER_PROD_ID_UNLOCK);
									break;
							}
							
							if (!unlock_list.contains("" + slot.item.getId()))
							{
								LogHelper.Log("handleBuyItemPShop.. item is locked");
								break;
							}
						}

						// reaching this state means all the conditions are met, proceed now
						
						// substract user money
						switch(moneyType)
						{
							case DatabaseID.DIAMOND_ID:
								diamond_used = itemPrice;
								UseMoneyResult result = money_mgr.UseRealMoneyAndBonusMoney((int)itemPrice,				// log
																		_command_id,									//  2. hanh dong cua gamer
																		userInfo.getName(),								//  3. ten tai khoan
																		userInfo.getLevel(),							//  7. level cua gamer
																		_ip,											//  9. ip login v4 cua gamer
																		slot.item.getType(),							// 10. id cua loai item
																		slot.item.getId(),								// 11. id cua item
																		Misc.GetItemName(slot.item.getType(), slot.item.getId()),	// 12. ten item
																		(int)itemPrice,									// 13. gia game coin cua item
																		1);												// 14. so luong vat pham
								
								process_result = result._code == UseMoneyResult.CODE.SUCCESS ? true : false;
								break;
								
							case DatabaseID.GOLD_ID:
								gold_used = itemPrice;
								process_result = userInfo.setGold(userInfo.getGold() - itemPrice);
								break;
								
							case DatabaseID.REPUTATION_ID:
								reputation_used = itemPrice;
								process_result = userInfo.setReputation(userInfo.getReputation() - itemPrice);
								break;
								
							default:
								process_result = false;
								break;
						}

						if (process_result == false)
						{
							_return_id = ReturnCode.RESPONSE_CANT_SUBSTRACT_MONEY;
							LogHelper.Log("handleBuyItemPShop.. can't not substract user's money");
							break;
						}
						// LogHelper.Log("handleBuyItemPShop.. substract user money OK.");
						
						// reset friend item and set its status to SOLD
						if (slot.item.setStatus(DatabaseID.PS_ITEM_STATUS_SOLD) == false)
						{
							LogHelper.Log("handleBuyItemPShop.. can't set item status to sold. Concurrent access error.");
							_return_id = ReturnCode.RESPONSE_CONCURRENT_ACCESS_PROBLEM;
							break;
						}
						
						slot.item.setAdvertise(false);
						slot.item.setAdvertiseEndTime(-1);
						slot.item.setBuyerID(this.userInfo.getDeviceID());
						
						removeADS(friend_device_id + KeyID.NEWSBOARD_SLOT_CHAR + slotId);

						// move item into user stock
						stock.get(stock_id).add(slot.item.getType(), slot.item.getId(), slot.item.getNumber(), _command_id);
						
						// log SPENT_ITEM
						if (moneyType != DatabaseID.DIAMOND_ID)
						{
							StringBuilder log = new StringBuilder();
							log.append(Misc.getCurrentDateTime());								//  1. thoi gian tieu tien
							log.append('\t').append(Misc.getActionName(_command_id));			//  2. hanh dong cua gamer
							log.append('\t').append(userInfo.getID());							//  3. id
							log.append('\t').append(userInfo.getID());							//  4. role id
							log.append('\t').append(userInfo.getName());						//  5. name
							log.append('\t').append(SkyGarden._server_id);											//  6. server id
							log.append('\t').append(userInfo.getLevel());						//  7. level
							log.append('\t').append(DatabaseID.IT_MONEY + "_" + moneyType);		//  8. id item su dung
							log.append('\t').append(itemPrice);									//  9. so luong item su dung
							log.append('\t').append(slot.item.getType() + "_" + slot.item.getId());	 //  10. id item nhan
							log.append('\t').append(slot.item.getNumber());						//  11. so luong item nhan
							log.append('\t').append(process_result == true ? 1 : 0);			//  12. result
							log.append('\t').append(friend_uid);								//  13. ten tai khoan giao dich
							log.append('\t').append(userInfo.getID() + "_" + System.currentTimeMillis());	//  14. transaction id
							LogHelper.Log(LogHelper.LogType.SPENT_ITEM, log.toString());
						}
						
						
						// save friend private shop data
						boolean saveResult = false;
						saveResult = friend_PShopMgr.saveDataToDatabase(KeyID.KEY_PRIVATE_SHOP);
						if (saveResult == false)
						{
							LogHelper.Log("handleBuyItemPShop.. save friend data to db fail."); 
							requestError(ReturnCode.RESPONSE_SAVE_ERROR);
							return;
						}
						
						if (!_use_lazy_sync_user_info)
						{
							saveResult = SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
							if (saveResult == false)
							{
								LogHelper.Log("handleBuyItemPShop.. save to db fail."); 
								requestError(ReturnCode.RESPONSE_SAVE_ERROR);
								return;
							}
						}

						saveResult = SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + stock_id, stock.get(stock_id).getDataToDatabase());
						if (saveResult == false)
						{
							LogHelper.Log("handleBuyItemPShop.. save to db fail."); 
							_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
							requestError();
							return;
						}
						
						// increate achivement
						if (_use_achievement)
						{
							acm_index = GetAchievementManager().Increase(CommandID.CMD_BUY_ITEM_PRIVATE_SHOP, itemPrice);
						}
						
						// reponse new private shop data to friend if he's online.
						String online_info = "";
						try
						{
							online_info = (String)DBConnector.GetMembaseServer(friend_uid).Get(friend_uid + "_" + KeyID.ONLINE);
						}
						catch (Exception e)
						{
							online_info = "";
							LogHelper.LogException("handleBuyItemPShop", e);
						}
						
						if (online_info == null || online_info.equals(""))
						{
							break;
						}
						else
						{
							String[] serverInfo = online_info.split(":");
							if (serverInfo[0].equals(SkyGarden.s_server_local_address)) // online at same server logic
							{
								// LogHelper.Log("handleBuyItemPShop.. friend is online at same server.");
								SkyGardenUser friend = null;
								friend = ServerHandler.getUser(friend_device_id);
								if (friend != null)
								{
									// create reponse status
									FBEncrypt responseStatus = new FBEncrypt();
									responseStatus.addShort(KeyID.KEY_USER_COMMAND_ID, CommandID.CMD_UPDATE_PRIVATE_SHOP);
									responseStatus.addLong(KeyID.KEY_USER_ID, friend._user_id);
									responseStatus.addByte(KeyID.KEY_USER_REQUEST_STATUS, ReturnCode.RESPONSE_OK);
									responseStatus.addLong(KeyID.KEY_USER_REQUEST_ID, friend.getRequestID());
									responseStatus.addStringANSI(KeyID.KEY_USER_SESSION_ID, friend.getSessionID());

									FBEncrypt encoder = new FBEncrypt();
									encoder.addBinary(KeyID.KEY_REQUEST_STATUS, responseStatus.toByteArray());
									encoder.addBinary(KeyID.KEY_PRIVATE_SHOP, friend_PShopMgr.getDataToClient());

									try
									{
										friend._client.WriteZip(encoder.toByteArray());
									}
									catch (Exception ex)
									{
									}
								}
							}
							else // online at different server
							{
								// send udp command to friend's server
								FBEncrypt udpreq = new FBEncrypt();
								udpreq.addShort(KeyID.KEY_USER_COMMAND_ID, CommandID.CMD_NOTIFY_SHOP_IS_MODIFIED);
								if (bCheatTest)
								{
									udpreq.addString(KeyID.KEY_DEVICE_ID, friend_device_id);
								}
								else
								{
									udpreq.addString(KeyID.KEY_DEVICE_ID, Long.toString(friend_uid));
								}

								ByteBuffer buffer = ByteBuffer.allocate(udpreq.toByteArray().length + 8);
								buffer.put(udpreq.toByteArray());
								buffer.flip();
								udpRequest(buffer, serverInfo[0], ProjectConfig.UDP_PORT, false);
							}
						}

						// update garden appraisal
						try
						{
							if (slot.item.getType() == DatabaseID.IT_POT)
							{
								garden_appraisal = UpdateAppraisal(DatabaseID.APPRAISAL_POT);
							}
							else if (slot.item.getType() == DatabaseID.IT_DECOR)
							{
								garden_appraisal = UpdateAppraisal(DatabaseID.APPRAISAL_DECOR);
							}
						}
						catch (Exception e)
						{
							LogHelper.LogException("handleBuyItemPShop.UpdateAppraisal", e);
						}
						
						break;
					}
				}
			}
		}
		
		//unlock friend private shop data
		DBConnector.GetMembaseServer(friend_uid).Delete(friend_uid + "_" + KeyID.KEY_PS_LOCK_DATA); 
		
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addString(KeyID.KEY_FRIEND_DEVICE_ID, friend_device_id);
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addLong(KeyID.KEY_DIAMOND_USED, diamond_used);
		response.addLong(KeyID.KEY_GOLD_USED, gold_used);
		response.addLong(KeyID.KEY_REPUTATION_USED, reputation_used);
		response.addLong(KeyID.KEY_GARDEN_APPRAISAL, garden_appraisal);
		response.addInt(KeyID.KEY_PS_SLOT_ID, slotId);
		
		try
		{
			response.addBinary(KeyID.KEY_FRIEND_INFOS, GET_DB_VALUE_BINARY_FRIEND(friend_device_id, KeyID.KEY_USER_INFOS));
		}
		catch (Exception e) 
		{
			LogHelper.LogException("handleBuyItemPShop", e);
		}
		
		if (friend_PShopMgr != null)
		{
			response.addBinary(KeyID.KEY_PRIVATE_SHOP, friend_PShopMgr.getDataToClient());
		}
		
		if (stock_id != -1)
		{
			response.addBinary(KeyID.KEY_STOCKS + stock_id, stock.get(stock_id).getDataToClient());
		}
		
		if (_use_achievement && acm_index != -1)
		{
			response.addInt(KeyID.KEY_ACHIEVEMENT_ID, acm_index);
			response.addBinary(KeyID.KEY_ACHIEVEMENT_INDEX + acm_index, GetAchievementManager().GetAchievement(acm_index).getData());
		}
		
		try 
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("handleBuyItemPShop", ex);
		}
	}
	
	private void handleBuyItemNPCShop(int slotId)
	{
		boolean process_result = false;
	    
	    if (NPCShopMgr != null)
	    {
			process_result = NPCShopMgr.loadFromDatabase(KeyID.KEY_PRIVATE_SHOP);

			if (process_result == false)
			{
				_return_id = ReturnCode.RESPONSE_LOAD_ERROR;
				requestError();
				return;
			}
	    }
	    
	    int stock_id = -1;
	    
	    for (PrivateShopSlot slot : NPCShopMgr.slots)
	    {
		    if (slot.getId() == slotId)
		    {
				// check if item's status is selling
				if (slot.item.getStatus() != DatabaseID.PS_ITEM_STATUS_SELLING)
				{
					_return_id = ReturnCode.RESPONSE_PS_ITEM_NOT_SELLING;
					LogHelper.Log("handleBuyItemNPCShop.. item at slot " + slotId + " is not selling.");
					break;
				}

				// check if user have enough money
				int moneyType = slot.item.getMoneyType();
				long itemPrice = slot.item.getPrice();
				if (moneyType == DatabaseID.DIAMOND_ID)
				{
					if (money_mgr.GetRealMoney() + money_mgr.GetBonusMoney() < itemPrice || itemPrice < 0)
					{
						LogHelper.Log("handleBuyItemNPCShop.. not enough diamond.");
						_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_DIAMOND;
						break;
					}
				}
				else if (moneyType == DatabaseID.GOLD_ID)
				{
					if (userInfo.getGold() < itemPrice || itemPrice < 0)
					{
						LogHelper.Log("handleBuyItemNPCShop.. not enough gold.");
						_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_GOLD;
						break;
					}
				}
				else if (moneyType == DatabaseID.REPUTATION_ID)
				{
					if (userInfo.getReputation() < itemPrice || itemPrice < 0)
					{
						LogHelper.Log("handleBuyItemNPCShop.. not enough reputation.");
						_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_REPUTATION;
						break;
					}
				}

				// check if user's stock has enough space
				switch (slot.item.getType())
				{
					case DatabaseID.IT_PLANT:
						stock_id = DatabaseID.STOCK_SILO;
						break;

					case DatabaseID.IT_PRODUCT:
						stock_id = DatabaseID.STOCK_BARN;
						break;
					
                                        case DatabaseID.IT_POT:
					case DatabaseID.IT_DECOR:
					case DatabaseID.IT_MATERIAL:
						stock_id = DatabaseID.STOCK_WAREHOUSE;
						break;

					case DatabaseID.IT_BUG:
						stock_id = DatabaseID.STOCK_BARN;
						break;

					default:
						break;
				}

				if (slot.item.getType() == DatabaseID.IT_EVENT) {
					LogHelper.LogHappy("handleBuyItemNPCShop.. item event");
				}
				else if (stock_id == -1)
				{
					_return_id = ReturnCode.RESPONSE_IBS_INVALID_ITEM_TYPE;
					LogHelper.Log("handleBuyItemNPCShop.. invalid item type");
					break;
				}

				if (slot.item.getType() == DatabaseID.IT_EVENT) {
					LogHelper.LogHappy("handleBuyItemNPCShop.. item event");
				}
				else if (stock.get(stock_id).checkFull(stock.get(stock_id).getCapacityCurrent() + slot.item.getNumber()))
				{
					LogHelper.Log("handleBuyItemNPCShop.. stock is full");
					_return_id = ReturnCode.RESPONSE_STOCK_IS_FULL;
					break;
				}

			    // reaching this state means all the conditions are met, proceed now

			    // substract user money
			    switch(moneyType)
			    {
				    case DatabaseID.DIAMOND_ID:
						UseMoneyResult result = money_mgr.UseRealMoneyAndBonusMoney((int)itemPrice,							// log
																_command_id,												//  2. hanh dong cua gamer
																userInfo.getName(),											//  3. ten tai khoan
																userInfo.getLevel(),										//  7. level cua gamer
																_ip,														//  9. ip login v4 cua gamer
																slot.item.getType(),										// 10. id cua loai item
																slot.item.getId(),											// 11. id cua item
																Misc.GetItemName(slot.item.getType(), slot.item.getId()),	// 12. ten item
																(int)itemPrice,												// 13. gia game coin cua item
																slot.item.getNumber());										// 14. so luong vat pham
						
					    process_result = result._code == UseMoneyResult.CODE.SUCCESS ? true : false;
					    break;

				    case DatabaseID.GOLD_ID:
						process_result = userInfo.setGold(userInfo.getGold() - itemPrice,	// log
																_command_id,			//  2. hanh dong cua gamer
																slot.item.getType(), 					// 11. id cua loai item
																slot.item.getId(),				// 12. id cua item
																Misc.GetItemName(slot.item.getType(), slot.item.getId()),						// 13. ten item
																slot.item.getNumber());
					    break;

				    case DatabaseID.REPUTATION_ID:
						process_result = userInfo.setReputation(userInfo.getReputation() - itemPrice, // log
																_command_id,			//  2. hanh dong cua gamer
																slot.item.getType(), 					// 11. id cua loai item
																slot.item.getId(),				// 12. id cua item
																Misc.GetItemName(slot.item.getType(), slot.item.getId()),						// 13. ten item
																slot.item.getNumber());
					    break;

				    default:
					    process_result = false;
					    break;
			    }

			    if (process_result == false)
			    {
				    _return_id = ReturnCode.RESPONSE_CANT_SUBSTRACT_MONEY;
				    // LogHelper.Log("handleBuyItemNPCShop.. can't not substract user's money");
				    break;
			    }
			    
//			    LogHelper.Log("handleBuyItemNPCShop.. substract user money OK.");


			    // reset friend item and set its status to SOLD
			    if (slot.item.setStatus(DatabaseID.PS_ITEM_STATUS_SOLD) == false)
			    {
				    LogHelper.Log("handleBuyItemNPCShop.. can't set item status to sold. Concurrent access error.");
				    _return_id = ReturnCode.RESPONSE_CONCURRENT_ACCESS_PROBLEM;
				    break;
			    }

			    slot.item.setAdvertise(false);
			    slot.item.setAdvertiseEndTime(-1);
				slot.item.setBuyerID(Long.toString(this.userInfo.getID()));

			    // move item into user stock
				if (slot.item.getType() == DatabaseID.IT_EVENT) {
					if (_use_event_8_3_2015) {
						stock_event.add(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_GLASS_ROSE,  slot.item.getNumber(), _command_id);
					}
				} else {
					stock.get(stock_id).add(slot.item.getType(), slot.item.getId(), slot.item.getNumber(), _command_id);
				}

//			    LogHelper.Log("handleBuyItemNPCShop.. buy item OK.");
				
				// log SPENT_ITEM
				StringBuilder log = new StringBuilder();
				log.append(Misc.getCurrentDateTime());								//  1. thoi gian tieu tien
				log.append('\t').append(Misc.getActionName(_command_id));			//  2. hanh dong cua gamer
				log.append('\t').append(userInfo.getID());							//  3. id
				log.append('\t').append(userInfo.getID());							//  4. role id
				log.append('\t').append(userInfo.getName());						//  5. name
				log.append('\t').append(SkyGarden._server_id);											//  6. server id
				log.append('\t').append(userInfo.getLevel());						//  7. level
				log.append('\t').append(DatabaseID.IT_MONEY + "_" + moneyType);		//  8. id item su dung
				log.append('\t').append(itemPrice);									//  9. so luong item su dung
				log.append('\t').append(slot.item.getType() + "_" + slot.item.getId());	 //  10. id item nhan
				log.append('\t').append(slot.item.getNumber());						//  11. so luong item nhan
				log.append('\t').append(process_result == true ? 1 : 0);			//  12. result
				log.append('\t').append(KeyID.NPC_NAME);								//  13. ten tai khoan giao dich
				log.append('\t').append(userInfo.getID() + "_" + System.currentTimeMillis());	//  14. transaction id
				LogHelper.Log(LogHelper.LogType.SPENT_ITEM, log.toString());
			    
			    // save npc private shop data
			    boolean saveResult = false;
			    saveResult = NPCShopMgr.saveDataToDatabase(KeyID.KEY_PRIVATE_SHOP);
			    if (saveResult == false)
			    {
				    LogHelper.Log("handleBuyItemNPCShop.. save friend data to db fail."); 
				    requestError(ReturnCode.RESPONSE_SAVE_ERROR);
				    return;
			    }
				
				if (!_use_lazy_sync_user_info)
				{
					saveResult = SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
					if (saveResult == false)
					{
						LogHelper.Log("handleBuyItemNPCShop.. save to db fail."); 
						requestError(ReturnCode.RESPONSE_SAVE_ERROR);
						return;
					}
				}

			    saveResult = SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + stock_id, stock.get(stock_id).getDataToDatabase());
			    if (saveResult == false)
			    {
				    LogHelper.Log("handleBuyItemNPCShop.. save to db fail."); 
				    _return_id = ReturnCode.RESPONSE_SAVE_ERROR;
				    requestError();
				    return;
			    }

			    // LogHelper.Log("handleBuyItemNPCShop.. save to db OK.");

			    break;
		    }
	    }
		
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addString(KeyID.KEY_FRIEND_DEVICE_ID, KeyID.NPC_NAME);
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addLong(KeyID.KEY_DIAMOND_USED, 0);
		response.addLong(KeyID.KEY_GOLD_USED, 1);
		response.addLong(KeyID.KEY_REPUTATION_USED, 0);
		response.addInt(KeyID.KEY_PS_SLOT_ID, slotId);
		
		try
		{
			response.addBinary(KeyID.KEY_FRIEND_INFOS, null);
		}
		catch (Exception e)
		{
			LogHelper.LogException("handleBuyItemNPCShop", e);
		}
		
		if (NPCShopMgr != null)
		{
			response.addBinary(KeyID.KEY_PRIVATE_SHOP, NPCShopMgr.getDataToClient());
		}
		
		if (stock_id != -1)
		{
			response.addBinary(KeyID.KEY_STOCKS + stock_id, stock.get(stock_id).getDataToClient());
		}
		
		try 
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("handleBuyItemNPCShop.. response to client OK.");
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("handleBuyItemNPCShop", ex);
		}
	}
	
	private void handleCollectMoneyPShop(FBEncrypt encrypt)
	{
		// lock private shop data
		// who & why & when
		StringBuilder lock_info = new StringBuilder();
		lock_info.append(_user_id).append('_');
		lock_info.append("collect").append('_');
		lock_info.append(Misc.SECONDS());
		
		if (!base.Add(_user_id + "_" + KeyID.KEY_PS_LOCK_DATA, lock_info.toString(), DatabaseID.PRIVATE_SHOP_LOCK_EXPIRED_DURATION))
		{
			// read current lock key and write log to file
			LogHelper.Log("handleUnlockFriendSlot.. error: private shop data is being locked.");
			_return_id = ReturnCode.RESPONSE_PS_DATA_IS_LOCKED;
			requestError();
			return;
		}
		else
		{
			// LogHelper.Log("handleUnlockFriendSlot.. lock private shop data OK: " + lock_info);
		}

		// refresh private shop data from db
		PShopMgr.loadFromDatabase(KeyID.KEY_PRIVATE_SHOP);
		
		long gold_used = 0;
		
		boolean process_result = true;
		
		// get and valid params
		int slotID = (int)encrypt.getShort(KeyID.KEY_PS_SLOT_ID);
		
		if (slotID < 0 || slotID >= DatabaseID.PRIVATE_SHOP_MAX_SLOT)
		{
			LogHelper.Log("handelCollectMoneyPShop.. invalid slot id");
			_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
			requestError();
			return;
		}
		
		// check slot status
		int acm_index = -1;
		for (PrivateShopSlot slot : PShopMgr.slots)
		{
			if (slot.getId() == slotID)
			{
				if (slot.item.getStatus() == DatabaseID.PS_ITEM_STATUS_SOLD)
				{
					if (slot.item.setStatus(DatabaseID.PS_ITEM_STATUS_EMPTY)) // check concurrency here
					{
						long itemPrice = slot.item.getPrice();
						if (itemPrice <= 0)
						{
							_return_id = ReturnCode.RESPONSE_IBS_INVALID_PRICE;
							
							break;
						}
						else
						{
							PrivateShopSlot emptySlot = new PrivateShopSlot(slotID);
							emptySlot.setLockStatus(false);
							PShopMgr.slots.set(PShopMgr.slots.indexOf(slot), emptySlot);
						
							gold_used = itemPrice;
							userInfo.setGold(userInfo.getGold() + itemPrice);
							
							userInfo.updateRevenu(itemPrice);
							
							// save to db
							boolean saveResult = false;
							
							if (!_use_lazy_sync_user_info)
							{
								saveResult = SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
								if (saveResult == false)
								{
									LogHelper.Log("handleCollectMoneyPShop.. save to db fail."); 
									requestError(ReturnCode.RESPONSE_SAVE_ERROR);
									return;
								}
							}
							
							saveResult = PShopMgr.saveDataToDatabase(KeyID.KEY_PRIVATE_SHOP);
							if (saveResult == false)
							{
								LogHelper.Log("handleCollectMoneyPShop.. save to db fail."); 
								requestError(ReturnCode.RESPONSE_SAVE_ERROR);
								return;
							}
							
							// LogHelper.Log("handleCollectMoneyPShop.. save to db OK.");
							
							StringBuilder log = new StringBuilder();
							log.append(Misc.getCurrentDateTime());						//  1. thoi gian tieu tien
							log.append('\t').append(Misc.getActionName(_command_id));	//  2. hanh dong cua gamer
							log.append('\t').append(userInfo.getID());					//  3. ten tai khoan
							log.append('\t').append(userInfo.getID());					//  4. id cua role nap tien
							log.append('\t').append(userInfo.getName());				//  5. ten role
							log.append('\t').append(SkyGarden._server_id);									//  6. id cua server
							log.append('\t').append(userInfo.getLevel());				//  7. level cua gamer
							log.append('\t').append(DatabaseID.IT_MONEY + "_" + DatabaseID.GOLD_ID);								//	8. id item nhan
							log.append('\t').append(itemPrice);									//	9. so luong item
							log.append('\t').append(1);									//	10. result
							log.append('\t').append(slot.item.getBuyerID());			//	11. description as buyer id
							LogHelper.Log(LogHelper.LogType.RECEIVING_ITEM, log.toString());
							
							if (_use_achievement)
							{
								acm_index = GetAchievementManager().Increase(CommandID.CMD_COLLECT_MONEY_PSHOP, itemPrice);
							}
							
							break;
						}
					}
					else
					{
						_return_id = ReturnCode.RESPONSE_CONCURRENT_ACCESS_PROBLEM;
						break;
					}
				}
				else
				{
					_return_id = ReturnCode.RESPONSE_PS_ITEM_IS_NOT_SOLD;
					break;
				}
			}
		}
		
		// unlock private shop data
		base.Delete(_user_id + "_" + KeyID.KEY_PS_LOCK_DATA);
		
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addLong(KeyID.KEY_GOLD_USED, gold_used);
		response.addBinary(KeyID.KEY_PRIVATE_SHOP, PShopMgr.getDataToClient());
		response.addInt(KeyID.KEY_PS_SLOT_ID, slotID);
		if (_use_achievement && acm_index != -1)
		{
			response.addInt(KeyID.KEY_ACHIEVEMENT_ID, acm_index);
			response.addBinary(KeyID.KEY_ACHIEVEMENT_INDEX + acm_index, GetAchievementManager().GetAchievement(acm_index).getData());
		}
		
		try 
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("handleCollectMoneyPShop", ex);
		}
	}
	
	private void loadFriendList(FBEncrypt encrypt)
	{
		StringBuilder friend_list = new StringBuilder();
		if (GetUserInfo().getLevel() >= 7) 
		{
			if (friend_mgr.GetFriendList().equals("") || friend_mgr.GetFriendList().length() == 0)
			{
				friend_list.append(KeyID.NPC_NAME);
			}
			else
			{
				friend_list.append(friend_mgr.GetFriendList()).append(';');
				friend_list.append(KeyID.NPC_NAME);
			}
		}
		else
		{
			friend_list.append(KeyID.NPC_NAME);
		}
		
		String[] friend_ids = friend_list.toString().split(";");
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		
		FBEncrypt _friends = new FBEncrypt();
		
		int _friend_count = 0;
		

		int current_ranking_command = -1;
		if (SkyGarden._ranking_info != null && SkyGarden._ranking_info.get("active") != null)
		{
			current_ranking_command = SkyGarden._ranking_info.get("active").GetRankingCommand();
		}
		
		for (int i = 0; i < friend_ids.length; i++)
		{
			_friend_device_id = friend_ids[i];

			// load friend info
			byte[] friend_bin = null;
			try
			{
				friend_bin = GET_DB_VALUE_BINARY_FRIEND(_friend_device_id, KeyID.KEY_USER_INFOS);
			}
			catch (Exception e)
			{
				LogHelper.LogException("loadFriendList", e);
				friend_bin = null;
			}
			
			if (friend_bin == null || friend_bin.length == 0)
			{
				LogHelper.Log("loadFriendList.. err! Can not load info of friend id " + _friend_device_id + ".");
			}
			else
			{
				// ----------------- load friend's machine durability
				UserInfo friendInfo = new UserInfo(friend_bin);
				
				// if user is banned, dont return to friendlist
				if (friendInfo.IsBan())
					continue;
				
				long friend_uid = friendInfo.getID();
				boolean notify_status = GetNotifyStatus(friend_uid);
				_alert.updateAlertMachine(friend_uid, notify_status);
				
				if (i < 18 && current_ranking_command != -1 && (friendInfo.GetLastLoginTime() + 24 * 60 * 60 > (System.currentTimeMillis()/1000)))
				{
					try
					{
						byte[] ranking = DBConnector.GetMembaseServer(friendInfo.getID()).GetRaw(friendInfo.getID() + "_" + KeyID.KEY_USER_RANKING_TARGET);
						RankingTarget friend_ranking = new RankingTarget(ranking);
						friendInfo.SetRankingAccumulation(friend_ranking.Get(current_ranking_command));
					}
					catch (Exception e)
					{
						friendInfo.SetRankingAccumulation(0);
						LogHelper.LogException("loadFriendList.LoadFriendAccumulation", e);
					}
				}
				else
				{
					friendInfo.SetRankingAccumulation(0);
				}
				
				_friends.addBinary(KeyID.KEY_FRIEND_INDEX + _friend_count, friendInfo.getData(false));
				_friend_count++;
			}
		}
		_friends.addShort(KeyID.KEY_FRIEND_COUNT, _friend_count);
		LogHelper.LogHappy("LoadFriendList: friend size = " + _friend_count);
		
		response.addBinary(KeyID.KEY_ALERT, _alert.getData());
		response.addBinary(KeyID.KEY_FRIEND_LIST_INFO, _friends.toByteArray());
		
		try
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("loadFriendList", ex);
		}
	}
	
	private void loadFriendListStep(FBEncrypt encrypt)
	{
		StringBuilder friend_list = new StringBuilder();
		int step = encrypt.getInt(KeyID.KEY_FRIEND_LIST_STEP);
		// valid param
		if (step < 0) {
			LogHelper.Log("loadFriendListStep.. invalid param");
			requestError();
			return;
		}
		
		int max = 100;
		// int max = encrypt.getString(KeyID.KEY_FRIEND_LIST_STEP_MAX);
		if (friend_mgr.GetFriendList().equals("") || friend_mgr.GetFriendList().length() == 0)
		{
			friend_list.append(KeyID.NPC_NAME);
		}
		else
		{
			friend_list.append(friend_mgr.GetFriendList()).append(';');
			friend_list.append(KeyID.NPC_NAME);
		}

//		LogHelper.Log("loadFriendList.. friend list: " + friend_list);
		
		String[] friend_ids = friend_list.toString().split(";");
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		FBEncrypt _friends = new FBEncrypt();
		
		int _friend_count = 0;
		int friendpage = (friend_ids.length/max) + 1;
		response.addInt(KeyID.KEY_FRIEND_LIST_STEP, step);
		response.addInt(KeyID.KEY_FRIEND_LIST_STEP_MAX, friendpage);
		if ((step*max) >= friend_ids.length)
		{
			LogHelper.Log("Can not load Friend List!!!");
			requestError(ReturnCode.RESPONSE_LOAD_FRIEND_DATA_ERROR);
			return;
		}
		
		for (int i = step*max; i < ((step*max) + max) /* && i < 200*/; i++)
		{
			if(i >= friend_ids.length)
				break;
			_friend_device_id = friend_ids[i];
			// LogHelper.Log("[" + i + "] " + _friend_device_id);

			// load friend info
			byte[] friend_bin = null;
			try
			{
				friend_bin = GET_DB_VALUE_BINARY_FRIEND(_friend_device_id, KeyID.KEY_USER_INFOS);
			}
			catch (Exception e)
			{
				LogHelper.LogException("loadFriendList", e);
				friend_bin = null;
			}
			
			if (friend_bin == null || friend_bin.length == 0)
			{
				LogHelper.Log("loadFriendList.. err! Can not load info of friend id " + _friend_device_id + ".");
			}
			else
			{
//				LogHelper.Log("loadFriendList.. loaded info of friend " + _friend_device_id + " done.");
				_friends.addBinary(KeyID.KEY_FRIEND_INDEX + _friend_count, friend_bin);

				boolean friend_need_help = false;
				
				try
				{
					FBEncrypt friendInfo = new FBEncrypt(friend_bin);
					int friend_floor_num = friendInfo.getShort(KeyID.KEY_USER_FLOOR);
					long friend_uid = friendInfo.getLong(KeyID.KEY_USER_ID);

					for (int f = 0; f < friend_floor_num; f++)
					{
						byte[] friend_machine_durability_bin = null;

						try
						{
							friend_machine_durability_bin = GET_DB_VALUE_BINARY_FRIEND(_friend_device_id, KeyID.KEY_MACHINES_DURABILITY + f);
						}
						catch (Exception e)
						{
							friend_machine_durability_bin = null;
						}

						if (friend_machine_durability_bin == null || friend_machine_durability_bin.length == 0)
						{
							LogHelper.Log("loadFriendList.. Can not get machine data from db, friend_machine_durability_bin is null. f = " + f);
						}
						else
						{
							MachineDurability npc_machine_durability = new MachineDurability(friend_machine_durability_bin);
							friend_need_help = isMachineNeedHelp(npc_machine_durability,_friend_device_id,f);
							if(friend_need_help)
							{
								_alert.updateAlertMachine(friend_uid, friend_need_help);
								break;
							}
						}
					}
					
				}
				catch (Exception e)
				{
					LogHelper.Log("Exception loadFriendList in checking machine to repaire: " + _friend_device_id + " err: " + e.toString());
					
				}

				_friend_count++;
			}
		}
		_friends.addShort(KeyID.KEY_FRIEND_COUNT, _friend_count);
		// LogHelper.Log("loadFriendList.. friend count = " + _friend_count);
		
		response.addBinary(KeyID.KEY_ALERT, _alert.getData());
		response.addBinary(KeyID.KEY_FRIEND_LIST_INFO, _friends.toByteArray());
		
		// LogHelper.Log("End load friend list.");
		
		try
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("loadFriendList: reponse to client OK.");
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("loadFriendList", ex);
		}

	}
	
	private void loadSpecialOffer(FBEncrypt encrypt)
	{
//		if(payment_flag == 0 && ProjectConfig.IS_SERVER_FREESTYLE == 0)
//		{
//			_offer = new Special_Offer();
//			
//			FBEncrypt response = new FBEncrypt();
//			response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
//			response.addBinary(KeyID.KEY_SPECIAL_OFFER, _offer.getData());
//			try
//			{
//				_client.WriteZip(response.toByteArray());
//			}
//			catch (Exception ex) 
//			{
//				LogHelper.LogException("loadSpecialOffer", ex);
//			}
//			
//			return;
//		}
		
		// update offer
		try {
			UpdateOfferFirstpay();
			UpdateOffer();
		} catch (Exception e) {
			LogHelper.LogException("UpdateOffer", e);
		}
		
		//TO CLIENT
		LogHelper.LogHappy("loadSpecialOffer to client-----: " + _user_id);
		LogHelper.LogHappy("loadSpecialOffer user group 	"+ _offer.getOfferUserGroup());
		LogHelper.LogHappy("loadSpecialOffer dura 		"+_offer.getOfferDuration());
		LogHelper.LogHappy("loadSpecialOffer last time 	"+_offer.getOfferLastTime());
		LogHelper.LogHappy("loadSpecialOffer content 	"+_offer.getOfferContent());
		LogHelper.LogHappy("loadSpecialOffer special_offer_accepted 	"+_offer.getOfferAccept());
		LogHelper.LogHappy("loadSpecialOffer special_offer_link_img 	"+_offer.getOfferLink());
		LogHelper.LogHappy("loadSpecialOffer special_offer_md5_img 	"+_offer.getOfferLinkMD5());
		LogHelper.LogHappy("loadSpecialOffer getOfferRemainingTime 	"+_offer.getOfferRemainingTime());
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_SPECIAL_OFFER, _offer.getDataToClient());

		try
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("loadSpecialOffer", ex);
		}
	}
	
	private void UpdateOfferFirstpay() {
		LogHelper.LogHappy("firstpay Update offer firstpay");
		if (userInfo.getLevel() < 6)
			return;
		
		int user_group = -1;
		if (_user_id >= DatabaseID.NEW_COMER_ID || IsServerHappy()) {
			if (!GameUtil.GetUserMisc(_user_id).Get("first_pay").equals("")) {
				LogHelper.Log("firstpay Already receive firstpay");
				return;
			} else {
				user_group = DatabaseID.OFFER_USER_GROUP_NEW_REG;
			}
		} else {
			return;
		}
		
		String[] field_offer = null;
		try {
			Object obj = DBConnector.GetMembaseServerForGeneralData().Get("offer_firstpay" + "_" + user_group);
			if (obj != null) {
				LogHelper.Log("firstpay Offer content := " + (String)obj);
				field_offer = ((String)obj).split("\\;");
			} else {
				LogHelper.Log("firstpay Can not find offer firstpay");
				return;
			}
		} catch(Exception e) {
			LogHelper.LogException("ReadOfferContent", e);
			return;
		}
		
		byte[] offer_bin = null;
		try {
			offer_bin = GET_DB_VALUE_BINARY(KeyID.KEY_SPECIAL_OFFER);
		} catch (Exception e) {
			offer_bin = null;
		}
		
		_offer = new Special_Offer(offer_bin);
		
		int past			= (Misc.SECONDS() - _offer.getOfferLastTime());
		int remaining_time	= 0;
		int duraconst		= Integer.parseInt(field_offer[DatabaseID.OFFER_DURA]);
		int lastduraconst	= _offer.getOfferDuration();
		
		if(((_offer.getOfferLastTime() + lastduraconst) >= Misc.SECONDS()) && !_offer.getOfferAccept())//out of event but still have duration
		{
			LogHelper.Log("firstpay out of event but still have duration");
			remaining_time = lastduraconst - past;//remaining time
			_offer.setOfferRemainingTime(remaining_time);
		}
		else if(Misc.SECONDS(field_offer[DatabaseID.OFFER_START]) <= _offer.getOfferLastTime() && Misc.SECONDS(field_offer[DatabaseID.OFFER_END]) >= _offer.getOfferLastTime())// in event
		{
			LogHelper.Log("firstpay in event");
			if(field_offer[DatabaseID.OFFER_DURA].length() > 1)// has duration
			{
				if(_offer.isOfferring())
				{
					remaining_time = lastduraconst - past;//remaining time
					_offer.setOfferRemainingTime(remaining_time);
				}
				else
				{
					_offer.setOfferRemainingTime(0);//overtime
				}
			}
			else
			{
				remaining_time = (Misc.SECONDS(field_offer[DatabaseID.OFFER_END]) - _offer.getOfferLastTime());
				_offer.setOfferRemainingTime(remaining_time);
			}
			
			LogHelper.LogHappy("Offer firstpay content := " + _offer.getOfferContent());
			LogHelper.LogHappy("Offer firstpay type := " + _offer.getOfferType());
			LogHelper.LogHappy("Offer firstpay duration := " + _offer.getOfferDuration());
			LogHelper.LogHappy("Offer firstpay accept := " + _offer.getOfferAccept());
			LogHelper.LogHappy("Offer firstpay available time := " + _offer.getAvailableTime());
			LogHelper.LogHappy("Offer firstpay remaining time := " + _offer.getOfferRemainingTime());
		}
		else if((Misc.SECONDS() >= Misc.SECONDS(field_offer[DatabaseID.OFFER_START]) && ((_offer.getOfferLastTime() < Misc.SECONDS(field_offer[DatabaseID.OFFER_START]) && _offer.inOfferTime()))))//get new offer on this event
		{
			LogHelper.Log("firstpay get new offer on this event");
			if(!_offer.getOfferAccept())
			{
				_offer.setOfferReject();
			}
				
			for(int i = DatabaseID.OFFER_CONTENT_DIAMOND ; i <= DatabaseID.OFFER_CONTENT_TOM_KID; i++)
			{
				if(field_offer[i].length() > 2)// has offer
				{
					_offer.setOfferContent(field_offer[i]);
					_offer.setOfferType(i);//set offer type				
					_offer.setOfferRemainingTime(duraconst);
					break;
				}
			}
			_offer.setOfferID((short)user_group);
			_offer.setOfferLastTime(Misc.SECONDS());
			_offer.setOfferDuration(Integer.parseInt(field_offer[DatabaseID.OFFER_DURA]));
			_offer.setOfferName(field_offer[DatabaseID.OFFER_NAME]); // cheat: use offer name as additional gift
			_offer.setOfferDescription(field_offer[DatabaseID.OFFER_DESCRIPTION]); // cheat: use offer desciption as key offer firstpay
			_offer.setOfferLink(field_offer[DatabaseID.OFFER_LINK_IMAGE]);
			_offer.setOfferMd5(field_offer[DatabaseID.OFFER_MD5_IMAGE]);
			_offer.setOfferUserGroup((short)user_group);
			_offer.setOfferAccept(false,CommandID.CMD_LOAD_SPECIAL_OFFER,userInfo);
			_offer.setOfferButtonLabel(field_offer[DatabaseID.OFFER_BUTTON_LABEL]);
			
			try {
				if (field_offer.length >= 14) {
					_offer.setOfferWeblink(field_offer[DatabaseID.OFFER_WEB_LINK]);
				}
				
				if (field_offer.length >= 15) {
					_offer.setAvailableTime(Integer.parseInt(field_offer[DatabaseID.OFFER_AVAILABLE_TIME]));
				}
			} catch (Exception e) {
				LogHelper.LogException("NewFieldOffer", e);
			}
			
			LogHelper.LogHappy("Offer firstpay content := " + _offer.getOfferContent());
			LogHelper.LogHappy("Offer firstpay type := " + _offer.getOfferType());
			LogHelper.LogHappy("Offer firstpay duration := " + _offer.getOfferDuration());
			LogHelper.LogHappy("Offer firstpay accept := " + _offer.getOfferAccept());
			LogHelper.LogHappy("Offer firstpay available time := " + _offer.getAvailableTime());
			LogHelper.LogHappy("Offer firstpay remaining time := " + _offer.getOfferRemainingTime());
			
			GameUtil.GetUserMisc(_user_id).Set("first_pay", Misc.getCurrentDateTime());
			
			StringBuilder log = new StringBuilder();
			log.append(Misc.getCurrentDateTime());								//  1. thoi gian tieu tien
			log.append('\t').append("ReceiveOfferFirstPay");			//  2. hanh dong cua gamer
			log.append('\t').append(userInfo.getID());							//  3. id
			log.append('\t').append(userInfo.getID());							//  4. role id
			log.append('\t').append(userInfo.getName());						//  5. name
			log.append('\t').append(SkyGarden._server_id);											//  6. server id
			log.append('\t').append(userInfo.getLevel());						//  7. level
			LogHelper.Log(LogHelper.LogType.TRACKING_ACTION, log.toString());
		}
		else
		{
			LogHelper.LogHappy("setOfferRemainingTime 0");
			_offer.setOfferRemainingTime(0);
		}
		
		if(_offer.isChange())
		{
			_offer.setChange(false);//saved not need change 
			SET_DB_VALUE_BINARY(KeyID.KEY_SPECIAL_OFFER, _offer.getData());
		}
	}
	
	private void UpdateOffer() throws Exception
	{
		LogHelper.LogHappy("Updating special offer");
		if (userInfo.getLevel() < 6)
			return;
		
		// get total paid
		int total_paid = 0;
		try
		{
			Object obj = DBConnector.GetMembaseServer(userInfo.getID()).Get(userInfo.getID() + "_" + KeyID.KEY_TOTAL_PAID);
			if (obj != null)
			{
				total_paid = (int)obj / 1000;
			}
		}
		catch (Exception e)
		{
			total_paid = 0;
		}
		
		LogHelper.Log("Total paid := " + total_paid);

		// specify user group base on total paid
		int user_group = DatabaseID.OFFER_USER_GROUP_NEW_REG;
		if(userInfo.getLevel() >= 10 && userInfo.getLevel() <= 12)
		{
			user_group = DatabaseID.OFFER_USER_GROUP_NEW_REG;
		}
		else if(total_paid <= 0)
		{
			user_group = DatabaseID.OFFER_USER_GROUP_UNPAID;
		}
		else if(total_paid < 10)
		{
			user_group = DatabaseID.OFFER_USER_GROUP_PAID_LESS_10;
		}
		else if(total_paid < 20)
		{
			user_group = DatabaseID.OFFER_USER_GROUP_PAID_LESS_20;
		}
		else if(total_paid < 30)
		{
			user_group = DatabaseID.OFFER_USER_GROUP_PAID_LESS_30;
		}
		else if(total_paid < 40)
		{
			user_group = DatabaseID.OFFER_USER_GROUP_PAID_LESS_40;
		}
		else if(total_paid < 50)
		{
			user_group = DatabaseID.OFFER_USER_GROUP_PAID_LESS_50;
		}
		else if(total_paid < 60)
		{
			user_group = DatabaseID.OFFER_USER_GROUP_PAID_LESS_60;
		}
		else if(total_paid < 70)
		{
			user_group = DatabaseID.OFFER_USER_GROUP_PAID_LESS_70;
		}
		else if(total_paid < 80)
		{
			user_group = DatabaseID.OFFER_USER_GROUP_PAID_LESS_80;
		}
		else if(total_paid < 90)
		{
			user_group = DatabaseID.OFFER_USER_GROUP_PAID_LESS_90;
		}
		else if(total_paid < 100)
		{
			user_group = DatabaseID.OFFER_USER_GROUP_PAID_LESS_100;
		}
		else if(total_paid < 150)
		{
			user_group = DatabaseID.OFFER_USER_GROUP_PAID_LESS_150;
		}
		else
		{
			user_group = DatabaseID.OFFER_USER_GROUP_PAID;
		}
		
		// offer last pay
//		String offer_last_pay = "17/12/2014 00:00:00";
//		String user_last_pay_info = "";
//		try
//		{
//			Object obj = DBConnector.GetMembaseServer(_user_id).Get(_user_id + "_" + KeyID.KEY_LAST_PAY_TIME);
//			if (obj != null)
//			{
//				user_last_pay_info = (String)obj;
//				String[] aos = user_last_pay_info.split("\\|");
//				
//				if (aos != null && aos.length > 0 && !aos[0].equals("null"))
//				{
//					LogHelper.LogHappy("User id := " + _user_id + ", Last pay at := " + aos[0]);
//					
//					SimpleDateFormat datef = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
//					SimpleDateFormat datef2 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
//					if (datef2.parse(aos[0]).getTime() < datef.parse(offer_last_pay).getTime())
//					{
//						user_group = DatabaseID.OFFER_USER_GROUP_NEW_REG;
//						LogHelper.LogHappy("User id := " + _user_id + ", ==> DatabaseID.OFFER_USER_GROUP_NEW_REG");
//					}
//				}
//				
//				
//			}
//		}
//		catch (Exception e)
//		{
//			LogHelper.LogException("UpdateOffer.GetLastPayInfo", e);
//		}
		
		// offer first pay
//		if (_user_id >= DatabaseID.NEW_COMER_ID || IsServerHappy()) {
//			user_group = DatabaseID.OFFER_USER_GROUP_NEW_REG;
//		}
		
		// get & update newest offer
		byte[] offer_bin = null;
		try
		{
			offer_bin = GET_DB_VALUE_BINARY(KeyID.KEY_SPECIAL_OFFER);
		}
		catch (Exception e)
		{
			offer_bin = null;
		}
		
		_offer = new Special_Offer(offer_bin);
		String[] field_offer = null;
		try
		{
			Object obj = DBConnector.GetMembaseServerForGeneralData().Get("special_offer" + "_" + user_group);
			if (obj != null)
			{
				field_offer = ((String)obj).split("\\;");
				LogHelper.LogHappy("Offer content := " + (String)obj);
			}
		}
		catch(Exception e)
		{
			LogHelper.LogException("ReadOfferContent", e);
		}
		
		int past			= (Misc.SECONDS() - _offer.getOfferLastTime());
		int remaining_time	= 0;
		int duraconst		= Integer.parseInt(field_offer[DatabaseID.OFFER_DURA]);
		int lastduraconst	= _offer.getOfferDuration();
		
//		LogHelper.LogHappy("condition 1" + (Misc.SECONDS() >= Misc.SECONDS(field_offer[DatabaseID.OFFER_START])));
//		LogHelper.LogHappy("condition 2" + (_offer.getOfferLastTime() < Misc.SECONDS(field_offer[DatabaseID.OFFER_START])));
//		LogHelper.LogHappy("condition 3" + _offer.inOfferTime());
		if(((_offer.getOfferLastTime() + lastduraconst) >= Misc.SECONDS()) 
				&& !_offer.getOfferAccept())//out of event but still have duration
		{
			LogHelper.Log("out of event but still have duration");
			remaining_time = lastduraconst - past;//remaining time
			_offer.setOfferRemainingTime(remaining_time);
		}
		else if(Misc.SECONDS(field_offer[DatabaseID.OFFER_START]) <= _offer.getOfferLastTime() 
				&& Misc.SECONDS(field_offer[DatabaseID.OFFER_END]) >= _offer.getOfferLastTime())// in event
		{
			LogHelper.Log("in event");
			if(field_offer[DatabaseID.OFFER_DURA].length() > 1)// has duration
			{
				if(_offer.isOfferring())
				{
					remaining_time = lastduraconst - past;//remaining time
					_offer.setOfferRemainingTime(remaining_time);
				}
				else
				{
					_offer.setOfferRemainingTime(0);//overtime
				}
			}
			else
			{
				remaining_time = (Misc.SECONDS(field_offer[DatabaseID.OFFER_END]) - _offer.getOfferLastTime());
				_offer.setOfferRemainingTime(remaining_time);
			}
		}
		else if((Misc.SECONDS() >= Misc.SECONDS(field_offer[DatabaseID.OFFER_START]) && 
				((_offer.getOfferLastTime() < Misc.SECONDS(field_offer[DatabaseID.OFFER_START]) && _offer.inOfferTime()))))//get new offer on this event
		{
			LogHelper.Log("get new offer on this event");
			if(!_offer.getOfferAccept())//last offer user not accept
			{
				_offer.setOfferReject();
			}//counting
				
//			for(int i = DatabaseID.OFFER_CONTENT_DIAMOND ; i < field_offer.length; i++)
			for(int i = DatabaseID.OFFER_CONTENT_DIAMOND ; i <= DatabaseID.OFFER_CONTENT_TOM_KID; i++)
			{
				if(field_offer[i].length() > 2)// has offer
				{
					_offer.setOfferContent(field_offer[i]);
					_offer.setOfferType(i);//set offer type				
					_offer.setOfferRemainingTime(duraconst);
					break;
				}
			}
			_offer.setOfferID((short)user_group);
			_offer.setOfferLastTime(Misc.SECONDS());
			_offer.setOfferDuration(Integer.parseInt(field_offer[DatabaseID.OFFER_DURA]));
			_offer.setOfferName(field_offer[DatabaseID.OFFER_NAME]); // cheat: use offer name as additional gift
			_offer.setOfferDescription(field_offer[DatabaseID.OFFER_DESCRIPTION]);
			_offer.setOfferLink(field_offer[DatabaseID.OFFER_LINK_IMAGE]);
			_offer.setOfferMd5(field_offer[DatabaseID.OFFER_MD5_IMAGE]);
			_offer.setOfferUserGroup((short)user_group);
			_offer.setOfferAccept(false,CommandID.CMD_LOAD_SPECIAL_OFFER,userInfo);
			_offer.setOfferButtonLabel(field_offer[DatabaseID.OFFER_BUTTON_LABEL]);
			
			try {
				if (field_offer.length >= 14)
				{
					_offer.setOfferWeblink(field_offer[DatabaseID.OFFER_WEB_LINK]);
				}
				
				if (field_offer.length >= 15)
				{
					_offer.setAvailableTime(Integer.parseInt(field_offer[DatabaseID.OFFER_AVAILABLE_TIME]));
				}
			} catch (Exception e) {
			}
			
			LogHelper.LogHappy("Offer content := " + _offer.getOfferContent());
			LogHelper.LogHappy("Offer type := " + _offer.getOfferType());
			LogHelper.LogHappy("Offer duration := " + _offer.getOfferDuration());
			LogHelper.LogHappy("Offer accept := " + _offer.getOfferAccept());
			LogHelper.LogHappy("Offer available time := " + _offer.getAvailableTime());
		}
		else
		{
			LogHelper.Log("setOfferRemainingTime 0");
			_offer.setOfferRemainingTime(0);
		}
		
		if(_offer.isChange())
		{
			_offer.setChange(false);//saved not need change 
			SET_DB_VALUE_BINARY(KeyID.KEY_SPECIAL_OFFER, _offer.getData());
		}
		
		// update new offer system
		if (_use_new_offer) 
		{
			// offer bug
			if (_use_new_offer && ServerOffer().isOfferActive(ServerOffer().getOfferBug()))
			{
				int new_offer_id = ServerOffer().getOfferID(ServerOffer().getOfferBug());
				int last_offer_id = UserOffer().getOfferID(UserOffer().getOfferBug());
				LogHelper.LogHappy("new_offer_id := " + new_offer_id + ", last_offer_id := " + last_offer_id);

				if (last_offer_id < new_offer_id || (ProjectConfig.IS_SERVER_FREESTYLE == 1))
				{
					// receive new offer
					UserOffer().setOfferContent(UserOffer().getOfferBug(), ServerOffer().getOfferContent(ServerOffer().getOfferBug()));
					UserOffer().updateOffer(UserOffer().getOfferBug());
					UserOffer().setOfferReceiveTime(UserOffer().getOfferBug(), Misc.SECONDS());
					UserOffer().setOfferUseTime(UserOffer().getOfferBug(), 0);
					DBConnector.GetMembaseServer(_user_id).SetRaw(_user_id + "_" + KeyID.KEY_OFFER_MANAGER, UserOffer().getData());
				}
			}

			// offer gem
			if (_use_new_offer && ServerOffer().isOfferActive(ServerOffer().getOfferGem()))
			{
				int new_offer_id = ServerOffer().getOfferID(ServerOffer().getOfferGem());
				int last_offer_id = UserOffer().getOfferID(UserOffer().getOfferGem());
				LogHelper.LogHappy("new_offer_id := " + new_offer_id + ", last_offer_id := " + last_offer_id);

				if (last_offer_id < new_offer_id || (ProjectConfig.IS_SERVER_FREESTYLE == 1))
				{
					// receive new offer
					UserOffer().setOfferContent(UserOffer().getOfferGem(), ServerOffer().getOfferContent(ServerOffer().getOfferGem()));
					UserOffer().updateOffer(UserOffer().getOfferGem());
					UserOffer().setOfferReceiveTime(UserOffer().getOfferGem(), Misc.SECONDS());
					UserOffer().setOfferUseTime(UserOffer().getOfferGem(), 0);
					DBConnector.GetMembaseServer(_user_id).SetRaw(_user_id + "_" + KeyID.KEY_OFFER_MANAGER, UserOffer().getData());
				}
			}

			// offer lucky leaf
			if (_use_new_offer && ServerOffer().isOfferActive(ServerOffer().getOfferLuckyLeafGreen()))
			{
				int new_offer_id = ServerOffer().getOfferID(ServerOffer().getOfferLuckyLeafGreen());
				int last_offer_id = UserOffer().getOfferID(UserOffer().getOfferLuckyLeafGreen());
				LogHelper.LogHappy("new_offer_id := " + new_offer_id + ", last_offer_id := " + last_offer_id);

				if (last_offer_id < new_offer_id || (ProjectConfig.IS_SERVER_FREESTYLE == 1))
				{
					// receive new offer
					UserOffer().setOfferContent(UserOffer().getOfferLuckyLeafGreen(), ServerOffer().getOfferContent(ServerOffer().getOfferLuckyLeafGreen()));
					UserOffer().updateOffer(UserOffer().getOfferLuckyLeafGreen());
					UserOffer().setOfferReceiveTime(UserOffer().getOfferLuckyLeafGreen(), Misc.SECONDS());
					UserOffer().setOfferUseTime(UserOffer().getOfferLuckyLeafGreen(), 0);
					DBConnector.GetMembaseServer(_user_id).SetRaw(_user_id + "_" + KeyID.KEY_OFFER_MANAGER, UserOffer().getData());
				}
			}

			// offer lucky leaf purple
			if (_use_new_offer && ServerOffer().isOfferActive(ServerOffer().getOfferLuckyLeafPurple()))
			{
				int new_offer_id = ServerOffer().getOfferID(ServerOffer().getOfferLuckyLeafPurple());
				int last_offer_id = UserOffer().getOfferID(UserOffer().getOfferLuckyLeafPurple());
				LogHelper.LogHappy("new_offer_id := " + new_offer_id + ", last_offer_id := " + last_offer_id);

				if (last_offer_id < new_offer_id || (ProjectConfig.IS_SERVER_FREESTYLE == 1))
				{
					// receive new offer
					UserOffer().setOfferContent(UserOffer().getOfferLuckyLeafPurple(), ServerOffer().getOfferContent(ServerOffer().getOfferLuckyLeafPurple()));
					UserOffer().updateOffer(UserOffer().getOfferLuckyLeafPurple());
					UserOffer().setOfferReceiveTime(UserOffer().getOfferLuckyLeafPurple(), Misc.SECONDS());
					UserOffer().setOfferUseTime(UserOffer().getOfferLuckyLeafPurple(), 0);
					DBConnector.GetMembaseServer(_user_id).SetRaw(_user_id + "_" + KeyID.KEY_OFFER_MANAGER, UserOffer().getData());
				}
			}
		}
	}
	
	private void buySaleOffSpecialOffer(FBEncrypt encrypt)
	{
		// load check offer
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		// int price = 0;
		if(_offer == null)//try to reload special offer
		{
			byte[] offerbin = null;
			try
			{
				offerbin = GET_DB_VALUE_BINARY(KeyID.KEY_SPECIAL_OFFER);
			}
			catch (Exception e)
			{
				LogHelper.Log("loadSpecialOffer.. can not get user data.");
				LogHelper.LogException("loadSpecialOffer", e);
				offerbin = null;
				requestError(ReturnCode.RESPONSE_LOAD_ERROR);
				return;
			}
			_offer = new Special_Offer(offerbin);
		}
		
		if(_offer.isOfferring() && _offer.getOfferType() == DatabaseID.OFFER_CONTENT_SALE_OFF)//sale off item
		{
			String[] offercontent = _offer.getOfferContent().split(":");
			int price = Integer.parseInt(offercontent[2]);				//<<<<<<<<<<<<<<<diamond only
			UseMoneyResult use_diamond_result = new UseMoneyResult(UseMoneyResult.CODE.INVALID_NUMBER, 0, 0);
			//charge fee
			if ((money_mgr.GetRealMoney() + money_mgr.GetBonusMoney()) < price)
			{
				_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_DIAMOND;
				LogHelper.Log("buySaleOffSpecialOffer.. not enough diamond. " + (money_mgr.GetRealMoney() + money_mgr.GetBonusMoney()) + "/" + price);
				requestError(ReturnCode.RESPONSE_LOAD_ERROR);
				return;
			}
			else if(price > 0)
			{
				// diamond_used = requiredDiamond;
				use_diamond_result = money_mgr.UseRealMoneyAndBonusMoney((int)price,	// log
														CommandID.CMD_BUY_SALE_OFF_SPECIAL_OFFER,							//  2. hanh dong cua gamer
														userInfo.getName(),						//  3. ten tai khoan
														userInfo.getLevel(),					//  7. level cua gamer
														_ip,									//  9. ip login v4 cua gamer
														-1,								// 10. id cua loai item
														-1,								// 11. id cua item
														"" + _offer.getOfferName(),						// 12. ten item
														price,									// 13. gia game coin cua item
														1);										// 14. so luong vat pham
			}
			else
			{
				LogHelper.Log("buySaleOffSpecialOffer.. bad price : "+ price);
				requestError(ReturnCode.RESPONSE_LOAD_ERROR);
				return;
			}
			
			//add gift
			if(use_diamond_result._code == UseMoneyResult.CODE.SUCCESS)
			{
				String s_offer = Misc.stringCombine(offercontent, 3, ":");
				if(gift2Stock(s_offer, CommandID.CMD_BUY_SALE_OFF_SPECIAL_OFFER, "buy_offer"))
				{
					_offer.setAvailableTime(_offer.getAvailableTime() - 1);
					if (_offer.getAvailableTime() <= 0)
					{
						_offer.setOfferAccept(true,CommandID.CMD_BUY_SALE_OFF_SPECIAL_OFFER,userInfo);
					}
					
					if(_offer.isChange())
					{
						_offer.setChange(false);//saved not need change
						DBConnector.GetMembaseServer(_user_id).SetRaw(_user_id + "_" + KeyID.KEY_SPECIAL_OFFER,_offer.getData());
					}

					LogHelper.Log("buySaleOffSpecialOffer.. add gift offer done. gift: " + s_offer);
				}
				else
				{
					LogHelper.Log("buySaleOffSpecialOffer.. err! can not load gift manager.  gift: " + s_offer);
				}
			}
			
			//to client
			response.addBinary(KeyID.KEY_SPECIAL_OFFER, _offer.getData());
			response.addLong(KeyID.KEY_DIAMOND_USED, price);
			response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
			response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
			response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToClient());
			response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToClient());
			response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
			
			try
			{
				_client.WriteZip(response.toByteArray());
			}
			catch (Exception ex)
			{
				LogHelper.LogException("loadFriendGarden", ex);
			}
		}		
	}
	
	private void handleBuyOfferBug(FBEncrypt encrypt)
	{
		if (!_use_new_offer) 
		{
			return;
		}
		
		int pack_id = encrypt.getInt(KeyID.KEY_SPECIAL_OFFER_ID);
		if (pack_id < 0)
		{
			requestError();
			return;
		}
		
		boolean offer_useable = UserOffer().isOfferUseable(UserOffer().getOfferBug());
		if (offer_useable)
		{
			int use_time = UserOffer().getOfferUseTime(UserOffer().getOfferBug());
			UserOffer().setOfferUseTime(UserOffer().getOfferBug(), use_time + 1);
			DBConnector.GetMembaseServer(_user_id).SetRaw(_user_id + "_" + KeyID.KEY_OFFER_MANAGER, UserOffer().getData());
			
			String[] packs_info = UserOffer().getOfferPacksInfo(UserOffer().getOfferBug()).split(";");
			for (String s : packs_info)
			{
				String[] aos = s.split(":");
				int id = Integer.parseInt(aos[0]);
				if (pack_id == id)
				{
//					int price_type = Integer.parseInt(aos[1]); // support diamond only
//					int price_id = Integer.parseInt(aos[2]); // support diamond only
					int price_num = Integer.parseInt(aos[3]);
					LogHelper.LogHappy("Pack id := " + pack_id + ", Price := " + price_num);
					
					if ((money_mgr.GetRealMoney() + money_mgr.GetBonusMoney()) >= price_num)
					{
						UseMoneyResult usemoneyresult = money_mgr.UseRealMoneyAndBonusMoney(price_num,	// 1. log
															_command_id,							//  2. hanh dong cua gamer
															userInfo.getName(),						//  3. ten tai khoan
															userInfo.getLevel(),					//  7. level cua gamer
															_ip,									//  9. ip login v4 cua gamer
															-1,										// 10. id cua loai item
															-1,										// 11. id cua item
															"",										// 12. ten item
															price_num,								// 13. gia game coin cua item
															1);										// 14. so luong vat pham

						if (usemoneyresult._code == UseMoneyResult.CODE.SUCCESS)
						{
							// get items list
							StringBuilder sb = new StringBuilder();
							for (int i = 4; i < aos.length; i++)
							{
								if (sb.length() == 0)
								{
									sb.append(aos[i]);
								}
								else
								{
									sb.append(':').append(aos[i]);
								}
							}	
							LogHelper.LogHappy("Item list := " + sb.toString());
							gift2Stock(sb.toString(), _command_id, "offer_bug");
						}
						else
						{
							_return_id = ReturnCode.RESPONSE_CANT_SUBSTRACT_MONEY;
							LogHelper.Log("can not substract money");
							requestError();
							return;
						}
					}
					else
					{
						_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_DIAMOND;
					}
				}
			}
		}
		else
		{
			LogHelper.LogHappy("Offer is not usable");
			requestError();
			return;
		}
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
		response.addBinary(KeyID.KEY_OFFER_BUG, UserOffer().getOfferData(UserOffer().getOfferBug()));
		
		try
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex)
		{
			LogHelper.LogException("loadFriendGarden", ex);
		}
	}
	
	private void handleBuyOfferGem(FBEncrypt encrypt)
	{
		if (!_use_new_offer) 
		{
			return;
		}
				
		int pack_id = encrypt.getInt(KeyID.KEY_SPECIAL_OFFER_ID);
		if (pack_id < 0)
		{
			requestError();
			return;
		}
		
		boolean offer_useable = UserOffer().isOfferUseable(UserOffer().getOfferGem());
		if (offer_useable)
		{
			int use_time = UserOffer().getOfferUseTime(UserOffer().getOfferGem());
			UserOffer().setOfferUseTime(UserOffer().getOfferGem(), use_time + 1);
			DBConnector.GetMembaseServer(_user_id).SetRaw(_user_id + "_" + KeyID.KEY_OFFER_MANAGER, UserOffer().getData());
			
			String[] packs_info = UserOffer().getOfferPacksInfo(UserOffer().getOfferGem()).split(";");
			for (String s : packs_info)
			{
				String[] aos = s.split(":");
				int id = Integer.parseInt(aos[0]);
				if (pack_id == id)
				{
//					int price_type = Integer.parseInt(aos[1]); // support diamond only
//					int price_id = Integer.parseInt(aos[2]); // support diamond only
					int price_num = Integer.parseInt(aos[3]);
					LogHelper.LogHappy("Pack id := " + pack_id + ", Price := " + price_num);
					
					if ((money_mgr.GetRealMoney() + money_mgr.GetBonusMoney()) >= price_num)
					{
						UseMoneyResult usemoneyresult = money_mgr.UseRealMoneyAndBonusMoney(price_num,	// 1. log
															_command_id,							//  2. hanh dong cua gamer
															userInfo.getName(),						//  3. ten tai khoan
															userInfo.getLevel(),					//  7. level cua gamer
															_ip,									//  9. ip login v4 cua gamer
															-1,										// 10. id cua loai item
															-1,										// 11. id cua item
															"",										// 12. ten item
															price_num,								// 13. gia game coin cua item
															1);										// 14. so luong vat pham

						if (usemoneyresult._code == UseMoneyResult.CODE.SUCCESS)
						{
							// get items list
							StringBuilder sb = new StringBuilder();
							for (int i = 4; i < aos.length; i++)
							{
								if (sb.length() == 0)
								{
									sb.append(aos[i]);
								}
								else
								{
									sb.append(':').append(aos[i]);
								}
							}	
							LogHelper.LogHappy("Item list := " + sb.toString());
							gift2Stock(sb.toString(), _command_id, "offer_gem");
						}
						else
						{
							_return_id = ReturnCode.RESPONSE_CANT_SUBSTRACT_MONEY;
							LogHelper.Log("can not substract money");
							requestError();
							return;
						}
					}
					else
					{
						_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_DIAMOND;
					}
				}
			}
		}
		else
		{
			LogHelper.LogHappy("Offer is not usable");
			requestError();
			return;
		}
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
		response.addBinary(KeyID.KEY_OFFER_GEM, UserOffer().getOfferData(UserOffer().getOfferGem()));
		
		try
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex)
		{
			LogHelper.LogException("loadFriendGarden", ex);
		}
	}
	
	private void handleBuyOfferFloor(FBEncrypt encrypt)
	{
		if (!_use_new_offer) 
		{
			return;
		}
				
		int pack_id = encrypt.getInt(KeyID.KEY_SPECIAL_OFFER_ID);
		if (pack_id < 0)
		{
			requestError();
			return;
		}
		
		boolean offer_useable = UserOffer().isOfferUseable(UserOffer().getOfferFloor());
		if (offer_useable)
		{
			int use_time = UserOffer().getOfferUseTime(UserOffer().getOfferFloor());
			UserOffer().setOfferUseTime(UserOffer().getOfferFloor(), use_time + 1);
			DBConnector.GetMembaseServer(_user_id).SetRaw(_user_id + "_" + KeyID.KEY_OFFER_MANAGER, UserOffer().getData());
			
			String[] packs_info = UserOffer().getOfferPacksInfo(UserOffer().getOfferFloor()).split(";");
			for (String s : packs_info)
			{
				String[] aos = s.split(":");
				int id = Integer.parseInt(aos[0]);
				if (pack_id == id)
				{
//					int price_type = Integer.parseInt(aos[1]); // support diamond only
//					int price_id = Integer.parseInt(aos[2]); // support diamond only
					int price_num = Integer.parseInt(aos[3]);
					LogHelper.LogHappy("Pack id := " + pack_id + ", Price := " + price_num);
					
					if ((money_mgr.GetRealMoney() + money_mgr.GetBonusMoney()) >= price_num)
					{
						UseMoneyResult usemoneyresult = money_mgr.UseRealMoneyAndBonusMoney(price_num,	// 1. log
															_command_id,							//  2. hanh dong cua gamer
															userInfo.getName(),						//  3. ten tai khoan
															userInfo.getLevel(),					//  7. level cua gamer
															_ip,									//  9. ip login v4 cua gamer
															-1,										// 10. id cua loai item
															-1,										// 11. id cua item
															"",										// 12. ten item
															price_num,								// 13. gia game coin cua item
															1);										// 14. so luong vat pham

						if (usemoneyresult._code == UseMoneyResult.CODE.SUCCESS)
						{
							// get items list
							StringBuilder sb = new StringBuilder();
							for (int i = 4; i < aos.length; i++)
							{
								if (sb.length() == 0)
								{
									sb.append(aos[i]);
								}
								else
								{
									sb.append(':').append(aos[i]);
								}
							}	
							LogHelper.LogHappy("Item list := " + sb.toString());
							gift2Stock(sb.toString(), _command_id, "offer_floor");
						}
						else
						{
							_return_id = ReturnCode.RESPONSE_CANT_SUBSTRACT_MONEY;
							LogHelper.Log("can not substract money");
							requestError();
							return;
						}
					}
					else
					{
						_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_DIAMOND;
					}
				}
			}
		}
		else
		{
			LogHelper.LogHappy("Offer is not usable");
			requestError();
			return;
		}
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
		response.addBinary(KeyID.KEY_OFFER_FLOOR, UserOffer().getOfferData(UserOffer().getOfferFloor()));
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		
		try
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex)
		{
			LogHelper.LogException("handleBuyOfferFloor", ex);
		}
	}
	
	private void handleBuyOfferMachine(FBEncrypt encrypt)
	{
		if (!_use_new_offer) 
		{
			return;
		}
				
		int pack_id = encrypt.getInt(KeyID.KEY_SPECIAL_OFFER_ID);
		if (pack_id < 0)
		{
			requestError();
			return;
		}
		
		boolean offer_useable = UserOffer().isOfferUseable(UserOffer().getOfferMachine());
		if (offer_useable)
		{
			int use_time = UserOffer().getOfferUseTime(UserOffer().getOfferMachine());
			UserOffer().setOfferUseTime(UserOffer().getOfferMachine(), use_time + 1);
			DBConnector.GetMembaseServer(_user_id).SetRaw(_user_id + "_" + KeyID.KEY_OFFER_MANAGER, UserOffer().getData());
			
			String[] packs_info = UserOffer().getOfferPacksInfo(UserOffer().getOfferMachine()).split(";");
			for (String s : packs_info)
			{
				String[] aos = s.split(":");
				int id = Integer.parseInt(aos[0]);
				if (pack_id == id)
				{
//					int price_type = Integer.parseInt(aos[1]); // support diamond only
//					int price_id = Integer.parseInt(aos[2]); // support diamond only
					int price_num = Integer.parseInt(aos[3]);
					LogHelper.LogHappy("Pack id := " + pack_id + ", Price := " + price_num);
					
					if ((money_mgr.GetRealMoney() + money_mgr.GetBonusMoney()) >= price_num)
					{
						UseMoneyResult usemoneyresult = money_mgr.UseRealMoneyAndBonusMoney(price_num,	// 1. log
															_command_id,							//  2. hanh dong cua gamer
															userInfo.getName(),						//  3. ten tai khoan
															userInfo.getLevel(),					//  7. level cua gamer
															_ip,									//  9. ip login v4 cua gamer
															-1,										// 10. id cua loai item
															-1,										// 11. id cua item
															"",										// 12. ten item
															price_num,								// 13. gia game coin cua item
															1);										// 14. so luong vat pham

						if (usemoneyresult._code == UseMoneyResult.CODE.SUCCESS)
						{
							// get items list
							StringBuilder sb = new StringBuilder();
							for (int i = 4; i < aos.length; i++)
							{
								if (sb.length() == 0)
								{
									sb.append(aos[i]);
								}
								else
								{
									sb.append(':').append(aos[i]);
								}
							}	
							LogHelper.LogHappy("Item list := " + sb.toString());
							gift2Stock(sb.toString(), _command_id, "offer_machine");
						}
						else
						{
							_return_id = ReturnCode.RESPONSE_CANT_SUBSTRACT_MONEY;
							LogHelper.Log("can not substract money");
							requestError();
							return;
						}
					}
					else
					{
						_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_DIAMOND;
					}
				}
			}
		}
		else
		{
			LogHelper.LogHappy("Offer is not usable");
			requestError();
			return;
		}
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
		response.addBinary(KeyID.KEY_OFFER_MACHINE, UserOffer().getOfferData(UserOffer().getOfferMachine()));
		
		try
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex)
		{
			LogHelper.LogException("handleBuyOfferFloor", ex);
		}
	}
	
	private void handleBuyOfferLuckyLeaf(FBEncrypt encrypt)
	{
		if (!_use_new_offer) 
		{
			return;
		}
				
		int pack_id = encrypt.getInt(KeyID.KEY_SPECIAL_OFFER_ID);
		if (pack_id < 0)
		{
			requestError();
			return;
		}
		
		boolean offer_useable = UserOffer().isOfferUseable(UserOffer().getOfferLuckyLeafGreen());
		if (offer_useable)
		{
			int use_time = UserOffer().getOfferUseTime(UserOffer().getOfferLuckyLeafGreen());
			UserOffer().setOfferUseTime(UserOffer().getOfferLuckyLeafGreen(), use_time + 1);
			DBConnector.GetMembaseServer(_user_id).SetRaw(_user_id + "_" + KeyID.KEY_OFFER_MANAGER, UserOffer().getData());
			
			String[] packs_info = UserOffer().getOfferPacksInfo(UserOffer().getOfferLuckyLeafGreen()).split(";");
			for (String s : packs_info)
			{
				String[] aos = s.split(":");
				int id = Integer.parseInt(aos[0]);
				if (pack_id == id)
				{
//					int price_type = Integer.parseInt(aos[1]); // support diamond only
//					int price_id = Integer.parseInt(aos[2]); // support diamond only
					int price_num = Integer.parseInt(aos[3]);
					LogHelper.LogHappy("Pack id := " + pack_id + ", Price := " + price_num);
					
					if ((money_mgr.GetRealMoney() + money_mgr.GetBonusMoney()) >= price_num)
					{
						UseMoneyResult usemoneyresult = money_mgr.UseRealMoneyAndBonusMoney(price_num,	// 1. log
															_command_id,							//  2. hanh dong cua gamer
															userInfo.getName(),						//  3. ten tai khoan
															userInfo.getLevel(),					//  7. level cua gamer
															_ip,									//  9. ip login v4 cua gamer
															-1,										// 10. id cua loai item
															-1,										// 11. id cua item
															"",										// 12. ten item
															price_num,								// 13. gia game coin cua item
															1);										// 14. so luong vat pham

						if (usemoneyresult._code == UseMoneyResult.CODE.SUCCESS)
						{
							// get items list
							StringBuilder sb = new StringBuilder();
							for (int i = 4; i < aos.length; i++)
							{
								if (sb.length() == 0)
								{
									sb.append(aos[i]);
								}
								else
								{
									sb.append(':').append(aos[i]);
								}
							}	
							LogHelper.LogHappy("Item list := " + sb.toString());
							gift2Stock(sb.toString(), _command_id, "offer_machine");
						}
						else
						{
							_return_id = ReturnCode.RESPONSE_CANT_SUBSTRACT_MONEY;
							LogHelper.Log("can not substract money");
							requestError();
							return;
						}
					}
					else
					{
						_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_DIAMOND;
					}
				}
			}
		}
		else
		{
			LogHelper.LogHappy("Offer is not usable");
			requestError();
			return;
		}
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
		response.addBinary(KeyID.KEY_OFFER_LUCKY_LEAF_GREEN, UserOffer().getOfferData(UserOffer().getOfferLuckyLeafGreen()));
		
		try
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex)
		{
			LogHelper.LogException("handleBuyOfferLuckyLeaf", ex);
		}
	}
	
	private void handleBuyOfferLuckyLeafPurple(FBEncrypt encrypt)
	{
		if (!_use_new_offer) 
		{
			return;
		}
				
		int pack_id = encrypt.getInt(KeyID.KEY_SPECIAL_OFFER_ID);
		if (pack_id < 0)
		{
			requestError();
			return;
		}
		
		boolean offer_useable = UserOffer().isOfferUseable(UserOffer().getOfferLuckyLeafPurple());
		if (offer_useable)
		{
			int use_time = UserOffer().getOfferUseTime(UserOffer().getOfferLuckyLeafPurple());
			UserOffer().setOfferUseTime(UserOffer().getOfferLuckyLeafPurple(), use_time + 1);
			DBConnector.GetMembaseServer(_user_id).SetRaw(_user_id + "_" + KeyID.KEY_OFFER_MANAGER, UserOffer().getData());
			
			String[] packs_info = UserOffer().getOfferPacksInfo(UserOffer().getOfferLuckyLeafPurple()).split(";");
			for (String s : packs_info)
			{
				String[] aos = s.split(":");
				int id = Integer.parseInt(aos[0]);
				if (pack_id == id)
				{
//					int price_type = Integer.parseInt(aos[1]); // support diamond only
//					int price_id = Integer.parseInt(aos[2]); // support diamond only
					int price_num = Integer.parseInt(aos[3]);
					LogHelper.LogHappy("Pack id := " + pack_id + ", Price := " + price_num);
					
					if ((money_mgr.GetRealMoney() + money_mgr.GetBonusMoney()) >= price_num)
					{
						UseMoneyResult usemoneyresult = money_mgr.UseRealMoneyAndBonusMoney(price_num,	// 1. log
															_command_id,							//  2. hanh dong cua gamer
															userInfo.getName(),						//  3. ten tai khoan
															userInfo.getLevel(),					//  7. level cua gamer
															_ip,									//  9. ip login v4 cua gamer
															-1,										// 10. id cua loai item
															-1,										// 11. id cua item
															"",										// 12. ten item
															price_num,								// 13. gia game coin cua item
															1);										// 14. so luong vat pham

						if (usemoneyresult._code == UseMoneyResult.CODE.SUCCESS)
						{
							// get items list
							StringBuilder sb = new StringBuilder();
							for (int i = 4; i < aos.length; i++)
							{
								if (sb.length() == 0)
								{
									sb.append(aos[i]);
								}
								else
								{
									sb.append(':').append(aos[i]);
								}
							}	
							LogHelper.LogHappy("Item list := " + sb.toString());
							gift2Stock(sb.toString(), _command_id, "offer_machine");
						}
						else
						{
							_return_id = ReturnCode.RESPONSE_CANT_SUBSTRACT_MONEY;
							LogHelper.Log("can not substract money");
							requestError();
							return;
						}
					}
					else
					{
						_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_DIAMOND;
					}
				}
			}
		}
		else
		{
			LogHelper.LogHappy("Offer is not usable");
			requestError();
			return;
		}
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
		response.addBinary(KeyID.KEY_OFFER_LUCKY_LEAF_PURPLE, UserOffer().getOfferData(UserOffer().getOfferLuckyLeafPurple()));
		
		try
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex)
		{
			LogHelper.LogException("handleBuyOfferLuckyLeaf", ex);
		}
	}
	
	private void handleBuyOfferGold(FBEncrypt encrypt)
	{
		if (!_use_new_offer) 
		{
			return;
		}
				
		int pack_id = encrypt.getInt(KeyID.KEY_SPECIAL_OFFER_ID);
		if (pack_id < 0)
		{
			requestError();
			return;
		}
		
		boolean offer_useable = UserOffer().isOfferUseable(UserOffer().getOfferGold());
		if (offer_useable)
		{
			int use_time = UserOffer().getOfferUseTime(UserOffer().getOfferGold());
			UserOffer().setOfferUseTime(UserOffer().getOfferGold(), use_time + 1);
			DBConnector.GetMembaseServer(_user_id).SetRaw(_user_id + "_" + KeyID.KEY_OFFER_MANAGER, UserOffer().getData());
			
			String[] packs_info = UserOffer().getOfferPacksInfo(UserOffer().getOfferGold()).split(";");
			for (String s : packs_info)
			{
				String[] aos = s.split(":");
				int id = Integer.parseInt(aos[0]);
				if (pack_id == id)
				{
//					int price_type = Integer.parseInt(aos[1]); // support diamond only
//					int price_id = Integer.parseInt(aos[2]); // support diamond only
					int price_num = Integer.parseInt(aos[3]);
					LogHelper.LogHappy("Pack id := " + pack_id + ", Price := " + price_num);
					
					if ((money_mgr.GetRealMoney() + money_mgr.GetBonusMoney()) >= price_num)
					{
						UseMoneyResult usemoneyresult = money_mgr.UseRealMoneyAndBonusMoney(price_num,	// 1. log
															_command_id,							//  2. hanh dong cua gamer
															userInfo.getName(),						//  3. ten tai khoan
															userInfo.getLevel(),					//  7. level cua gamer
															_ip,									//  9. ip login v4 cua gamer
															-1,										// 10. id cua loai item
															-1,										// 11. id cua item
															"",										// 12. ten item
															price_num,								// 13. gia game coin cua item
															1);										// 14. so luong vat pham

						if (usemoneyresult._code == UseMoneyResult.CODE.SUCCESS)
						{
							// get items list
							StringBuilder sb = new StringBuilder();
							for (int i = 4; i < aos.length; i++)
							{
								if (sb.length() == 0)
								{
									sb.append(aos[i]);
								}
								else
								{
									sb.append(':').append(aos[i]);
								}
							}	
							LogHelper.LogHappy("Item list := " + sb.toString());
							gift2Stock(sb.toString(), _command_id, "offer_machine");
						}
						else
						{
							_return_id = ReturnCode.RESPONSE_CANT_SUBSTRACT_MONEY;
							LogHelper.Log("can not substract money");
							requestError();
							return;
						}
					}
					else
					{
						_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_DIAMOND;
					}
				}
			}
		}
		else
		{
			LogHelper.LogHappy("Offer is not usable");
			requestError();
			return;
		}
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
		response.addBinary(KeyID.KEY_OFFER_GOLD, UserOffer().getOfferData(UserOffer().getOfferGold()));
		
		try
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex)
		{
			LogHelper.LogException("handleBuyOfferLuckyLeaf", ex);
		}
	}
	
	private void handleRequestOfferFloor(FBEncrypt encrypt)
	{
		if (!_use_new_offer) 
		{
			return;
		}
				
		int floor_id = encrypt.getInt(KeyID.KEY_FLOOR_INDEX);
		
		// check if already receive offer for this floor
		if (ProjectConfig.IS_SERVER_FREESTYLE != 1 && !GameUtil.GetUserMisc(_user_id).Get("offer_floor" + "_" + floor_id).equals(""))
		{
			LogHelper.Log("Already received offer for floor := " + floor_id);
			requestError();
			return;
		}
		
		// Get floor offer info
		String offer_info = "";
		try
		{
			Object obj = DBConnector.GetMembaseServerForTemporaryData().Get("offer_floor" + "_" + floor_id);
			if (obj != null)
			{
				offer_info = (String)obj;
			}
			else
			{
				LogHelper.Log("Can not find offer for floor := " + floor_id);
				requestError();
				return;
			}
		}
		catch (Exception e)
		{
			LogHelper.LogException("RequestOfferFloor", e);
		}
		
		// check if offer is active
		String[] aos = offer_info.split(";");
		String start_time = aos[0];
		String end_time = aos[1];
		if (!Misc.InEvent(start_time, end_time))
		{
			LogHelper.Log("Offer is not active!");
			requestError();
			return;
		}

		UserOffer().setOfferContent(UserOffer().getOfferFloor(), offer_info);
		UserOffer().updateOffer(UserOffer().getOfferFloor());
		UserOffer().setOfferReceiveTime(UserOffer().getOfferFloor(), Misc.SECONDS());
		UserOffer().setOfferUseTime(UserOffer().getOfferFloor(), 0);
		DBConnector.GetMembaseServer(_user_id).SetRaw(_user_id + "_" + KeyID.KEY_OFFER_MANAGER, UserOffer().getData());
		
		GameUtil.GetUserMisc(_user_id).Set("offer_floor" + "_" + floor_id, "Received at " + Misc.getCurrentDateTime());
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_OFFER_FLOOR, UserOffer().getOfferData(UserOffer().getOfferFloor()));
		
		try
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex)
		{
			LogHelper.LogException("handleRequestOfferFloor", ex);
		}
	}
	
	private void handleRequestOfferMachine(FBEncrypt encrypt)
	{
		if (!_use_new_offer) 
		{
			return;
		}
				
		int floor_id = encrypt.getInt(KeyID.KEY_FLOOR_INDEX);
		int machine_level = encrypt.getInt(KeyID.KEY_MACHINE_LEVEL);
		
		// check if already receive offer for this floor
		if (ProjectConfig.IS_SERVER_FREESTYLE != 1 && !GameUtil.GetUserMisc(_user_id).Get("offer_machine" + "_" + floor_id + "_" + machine_level).equals(""))
		{
			LogHelper.Log("Already received offer for machine at floor := " + floor_id + ", level := " + machine_level);
			requestError();
			return;
		}
		
		// Get floor offer info
		String offer_info = "";
		try
		{
			Object obj = DBConnector.GetMembaseServerForTemporaryData().Get("offer_machine" + "_" + floor_id + "_" + machine_level);
			if (obj != null)
			{
				offer_info = (String)obj;
			}
			else
			{
				LogHelper.Log("Can not find offer for machine at floor := " + floor_id + ", level := " + machine_level);
				requestError();
				return;
			}
		}
		catch (Exception e)
		{
			LogHelper.LogException("RequestOfferMachine", e);
		}
		
		// check if offer is active
		String[] aos = offer_info.split(";");
		String start_time = aos[0];
		String end_time = aos[1];
		if (!Misc.InEvent(start_time, end_time))
		{
			LogHelper.Log("Offer is not active!");
			requestError();
			return;
		}

		UserOffer().setOfferContent(UserOffer().getOfferMachine(), offer_info);
		UserOffer().updateOffer(UserOffer().getOfferMachine());
		UserOffer().setOfferReceiveTime(UserOffer().getOfferMachine(), Misc.SECONDS());
		UserOffer().setOfferUseTime(UserOffer().getOfferMachine(), 0);
		DBConnector.GetMembaseServer(_user_id).SetRaw(_user_id + "_" + KeyID.KEY_OFFER_MANAGER, UserOffer().getData());
		
		GameUtil.GetUserMisc(_user_id).Set("offer_machine" + "_" + floor_id + "_" + machine_level, "Received at " + Misc.getCurrentDateTime());
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_OFFER_MACHINE, UserOffer().getOfferData(UserOffer().getOfferMachine()));
		
		try
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex)
		{
			LogHelper.LogException("handleRequestOfferMachine", ex);
		}
	}
	
	private void handleRequestOfferGold(FBEncrypt encrypt)
	{
		if (!_use_new_offer) 
		{
			return;
		}
				
		int level = encrypt.getInt(KeyID.KEY_USER_LEVEL);
		
		// Get floor offer info
		String offer_info = "";
		try
		{
			Object obj = DBConnector.GetMembaseServerForTemporaryData().Get("offer_gold" + "_" + level);
			if (obj != null)
			{
				offer_info = (String)obj;
			}
			else
			{
				LogHelper.Log("Can not find offer gold for level := " + level);
				requestError();
				return;
			}
		}
		catch (Exception e)
		{
			LogHelper.LogException("handleRequestOfferGold", e);
		}
		
		// check if offer is active
		String[] aos = offer_info.split(";");
		String start_time = aos[0];
		String end_time = aos[1];
		if (Misc.InEvent(start_time, end_time))
		{
			int offer_id = Integer.parseInt(aos[2]);
			
			// check if user received this offer yet
			if (GameUtil.GetUserMisc(_user_id).Get("offer_gold" + "_" + offer_id).equals("") || ProjectConfig.IS_SERVER_FREESTYLE == 1)
			{
				UserOffer().setOfferContent(UserOffer().getOfferGold(), offer_info);
				UserOffer().updateOffer(UserOffer().getOfferGold());
				UserOffer().setOfferReceiveTime(UserOffer().getOfferGold(), Misc.SECONDS());
				UserOffer().setOfferUseTime(UserOffer().getOfferGold(), 0);
				DBConnector.GetMembaseServer(_user_id).SetRaw(_user_id + "_" + KeyID.KEY_OFFER_MANAGER, UserOffer().getData());

				GameUtil.GetUserMisc(_user_id).Set("offer_gold" + "_" + offer_id, "Received at " + Misc.getCurrentDateTime());
			}
			else
			{
				LogHelper.Log("Already received offer gold for level := " + level);
			}
		}
		else
		{
			LogHelper.Log("Offer is not active!");
		}
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_OFFER_GOLD, UserOffer().getOfferData(UserOffer().getOfferGold()));
		
		try
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex)
		{
			LogHelper.LogException("handleRequestOfferGold", ex);
		}
	}
	
	private void preLoadImgSpecialOffer(FBEncrypt encrypt)
	{
		//load check offer
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		
		int user_group = encrypt.getInt(KeyID.KEY_SPECIAL_OFFER_TYPE);
		String []field_offer = null;		
		try
		{
			Object obj = DBConnector.GetMembaseServerForGeneralData().Get("special_offer" + "_" + user_group);
			if (obj != null)
			{
				field_offer = ((String)obj).split("\\;");
			}
		}
		catch(Exception e)
		{
			LogHelper.LogException("loadSpecialOffer exception", e);
			field_offer = null;
		}
		
		if (field_offer != null) {
			response.addStringANSI(KeyID.KEY_SPECIAL_OFFER_LINK_IMG, field_offer[DatabaseID.OFFER_LINK_IMAGE]);
			response.addStringANSI(KeyID.KEY_SPECIAL_OFFER_MD5_IMG, field_offer[DatabaseID.OFFER_MD5_IMAGE]);	
		}
		
		try
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("loadFriendGarden: reponse to client OK.");
		}
		catch (Exception ex)
		{
			LogHelper.LogException("loadFriendGarden", ex);
		}
	}
	
	public boolean isMachineNeedHelp(MachineDurability npc_machine_durability, String device_id, int floor)
	{
		// LogHelper.Log("\nnpc_machine_durability friend_uid name  = " + friend_uid);
		// LogHelper.Log("npc_machine_durability floor = " + f);
		// LogHelper.Log("npc_machine_durability cur = " + npc_machine_durability.getDurability());
		// LogHelper.Log("npc_machine_durability max = " + npc_machine_durability.getDurabilityMax());
		
		// in case the machine is not start yet
		if (npc_machine_durability.getDurability() == 0)
		{
			byte[] machine = null;
			try
			{
				machine = GET_DB_VALUE_BINARY_FRIEND(device_id, KeyID.KEY_MACHINES + floor);
			}
			catch (Exception e)
			{				
				return false;
			}			
			Machine m = new Machine(machine);
			if (m.getStatus() == DatabaseID.MACHINE_LOCK)
			{
				return false;
				// continue;
			}
		}
		else 
		{
			if (npc_machine_durability.getDurability() < npc_machine_durability.getDurabilityMax())
			{
				// in case the machine is already fixed
				if (npc_machine_durability.getDurabilityRepaired() > 0)
				{
					return false;
				}
				else
				{
					return true;
					// friend_need_help = true;
					// break;
				}
			}
		}
		return false;
	}
	
	private void loadFriendGarden(FBEncrypt encrypt)
	{
		_friend_device_id = encrypt.getString(KeyID.KEY_FRIEND_DEVICE_ID);
		_friend_user_id = GetUserID(_friend_device_id);
		
		if (_friend_device_id.equals("") == true)
		{
			LogHelper.Log("Device_id should not empty");
			requestError();
			return;
		}
		
		boolean load_friend_shop = encrypt.getBoolean(KeyID.KEY_LOAD_FRIEND_SHOP);
		
		boolean is_online_same_server = ServerHandler.isUserOnline(_friend_device_id);
		
		SkyGardenUser friend = null;
		
		if (is_online_same_server)
		{
			friend = ServerHandler.getUser(_friend_device_id);
			if (friend == null)
			{
				requestError(ReturnCode.RESPONSE_LOAD_FRIEND_DATA_ERROR);
				return;
			}
		}
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addString(KeyID.KEY_FRIEND_DEVICE_ID, _friend_device_id);
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		
		// load friend info
		byte[] friend_bin = null;
		try
		{
			if (is_online_same_server)
			{
				friend_bin = friend.userInfo.getData(false);
			}
			else
			{
				friend_bin = GET_DB_VALUE_BINARY_FRIEND(_friend_device_id, KeyID.KEY_USER_INFOS);
			}
		}
		catch (Exception e)
		{
			friend_bin = null;
			LogHelper.LogException("loadFriendGarden", e);
		}
		
		if (friend_bin == null || friend_bin.length == 0)
		{
			LogHelper.Log("Can not load Friend!!!");
			requestError(ReturnCode.RESPONSE_LOAD_FRIEND_DATA_ERROR);
			return;
		}

		FBEncrypt friendInfo = new FBEncrypt(friend_bin);
		int friend_floor_num = friendInfo.getShort(KeyID.KEY_USER_FLOOR);
		long friend_uid = friendInfo.getLong(KeyID.KEY_USER_ID);

		response.addBinary(KeyID.KEY_FRIEND_INFOS, friend_bin);
		
		if (is_online_same_server)
		{
			for (int i = 0; i < friend_floor_num; i++)
			{
				response.addBinary(KeyID.KEY_FLOORS + i, friend.floor.get(i).getData(false));
				response.addBinary(KeyID.KEY_MACHINES + i, friend.machine.get(i).getData());
			}
		}
		else
		{
			List<String> all_floor_keys = new ArrayList<String>();
			List<String> all_machine_keys = new ArrayList<String>();
			for (int i = 0; i < friend_floor_num; i++)
			{
				String key = "";
				key = _friend_user_id + "_" + KeyID.KEY_FLOORS + i;
				all_floor_keys.add(key);
				
				key = _friend_user_id + "_" + KeyID.KEY_MACHINES + i;
				all_machine_keys.add(key);
			}
			
			try
			{
				Map<String, Object> all_floor_data = DBConnector.GetMembaseServer(_friend_user_id).GetMulti(all_floor_keys);
				Map<String, Object> all_machine_data = DBConnector.GetMembaseServer(_friend_user_id).GetMulti(all_machine_keys);
				for (int i = 0; i < friend_floor_num; i++)
				{
					String key = "";
					key = _friend_user_id + "_" + KeyID.KEY_FLOORS + i;
					if (all_floor_data.containsKey(key))
					{
						// remove decor tet
						Floor f = new Floor((byte[])all_floor_data.get(key));
						if (f.isLoadSuccess()) {
							response.addBinary(KeyID.KEY_FLOORS + i, f.getData(false));
						}
						
//						response.addBinary(KeyID.KEY_FLOORS + i, (byte[])all_floor_data.get(key));
					}
					else
					{
						LogHelper.Log("can not load key " + key);
						requestError(ReturnCode.RESPONSE_LOAD_FRIEND_DATA_ERROR);
						return;
					}
					
					key = _friend_user_id + "_" + KeyID.KEY_MACHINES + i;
					if (all_machine_data.containsKey(key))
					{
						response.addBinary(KeyID.KEY_MACHINES + i, (byte[])all_machine_data.get(key));
					}
					else
					{
						LogHelper.Log("can not load key " + key);
						requestError(ReturnCode.RESPONSE_LOAD_FRIEND_DATA_ERROR);
						return;
					}
				}
			}
			catch (Exception e)
			{
				LogHelper.LogException("load friend floor and machine", e);
			}
		}

		// ----------------------------------------------------------------------------------------------------------------------------------------
		// load friend's machine durability
		boolean next_date = false;
		boolean friend_need_help = false;
		for (int i = 0; i < friend_floor_num; i++)
		{
			byte[] friend_machine_durability_bin = null;

			try
			{
				if (_friend_device_id.equals(KeyID.NPC_NAME))
				{
					MachineDurability npc_machine_durability = npcMachineDurability.get(i);
					
					if (Misc.SECONDS() >= _npc_daily_reset_time)
					{
						next_date = true;
						
						// read real npc machine durability then apply for user npc machine durability
						if (is_online_same_server)
						{
							friend_machine_durability_bin = friend.machineDurability.get(i).getData();
						}
						else
						{
							friend_machine_durability_bin = GET_DB_VALUE_BINARY_FRIEND(_friend_device_id, KeyID.KEY_MACHINES_DURABILITY + i);
						}
						
						if (friend_machine_durability_bin != null)
						{
							MachineDurability friend_machine_durability = new MachineDurability(friend_machine_durability_bin);
							// friend_need_help = (friend_need_help || isMachineNeedHelp(friend_machine_durability,_friend_device_id,i));
							// LogHelper.Log("friend_need_help friend_need_help = " + friend_need_help);
							npcMachineDurability.remove(i);
							npcMachineDurability.add(i, friend_machine_durability);
							
							npc_machine_durability = friend_machine_durability;
						}

						byte npc_machine_durability_corrupt = (byte)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][userInfo.getLevel()][DatabaseID.CONSTANT_NPC_MACHINE_CORRUPT]);
						
						npc_machine_durability.setDurability(npc_machine_durability.getDurabilityMax() - npc_machine_durability_corrupt);
						npc_machine_durability.setUser(null);
					
						SET_DB_VALUE_BINARY(KeyID.KEY_NPC_MACHINES_DURABILITY + i, npc_machine_durability.getData());
						SetNotifyStatus(10000, GetNotifyIndex(DatabaseID.NOTIFY_TYPE_MACHINE, i), true);
					}
					
					friend_machine_durability_bin = npc_machine_durability.getData();
				}
				else
				{
					if (is_online_same_server)
					{
						friend_machine_durability_bin = friend.machineDurability.get(i).getData();
					}
					else
					{
						friend_machine_durability_bin = GET_DB_VALUE_BINARY_FRIEND(_friend_device_id, KeyID.KEY_MACHINES_DURABILITY + i);
					}
				}
			}
			catch (Exception e)
			{
				friend_machine_durability_bin = null;
				LogHelper.LogException("loadFriendGarden", e);
			}

			if (friend_machine_durability_bin == null || friend_machine_durability_bin.length == 0)
			{
				LogHelper.Log("Can not get machine data from db, friend_machine_durability_bin is null. i = " + i);
				requestError(ReturnCode.RESPONSE_LOAD_FRIEND_DATA_ERROR);
				return;
			} else {
				MachineDurability friend_machine_durability = new MachineDurability(friend_machine_durability_bin);
				friend_need_help = (friend_need_help || isMachineNeedHelp(friend_machine_durability,_friend_device_id,i));
				//LogHelper.Log("friend_need_help friend_need_help = " + friend_need_help);
			}

			response.addBinary(KeyID.KEY_MACHINES_DURABILITY + i, friend_machine_durability_bin);
		}
		//LogHelper.Log("xxxxxxxx friend_need_help friend_need_help = " + friend_need_help);
		_alert.updateAlertMachine(friend_uid, friend_need_help);//update this 
		response.addBinary(KeyID.KEY_ALERT, _alert.getData());
		
		if (next_date == true)
		{
			_npc_daily_reset_time = Misc.getDailyResetTime();
			
			boolean saved = false;
			
			if (!_is_stable_user)
			{
				saved = base.Set(_device_id + "_" + KeyID.KEY_NPC_MACHINE_DAILY_RESET_TIME, _npc_daily_reset_time);
			}
			else
			{
				saved = base.Set(_user_id + "_" + KeyID.KEY_NPC_MACHINE_DAILY_RESET_TIME, _npc_daily_reset_time);
			}
			
			if (!saved)
			{
			    LogHelper.Log("loadFriendGarden.. err! can't write _npc_daily_reset_time to db");
			    return;
			}
		}
		
		// ----------------------------------------------------------------------------------------------------------------------------------------

		// load friend's stock
		int capacity_max = 0;
		
		for (int i = 0; i < DatabaseID.STOCK_MAX; i++)
		{
			byte[] stock_bin = null;
			
			try
			{
				if (is_online_same_server)
				{
					stock_bin = friend.stock.get(i).getDataToDatabase();
				}
				else
				{
					stock_bin = GET_DB_VALUE_BINARY_FRIEND(_friend_device_id, KeyID.KEY_STOCKS + i);
				}
			}
			catch (Exception e)
			{
				LogHelper.Log("Can not load friend's stock");
				stock_bin = null;
				LogHelper.LogException("loadFriendGarden", e);
			}
			
			if (stock_bin == null || stock_bin.length == 0)
			{
				LogHelper.Log("Can not load stock data from db, stock_bin is null. i = " + i);
				requestError(ReturnCode.RESPONSE_LOAD_FRIEND_DATA_ERROR);
				return;
			}
			
			Stock st = new Stock(i, stock_bin, null);
			if (st.isLoadSuccess() == false)
			{
				LogHelper.Log("Can not load stock data from db, i = " + i);
				requestError(ReturnCode.RESPONSE_LOAD_FRIEND_DATA_ERROR);
				return;
			}
			
			int stock_capacity_max = st.getCapacityMax();
			if (stock_capacity_max > capacity_max)
			{
				capacity_max = stock_capacity_max;
			}
		}
		
		response.addShort(KeyID.KEY_STOCK_CAPACITY_MAX, capacity_max);
		
		// ----------------------------------------------------------------------------------------------------------------------------------------

		if (load_friend_shop)
		{
			// load friend's private shop
			byte[] friend_private_shop_bin = null;

			try
			{
				if (_friend_device_id.equals(KeyID.NPC_NAME))
				{
					
					if (_is_stable_user)
					{
						friend_private_shop_bin = base.GetRaw(_user_id + "_" + "npc" + "_" + KeyID.KEY_PRIVATE_SHOP);
					}
					else
					{
						friend_private_shop_bin = base.GetRaw(_device_id + "_" + "npc" + "_" + KeyID.KEY_PRIVATE_SHOP);
					}
				}
				else
				{
					friend_private_shop_bin = GET_DB_VALUE_BINARY_FRIEND(_friend_device_id, KeyID.KEY_PRIVATE_SHOP);
				}
			}
			catch (Exception e)
			{
				friend_private_shop_bin = null;
				LogHelper.LogException("loadFriendGarden", e);
			}

			if (friend_private_shop_bin == null || friend_private_shop_bin.length == 0)
			{
				LogHelper.Log("Can not load friend's private shop data from db!");
				requestError(ReturnCode.RESPONSE_LOAD_FRIEND_DATA_ERROR);
				return;
			}

			response.addBinary(KeyID.KEY_PRIVATE_SHOP, friend_private_shop_bin);

			// notify to current friend that i'm viewing his shop (if he's online).
			notifyViewFriendShop(_friend_user_id);
		}
		
		// ------------------------------------------------------------------------------------------------
		
		// calculate bug appearing at friend house
		try
		{
			if (catched_bug || Misc.SECONDS() > bug_appear_time) // bugs have been caugh or time is reset
			{
				if (Misc.SECONDS() > bug_appear_time) // appear new real bugs
				{
					// calculate and set new bug appear time
					double rand = Misc.RANDOM_DOUBLE_RANGE(0.0, 100.0);
					double current_percent = 0;
					
//					LogHelper.Log("###DEBUG time rand: " + rand);

					int time_range = 0;
					for (int i = DatabaseID.FRIEND_BUG_PERCENT_TIME_RANGE_1; i <= DatabaseID.FRIEND_BUG_PERCENT_TIME_RANGE_5; i++)
					{
						current_percent += Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_FRIEND_BUG][userInfo.getLevel()][i]);

						if (rand < current_percent)
						{
							time_range = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_FRIEND_BUG][userInfo.getLevel()][i-5]);
							break;
						}
					}

					if (time_range > 0)
					{
						bug_appear_time = Misc.SECONDS() + time_range;
						base.Set(_user_id + "_" + KeyID.KEY_NEXT_TIME_BUG_APPEAR, bug_appear_time);
//						LogHelper.Log("###DEBUG time range: " + time_range);
//						LogHelper.Log("###DEBUG next bug appear: " + bug_appear_time);

						// random the bug num
						int bug_min = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_FRIEND_BUG][userInfo.getLevel()][DatabaseID.FRIEND_BUG_NUM_MIN]);
						int bug_max = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_FRIEND_BUG][userInfo.getLevel()][DatabaseID.FRIEND_BUG_NUM_MAX]);
						int bug_num = Misc.RANDOM_RANGE(bug_min, bug_max);

//						LogHelper.Log("###DEBUG bug min: " + bug_min);
//						LogHelper.Log("###DEBUG bug max: " + bug_max);
//						LogHelper.Log("###DEBUG bug num: " + bug_num);

						if (bug_num > 0)
						{
							StringBuilder bug_friend = new StringBuilder(16);
							bug_friend.append("1"); // 1 means there are real bugs

							// re-adjust the bug appear ratio at friend's house, base on user current level
							String[] ratio_bug_1 = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_FRIEND_BUG][userInfo.getLevel()][DatabaseID.FRIEND_BUG_1]).split(":"); // read from db
							String[] ratio_bug_2 = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_FRIEND_BUG][userInfo.getLevel()][DatabaseID.FRIEND_BUG_2]).split(":"); // read from db
							String[] ratio_bug_3 = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_FRIEND_BUG][userInfo.getLevel()][DatabaseID.FRIEND_BUG_3]).split(":"); // read from db
							
							for (int i = 0; i < BugAppearRatio.size(); i ++)
							{
								String[] aos = BugAppearRatio.get(i).split(":");
								
								if (i == 0)
								{
									aos[2] = "" + Misc.MaxRate(Double.parseDouble(ratio_bug_1[2]), Double.parseDouble(ratio_bug_2[2]), Double.parseDouble(ratio_bug_3[2]));
								}
								else if (i == 1)
								{
									aos[2] = "" + Misc.MedRate(Double.parseDouble(ratio_bug_1[2]), Double.parseDouble(ratio_bug_2[2]), Double.parseDouble(ratio_bug_3[2]));
								}
								else if (i == 2)
								{
									aos[2] = "" + Misc.MinRate(Double.parseDouble(ratio_bug_1[2]), Double.parseDouble(ratio_bug_2[2]), Double.parseDouble(ratio_bug_3[2]));
								}
								
								BugAppearRatio.remove(i);
								BugAppearRatio.add(i, aos[0] + ":" + aos[1] + ":" + aos[2]); // type: id: nested percent
							}

							// calculate the real appear percent of each bug
							double totalpercent = 0;
							for (String s : BugAppearRatio)
							{
								totalpercent += Double.parseDouble(s.split(":")[2]);
							}
							for (int i = 0; i < BugAppearRatio.size(); i++)
							{
								String[] aos = BugAppearRatio.get(i).split(":");
								double real_percent = (Double.parseDouble(aos[2]) / totalpercent) * 100;

								BugAppearRatio.remove(i);
								BugAppearRatio.add(i, aos[0] + ":" + aos[1] + ":" + real_percent);

//								LogHelper.Log("###DEBUG real percent: " + aos[0] + ":" + aos[1] + ":" + real_percent);
							}

							// clear the old bug list beforea generate new one
							BugInfo.clear();
							
							// with each bug, random which bug will appear
							OUTMOST: for (int i = 0; i < bug_num; i++)
							{
								current_percent = 0;
								rand = Misc.RANDOM_DOUBLE_RANGE(0.0, 100.0);
//								LogHelper.Log("###DEBUG bug rand: " + rand);

								INNER_1: for (String s : BugAppearRatio)
								{
									String[] aos = s.split(":");
									current_percent += Double.parseDouble(aos[2]);
									if (rand < current_percent)
									{
										bug_friend.append(":").append(aos[0]); // type
										bug_friend.append(":").append(aos[1]); // id
//										LogHelper.Log("###DEBUG bug " + i + ": " + aos[0] + ":" + aos[1]);

										// save bug info
										BugInfo.add(aos[0] + ":" + aos[1]);
										catched_bug = false;
										
										break INNER_1;
									}
								}
							}
							
							// save bug info to key
							StringBuilder bug_info = new StringBuilder();
							for (String s : BugInfo)
							{
								if (bug_info.length() > 0)
								{
									bug_info.append(":").append(s);
								}
								else
								{
									bug_info.append(s);
								}
							}
							base.Set(KeyID.KEY_BUG_POOL, bug_info.toString());

//							LogHelper.Log("loadFriendGarden.. bug info: " + bug_friend.toString());

							response.addString(KeyID.KEY_FRIEND_BUG, bug_friend.toString());
						}
						else
						{
							LogHelper.Log("loadFriendGarden.. err! invalid bug num : " + bug_num);
						}
					}
					else
					{
						LogHelper.Log("loadFriendGarden.. err! cant calculate next time bug occur");
					}
				}
				else // appear fake bugs or no bug
				{
					// read the fake bug percent
					int fake_bug_percent = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_FRIEND_BUG][userInfo.getLevel()][DatabaseID.FRIEND_BUG_PERCENT_FAKE_BUG]);
					int rand = Misc.RANDOM_RANGE(0, 100);

					if (rand < fake_bug_percent) // appears fake bug
					{
						int bug_min = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_FRIEND_BUG][userInfo.getLevel()][DatabaseID.FRIEND_BUG_NUM_MIN]);
						int bug_max = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_FRIEND_BUG][userInfo.getLevel()][DatabaseID.FRIEND_BUG_NUM_MAX]);
						int bug_num = Misc.RANDOM_RANGE(bug_min, bug_max);

//						LogHelper.Log("###DEBUG fake bug min: " + bug_min);
//						LogHelper.Log("###DEBUG fake bug max: " + bug_max);
//						LogHelper.Log("###DEBUG fake bug num: " + bug_num);

						StringBuilder bug_friend = new StringBuilder(16);
						bug_friend.append("0"); // 0 means there are fake bugs

						// with each bug, random which bug will appear
						OUTMOST: for (int i = 0; i < bug_num; i++)
						{
							double current_percent = 0;
							double d_rand = Misc.RANDOM_DOUBLE_RANGE(0.0, 100.0);
//							LogHelper.Log("###DEBUG bug rand: " + rand);

							INNER_1: for (String s : BugAppearRatio)
							{
								String[] aos = s.split(":");
								current_percent += Double.parseDouble(aos[2]);
								if (d_rand < current_percent)
								{
									bug_friend.append(":").append(aos[0]); // type
									bug_friend.append(":").append(aos[1]); // id
//									LogHelper.Log("###DEBUG bug " + i + ": " + aos[0] + ":" + aos[1]);
									
									break INNER_1;
								}
							}
						}

						// LogHelper.Log("loadFriendGarden.. fake bug info: " + bug_friend.toString());

						response.addString(KeyID.KEY_FRIEND_BUG, bug_friend.toString());
					}
					else
					{
						// LogHelper.Log("loadFriendGarden.. no bug appear");
					}
				}
			}
			else
			{
				// LogHelper.Log("loadFriendGarden.. use the previous bug info");
				// use the previous bug info
				if (BugInfo.size() > 0)
				{
					StringBuilder bug_friend = new StringBuilder(16);
					bug_friend.append("1");

					for (String s : BugInfo)
					{
						bug_friend.append(":").append(s);
					}

					// LogHelper.Log("loadFriendGarden.. bug info: " + bug_friend.toString());

					response.addString(KeyID.KEY_FRIEND_BUG, bug_friend.toString());
				}
				else
				{
					// LogHelper.Log("loadFriendGarden.. err! bug pool is empty");
				}
			}
		}
		catch (Exception e)
		{
			LogHelper.LogException("loadFriendGarden.CalculateBug", e);
		}
		
		// appraisal
		long friend_garden_appraisal = 0;
		try
		{
			Object obj = DBConnector.GetMembaseServer(_friend_user_id).Get(_friend_user_id + "_" + KeyID.KEY_GARDEN_APPRAISAL);
			if (obj != null)
			{
				friend_garden_appraisal = (long)obj;
			}
//			friend_garden_appraisal = (long)DBConnector.GetMembaseServer(friend_user_id).Get(friend_user_id + "_" + KeyID.KEY_GARDEN_APPRAISAL);
		}
		catch (Exception e)
		{
			LogHelper.LogException("loadFriendGarden.LoadAppraisal", e);
		}
		response.addLong(KeyID.KEY_GARDEN_APPRAISAL, friend_garden_appraisal);

		// ----------------------------------------------
//		if (bUseEvent)
//		{
//			int emo_rnd = Misc.RANDOM_RANGE(0, 100);
//			
//			int emo_appear_rate = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_EVENT_MAIN_OBJECT][mainEvent.getEMO_ID()][DatabaseID.EMO_APPEAR_RATIO]);
//			
//			// if (emo_rnd >= emo_appear_rate)
//			if (emo_rnd >= 0) // for test
//			{
//				// eventMainObject = new EventMainObject(mainEvent.getEMO_ID());
//				eventMainObject.resetEMOProperties();
//				eventMainObject.displayDataPackage();
//				
//				response.addBinary(KeyID.KEY_EVENT_MAIN_OBJECT, eventMainObject.getData());
//			}
//		}
		// ----------------------------------------------
		
		// so luot like cua friend va da like friend nay hay chua
		long friend_id = GetUserID(_friend_device_id);
		response.addLong(KeyID.KEY_USER_LIKED_COUNT, getLikedCount(friend_id));
		response.addBoolean(KeyID.KEY_USER_LIKED, isLikedGarden(friend_id));
		
		// friend airship
		try 
		{
			Airship friend_airship = new Airship(friend_uid, KeyID.KEY_AIRSHIP, stock);
			friend_airship.Load();
			response.addBinary(KeyID.KEY_FRIEND_AIRSHIP, friend_airship.GetDataToClient());
		}
		catch (Exception e) 
		{
			LogHelper.LogException("loadFriendGarden.loadAirship", e);
		}
		
		if (SkyGarden._is_use_server_event && _friend_device_id.equals(KeyID.NPC_NAME))
		{
			response.addLong(KeyID.KEY_EVENT_XMAS_TREE_2014, GetTotalServerEventCounter());
		}
		
		try
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex)
		{
			LogHelper.LogException("loadFriendGarden", ex);
		}
		
		// notify to previous friend that i'm leaving his shop.
		String previous_friend_device_id = "";
		if (encrypt.hasKey(KeyID.KEY_PREVIOUS_FRIEND_DEVICE_ID))
		{
			previous_friend_device_id = encrypt.getString(KeyID.KEY_PREVIOUS_FRIEND_DEVICE_ID);
			FBEncrypt e = new FBEncrypt();
			e.addString(KeyID.KEY_FRIEND_DEVICE_ID, previous_friend_device_id);
			e.decode(e.toByteArray());
			
			_command_id = CommandID.CMD_LEAVE_FRIEND_SHOP;
			_request_id++;
			handleLeaveFriendShop(e);
		}
	}
	
	public void repairMachine_Friend(FBEncrypt encrypt)
	{
		byte _floor = encrypt.getByte(KeyID.KEY_MACHINE_FLOOR);

		_friend_device_id = encrypt.getString(KeyID.KEY_FRIEND_DEVICE_ID);

		if (_friend_device_id.equals(KeyID.NPC_NAME))
		{
			repairMachine_NPC(encrypt);			
			return;
		}
		
		boolean process_result = true;
		
		if (_floor < 0 || !encrypt.hasKey(KeyID.KEY_FRIEND_DEVICE_ID) || _friend_device_id.equals(""))
		{
			process_result = false;
		}
		
		long friend_uid = GetUserID(_friend_device_id);
		_alert.updateAlertMachine(friend_uid, false);//clear alert machine
		
		// update notify status of this machine for a friend
		SetNotifyStatus(friend_uid, GetNotifyIndex(DatabaseID.NOTIFY_TYPE_MACHINE, _floor), false);

		String friend_online = "";
		
		try
		{
			friend_online = (String)DBConnector.GetMembaseServer(friend_uid).Get(friend_uid + "_" + KeyID.ONLINE);
		}
		catch (Exception e)
		{
			friend_online = "";
			LogHelper.LogException("repairMachine_Friend", e);
		}
		
		StringBuilder dropList = new StringBuilder();
		long gold_used = 0;
		long reputation_used = 0;
		int exp_received = 0;
		
		Machine _machine = null;
		MachineDurability _machine_durability = null;
	
		if (process_result)
		{
			// lock friend's machine
			StringBuilder lock_info = new StringBuilder(32);
			lock_info.append(_user_id).append('_');
			lock_info.append("repair").append('_');
			lock_info.append(Misc.SECONDS());

			if (!base.Add(friend_uid + "_" + KeyID.KEY_MACHINE_LOCK_DATA, lock_info.toString(), DatabaseID.MACHINE_DATA_LOCK_TIME))
			{
				requestError(ReturnCode.RESPONSE_MACHINE_DATA_IS_LOCKED);
				return;
			}
			
			if (friend_online == null || friend_online.equals(""))	// friend is offline
			{
				byte[] friend_bin = null;
				try
				{
					friend_bin = GET_DB_VALUE_BINARY_FRIEND(_friend_device_id, KeyID.KEY_USER_INFOS);
				}
				catch (Exception e)
				{
					friend_bin = null;
					LogHelper.LogException("repairMachine_Friend", e);
				}

				if (friend_bin == null || friend_bin.length == 0)
				{
					base.Delete(friend_uid + "_" + KeyID.KEY_MACHINE_LOCK_DATA);
					requestError(ReturnCode.RESPONSE_LOAD_FRIEND_DATA_ERROR);
					return;
				}
				
				UserInfo friendInfo = new UserInfo(friend_bin);
				int friend_floor_num = friendInfo.getTotalFloor();
				
				if (_floor < 0 || _floor >= friend_floor_num)
				{
					base.Delete(friend_uid + "_" + KeyID.KEY_MACHINE_LOCK_DATA);	
					requestError(ReturnCode.RESPONSE_INVALID_MACHINE_ID);
					return;
				}
				
				byte[] friend_machine_bin = null;

				try
				{
					friend_machine_bin = GET_DB_VALUE_BINARY_FRIEND(_friend_device_id, KeyID.KEY_MACHINES + _floor);
				}
				catch (Exception e)
				{
					friend_machine_bin = null;
					LogHelper.LogException("repairMachine_Friend", e);
				}

				if (friend_machine_bin == null || friend_machine_bin.length == 0)
				{
					base.Delete(friend_uid + "_" + KeyID.KEY_MACHINE_LOCK_DATA);
					requestError(ReturnCode.RESPONSE_LOAD_FRIEND_DATA_ERROR);
					return;
				}
				
				_machine = new Machine(friend_machine_bin);

				// ------------------------------------------------------------------------
				byte[] friend_machine_durability_bin = null;
				
				try
				{
					friend_machine_durability_bin = GET_DB_VALUE_BINARY_FRIEND(_friend_device_id, KeyID.KEY_MACHINES_DURABILITY + _floor);
				}
				catch (Exception e)
				{
					friend_machine_durability_bin = null;
					LogHelper.LogException("repairMachine_Friend", e);
				}

				if (friend_machine_durability_bin == null || friend_machine_durability_bin.length == 0)
				{
					base.Delete(friend_uid + "_" + KeyID.KEY_MACHINE_LOCK_DATA);
					requestError(ReturnCode.RESPONSE_LOAD_FRIEND_DATA_ERROR);
					return;
				}
				
				_machine_durability = new MachineDurability(friend_machine_durability_bin);
				// ------------------------------------------------------------------------
				
				if (_machine_durability.getUser() != null)
				{
					_return_id = ReturnCode.RESPONSE_MACHINE_HAD_BEEN_REPAIRED;
				}
				else
				{
					long user_gold = userInfo.getGold();
					
					int durability_need = _machine_durability.getDurabilityMax() - _machine_durability.getDurability();

					long gold_maintain = Server.s_globalMachineUnlockData[_floor][_machine.getLevel()][DatabaseID.MACHINE_GOLD_MAINTAIN];
					
					long gold_need = Math.round((gold_maintain * durability_need) / DatabaseID.MACHINE_REDUCE_GOLD_MAINTAIN_RATIO);
					
					if (durability_need > 0 && gold_need > -1 && gold_need < 2)
					{
						gold_need = durability_need;
					}
					
					boolean can_repair_machine = true;
					can_repair_machine = machineRepairLimit.checkConditionMachineRepair();
					
					// check condition
					if (_machine_durability.getDurability() < _machine_durability.getDurabilityMax() && user_gold >= gold_need && can_repair_machine)
					{
						gold_used = gold_need;
						user_gold -= gold_need;
						userInfo.setGold(user_gold, 				// log
											_command_id,			//  2. hanh dong cua gamer
											-1, 					// 11. id cua loai item
											-1,					// 12. id cua item
											"",	// 13. ten item
											0);
						
						reputation_used = durability_need;
						if (_use_close_friend) {
								if (CloseFriend().IsCloseFriend(friend_uid)) {
									reputation_used = reputation_used * 2;
							}
						}
						
						userInfo.setReputation(userInfo.getReputation() + durability_need, // log
														_command_id,			//  2. hanh dong cua gamer
														DatabaseID.IT_MONEY, 					// 11. id cua loai item
														DatabaseID.REPUTATION_ID,					// 12. id cua item
														"Reputation",	// 13. ten item
														(int)reputation_used);
														
						exp_received = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][userInfo.getLevel()][DatabaseID.CONSTANT_EXP_REPAIR_MACHINE]);
						userInfo.setExp(userInfo.getExp() + (exp_received * durability_need));
						
						checkLevelUp();
						if (!_use_lazy_sync_user_info) SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));

						
						_machine_durability.setDurabilityRepaired(_machine_durability.getDurabilityMax() - _machine_durability.getDurability());
						_machine_durability.setUser(userInfo.getData(false));
						
						machineRepairLimit.increaseReputationCollectedPerDate(durability_need);
						SET_DB_VALUE_BINARY(KeyID.KEY_MACHINES_REPAIR_LIMIT, machineRepairLimit.getData());

						// check if drops magic water bottle item when repair machine
						int drop_item_id = -1;
						
						try
						{
							drop_item_id = GetDropItem(DropItemListFriendHome, DatabaseID.ACTION_REPAIR_FRIEND_MACHINE);
						}
						catch (Exception e)
						{
							LogHelper.LogException("repairMachine", e);
							drop_item_id = -1;
						}
						
						if (drop_item_id > -1)
						{
							int item_type = DatabaseID.IT_MATERIAL;
							int item_id = drop_item_id;
							int item_num = 1;
							
							// handle event
							if (_use_event_mid_autumn_festival && item_id == DatabaseID.MATERIAL_MOON_CAKE)
							{
								item_type = DatabaseID.IT_EVENT;
								item_id = DatabaseID.ITEM_EVENT_MOON_CAKE;
								SetEventScore(KeyID.KEY_EVENT_MID_AUTUMN_FESTIVAL, 1);
							}
							
							// handle event 20-11
							if (_use_event_20_11 && item_id == DatabaseID.MATERIAL_ITEM_EVENT_FLOWER_20_11)
							{
								item_type = DatabaseID.IT_EVENT;
								item_id = DatabaseID.ITEM_EVENT_FLOWER_20_11;
								SetEventScore(KeyID.KEY_EVENT_20_11, 1);
							}
							
							// handle event xmas mini
							if (_use_event_xmas_mini && item_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_1)
							{
								item_type = DatabaseID.IT_EVENT;
								item_id = DatabaseID.ITEM_EVENT_XMAS_2014_1;
								SetEventScore(KeyID.KEY_EVENT_XMAS_MINI, 1);
							}
							
							// handle event xmas tree
							if (_use_event_xmas_tree && item_id == DatabaseID.MATERIAL_ITEM_CANDLE)
							{
								item_type = DatabaseID.IT_EVENT;
								item_id = DatabaseID.ITEM_EVENT_CANDLE;
								stock_event.add(item_type, item_id, 1, _command_id);
								SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
								_event_item_num = 1;
							}
							
							if (_use_event_new_year_2015 && item_id == DatabaseID.MATERIAL_ITEM_BANH_CHUNG)
							{
								item_type = DatabaseID.IT_EVENT;
								item_id = DatabaseID.ITEM_EVENT_BANH_CHUNG;
								stock_event.add(item_type, item_id, 1, _command_id);
								SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
								_event_item_num = 1;
							}
							
							if (_use_event_8_3_2015 && item_id == DatabaseID.MATERIAL_ITEM_GLASS_ROSE)
							{
								item_type = DatabaseID.IT_EVENT;
								item_id = DatabaseID.ITEM_EVENT_GLASS_ROSE;
								stock_event.add(item_type, item_id, 1, _command_id);
								SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
								_event_item_num = 1;
							}
							
							// handle event halloween
							if (_use_event_halloween && (item_id == DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_1 || item_id == DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_2 || item_id == DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_3))
							{
								item_type = DatabaseID.IT_EVENT;
								switch (item_id)
								{
									case DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_1:
										item_id = DatabaseID.ITEM_EVENT_HALLOWEEN_1;
										break;
									case DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_2:
										item_id = DatabaseID.ITEM_EVENT_HALLOWEEN_2;
										break;
									case DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_3:
										item_id = DatabaseID.ITEM_EVENT_HALLOWEEN_3;
										break;
								}
								stock_event.addGift(item_type, item_id, item_num, _command_id);
								SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
							}
							else if (_use_event_xmas_2014 && (item_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_1 || item_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_2 || item_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_3))
							{
								item_type = DatabaseID.IT_EVENT;
								switch (item_id)
								{
									case DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_1:
										item_id = DatabaseID.ITEM_EVENT_XMAS_2014_1;
										break;
									case DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_2:
										item_id = DatabaseID.ITEM_EVENT_XMAS_2014_2;
										break;
									case DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_3:
										item_id = DatabaseID.ITEM_EVENT_XMAS_2014_3;
										break;
								}
								stock_event.addGift(item_type, item_id, item_num, _command_id);
								SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
							}

							boolean addstock = false;
							boolean result = false;

							if (!GetStock(DatabaseID.STOCK_WAREHOUSE).isFull() && (item_type == DatabaseID.IT_MATERIAL))
							{
								result = GetStock(DatabaseID.STOCK_WAREHOUSE).add(item_type, item_id, item_num, _command_id);
								addstock = true;
							}
							
							if (addstock == true && result == false)
							{
								LogHelper.Log("Failed to add magic water bottle to stock barn!");
								base.Delete(friend_uid + "_" + KeyID.KEY_MACHINE_LOCK_DATA);
								requestError(ReturnCode.RESPONSE_STOCK_ADD_ITEM_FAILED);
								return;
							}
							
							dropList.append(_floor);
							dropList.append(":").append(item_type);
							dropList.append(":").append(item_id);
							dropList.append(":").append(item_num);
							dropList.append(":").append(addstock == true ? "1" : "0");
							// LogHelper.Log("Drop info: " + dropList.toString());
							
							SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToDatabase());
							LogHelper.Log("drop list: " + dropList.toString());
						}
						
						boolean saved = SET_DB_VALUE_BINARY_FRIEND(KeyID.KEY_MACHINES + _floor, _machine.getData());
						saved = SET_DB_VALUE_BINARY_FRIEND(KeyID.KEY_MACHINES_DURABILITY + _floor, _machine_durability.getData());
					}
					else
					{
						if (_machine_durability.getDurability() >= _machine_durability.getDurabilityMax())
						{
							_return_id = ReturnCode.RESPONSE_MACHINE_HAD_BEEN_REPAIRED;
						}
					}
				}
			}
			else	// friend is online
			{
				String[] serverInfo = friend_online.split(":");
				
				if (serverInfo[0].equals(SkyGarden.s_server_local_address)) // online at same server logic
				{
					SkyGardenUser friend = null;
					
					friend = ServerHandler.getUser(_friend_device_id);

					if (friend != null)
					{
						int friend_floor_num = friend.userInfo.getTotalFloor();
						
						if (_floor < 0 || _floor >= friend_floor_num)
						{
							base.Delete(friend_uid + "_" + KeyID.KEY_MACHINE_LOCK_DATA);
							requestError(ReturnCode.RESPONSE_INVALID_MACHINE_ID);
							return;
						}
					
						byte[] friend_machine_bin = null;
						
						try
						{
							friend_machine_bin = friend.machine.get(_floor).getData();
						}
						catch (Exception e)
						{
							friend_machine_bin = null;
							LogHelper.LogException("repairMachine_Friend", e);
						}
						
						if (friend_machine_bin == null || friend_machine_bin.length == 0)
						{
							LogHelper.Log("Can not get machine data from ram, friend_machine_bin is null. _floor = " + _floor);
							base.Delete(friend_uid + "_" + KeyID.KEY_MACHINE_LOCK_DATA);
							requestError(ReturnCode.RESPONSE_LOAD_FRIEND_DATA_ERROR);
							return;
						}
						
						_machine = new Machine(friend_machine_bin);
						
						// ------------------------------------------------------------------------
						byte[] friend_machine_durability_bin = null;
						
						try
						{
							friend_machine_durability_bin = GET_DB_VALUE_BINARY_FRIEND(_friend_device_id, KeyID.KEY_MACHINES_DURABILITY + _floor);
						}
						catch (Exception e)
						{
							friend_machine_durability_bin = null;
							LogHelper.LogException("repairMachine_Friend", e);
						}

						if (friend_machine_durability_bin == null || friend_machine_durability_bin.length == 0)
						{
							base.Delete(friend_uid + "_" + KeyID.KEY_MACHINE_LOCK_DATA);
							requestError(ReturnCode.RESPONSE_LOAD_FRIEND_DATA_ERROR);
							return;
						}
						
						_machine_durability = new MachineDurability(friend_machine_durability_bin);
						// ------------------------------------------------------------------------
					}
					else
					{
						byte[] friend_bin = null;
						try
						{
							friend_bin = GET_DB_VALUE_BINARY_FRIEND(_friend_device_id, KeyID.KEY_USER_INFOS);
						}
						catch (Exception e)
						{
							friend_bin = null;
							LogHelper.LogException("repairMachine_Friend", e);
						}

						if (friend_bin == null || friend_bin.length == 0)
						{
							base.Delete(friend_uid + "_" + KeyID.KEY_MACHINE_LOCK_DATA);
							requestError(ReturnCode.RESPONSE_LOAD_FRIEND_DATA_ERROR);
							return;
						}
						
						UserInfo friendInfo = new UserInfo(friend_bin);
						int friend_floor_num = friendInfo.getTotalFloor();

						if (_floor < 0 || _floor >= friend_floor_num)
						{
							base.Delete(friend_uid + "_" + KeyID.KEY_MACHINE_LOCK_DATA);
							requestError(ReturnCode.RESPONSE_INVALID_MACHINE_ID);
							return;
						}
						
						byte[] friend_machine_bin = null;

						try
						{
							friend_machine_bin = GET_DB_VALUE_BINARY_FRIEND(_friend_device_id, KeyID.KEY_MACHINES + _floor);
						}
						catch (Exception e)
						{
							friend_machine_bin = null;
							LogHelper.LogException("repairMachine_Friend", e);
						}

						if (friend_machine_bin == null || friend_machine_bin.length == 0)
						{
							base.Delete(friend_uid + "_" + KeyID.KEY_MACHINE_LOCK_DATA);
							requestError(ReturnCode.RESPONSE_LOAD_FRIEND_DATA_ERROR);
							return;
						}
						
						_machine = new Machine(friend_machine_bin);

						// ------------------------------------------------------------------------
						byte[] friend_machine_durability_bin = null;
						
						try
						{
							friend_machine_durability_bin = GET_DB_VALUE_BINARY_FRIEND(_friend_device_id, KeyID.KEY_MACHINES_DURABILITY + _floor);
						}
						catch (Exception e)
						{
							friend_machine_durability_bin = null;
							LogHelper.LogException("repairMachine_Friend", e);
						}

						if (friend_machine_durability_bin == null || friend_machine_durability_bin.length == 0)
						{
							base.Delete(friend_uid + "_" + KeyID.KEY_MACHINE_LOCK_DATA);
							requestError(ReturnCode.RESPONSE_LOAD_FRIEND_DATA_ERROR);
							return;
						}
						
						_machine_durability = new MachineDurability(friend_machine_durability_bin);
					}
					// ------------------------------------------------------------------------
					
					if (_machine_durability.getUser() != null)
					{
						_return_id = ReturnCode.RESPONSE_MACHINE_HAD_BEEN_REPAIRED;
					}
					else
					{
						long user_gold = userInfo.getGold();
						
						int durability_need = _machine_durability.getDurabilityMax() - _machine_durability.getDurability();
						long gold_maintain = Server.s_globalMachineUnlockData[_floor][_machine.getLevel()][DatabaseID.MACHINE_GOLD_MAINTAIN];
						
						long gold_need = Math.round((gold_maintain * durability_need) / DatabaseID.MACHINE_REDUCE_GOLD_MAINTAIN_RATIO);
						
						if (durability_need > 0 && gold_need > -1 && gold_need < 2)
						{
							gold_need = durability_need;
						}
						
						boolean can_repair_machine = true;
						can_repair_machine = machineRepairLimit.checkConditionMachineRepair();

						// check condition
						if (_machine_durability.getDurability() < _machine_durability.getDurabilityMax() && user_gold >= gold_need && can_repair_machine)
						{
							gold_used = gold_need;
							user_gold -= gold_need;
							userInfo.setGold(user_gold, 				// log
												_command_id,			//  2. hanh dong cua gamer
												-1, 					// 11. id cua loai item
												-1,					// 12. id cua item
												"",	// 13. ten item
												0);
							
							
							reputation_used = durability_need;
							if (_use_close_friend) {
								if (CloseFriend().IsCloseFriend(friend_uid)) {
										reputation_used = reputation_used * 2;
								}
							}
							
							userInfo.setReputation(userInfo.getReputation() + durability_need, // log
															_command_id,			//  2. hanh dong cua gamer
															DatabaseID.IT_MONEY, 					// 11. id cua loai item
															DatabaseID.REPUTATION_ID,					// 12. id cua item
															"Reputation",	// 13. ten item
															(int)reputation_used);
							
							exp_received = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][userInfo.getLevel()][DatabaseID.CONSTANT_EXP_REPAIR_MACHINE]);
							userInfo.setExp(userInfo.getExp() + (exp_received * durability_need));
							
							checkLevelUp();
							if (!_use_lazy_sync_user_info) SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));

							_machine_durability.setDurabilityRepaired(_machine_durability.getDurabilityMax() - _machine_durability.getDurability());
							_machine_durability.setUser(userInfo.getData(false));
							
							machineRepairLimit.increaseReputationCollectedPerDate(durability_need);
							SET_DB_VALUE_BINARY(KeyID.KEY_MACHINES_REPAIR_LIMIT, machineRepairLimit.getData());

							// check if drops magic water bottle item when repair machine
							int drop_item_id = -1;
							
							try
							{
								drop_item_id = GetDropItem(DropItemListFriendHome, DatabaseID.ACTION_REPAIR_FRIEND_MACHINE);
							}
							catch (Exception e)
							{
								LogHelper.LogException("repairMachine", e);
								drop_item_id = -1;
							}
							
							if (drop_item_id > -1)
							{
								int item_type = DatabaseID.IT_MATERIAL;
								int item_id = drop_item_id;
								int item_num = 1;
								
								// handle event
								if (_use_event_mid_autumn_festival && item_id == DatabaseID.MATERIAL_MOON_CAKE)
								{
									item_type = DatabaseID.IT_EVENT;
									item_id = DatabaseID.ITEM_EVENT_MOON_CAKE;
									SetEventScore(KeyID.KEY_EVENT_MID_AUTUMN_FESTIVAL, 1);
								}
								
								// handle event 20-11
								if (_use_event_20_11 && item_id == DatabaseID.MATERIAL_ITEM_EVENT_FLOWER_20_11)
								{
									item_type = DatabaseID.IT_EVENT;
									item_id = DatabaseID.ITEM_EVENT_FLOWER_20_11;
									SetEventScore(KeyID.KEY_EVENT_20_11, 1);
								}
								
								// handle event xmas mini
								if (_use_event_xmas_mini && item_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_1)
								{
									item_type = DatabaseID.IT_EVENT;
									item_id = DatabaseID.ITEM_EVENT_XMAS_2014_1;
									SetEventScore(KeyID.KEY_EVENT_XMAS_MINI, 1);
								}
								
								// handle event xmas tree
								if (_use_event_xmas_tree && item_id == DatabaseID.MATERIAL_ITEM_CANDLE)
								{
									item_type = DatabaseID.IT_EVENT;
									item_id = DatabaseID.ITEM_EVENT_CANDLE;
									stock_event.add(item_type, item_id, 1, _command_id);
									SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
									_event_item_num = 1;
								}
								
								if (_use_event_new_year_2015 && item_id == DatabaseID.MATERIAL_ITEM_BANH_CHUNG)
								{
									item_type = DatabaseID.IT_EVENT;
									item_id = DatabaseID.ITEM_EVENT_BANH_CHUNG;
									stock_event.add(item_type, item_id, 1, _command_id);
									SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
									_event_item_num = 1;
								}
								
								if (_use_event_8_3_2015 && item_id == DatabaseID.MATERIAL_ITEM_GLASS_ROSE)
								{
									item_type = DatabaseID.IT_EVENT;
									item_id = DatabaseID.ITEM_EVENT_GLASS_ROSE;
									stock_event.add(item_type, item_id, 1, _command_id);
									SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
									_event_item_num = 1;
								}
								
								// handle event halloween
								if (_use_event_halloween && (item_id == DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_1 || item_id == DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_2 || item_id == DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_3))
								{
									item_type = DatabaseID.IT_EVENT;
									switch (item_id)
									{
										case DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_1:
											item_id = DatabaseID.ITEM_EVENT_HALLOWEEN_1;
											break;
										case DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_2:
											item_id = DatabaseID.ITEM_EVENT_HALLOWEEN_2;
											break;
										case DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_3:
											item_id = DatabaseID.ITEM_EVENT_HALLOWEEN_3;
											break;
									}
									stock_event.addGift(item_type, item_id, item_num, _command_id);
									SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
								}
								else if (_use_event_xmas_2014 && (item_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_1 || item_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_2 || item_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_3))
								{
									item_type = DatabaseID.IT_EVENT;
									switch (item_id)
									{
										case DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_1:
											item_id = DatabaseID.ITEM_EVENT_XMAS_2014_1;
											break;
										case DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_2:
											item_id = DatabaseID.ITEM_EVENT_XMAS_2014_2;
											break;
										case DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_3:
											item_id = DatabaseID.ITEM_EVENT_XMAS_2014_3;
											break;
									}
									stock_event.addGift(item_type, item_id, item_num, _command_id);
									SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
								}

								boolean addstock = false;
								boolean result = false;
								
								if (!GetStock(DatabaseID.STOCK_WAREHOUSE).isFull() && (item_type == DatabaseID.IT_MATERIAL))
								{
									result = GetStock(DatabaseID.STOCK_WAREHOUSE).add(item_type, item_id, item_num, _command_id);
									addstock = true;
								}
								
								if (addstock == true && result == false)
								{
									LogHelper.Log("Failed to add magic water bottle to stock barn!");
									base.Delete(friend_uid + "_" + KeyID.KEY_MACHINE_LOCK_DATA);
									requestError(ReturnCode.RESPONSE_STOCK_ADD_ITEM_FAILED);
									return;
								}
								
								dropList.append(_floor);
								dropList.append(":").append(item_type);
								dropList.append(":").append(item_id);
								dropList.append(":").append(item_num);
								dropList.append(":").append(addstock == true ? "1" : "0");
								LogHelper.Log("drop list: " + dropList.toString());
							
								SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToDatabase());
							}
							
							
							boolean saved = SET_DB_VALUE_BINARY_FRIEND(KeyID.KEY_MACHINES + _floor, _machine.getData());
							saved = SET_DB_VALUE_BINARY_FRIEND(KeyID.KEY_MACHINES_DURABILITY + _floor, _machine_durability.getData());
							
							// notify to friend to load new database
							if (friend != null)
							{
								friend.refreshMachineToClient(_floor);
							}
						}
						else
						{
							if (_machine_durability.getDurability() >= _machine_durability.getDurabilityMax())
							{
								_return_id = ReturnCode.RESPONSE_MACHINE_HAD_BEEN_REPAIRED;
							}
						}
					}
				}
				else // online at different server
				{
					byte[] friend_bin = null;
					try
					{
						friend_bin = GET_DB_VALUE_BINARY_FRIEND(_friend_device_id, KeyID.KEY_USER_INFOS);
					}
					catch (Exception e)
					{
						friend_bin = null;
						LogHelper.LogException("repairMachine_Friend", e);
					}

					if (friend_bin == null || friend_bin.length == 0)
					{
						base.Delete(friend_uid + "_" + KeyID.KEY_MACHINE_LOCK_DATA);
						requestError(ReturnCode.RESPONSE_LOAD_FRIEND_DATA_ERROR);
						return;
					}

					UserInfo friendInfo = new UserInfo(friend_bin);
					int friend_floor_num = friendInfo.getTotalFloor();
					
					if (_floor < 0 || _floor >= friend_floor_num)
					{
						LogHelper.Log("repairMachine_Friend.. invalid machine id.");
						base.Delete(friend_uid + "_" + KeyID.KEY_MACHINE_LOCK_DATA);
						requestError(ReturnCode.RESPONSE_INVALID_MACHINE_ID);
						return;
					}
					
					byte[] friend_machine_bin = null;

					try
					{
						friend_machine_bin = GET_DB_VALUE_BINARY_FRIEND(_friend_device_id, KeyID.KEY_MACHINES + _floor);
					}
					catch (Exception e)
					{
						friend_machine_bin = null;
						LogHelper.LogException("repairMachine_Friend", e);
					}

					if (friend_machine_bin == null || friend_machine_bin.length == 0)
					{
						base.Delete(friend_uid + "_" + KeyID.KEY_MACHINE_LOCK_DATA);
						requestError(ReturnCode.RESPONSE_LOAD_FRIEND_DATA_ERROR);
						return;
					}
					
					_machine = new Machine(friend_machine_bin);
					
					// ------------------------------------------------------------------------
					byte[] friend_machine_durability_bin = null;
					
					try
					{
						friend_machine_durability_bin = GET_DB_VALUE_BINARY_FRIEND(_friend_device_id, KeyID.KEY_MACHINES_DURABILITY + _floor);
					}
					catch (Exception e)
					{
						friend_machine_durability_bin = null;
						LogHelper.LogException("repairMachine_Friend", e);
					}

					if (friend_machine_durability_bin == null || friend_machine_durability_bin.length == 0)
					{
						base.Delete(friend_uid + "_" + KeyID.KEY_MACHINE_LOCK_DATA);
						requestError(ReturnCode.RESPONSE_LOAD_FRIEND_DATA_ERROR);
						return;
					}
					
					_machine_durability = new MachineDurability(friend_machine_durability_bin);
					// ------------------------------------------------------------------------
					
					if (_machine_durability.getUser() != null)
					{
						_return_id = ReturnCode.RESPONSE_MACHINE_HAD_BEEN_REPAIRED;
					}
					else
					{
						long user_gold = userInfo.getGold();
						
						int durability_need = _machine_durability.getDurabilityMax() - _machine_durability.getDurability();
						long gold_maintain = Server.s_globalMachineUnlockData[_floor][_machine.getLevel()][DatabaseID.MACHINE_GOLD_MAINTAIN];

						long gold_need = Math.round((gold_maintain * durability_need) / DatabaseID.MACHINE_REDUCE_GOLD_MAINTAIN_RATIO);
						
						if (durability_need > 0 && gold_need > -1 && gold_need < 2)
						{
							gold_need = durability_need;
						}

						boolean can_repair_machine = true;
						can_repair_machine = machineRepairLimit.checkConditionMachineRepair();

						// check condition
						if (_machine_durability.getDurability() < _machine_durability.getDurabilityMax() && user_gold >= gold_need && can_repair_machine)
						{
							gold_used = gold_need;
							user_gold -= gold_need;
							userInfo.setGold(user_gold, 				// log
												_command_id,			//  2. hanh dong cua gamer
												-1, 					// 11. id cua loai item
												-1,					// 12. id cua item
												"",	// 13. ten item
												0);
							
							reputation_used = durability_need;
							if (_use_close_friend) {
									if (CloseFriend().IsCloseFriend(friend_uid)) {
										reputation_used = reputation_used * 2;
								}
							}
							
							userInfo.setReputation(userInfo.getReputation() + durability_need, // log
															_command_id,			//  2. hanh dong cua gamer
															DatabaseID.IT_MONEY, 					// 11. id cua loai item
															DatabaseID.REPUTATION_ID,					// 12. id cua item
															"Reputation",	// 13. ten item
															(int)reputation_used);
							
							exp_received = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][userInfo.getLevel()][DatabaseID.CONSTANT_EXP_REPAIR_MACHINE]);
							userInfo.setExp(userInfo.getExp() + (exp_received * durability_need));
							
							checkLevelUp();
							if (!_use_lazy_sync_user_info) SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
							
							_machine_durability.setDurabilityRepaired(_machine_durability.getDurabilityMax() - _machine_durability.getDurability());
							_machine_durability.setUser(userInfo.getData(false));
							
							machineRepairLimit.increaseReputationCollectedPerDate(durability_need);
							SET_DB_VALUE_BINARY(KeyID.KEY_MACHINES_REPAIR_LIMIT, machineRepairLimit.getData());

							int drop_item_id = -1;
							
							try
							{
								drop_item_id = GetDropItem(DropItemListFriendHome, DatabaseID.ACTION_REPAIR_FRIEND_MACHINE);
							}
							catch (Exception e)
							{
								LogHelper.LogException("repairMachine", e);
								drop_item_id = -1;
							}
							
							if (drop_item_id > -1)
							{

								int item_type = DatabaseID.IT_MATERIAL;
								int item_id = drop_item_id;
								int item_num = 1;
								
								// handle event
								if (_use_event_mid_autumn_festival && item_id == DatabaseID.MATERIAL_MOON_CAKE)
								{
									item_type = DatabaseID.IT_EVENT;
									item_id = DatabaseID.ITEM_EVENT_MOON_CAKE;
									SetEventScore(KeyID.KEY_EVENT_MID_AUTUMN_FESTIVAL, 1);
								}
								
								// handle event 20-11
								if (_use_event_20_11 && item_id == DatabaseID.MATERIAL_ITEM_EVENT_FLOWER_20_11)
								{
									item_type = DatabaseID.IT_EVENT;
									item_id = DatabaseID.ITEM_EVENT_FLOWER_20_11;
									SetEventScore(KeyID.KEY_EVENT_20_11, 1);
								}
								
								// handle event xmas mini
								if (_use_event_xmas_mini && item_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_1)
								{
									item_type = DatabaseID.IT_EVENT;
									item_id = DatabaseID.ITEM_EVENT_XMAS_2014_1;
									SetEventScore(KeyID.KEY_EVENT_XMAS_MINI, 1);
								}
								
								// handle event xmas tree
								if (_use_event_xmas_tree && item_id == DatabaseID.MATERIAL_ITEM_CANDLE)
								{
									item_type = DatabaseID.IT_EVENT;
									item_id = DatabaseID.ITEM_EVENT_CANDLE;
									stock_event.add(item_type, item_id, 1, _command_id);
									SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
									_event_item_num = 1;
								}
								
								if (_use_event_new_year_2015 && item_id == DatabaseID.MATERIAL_ITEM_BANH_CHUNG)
								{
									item_type = DatabaseID.IT_EVENT;
									item_id = DatabaseID.ITEM_EVENT_BANH_CHUNG;
									stock_event.add(item_type, item_id, 1, _command_id);
									SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
									_event_item_num = 1;
								}
								
								if (_use_event_8_3_2015 && item_id == DatabaseID.MATERIAL_ITEM_GLASS_ROSE)
								{
									item_type = DatabaseID.IT_EVENT;
									item_id = DatabaseID.ITEM_EVENT_GLASS_ROSE;
									stock_event.add(item_type, item_id, 1, _command_id);
									SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
									_event_item_num = 1;
								}
								
								// handle event halloween
								if (_use_event_halloween && (item_id == DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_1 || item_id == DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_2 || item_id == DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_3))
								{
									item_type = DatabaseID.IT_EVENT;
									switch (item_id)
									{
										case DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_1:
											item_id = DatabaseID.ITEM_EVENT_HALLOWEEN_1;
											break;
										case DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_2:
											item_id = DatabaseID.ITEM_EVENT_HALLOWEEN_2;
											break;
										case DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_3:
											item_id = DatabaseID.ITEM_EVENT_HALLOWEEN_3;
											break;
									}
									stock_event.addGift(item_type, item_id, item_num, _command_id);
									SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
								}
								else if (_use_event_xmas_2014 && (item_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_1 || item_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_2 || item_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_3))
								{
									item_type = DatabaseID.IT_EVENT;
									switch (item_id)
									{
										case DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_1:
											item_id = DatabaseID.ITEM_EVENT_XMAS_2014_1;
											break;
										case DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_2:
											item_id = DatabaseID.ITEM_EVENT_XMAS_2014_2;
											break;
										case DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_3:
											item_id = DatabaseID.ITEM_EVENT_XMAS_2014_3;
											break;
									}
									stock_event.addGift(item_type, item_id, item_num, _command_id);
									SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
								}

								boolean addstock = false;
								boolean result = false;
								
								if (!GetStock(DatabaseID.STOCK_WAREHOUSE).isFull() && (item_type == DatabaseID.IT_MATERIAL))
								{
									result = GetStock(DatabaseID.STOCK_WAREHOUSE).add(item_type, item_id, item_num, _command_id);
									addstock = true;
								}
								
								if (addstock == true && result == false)
								{
									base.Delete(friend_uid + "_" + KeyID.KEY_MACHINE_LOCK_DATA);
									requestError(ReturnCode.RESPONSE_STOCK_ADD_ITEM_FAILED);
									return;
								}
								
								dropList.append(_floor);
								dropList.append(":").append(item_type);
								dropList.append(":").append(item_id);
								dropList.append(":").append(item_num);
								dropList.append(":").append(addstock == true ? "1" : "0");
								LogHelper.LogHappy("drop list: " + dropList.toString());
								
								SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToDatabase());
							}
							
							boolean saved = SET_DB_VALUE_BINARY_FRIEND(KeyID.KEY_MACHINES + _floor, _machine.getData());
							saved = SET_DB_VALUE_BINARY_FRIEND(KeyID.KEY_MACHINES_DURABILITY + _floor, _machine_durability.getData());
							
							FBEncrypt udpreq = new FBEncrypt();
							udpreq.addShort(KeyID.KEY_USER_COMMAND_ID, CommandID.CMD_REPAIR_MACHINE_FRIEND);
							udpreq.addString(KeyID.KEY_FRIEND_DEVICE_ID, _friend_device_id);
							udpreq.addByte(KeyID.KEY_MACHINE_FLOOR, _floor);

							ByteBuffer buffer = ByteBuffer.allocate(udpreq.toByteArray().length + 8);
							buffer.put(udpreq.toByteArray());
							buffer.flip();
							udpRequest(buffer, serverInfo[0], ProjectConfig.UDP_PORT, false);
						}
						else
						{
							if (_machine_durability.getDurability() >= _machine_durability.getDurabilityMax())
							{
								_return_id = ReturnCode.RESPONSE_MACHINE_HAD_BEEN_REPAIRED;
							}
						}
					}
				}
			}
		}
	
		base.Delete(friend_uid + "_" + KeyID.KEY_MACHINE_LOCK_DATA);
		
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addString(KeyID.KEY_FRIEND_DEVICE_ID, _friend_device_id);
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addLong(KeyID.KEY_GOLD_USED, gold_used);
		response.addLong(KeyID.KEY_REPUTATION_USED, reputation_used);
		response.addLong(KeyID.KEY_EXP_USED, exp_received);
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		response.addBinary(KeyID.KEY_MACHINES_REPAIR_LIMIT, machineRepairLimit.getData());
		
		if(_alert != null)
			response.addBinary(KeyID.KEY_ALERT, _alert.getData());
			
		if (process_result)
		{
			response.addBinary(KeyID.KEY_MACHINES, _machine.getData());	// friend's machine
			response.addBinary(KeyID.KEY_MACHINES_DURABILITY, _machine_durability.getData());	// friend's machine durability

			if (dropList.equals("") == false)
			{
				response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
				response.addStringANSI(KeyID.KEY_DROP_BONUS_ITEM, dropList.toString());
			}
		}
		
		response.addInt(KeyID.KEY_MACHINE_FLOOR, _floor);
		if (_use_event_mid_autumn_festival || _use_event_20_11 || _use_event_xmas_mini)
		{
			response.addString(GetEventKeyName(), GetEventItems());
		}
		
		if ((_use_event_halloween || _use_event_xmas_2014 || _use_event_xmas_tree || _use_event_new_year_2015 || _use_event_8_3_2015) && _use_stock_event)
		{
			response.addBinary(KeyID.KEY_STOCK_EVENT, stock_event.getDataToClient());
			response.addString(GetEventKeyName(), GetEventItems());
		}
		
		if (user_level_up) checkAndUnlockItems();

		try
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex) 
		{
		}
	}
	
	private void repairMachine_NPC(FBEncrypt encrypt)
	{
		byte _floor = encrypt.getByte(KeyID.KEY_MACHINE_FLOOR);

		_friend_device_id = encrypt.getString(KeyID.KEY_FRIEND_DEVICE_ID);

		boolean process_result = true;
		
		if (_floor < 0 || !encrypt.hasKey(KeyID.KEY_FRIEND_DEVICE_ID) || _friend_device_id.equals(""))
		{
			process_result = false;
		}
		
		long friend_uid = GetUserID(_friend_device_id);
		_alert.updateAlertMachine(friend_uid, false);//clear alert machine
		SetNotifyStatus(10000, GetNotifyIndex(DatabaseID.NOTIFY_TYPE_MACHINE, _floor), false);
		
		StringBuilder dropList = new StringBuilder();
		long gold_used = 0;
		long reputation_used = 0;
		int exp_received = 0;
		
		Machine _machine = null;
		MachineDurability _machine_durability = npcMachineDurability.get(_floor);

		byte[] npc_machine_bin = null;

		try
		{
			npc_machine_bin = GET_DB_VALUE_BINARY_FRIEND(_friend_device_id, KeyID.KEY_MACHINES + _floor);
		}
		catch (Exception e)
		{
			npc_machine_bin = null;
			LogHelper.LogException("repairMachine_NPC", e);
		}

		if (npc_machine_bin == null || npc_machine_bin.length == 0)
		{
			requestError(ReturnCode.RESPONSE_LOAD_FRIEND_DATA_ERROR);
			return;
		}
		
		_machine = new Machine(npc_machine_bin);
		
		long user_gold = userInfo.getGold();
		
		int durability_need = _machine_durability.getDurabilityMax() - _machine_durability.getDurability();
		
		long gold_maintain = Server.s_globalMachineUnlockData[_floor][_machine.getLevel()][DatabaseID.MACHINE_GOLD_MAINTAIN];
		
		long gold_need = Math.round((gold_maintain * durability_need) / DatabaseID.MACHINE_REDUCE_GOLD_MAINTAIN_RATIO);
		
		if (durability_need > 0 && gold_need > -1 && gold_need < 2)
		{
			gold_need = durability_need;
		}
		
		boolean can_repair_machine = true;
		can_repair_machine = machineRepairLimit.checkConditionMachineRepair();
		
		// check condition
		if (_machine_durability.getDurability() < _machine_durability.getDurabilityMax() && user_gold >= gold_need && can_repair_machine)
		{
			gold_used = gold_need;
			user_gold -= gold_need;
			userInfo.setGold(user_gold, 				// log
								_command_id,			//  2. hanh dong cua gamer
								-1, 					// 11. id cua loai item
								-1,					// 12. id cua item
								"",	// 13. ten item
								0);
			
			reputation_used = durability_need;
			userInfo.setReputation(userInfo.getReputation() + durability_need, // log
											_command_id,			//  2. hanh dong cua gamer
											DatabaseID.IT_MONEY, 					// 11. id cua loai item
											DatabaseID.REPUTATION_ID,					// 12. id cua item
											"Reputation",	// 13. ten item
											(int)reputation_used);
			
			exp_received = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][userInfo.getLevel()][DatabaseID.CONSTANT_EXP_REPAIR_MACHINE]);
			userInfo.setExp(userInfo.getExp() + (exp_received * durability_need));
			
			checkLevelUp();
			if (!_use_lazy_sync_user_info) SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
			
			_machine_durability.setDurability(_machine_durability.getDurabilityMax());
			
			machineRepairLimit.increaseReputationCollectedPerDate(durability_need);
			SET_DB_VALUE_BINARY(KeyID.KEY_MACHINES_REPAIR_LIMIT, machineRepairLimit.getData());
			// check if drops magic water bottle item when repair machine
			int drop_item_id = -1;
			
			try
			{
				drop_item_id = GetDropItem(DropItemListFriendHome, DatabaseID.ACTION_REPAIR_FRIEND_MACHINE);
			}
			catch (Exception e)
			{
				LogHelper.LogException("repairMachine", e);
				drop_item_id = -1;
			}
			
			if (stock.get(DatabaseID.STOCK_WAREHOUSE).getProductNum(DatabaseID.IT_MATERIAL, DatabaseID.MATERIAL_MAGIC_WATER_BOTTLE) == 0 && userInfo.getTotalFloor() == 1)
			{
				drop_item_id = DatabaseID.MATERIAL_MAGIC_WATER_BOTTLE;
			}

			if (drop_item_id > -1)
			{
				int item_type = DatabaseID.IT_MATERIAL;
				int item_id = drop_item_id;
				int item_num = 1;
				
				// handle event
				if (_use_event_mid_autumn_festival && item_id == DatabaseID.MATERIAL_MOON_CAKE)
				{
					item_type = DatabaseID.IT_EVENT;
					item_id = DatabaseID.ITEM_EVENT_MOON_CAKE;
					SetEventScore(KeyID.KEY_EVENT_MID_AUTUMN_FESTIVAL, 1);
				}
				
				// handle event 20-11
				if (_use_event_20_11 && item_id == DatabaseID.MATERIAL_ITEM_EVENT_FLOWER_20_11)
				{
					item_type = DatabaseID.IT_EVENT;
					item_id = DatabaseID.ITEM_EVENT_FLOWER_20_11;
					SetEventScore(KeyID.KEY_EVENT_20_11, 1);
				}
				
				// handle event xmas mini
				if (_use_event_xmas_mini && item_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_1)
				{
					item_type = DatabaseID.IT_EVENT;
					item_id = DatabaseID.ITEM_EVENT_XMAS_2014_1;
					SetEventScore(KeyID.KEY_EVENT_XMAS_MINI, 1);
				}
				
				// handle event xmas tree
				if (_use_event_xmas_tree && item_id == DatabaseID.MATERIAL_ITEM_CANDLE)
				{
					item_type = DatabaseID.IT_EVENT;
					item_id = DatabaseID.ITEM_EVENT_CANDLE;
					stock_event.add(item_type, item_id, 1, _command_id);
					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
					_event_item_num = 1;
				}
				
				if (_use_event_new_year_2015 && item_id == DatabaseID.MATERIAL_ITEM_BANH_CHUNG)
				{
					item_type = DatabaseID.IT_EVENT;
					item_id = DatabaseID.ITEM_EVENT_BANH_CHUNG;
					stock_event.add(item_type, item_id, 1, _command_id);
					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
					_event_item_num = 1;
				}
				
				if (_use_event_8_3_2015 && item_id == DatabaseID.MATERIAL_ITEM_GLASS_ROSE)
				{
					item_type = DatabaseID.IT_EVENT;
					item_id = DatabaseID.ITEM_EVENT_GLASS_ROSE;
					stock_event.add(item_type, item_id, 1, _command_id);
					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
					_event_item_num = 1;
				}
				
				// handle event halloween
				if (_use_event_halloween && (item_id == DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_1 || item_id == DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_2 || item_id == DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_3))
				{
					item_type = DatabaseID.IT_EVENT;
					switch (item_id)
					{
						case DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_1:
							item_id = DatabaseID.ITEM_EVENT_HALLOWEEN_1;
							break;
						case DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_2:
							item_id = DatabaseID.ITEM_EVENT_HALLOWEEN_2;
							break;
						case DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_3:
							item_id = DatabaseID.ITEM_EVENT_HALLOWEEN_3;
							break;
					}
					stock_event.addGift(item_type, item_id, item_num, _command_id);
					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
				}
				else if (_use_event_xmas_2014 && (item_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_1 || item_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_2 || item_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_3))
				{
					item_type = DatabaseID.IT_EVENT;
					switch (item_id)
					{
						case DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_1:
							item_id = DatabaseID.ITEM_EVENT_XMAS_2014_1;
							break;
						case DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_2:
							item_id = DatabaseID.ITEM_EVENT_XMAS_2014_2;
							break;
						case DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_3:
							item_id = DatabaseID.ITEM_EVENT_XMAS_2014_3;
							break;
					}
					stock_event.addGift(item_type, item_id, item_num, _command_id);
					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
				}

				boolean addstock = false;
				boolean result = false;
				
				if (!GetStock(DatabaseID.STOCK_WAREHOUSE).isFull() && (item_type == DatabaseID.IT_MATERIAL))
				{
					result = GetStock(DatabaseID.STOCK_WAREHOUSE).add(item_type, item_id, item_num, _command_id);
					addstock = true;
				}
				
				if (addstock == true && result == false)
				{
					base.Delete(friend_uid + "_" + KeyID.KEY_MACHINE_LOCK_DATA);
					requestError(ReturnCode.RESPONSE_STOCK_ADD_ITEM_FAILED);
					return;
				}
				
				dropList.append(_floor);
				dropList.append(":").append(item_type);
				dropList.append(":").append(item_id);
				dropList.append(":").append(item_num);
				dropList.append(":").append(addstock == true ? "1" : "0");
				LogHelper.Log("drop list: " + dropList.toString());
				
				SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToDatabase());
			}
			SET_DB_VALUE_BINARY(KeyID.KEY_NPC_MACHINES_DURABILITY + _floor, _machine_durability.getData());

		}
		else
		{
			LogHelper.Log("--------- Repair machine: Failed!"); 
			if (user_gold < gold_need) LogHelper.Log("Dont enough gold to repair!"); 
			if (_machine_durability.getDurability() >= _machine_durability.getDurabilityMax())
			{
				LogHelper.Log("Machine durability should be < " + _machine_durability.getDurabilityMax());
				_return_id = ReturnCode.RESPONSE_MACHINE_HAD_BEEN_REPAIRED;
			}
		}
		
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addString(KeyID.KEY_FRIEND_DEVICE_ID, _friend_device_id);
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addLong(KeyID.KEY_GOLD_USED, gold_used);
		response.addLong(KeyID.KEY_REPUTATION_USED, reputation_used);
		response.addLong(KeyID.KEY_EXP_USED, exp_received);
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		response.addBinary(KeyID.KEY_MACHINES_REPAIR_LIMIT, machineRepairLimit.getData());
		response.addInt(KeyID.KEY_MACHINE_FLOOR, _floor);

		if(_alert != null)
			response.addBinary(KeyID.KEY_ALERT, _alert.getData());

		if (process_result)
		{
			response.addBinary(KeyID.KEY_MACHINES, _machine.getData());						// npc's machine
			response.addBinary(KeyID.KEY_MACHINES_DURABILITY, _machine_durability.getData());	// npc's machine durability

			if (dropList.equals("") == false)
			{
				response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
				response.addStringANSI(KeyID.KEY_DROP_BONUS_ITEM, dropList.toString());
			}
		}
		
		if ((_use_event_halloween || _use_event_xmas_2014 || _use_event_xmas_tree || _use_event_new_year_2015 || _use_event_8_3_2015) && _use_stock_event)
		{
			response.addBinary(KeyID.KEY_STOCK_EVENT, stock_event.getDataToClient());
		}

		if (user_level_up) checkAndUnlockItems();

		try
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex)
		{
			LogHelper.LogException("repairMachine_NPC", ex);
		}
	}

	public void refreshMachineToClient(byte floor)
	{
		// re-load machine data for safe
		byte[] machine_bin = null;

		try
		{
			machine_bin = GET_DB_VALUE_BINARY(KeyID.KEY_MACHINES + floor);
		}
		catch (Exception e)
		{
			LogHelper.Log("refreshMachineToClient.. can not get machine data from db.");
			LogHelper.LogException("refreshMachineToClient", e);
			machine_bin = null;
		}

		if (machine_bin == null || machine_bin.length == 0)
		{
			LogHelper.Log("refreshMachineToClient.. machine_bin is null. i = " + floor);
			requestError(ReturnCode.RESPONSE_LOAD_ERROR);
			return;
		}

		Machine _machine = new Machine(machine_bin);
		
		// ---------------------------------------------------------------------------------------

		// re-load machine durability data for safe
		byte[] machine_durabiliry_bin = null;

		try
		{
			machine_durabiliry_bin = GET_DB_VALUE_BINARY(KeyID.KEY_MACHINES_DURABILITY + floor);
		}
		catch (Exception e)
		{
			LogHelper.Log("refreshMachineToClient.. can not get machine durability data from db.");
			LogHelper.LogException("refreshMachineToClient", e);
			machine_durabiliry_bin = null;
		}

		if (machine_durabiliry_bin == null || machine_durabiliry_bin.length == 0)
		{
			LogHelper.Log("refreshMachineToClient.. machine_durabiliry_bin is null. i = " + floor);
			requestError(ReturnCode.RESPONSE_LOAD_ERROR);
			return;
		}

		MachineDurability _machine_durability = new MachineDurability(machine_durabiliry_bin);
		
		// re-load machine durability to ram
		machineDurability.remove(floor);
		machineDurability.add(floor, _machine_durability);
		
		// -------------------------------------------------------------------------------------------
		
		/*
		// reponse to client
		_command_id = CommandID.CMD_REPAIR_MACHINE;

		FBEncrypt result = new FBEncrypt();
		result.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		result.addBinary(KeyID.KEY_MACHINES, _machine.getData());
		result.addBinary(KeyID.KEY_MACHINES_DURABILITY, _machine_durability.getData());
		result.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData());
		result.addLong(KeyID.KEY_GOLD_USED, 0);
		result.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		result.addBoolean(KeyID.KEY_REPAIR_FRIEND_MACHINE, true);
		
		try
		{
			_client.WriteZip(result.toByteArray());
			LogHelper.Log("refreshMachineToClient:  response to client OK.");
		}
		catch (Exception ex)
		{
		}
		*/
	}
	
	private int checkUpdate(FBEncrypt encrypt) throws Exception
	{
		_client_OS		= encrypt.getString(KeyID.KEY_VERSION_PLATFORM);
		String client_resolution	= encrypt.getString(KeyID.KEY_VERSION_RESOLUTION);
		_client_version		= encrypt.getString(KeyID.KEY_VERSION_NUMBER);
		String client_distributor	= encrypt.getString(KeyID.KEY_DISTRIBUTOR);
		
//		if (ProjectConfig.IS_SERVER_FREESTYLE == 1)
		{
			LogHelper.LogHappy("client_platform := " + _client_OS);
			LogHelper.LogHappy("client_resolution := " + client_resolution);
			LogHelper.LogHappy("client_number := " + _client_version);
			LogHelper.LogHappy("client_distributor := " + client_distributor);
		}
		
		if (client_distributor.equals("")) 
		{
			client_distributor = "distributor_unknown";
		}
		
		/*
		Example client number: 1.2.0201
		*/
		int client_version_major = Integer.parseInt(_client_version.split("\\.")[0]);
		int client_version_minor = Integer.parseInt(_client_version.split("\\.")[1]);
		int client_version_build = Integer.parseInt(_client_version.split("\\.")[2]/*.substring(0, 2)*/);
		
		for (int i = 0; i < Server.s_globalDB[DatabaseID.SHEET_VERSION].length; i++)
		{
			String version_platform			= Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_VERSION][i][DatabaseID.VERSION_PLATFORM]);
			String version_resolution		= Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_VERSION][i][DatabaseID.VERSION_RESOLUTION]);
			String latest_force_version		= Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_VERSION][i][DatabaseID.VERSION_FORCE_UPDATE]);
			String version_distributor		= Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_VERSION][i][DatabaseID.VERSION_DISTRIBUTOR]);
			
			int server_force_version_major = Integer.parseInt(latest_force_version.split("\\.")[0]);
			int server_force_version_minor = Integer.parseInt(latest_force_version.split("\\.")[1]);
			int server_force_version_build = Integer.parseInt(latest_force_version.split("\\.")[2]);
			
//			LogHelper.LogHappy("client_version_major := " + client_version_major);
//			LogHelper.LogHappy("client_version_minor := " + client_version_minor);
//			LogHelper.LogHappy("client_version_build := " + client_version_build);
//			LogHelper.LogHappy("server_force_version_major := " + server_force_version_major);
//			LogHelper.LogHappy("server_force_version_minor := " + server_force_version_minor);
//			LogHelper.LogHappy("server_force_version_build := " + server_force_version_build);
			if (_client_OS.equals(version_platform) && client_resolution.equals(version_resolution) && client_distributor.equals(version_distributor))
			{	
				// check with latest force version
				if (client_version_major >= server_force_version_major &&
					client_version_minor >= server_force_version_minor &&
					client_version_build >= server_force_version_build) 
				{
					// client current version is equal or higher server force version
					_update_force = false;
					
					String newest_version = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_VERSION][i][DatabaseID.VERSION_NUMBER]);
					int server_newest_version_major = Integer.parseInt(newest_version.split("\\.")[0]);
					int server_newest_version_minor = Integer.parseInt(newest_version.split("\\.")[1]);
					int server_newest_version_build = Integer.parseInt(newest_version.split("\\.")[2]);
					
					if (client_version_major >= server_newest_version_major &&
						client_version_minor >= server_newest_version_minor &&
						client_version_build >= server_newest_version_build)
					{
						// client current version is equal or higher newest version
						LogHelper.LogHappy("checkUpdate.. has no update");
						return DatabaseID.VERSION_HAS_NOT_UPDATE;
					} else {
						// has newer version with no force
						_update_link = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_VERSION][i][DatabaseID.VERSION_LINK]);
						LogHelper.LogHappy("checkUpdate.. has update with no force");
						return DatabaseID.VERSION_HAS_UPDATE;
					}
				} else {
					// force update
					_update_force = true;
					_update_link = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_VERSION][i][DatabaseID.VERSION_LINK]);
					
					LogHelper.LogHappy("checkUpdate.. has force update");
					return DatabaseID.VERSION_HAS_FORCE_UPDATE;
				}
			}
		}
		
		// user is cheating due to we had not released compatable version
		LogHelper.LogHappy("checkUpdate.. has wrong version");
		return DatabaseID.VERSION_HAS_NOT_UPDATE; 
	}
	
	private void logIn(FBEncrypt encrypt)
	{
		// execute before login update
		ExecuteBeforeLoginUpdate();
		
		long start_login_time = System.currentTimeMillis();
		// check MAX_CCU
		if (Server.s_serverUserOnline.size() >= SkyGarden._ccu_limit) {
			_return_id = ReturnCode.RESPONSE_SERVER_OVERLOADED;
			requestError();
			return;
		}
		
		// get whitelist accounts
		if (ProjectConfig.RUN_LOCAL != 1)
		{
			boolean allow = false;
			
			allow = (Server._server_status == DatabaseID.SERVER_STATUS_READY);
			
			// allow internal ip
			if (_ip.equals("118.102.7.146")) // ip wifi pub vng hcm 
			{
				allow = true;
			}
			
			if (!allow) // with external ip, check user info
			{
				long uid = encrypt.getLong(KeyID.KEY_USER_ID);
				byte[] _userbin = null;
				try
				{
					_userbin = DBConnector.GetMembaseServer(uid).GetRaw(uid + "_" + KeyID.KEY_USER_INFOS);
				}
				catch (Exception e)
				{
					LogHelper.LogException("logIn.GetUserData", e);
					_userbin = null;
				}

				if (_userbin != null)
				{
					UserInfo _userInfo = new UserInfo(_userbin);
					if (_userInfo.isLoadSuccess())
					{
						String gmail = _userInfo.GetEmail();
						String fb = _userInfo.getFaceBookID();
						String zing = _userInfo.GetZingID();

						// get a list of whitelist account
						Path path = Paths.get("./team_accounts.txt");
						String line = null;
						try
						{
							BufferedReader reader = Files.newBufferedReader(path, StandardCharsets.ISO_8859_1);
							line = reader.readLine();
							reader.close();
						}
						catch (Exception e)
						{
							LogHelper.LogException("logIn.ReadWhiteList", e);
						}

						String[] accounts = line.split(";");
						for (int i = 0; i < accounts.length && !allow; i++)
						{
							if (accounts[i].equals(gmail) || accounts[i].equals(fb) || accounts[i].equals(zing) || accounts[i].equals(uid))
								allow = true;
						}
					}
				}
			}
			
			// if server status is pause and account is not in whitelist
			if (Server._server_status != DatabaseID.SERVER_STATUS_READY && !allow)
			{
				_return_id = ReturnCode.RESPONSE_SERVER_MAINTAIN;
				requestError();
				return;
			}
		}
		
		_device_name = "device_unknown";
		if (encrypt.hasKey(KeyID.KEY_DEVICE_NAME))
			_device_name = encrypt.getString(KeyID.KEY_DEVICE_NAME);
		
		_device_firmware = "fw_unknown";
		if (encrypt.hasKey(KeyID.KEY_DEVICE_FW))
			_device_firmware = encrypt.getString(KeyID.KEY_DEVICE_FW);
		
		_distributor = "distributor_unknown";
		if (encrypt.hasKey(KeyID.KEY_DISTRIBUTOR))
		{
			_distributor = encrypt.getString(KeyID.KEY_DISTRIBUTOR);
		}
			
		_device_platform = "platform_unknown";
		if (encrypt.hasKey(KeyID.KEY_VERSION_PLATFORM))
			_device_platform = encrypt.getString(KeyID.KEY_VERSION_PLATFORM);
		
		_reference_src = "reference_unknown";
		if (encrypt.hasKey(KeyID.KEY_INSTALL_REFERENCE))
			_reference_src = encrypt.getString(KeyID.KEY_INSTALL_REFERENCE);
		
		if (encrypt.hasKey(KeyID.KEY_REFERENCE_CODE))
			_ref_code = encrypt.getString(KeyID.KEY_REFERENCE_CODE);
		
		try 
		{
			_update_status = checkUpdate(encrypt);
		} 
		catch (Exception e) 
		{
			LogHelper.LogException("login.CheckUpdate", e);
		}
		
		// not check version in happy and local
		if (ProjectConfig.IS_SERVER_FREESTYLE == 1 || ProjectConfig.RUN_LOCAL == 1) 
		{
//			_update_status = DatabaseID.VERSION_HAS_NOT_UPDATE;
		}
		
		if (_update_status == DatabaseID.VERSION_HAS_FORCE_UPDATE)
		{
			_return_id = ReturnCode.RESPONSE_OK;
			FBEncrypt result = new FBEncrypt();
			result.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
			result.addBoolean(KeyID.KEY_VERSION_UPDATE, true);
			result.addString(KeyID.KEY_VERSION_LINK, _update_link);
			
			try
			{
				_client.WriteZip(result.toByteArray());
			}
			catch (Exception ex)
			{
			}
			
			return;
		}
		else if (_update_status == DatabaseID.VERSION_WRONG_UPDATE)
		{
			RequestLoginError(encrypt.getLong(KeyID.KEY_USER_ID), ReturnCode.RESPONSE_WRONG_UPDATE_VERSION, "Client has wrong version");
			return;
		}
	
		// ----------------------------------------------------------------------------------------
			
			boolean is_new_user = false;
			boolean is_stable_user = false;

			//get and process login params
			_user_id = -1;
			_device_id = "";
			_last_session = "";

			// check device id
			if (!encrypt.hasKey(KeyID.KEY_DEVICE_ID))	
			{
				RequestLoginError(encrypt.getLong(KeyID.KEY_USER_ID), ReturnCode.RESPONSE_ERROR, "Does not contain device id.");
				return;
			}
			else
			{
				//get device id
				_device_id = encrypt.getString(KeyID.KEY_DEVICE_ID);
				if (_device_id.length() == 0)
				{
					RequestLoginError(encrypt.getLong(KeyID.KEY_USER_ID), ReturnCode.RESPONSE_ERROR, "Invalid device id.");
					return;
				}
			}
			
			if (ProjectConfig.IS_SERVER_ZALO_LOGIC == 1)
			{
				if (encrypt.hasKey(KeyID.KEY_ZALO_ID))
				{
					_zalo_id = encrypt.getString(KeyID.KEY_ZALO_ID);
					if (_zalo_id.length() == 0)
					{
						LogHelper.Log("empty zalo id");
						return;
					}
					
					try
					{
						_user_id = (long)DBConnector.GetMembaseServerForGeneralData().Get("zalo" + "_" + _zalo_id + "_" + "u");
					}
					catch (Exception e)
					{
						LogHelper.LogException("get user id from zalo id", e);
						_user_id = -1;
					}
					
					if (_user_id <= 0)
					{
						//this is new user
						is_new_user = true;
						is_stable_user = false;
					}
					else
					{
						// this is old user
						// checking login
						base = DBConnector.GetMembaseServer(_user_id);

						// check if this account has been logged in within the last 1 seconds.
						try 
						{
							int last_login_time = (int)DBConnector.GetMembaseServer(_user_id).Get(_user_id + "_" + KeyID.KEY_USER_LAST_LOGIN);
							if (Misc.SECONDS() < last_login_time + 1) 
							{
								return;
							}
						}
						catch (Exception e) 
						{
							LogHelper.LogException("login.CheckLastLoginTime", e);
						}

						//get session in client
						_last_session = encrypt.getString(KeyID.KEY_USER_SESSION_ID);
						
						//get current session
						try
						{
							_session_id = (String)base.Get(_user_id + "_" + KeyID.KEY_USER_SESSION_ID);
						}
						catch (Exception ex)
						{
							LogHelper.LogException("login", ex);
							_session_id = null;
						}
						
						if (_session_id == null) // user deleted by gmtool
						{
							is_new_user = true;
							is_stable_user = false;
						}
						else
						{
							if (_session_id.equals("default_session") && !_zalo_token.equals(""))
							{
								LogHelper.Log("verify session zalo ok");
								is_new_user = false;
								is_stable_user = true;
							}
							else
							{
								LogHelper.Log("start authorize zalo");
								Server._task_queue.AddTask(new ZaloAuthenticateTask(_client, encrypt));
								return;
							}
						}
					}
				}
				else  // user try playing game
				{
					//get user id data
					byte[] data = null;
					try
					{
						data = DBConnector.GetMembaseServerForGeneralData().GetRaw(_device_id + "_" + KeyID.KEY_USER_ID);
					}
					catch (Exception ex)
					{
						data = null;
					}

					if (data == null || data.length == 0)
					{
						// this is new user - first try game
						is_new_user = true;
						is_stable_user = false;
						LogHelper.Log("new user first try playing game");
					}
					else
					{
						// old user - retry game
						_user_id = 	((data[0]&0xFF)<<56) |
									((data[1]&0xFF)<<48) |
									((data[2]&0xFF)<<40) |
									((data[3]&0xFF)<<32) |
									((data[4]&0xFF)<<24) |
									((data[5]&0xFF)<<16) |
									((data[6]&0xFF)<<8)  |
									(data[7]&0xFF);
						
						// checking login
						base = DBConnector.GetMembaseServer(_user_id);

						// check if this account has been logged in within the last 1 seconds.
						try  {
							int last_login_time = (int)DBConnector.GetMembaseServer(_user_id).Get(_user_id + "_" + KeyID.KEY_USER_LAST_LOGIN);
							if (Misc.SECONDS() < last_login_time + 1) 
							{
								return;
							}
						} catch (Exception e)  {
							LogHelper.LogException("login.CheckLastLoginTime", e);
						}
						
						//get session in client
						_last_session = encrypt.getString(KeyID.KEY_USER_SESSION_ID);
						
						//get current session
						try
						{
							_session_id = (String)base.Get(_user_id + "_" + KeyID.KEY_USER_SESSION_ID);
						}
						catch (Exception ex)
						{
							LogHelper.LogException("login", ex);
						}
						
						if (_last_session.equals(_session_id) || _session_id.equals("default_session"))
						{
							LogHelper.Log("old user retry playing game");
							is_new_user = false;
							is_stable_user = true;
						}
						else
						{
							_return_id = ReturnCode.RESPONSE_MISMATCH_SESSION;
							RequestLoginError(_user_id, _return_id, "Valid last session failed #1.");
							return;
						}
					}
				}
			}
			else
			{
				if (encrypt.hasKey(KeyID.KEY_USER_ID))		//check user id
				{
					//get userid
					_user_id = encrypt.getLong(KeyID.KEY_USER_ID);
					if (_user_id <= 0)
					{
						LogHelper.Log(LogHelper.LogType.HACK, "Err! Invalid user id. ip = " + _ip);
						RequestLoginError(_user_id, ReturnCode.RESPONSE_ERROR, "Invalid user id.");
						return;
					}

					//get session
					_last_session = encrypt.getString(KeyID.KEY_USER_SESSION_ID);
					if (_last_session.length() == 0)
					{
						LogHelper.Log(LogHelper.LogType.HACK, "Err! Invalid last session. ip = " + _ip);
						RequestLoginError(_user_id, ReturnCode.RESPONSE_ERROR, "Invalid last session #1.");
						return;
					}

					//checking login
					base = DBConnector.GetMembaseServer(_user_id);

					// check if this account has been logged in within the last 1 seconds.
					try 
					{
//						int last_login_time = (int)DBConnector.GetMembaseServer(_user_id).Get(_user_id + "_" + KeyID.KEY_USER_LAST_LOGIN);
						Object obj = DBConnector.GetMembaseServer(_user_id).Get(_user_id + "_" + KeyID.KEY_USER_LAST_LOGIN);
						if (obj != null)
						{
							if (Misc.SECONDS() < (int)obj + 1) 
							{
								return;
							}
						}
					} 
					catch (Exception e) 
					{
						LogHelper.LogException("login.CheckLastLoginTime", e);
					}

					//get current session
					try
					{
						_session_id = (String)base.Get(_user_id + "_" + KeyID.KEY_USER_SESSION_ID);
					}
					catch (Exception ex)
					{
						LogHelper.LogException("login", ex);
					}

					if (_session_id == null) // this user is deleted by gmtool or database reset
					{
						is_new_user = true;
						is_stable_user = false;
					}
					else
					{
						//checking login ok
						if (_last_session.equals(_session_id) || _session_id.equals("default_session") || ProjectConfig.RUN_LOCAL == 1)
						{
							// LogHelper.Log("logIn.. valid session id OK.");
							is_new_user = false;
							is_stable_user = true;
						}
						else
						{
							//handle login by fb account (in case user wants to switch play between devices).
							if (encrypt.hasKey(KeyID.KEY_FACEBOOK_ID) && encrypt.hasKey(KeyID.KEY_FACEBOOK_ACCESS_TOKEN))
							{
								_facebook_id		= encrypt.getString(KeyID.KEY_FACEBOOK_ID);
								if (IsFacebookIdUsed(_facebook_id))
								{
									LogHelper.Log("authenticate user with old FB id");
									Server._task_queue.AddTask(new FBAuthenticateTask(_client, encrypt));
									return;
								}
								else
								{
									LogHelper.Log("generate new user with new FB id");
									is_new_user = true;
									is_stable_user = false;
									_should_map_social_id = true;
								}
							}
							else if (encrypt.hasKey(KeyID.KEY_ZING_ID))
							{
								_zing_id		= encrypt.getString(KeyID.KEY_ZING_ID);
								if (IsZingIdUsed(_zing_id))
								{
									LogHelper.Log("authenticate user with old ZING id");
									Server._task_queue.AddTask(new ZingAuthenticateTask(_client, encrypt));
									return;
								}
								else
								{
									LogHelper.Log("generate new user with new ZING id");
									is_new_user = true;
									is_stable_user = false;
									_should_map_social_id = true;
								}
							}
							else if (encrypt.hasKey(KeyID.KEY_ZALO_ID))
							{
								_zalo_id = encrypt.getString(KeyID.KEY_ZALO_ID);
								if (IsZaloIdUsed(_zalo_id))
								{
									LogHelper.Log("authenticate user with old ZALO id");
									Server._task_queue.AddTask(new ZaloAuthenticateTask(_client, encrypt));
									return;
								}
								else
								{
									LogHelper.Log("generate new user with new ZALO id");
									is_new_user = true;
									is_stable_user = false;
									_should_map_social_id = true;
								}
							}
							else if (ProjectConfig.IS_SERVER_FREESTYLE == 1)
							{
								is_new_user = false;
								is_stable_user = true;
							}
							else
							{
								// allow user with level < 7 entering game without checking session
								byte[] _userbin = null;
								try
								{
									_userbin = DBConnector.GetMembaseServer(_user_id).GetRaw(_user_id + "_" + KeyID.KEY_USER_INFOS);
								}
								catch (Exception e)
								{
									_userbin = null;
									LogHelper.LogException("loadUserData", e);
								}

								if (_userbin == null || _userbin.length == 0)
								{
									PrintUserDebugInfo(Thread.currentThread().getStackTrace()[1].getLineNumber());
									RequestLoginError(_user_id, ReturnCode.RESPONSE_ERROR, "Null user bin #1.");
									return;
								}

								UserInfo _userInfo = new UserInfo(_userbin);
								if (!_userInfo.isLoadSuccess())
								{
									PrintUserDebugInfo(Thread.currentThread().getStackTrace()[1].getLineNumber());
									RequestLoginError(_user_id, ReturnCode.RESPONSE_ERROR, "Load user info failed #1.");
									return;
								}

								if (_userInfo.getLevel() > 5)
								{
									_return_id = ReturnCode.RESPONSE_MISMATCH_SESSION;
									PrintUserDebugInfo(Thread.currentThread().getStackTrace()[1].getLineNumber());
									RequestLoginError(_user_id, _return_id, "Valid last session failed #1.");
									return;
								}
								else
								{
									is_new_user = false;
									is_stable_user = true;
								}
							}
						}
					}
				}
				else
				{
						//handle login by fb account (in case user plays in new device -> can't get user id or session id.
						if (encrypt.hasKey(KeyID.KEY_FACEBOOK_ID))
						{
							_facebook_id		= encrypt.getString(KeyID.KEY_FACEBOOK_ID);
							if (IsFacebookIdUsed(_facebook_id))
							{
								Server._task_queue.AddTask(new FBAuthenticateTask(_client, encrypt));
								return;
							}
							else
							{
								is_new_user = true;
								is_stable_user = false;
								_should_map_social_id = true;
							}
						}
						else if (encrypt.hasKey(KeyID.KEY_ZING_ID))
						{
							_zing_id		= encrypt.getString(KeyID.KEY_ZING_ID);
							if (IsZingIdUsed(_zing_id))
							{
								Server._task_queue.AddTask(new ZingAuthenticateTask(_client, encrypt));
								return;
							}
							else
							{
								is_new_user = true;
								is_stable_user = false;
								_should_map_social_id = true;
							}
						}
						else if (encrypt.hasKey(KeyID.KEY_ZALO_ID))
						{
							_zalo_id = encrypt.getString(KeyID.KEY_ZALO_ID);
							if (IsZaloIdUsed(_zalo_id))
							{
								Server._task_queue.AddTask(new ZaloAuthenticateTask(_client, encrypt));
								return;
							}
							else
							{
								is_new_user = true;
								is_stable_user = false;
								_should_map_social_id = true;
							}
						}
						else
						{
								//may be new user, should do some checking
								base = DBConnector.GetMembaseServerForGeneralData();

								//get user id data
								byte[] data = null;

								try
								{
									data = base.GetRaw(_device_id + "_" + KeyID.KEY_USER_ID);
								}
								catch (Exception ex)
								{
									LogHelper.LogException("login", ex);
									_last_session = encrypt.getString(KeyID.KEY_USER_SESSION_ID); // to avoid lose account when database is overloaded.
									PrintUserDebugInfo(Thread.currentThread().getStackTrace()[1].getLineNumber());
									RequestLoginError(_user_id, ReturnCode.RESPONSE_ERROR, "Can not get binary of user id from device id");
									return;
								}

								if (data == null || data.length == 0)
								{
										//this is new user
										is_new_user = true;
										is_stable_user = false;
								}
								else
								{
										//get session in client
										_last_session = encrypt.getString(KeyID.KEY_USER_SESSION_ID);
										if (_last_session.length() == 0)
										{
											RequestLoginError(_user_id, ReturnCode.RESPONSE_ERROR, "Invalid last session #2.");
											return;
										}

										//get user id 
										_user_id = 	((data[0]&0xFF)<<56) |
																((data[1]&0xFF)<<48) |
																((data[2]&0xFF)<<40) |
																((data[3]&0xFF)<<32) |
																((data[4]&0xFF)<<24) |
																((data[5]&0xFF)<<16) |
																((data[6]&0xFF)<<8)  |
																(data[7]&0xFF);

										if (_user_id == 0)
										{
											LogHelper.Log(LogHelper.LogType.ERROR, "err! old user does not have uid");

											//get database for unstable user
											base = DBConnector.GetMembaseServerForTemporaryData();

											//get current session in db
											try
											{
												_session_id = (String)base.Get(_device_id + "_" + KeyID.KEY_USER_SESSION_ID);
											}
											catch (Exception ex)
											{
												LogHelper.LogException("login", ex);
											}

											//checking session
											if ("0".equals(_session_id) || _last_session.equals(_session_id) || _session_id.equals("default_session"))
											{
												//this is unstable user
												is_new_user = false;
												is_stable_user = false;
											}
											else
											{
												_return_id = ReturnCode.RESPONSE_MISMATCH_SESSION;
												PrintUserDebugInfo(Thread.currentThread().getStackTrace()[1].getLineNumber());
												RequestLoginError(_user_id, _return_id, "Mismatch session.");
												return;
											}
										}
										else
										{
												//checking login
												base = DBConnector.GetMembaseServer(_user_id);

												// check if this account has been logged in within the last 1 seconds.
												try 
												{
													int last_login_time = (int)DBConnector.GetMembaseServer(_user_id).Get(_user_id + "_" + KeyID.KEY_USER_LAST_LOGIN);
													if (Misc.SECONDS() < last_login_time + 1) 
													{
														// hold this session for a while and try again
	//													Thread.sleep(1000);
	//													_command_id = CommandID.CMD_REQUEST_LOGIN;
	//													_return_id = ReturnCode.RESPONSE_REQUIRE_LOGIN;
	//													RequestLoginError(_user_id, _return_id, "User logins repeatedly in the last 1 second #2.");
														return;
													}
												} 
												catch (Exception e) 
												{
													LogHelper.LogException("login.CheckLastLoginTime", e);
												}

												//get current session
												try
												{
													_session_id = (String)base.Get(_user_id + "_" + KeyID.KEY_USER_SESSION_ID);
												}
												catch (Exception ex)
												{
													LogHelper.LogException("login", ex);
												}

												// allow user with level < 7 entering game without checking session
												byte[] _userbin = null;
												try
												{
													_userbin = DBConnector.GetMembaseServer(_user_id).GetRaw(_user_id + "_" + KeyID.KEY_USER_INFOS);
												}
												catch (Exception e)
												{
													LogHelper.Log("login.. can not get user data+++.");
													LogHelper.LogException("loadUserData+++", e);
													_userbin = null;
												}

												if (_userbin == null || _userbin.length == 0)
												{
													RequestLoginError(_user_id, ReturnCode.RESPONSE_ERROR, "Null user bin #2.");
													return;
												}

												UserInfo _userInfo = new UserInfo(_userbin);
												if (!_userInfo.isLoadSuccess())
												{
													PrintUserDebugInfo(Thread.currentThread().getStackTrace()[1].getLineNumber());
													RequestLoginError(_user_id, ReturnCode.RESPONSE_ERROR, "Load user info failed #2.");
													return;
												}

												if (_userInfo.getLevel() > 5)
												{
													//checking session
													if (!_last_session.equals(_session_id) && !_session_id.equals("default_session"))
													{
														// do not check password in freestyle server
														// do not check password device iOS (temporarily)
														if (ProjectConfig.IS_SERVER_FREESTYLE != 1 && ProjectConfig.RUN_LOCAL != 1 && !_device_platform.equals("iOS"))
														{
															_return_id = ReturnCode.RESPONSE_MISMATCH_SESSION;
															PrintUserDebugInfo(Thread.currentThread().getStackTrace()[1].getLineNumber());
															RequestLoginError(_user_id, _return_id, "Valid last session failed #2.");
															return;
														}
													}
												}

												is_new_user = false;
												is_stable_user = true;
										}
								}
						}
				}
				
			}

			//handle login
			if (is_new_user)
			{
				_is_stable_user	= false;

				//gen new uid
				long new_uid = -1;
				if (ProjectConfig.USE_DATABASE == ProjectConfig.DATABASE_DEV ||
					ProjectConfig.USE_DATABASE == ProjectConfig.DATABASE_LIVE)
				{
					new_uid = DBConnector.GenerateNewUserID();
				}
				else
				{
					new_uid = Misc.GenerateNewUserID();
				}

				//if gen id ok
				if (new_uid > 0)
				{
					//gen user
					if (generateNewUser() == false)
					{
						PrintUserDebugInfo(Thread.currentThread().getStackTrace()[1].getLineNumber());
						RequestLoginError(new_uid, ReturnCode.RESPONSE_ERROR, "Generate new user failed.");
						return;
					}

					//change user to stable
					changeUserToStable(new_uid);
				}
				else
				{
					PrintUserDebugInfo(Thread.currentThread().getStackTrace()[1].getLineNumber());
					RequestLoginError(new_uid, ReturnCode.RESPONSE_ERROR, "Generate new invalid uid.");
					return;
				}
			}
			else
			{
				if (is_stable_user)
				{
					_is_stable_user	= true;

					base = DBConnector.GetMembaseServer(_user_id);

					if (loadUserData() == false)
					{
						PrintUserDebugInfo(Thread.currentThread().getStackTrace()[1].getLineNumber());
						RequestLoginError(_user_id, ReturnCode.RESPONSE_ERROR, "Load user data failed #1.");
						return;
					}
				}
				else
				{
					_is_stable_user	= false;

					base = DBConnector.GetMembaseServerForTemporaryData();

					if (loadUserData() == false)
					{
						PrintUserDebugInfo(Thread.currentThread().getStackTrace()[1].getLineNumber());
						RequestLoginError(_user_id, ReturnCode.RESPONSE_ERROR, "Load user data failed #2.");
						return;
					}
				}
			}
			
		if (_user_id <= 0)
		{
			LogHelper.Log(LogHelper.LogType.ERROR, "login.. err! uid <= 0");
		}
			
		// check if user is being banned
		String ban = "";
		try
		{
			ban = (String)DBConnector.GetMembaseServer(_user_id).Get(_user_id + "_" + KeyID.BAN);
		}
		catch (Exception e)
		{
			ban = "";
			LogHelper.LogException("login.ban", e);
		}
		
		if (ban == null || ban.equals(""))
		{
			// debug
		}
		else
		{
			if (!_ip.equals("118.102.7.146")) // ip wifi pub vng hcm 
			{
				_return_id = ReturnCode.RESPONSE_BAN;
				RequestLoginError(_user_id, _return_id, "User is banned.");
				return;
			}
		}
		
		_is_waiting_for_confirm_login = true;
		
		// check and kick if this user is currently online in same/another server.
		if (ProjectConfig.IS_SERVER_LOGIC == 1)
		{
			String info = "";
			try
			{
				info = (String)DBConnector.GetMembaseServer(_user_id).Get(_user_id + "_" + KeyID.ONLINE);
			}
			catch (Exception e)
			{
				LogHelper.LogException("login.ReadOnlineInfo", e);
				info = "";
			}

			if (info == null || info.equals(""))
			{
				// double check when server is overloaded
				if (ServerHandler.isUserOnline(_device_id)) // online same server
				{
					if (true)
					{
						LogHelper.Log(LogHelper.LogType.HACK, "detect HACK multiple login, uid = " + _user_id);
						ServerHandler.removeUser(_device_id, ReturnCode.RESPONSE_MULTIPLE_LOGIN);
						return;
					}
				}
			}
			else
			{
				if (ServerHandler.isUserOnline(_device_id)) // online same server
				{
					if (true)
					{
						LogHelper.Log(LogHelper.LogType.HACK, "detect HACK multiple login, uid = " + _user_id);
						ServerHandler.removeUser(_device_id, ReturnCode.RESPONSE_MULTIPLE_LOGIN);
						return;
					}
					
					LogHelper.Log("login.. removed user [" + _device_id +"] from online list.");
				}
				else // online in different server
				{
					String[] aos = info.split(":");
					if (aos.length == 2)
					{
						// send upd request to kick user
						String user_ip = aos[0];

						FBEncrypt udpreq = new FBEncrypt();
						udpreq.addShort(KeyID.KEY_USER_COMMAND_ID, CommandID.CMD_KICK_USER);
						udpreq.addString(KeyID.KEY_DEVICE_ID, _device_id);
						udpreq.addLong(KeyID.KEY_USER_ID, _user_id);

						ByteBuffer buffer = ByteBuffer.allocate(udpreq.toByteArray().length + 8);
						buffer.put(udpreq.toByteArray());
						buffer.flip();

						SkyGardenUser.udpRequest(buffer, user_ip, ProjectConfig.UDP_PORT, false);
						LogHelper.Log("login.. sent udp kick request to " + _device_id + ":" + user_ip + ":" + ProjectConfig.UDP_PORT);
						
						LogHelper.Log(LogHelper.LogType.HACK, "detect HACK multiple login, uid = " + _user_id);
						return;
					}
					else
					{
						RequestLoginError(_user_id, ReturnCode.RESPONSE_ERROR, "Invalid online info.");
						return;
					}
				}
				
				int max_retry = 10;
				int retry_success = 0;
				for (int i = 0; i < max_retry; i++) 
				{
					String recheck_online_info = "";
					try 
					{
						recheck_online_info = (String)DBConnector.GetMembaseServer(_user_id).Get(_user_id + "_" + KeyID.ONLINE);
					} 
					catch (Exception e) 
					{
						LogHelper.LogException("login.ReadRecheckOnlineInfo", e);
						recheck_online_info = "";
					}
					
					if (recheck_online_info == null || recheck_online_info.equals("")) 
					{
						retry_success++;	
					} 
					else 
					{
						retry_success = 0;
					}
				}
				
				if (retry_success < 5) 
				{
					_return_id = ReturnCode.RESPONSE_RETRY_LOGIN;
					RequestLoginError(_user_id, _return_id, "Recheck online status failed.");
					return;
				}
			}
		}
		
		// write a key to db to let everybody know that i'm online
		StringBuilder online = new StringBuilder();
		online.append(SkyGarden.s_server_local_address);
		online.append(":").append(SkyGarden.s_serverPort);
		
		boolean add_online_key = DBConnector.GetMembaseServer(_user_id).Add(_user_id + "_" + KeyID.ONLINE, online.toString(), 2 * 60 * 60);
		if (ProjectConfig.IS_SERVER_FREESTYLE ==1)
		{
			add_online_key = true;
		}
		
		if (add_online_key == false)
		{
			LogHelper.Log(LogHelper.LogType.HACK, "detect HACK multiple login, uid = " + _user_id);
			return;
		}
		
		ServerHandler.addUser(_device_id, this);
		
		// record last login time
		base.Set(_user_id + "_" + KeyID.KEY_USER_LAST_LOGIN, Misc.SECONDS());
		
		/* Gen new session id each 48 hours */
		int session_expired_time = -1;
		try 
		{
			session_expired_time = (int)DBConnector.GetMembaseServer(_user_id).Get(_user_id + "_" + KeyID.KEY_USER_SESSION_EXPIRED_TIME);
		} 
		catch (Exception e) 
		{
			session_expired_time = -1;
		}
		
		// dont gen new session id in server freestyle
		if (ProjectConfig.IS_SERVER_FREESTYLE != 1) 
		{
			if (session_expired_time == -1 || Misc.SECONDS() > (session_expired_time + (2 * 48 * 60 * 60)) || _session_id.equals("default_session") || _command_id == CommandID.CMD_LOGIN_DIFFERENT_ACCOUNT) 
			{
				_new_session_id = Misc.Hash(_device_id + System.currentTimeMillis() + _user_id + Math.random(), "SHA-256");
				base.Set(_user_id + "_" + KeyID.KEY_USER_SESSION_EXPIRED_TIME, (Misc.SECONDS() + (2 * 48 * 60 * 60)));
			}
			else 
			{
				_new_session_id = _session_id;
			}
		}

		_return_id = ReturnCode.RESPONSE_OK;
		
		try
		{
			ExecuteAfterLoginUpdate();
			ExecuteNPCAI();
			loadNPCDailyResetTime();
		}
		catch (Exception e)
		{
			LogHelper.LogException("ExcecutePostLogin", e);
		}
		
		if (bUseNPCBuyItem) loadNPCBuyItemTimer();
		
		try
		{
			AdjustDropItemPercent(DropItemList);
		}
		catch (Exception e)
		{
			LogHelper.LogException("AdjustDropItemPercent", e);
		}
		
		// do ham AdjustDropItemPercent() duoc goi sau khi da load machines nen khi khoi tao TI LE ROT ITEMS ta phai duyet lai cac may de add item duoc rot ra (neu co)
		try
		{
			for (int i = 0; i < machine.size(); i++)
			{
				Machine _machine = machine.get(i);
				int product_complete_num = _machine.getProductCompleteNum();
				_machine.resetProductCompleteNum();
				
				boolean hasItem = false;
				
				for (int j = 0; j < product_complete_num; j++)
				{
					// check if drops extra item when harvest product
					int drop_item_id = -1;
					
					try
					{
						drop_item_id = GetDropItemAdvance(DropItemInfo, DatabaseID.ACTION_HARVEST_PRODUCT);
					}
					catch (Exception ex)
					{
						LogHelper.LogException("ExecuteMachineDropItem", ex);
						drop_item_id = -1;
					}
					
					if (drop_item_id > -1)
					{
						int item_type = DatabaseID.IT_MATERIAL;
						int item_id = drop_item_id;
						int item_num = 1;
						
						// handle event
						if (_use_event_mid_autumn_festival && item_id == DatabaseID.MATERIAL_MOON_CAKE)
						{
							item_type = DatabaseID.IT_EVENT;
							item_id = DatabaseID.ITEM_EVENT_MOON_CAKE;
//							SetEventScore(KeyID.KEY_EVENT_MID_AUTUMN_FESTIVAL, 1);
						}
						
						// handle event 20-11
						if (_use_event_20_11 && item_id == DatabaseID.MATERIAL_ITEM_EVENT_FLOWER_20_11)
						{
							item_type = DatabaseID.IT_EVENT;
							item_id = DatabaseID.ITEM_EVENT_FLOWER_20_11;
						}
						
						// handle event xmas mini
						if (_use_event_xmas_mini && item_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_1)
						{
							item_type = DatabaseID.IT_EVENT;
							item_id = DatabaseID.ITEM_EVENT_XMAS_2014_1;
						}
						
						// handle event xmas tree
						if (_use_event_xmas_tree && item_id == DatabaseID.MATERIAL_ITEM_CANDLE)
						{
							item_type = DatabaseID.IT_EVENT;
							item_id = DatabaseID.ITEM_EVENT_CANDLE;
						}
						
						if (_use_event_new_year_2015 && item_id == DatabaseID.MATERIAL_ITEM_BANH_CHUNG)
						{
							item_type = DatabaseID.IT_EVENT;
							item_id = DatabaseID.ITEM_EVENT_BANH_CHUNG;
						}
						
						if (_use_event_8_3_2015 && item_id == DatabaseID.MATERIAL_ITEM_GLASS_ROSE)
						{
							item_type = DatabaseID.IT_EVENT;
							item_id = DatabaseID.ITEM_EVENT_GLASS_ROSE;
						}
						
						// handle event halloween
						if (_use_event_halloween && (item_id == DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_1 || item_id == DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_2 || item_id == DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_3))
						{
							item_type = DatabaseID.IT_EVENT;
							switch (item_id)
							{
								case DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_1:
									item_id = DatabaseID.ITEM_EVENT_HALLOWEEN_1;
									break;
								case DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_2:
									item_id = DatabaseID.ITEM_EVENT_HALLOWEEN_2;
									break;
								case DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_3:
									item_id = DatabaseID.ITEM_EVENT_HALLOWEEN_3;
									break;
							}
						}
						else if (_use_event_xmas_2014 && (item_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_1 || item_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_2 || item_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_3))
						{
							item_type = DatabaseID.IT_EVENT;
							switch (item_id)
							{
								case DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_1:
									item_id = DatabaseID.ITEM_EVENT_XMAS_2014_1;
									break;
								case DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_2:
									item_id = DatabaseID.ITEM_EVENT_XMAS_2014_2;
									break;
								case DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_3:
									item_id = DatabaseID.ITEM_EVENT_XMAS_2014_3;
									break;
							}
						}
						
						StringBuilder dropList = new StringBuilder("");
						dropList.append(item_type);
						dropList.append(":").append(item_id);
						dropList.append(":").append(item_num);
						
						_machine.addDropItem(dropList.toString());
						
						hasItem = true;
					}
				}
				
				if (hasItem)
				{
					SET_DB_VALUE_BINARY(KeyID.KEY_MACHINES + i, _machine.getData());
				}
			}
		}
		catch (Exception e)
		{
			LogHelper.Log(e.toString());
			LogHelper.LogException("ExecuteMachineDropItem", e);
		}
		
		// if client send command id LOGIN_DIFFERENT_ACC, then response with the command id CMD_RECONNECT
		if (_command_id == CommandID.CMD_LOGIN_DIFFERENT_ACCOUNT)
		{
			_command_id = CommandID.CMD_RECONNECT;
		}
		
		_response_login_data = !_is_simple_login;
		
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addInt(KeyID.KEY_SERVER_TIME_INT, Misc.SECONDS());
		response.addInt(KeyID.KEY_SERVER_VERSION, DatabaseID.FEATURE_REFRESH_NEWSBOARD);
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney())); //user's diamond
		response.addBoolean(KeyID.KEY_NEW_DAY, GetUserInfo().GetLastLoginTime() < Misc.GetServerCurrentResetTime());
		if (ProjectConfig.IS_SERVER_ZALO_LOGIC == 1)
		{
			response.addString(KeyID.KEY_ZALO_ACCESS_TOKEN, _zalo_token);
		}
		
		if (_response_login_data)
		{
			response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
			for (Floor f: floor)
			{
				response.addBinary(KeyID.KEY_FLOORS + floor.indexOf(f), f.getData(false));
			}
			for (Stock s: stock)
			{
				response.addBinary(KeyID.KEY_STOCKS + stock.indexOf(s), s.getDataToClient());
			}
			for (Machine m: machine)
			{
				response.addBinary(KeyID.KEY_MACHINES + machine.indexOf(m), m.getData());
			}
			for (MachineDurability md: machineDurability)
			{
				response.addBinary(KeyID.KEY_MACHINES_DURABILITY + machineDurability.indexOf(md), md.getData());
			}
			response.addBinary(KeyID.KEY_ORDER, orderManager.getData());
			response.addBinary(KeyID.KEY_IBSHOP, IBShopManager().getItemListSendToClient(userInfo.getLevel(), _banned_ibshop_package)); // ibshop
			response.addBinary(KeyID.KEY_PRIVATE_SHOP, PShopMgr.getDataToClient()); // private shop
			response.addBinary(KeyID.KEY_NEWS_BOARD, newsBoard.getDataToClient());
			if (bUseDailyGift) response.addBinary(KeyID.KEY_DAILY_GIFT, dailygift.getData());
			response.addBinary(KeyID.KEY_MACHINES_REPAIR_LIMIT, machineRepairLimit.getData());
			if (bUseOwl) response.addBinary(KeyID.KEY_OWL, owl.getData());
			if (bUseGiftCode) response.addBinary(KeyID.KEY_GIFT_CODE_ENTER, giftCodeEnter.getData());
			
//			if (bUseEvent)
//			{
//				response.addBinary(KeyID.KEY_EVENT, mainEvent.getData());
//				response.addBinary(KeyID.KEY_EVENT_MAIN_OBJECT, eventMainObject.getData());
//			}
		
			response.addLong(KeyID.KEY_USER_LIKED_COUNT, getLikedCount(_user_id));
			
			response.addBinary(KeyID.KEY_TUTORIAL, tutorialManager.getData());
			
			// reponse game const data length to client
			for (int i = DatabaseID.SHEET_USER_LEVEL; i < DatabaseID.SHEET_MAX; i++)
			{
				if (!isServerSheet(i)) response.addInt(KeyID.KEY_GAME_CONSTANT_MAX_ROW + i, Server.s_globalDB[i].length);
			}
			
			// response server list
			FBEncrypt server_list = new FBEncrypt();
			String[] list = SkyGarden._server_list.split("_");
			for (int i = 0; i < list.length ; i++)
			{
				String[] s = list[i].split(":");

				FBEncrypt server_info = new FBEncrypt();
				server_info.addStringANSI(KeyID.KEY_SERVER_ADDRESS, s[0]);
				server_info.addInt(KeyID.KEY_SERVER_PORT, Integer.parseInt(s[1]));
				server_list.addBinary(KeyID.KEY_SERVER_INDEX + i, server_info.toByteArray());
			}
			response.addInt(KeyID.KEY_TOTAL_SERVER, list.length);
			response.addBinary(KeyID.KEY_SERVER_LIST, server_list.toByteArray());
			
			// response active broadcast content
			String content_list = "";
			for (Entry<Integer, String> content : Server.s_broadcast_list.entrySet()) {
				String[] aos = content.getValue().split(":");
				if (aos.length != 4)
				{
					LogHelper.Log("logIn.. invalid broadcast message");
					break;
				}

				// still in active
				if (Integer.parseInt(aos[3]) > Misc.SECONDS()) {
					content_list = content.getValue().split(":")[0];
				} else {
					Server.s_broadcast_list.remove(content.getKey());
				}
			}
			
			response.addString(KeyID.KEY_BROADCAST_CONTENT_LIST, content_list);
			response.addLong(KeyID.KEY_GARDEN_APPRAISAL, garden_appraisal);
			response.addBoolean(KeyID.KEY_GIFT_AVAILABLE, gift_mgr._gifts.size() > 0 ? true : false);

			response.addString(KeyID.KEY_EMAIL_SUPPORT, ProjectConfig.EMAIL_SUPPORT);
			response.addString(KeyID.KEY_PHONE_SUPPORT, ProjectConfig.PHONE_SUPPORT);
			response.addString(KeyID.KEY_ONLINE_SUPPORT, ProjectConfig.ONLINE_SUPPORT);
			
			// return key last pay
			try {
				String last_pay = (String)base.Get(_user_id + "_" + KeyID.KEY_LAST_PAY_TIME);
				response.addStringANSI(KeyID.KEY_LAST_PAY_TIME, last_pay == null ? "null" : last_pay);
			} catch (Exception e) {
				LogHelper.LogException("login.GetLastPayTime", e);
				base.Add(_user_id + "_" + KeyID.KEY_LAST_PAY_TIME, "null");
			}
			
			String client_platform = "";
			String client_resolution = "";
			String client_version = "";
			String platform_ios = "";
			String sd_version = "";

			try
			{
				client_platform		= encrypt.getString(KeyID.KEY_VERSION_PLATFORM);
				client_resolution	= encrypt.getString(KeyID.KEY_VERSION_RESOLUTION);
				client_version		= encrypt.getString(KeyID.KEY_VERSION_NUMBER);
				platform_ios		= Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_VERSION][8][DatabaseID.VERSION_PLATFORM]);
				sd_version			= Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_VERSION][4][DatabaseID.VERSION_RESOLUTION]);
			}
			catch (Exception e)
			{
				LogHelper.LogException("login.ReadClientPlatform", e);
			}
			
			boolean use_first_pay			= false;
			try {
				Object obj = DBConnector.GetMembaseServerForTemporaryData().Get("payment_first_pay_str");
				if (obj != null) {
					use_first_pay = ((String)obj).equals("ON");
				}
			} catch (Exception e) {
				LogHelper.LogException("ReadFirstPay", e);
				use_first_pay = false;
			}
			
			LogHelper.LogHappy("use_first_pay := " + use_first_pay);

			// return first pay ads
			response.addBoolean(KeyID.KEY_FIRST_PAY_CAMPAIGN_STATUS, use_first_pay);
			if (client_platform.equals(platform_ios)) {
				response.addStringANSI(KeyID.KEY_FIRST_PAY_ADS_LINK, KeyID.FIRST_PAY_ADS_LINK_IOS);   
				response.addStringANSI(KeyID.KEY_FIRST_PAY_ADS_MD5, KeyID.FIRST_PAY_ADS_MD5_IOS);
			} else {
				if (client_resolution.equals(sd_version)) {
					response.addStringANSI(KeyID.KEY_FIRST_PAY_ADS_LINK, KeyID.FIRST_PAY_ADS_LINK_SD);
					response.addStringANSI(KeyID.KEY_FIRST_PAY_ADS_MD5, KeyID.FIRST_PAY_ADS_MD5_SD);
				} else {
					response.addStringANSI(KeyID.KEY_FIRST_PAY_ADS_LINK, KeyID.FIRST_PAY_ADS_LINK);
					response.addStringANSI(KeyID.KEY_FIRST_PAY_ADS_MD5, KeyID.FIRST_PAY_ADS_MD5);
				}
			}
			
			// return event notification
			boolean is_event_notification_enable = false;
			if (client_platform.equals(platform_ios)) {
				is_event_notification_enable = SkyGarden._event_notification._enable_ios;
			} else {
				if (client_resolution.equals(sd_version)) {
					is_event_notification_enable = SkyGarden._event_notification._enable_sd;
				} else {
					is_event_notification_enable = SkyGarden._event_notification._enable_hd;
				}
			}
			response.addBoolean(KeyID.KEY_EVENT_NOTIFY_ENABLE, userInfo.getLevel() >= 10 ? is_event_notification_enable : false);
			if (is_event_notification_enable && userInfo.getLevel() >= 10)
			{
				response.addInt(KeyID.KEY_EVENT_NOTIFY_TYPE, SkyGarden._event_notification._type);
				response.addString(KeyID.KEY_EVENT_NOTIFY_NAME, SkyGarden._event_notification._name);
				
				if (client_platform.equals(platform_ios))
				{
					response.addStringANSI(KeyID.KEY_EVENT_NOTIFY_IMG_SMALL, SkyGarden._event_notification._img_small_ios);
					response.addStringANSI(KeyID.KEY_EVENT_NOTIFY_IMG_LARGE, SkyGarden._event_notification._img_large_ios);
					response.addStringANSI(KeyID.KEY_EVENT_NOTIFY_IMG_SMALL_MD5, SkyGarden._event_notification._img_small_ios_md5);
					response.addStringANSI(KeyID.KEY_EVENT_NOTIFY_IMG_LARGE_MD5, SkyGarden._event_notification._img_large_ios_md5);
					response.addStringANSI(KeyID.KEY_EVENT_NOTIFY_DETAILS, SkyGarden._event_notification._details_ios);
				}
				else
				{
					if (client_resolution.equals(sd_version))
					{
						response.addStringANSI(KeyID.KEY_EVENT_NOTIFY_IMG_SMALL, SkyGarden._event_notification._img_small_sd);
						response.addStringANSI(KeyID.KEY_EVENT_NOTIFY_IMG_LARGE, SkyGarden._event_notification._img_large_sd);
						response.addStringANSI(KeyID.KEY_EVENT_NOTIFY_IMG_SMALL_MD5, SkyGarden._event_notification._img_small_sd_md5);
						response.addStringANSI(KeyID.KEY_EVENT_NOTIFY_IMG_LARGE_MD5, SkyGarden._event_notification._img_large_sd_md5);
						response.addStringANSI(KeyID.KEY_EVENT_NOTIFY_DETAILS, SkyGarden._event_notification._details_sd);
					}
					else
					{
						response.addStringANSI(KeyID.KEY_EVENT_NOTIFY_IMG_SMALL, SkyGarden._event_notification._img_small);
						response.addStringANSI(KeyID.KEY_EVENT_NOTIFY_IMG_LARGE, SkyGarden._event_notification._img_large);
						response.addStringANSI(KeyID.KEY_EVENT_NOTIFY_IMG_SMALL_MD5, SkyGarden._event_notification._img_small_md5);
						response.addStringANSI(KeyID.KEY_EVENT_NOTIFY_IMG_LARGE_MD5, SkyGarden._event_notification._img_large_md5);
						response.addStringANSI(KeyID.KEY_EVENT_NOTIFY_DETAILS, SkyGarden._event_notification._details);
					}
				}
			}
			
			// response payment info
			payment_flag = GetPaymentStatus(client_platform, client_version);
			if (userInfo.getRefCode().equals("null")) {
				response.addBoolean(KeyID.KEY_PAYMENT_ENABLE, payment_flag == 1);
				if (ServerConfig().get("payment_geo") == 1) {
					response.addInt(KeyID.KEY_PAYMENT_TYPE, _country.equals("VN") ? DatabaseID.PAYMENT_TYPE_LOCAL : DatabaseID.PAYMENT_TYPE_IAP);
				} else {
					response.addInt(KeyID.KEY_PAYMENT_TYPE, DatabaseID.PAYMENT_TYPE_LOCAL);
				}
			} else {
				// mwork
				if (ServerConfig().get("payment_geo_mwork") == 1) {
					response.addBoolean(KeyID.KEY_PAYMENT_ENABLE, _country.equals("VN") ? payment_flag == 1 : false);
				} else {
					response.addBoolean(KeyID.KEY_PAYMENT_ENABLE, payment_flag == 1);
				}
			}
			
			// response version info
			if (_update_status == DatabaseID.VERSION_HAS_UPDATE) 
			{
				response.addString(KeyID.KEY_VERSION_LINK, _update_link);
			}
			
			// cdn
			try {
				response.addBinary(KeyID.KEY_CDN, GetCDNContent(encrypt));
			} catch (Exception e) {
				LogHelper.LogException("GetCDNContent", e);
			}
			
			// airship
			if (_use_airship) 
			{
				response.addBinary(KeyID.KEY_AIRSHIP, GetAirship().GetDataToClient());
			}
			
			// tomkid
			if (_use_tomkid) 
			{
				response.addBinary(KeyID.KEY_TOM_KID, GetTomKid().GetData(false));
			}
			
			if (_use_fortune && userInfo.getLevel() >= 16 && fortune_manager != null)
			{
				response.addBoolean(KeyID.KEY_FORTUNE, fortune_manager.isAvailable());
			}
			
			response.addBoolean(KeyID.KEY_ATM_HAS_PROMOTION, true);
			
			if (_use_invite_friend)
			{
				response.addBinary(KeyID.KEY_INVITE_FRIEND, invite_friend.GetData());
			}
			
			if (private_info != null)
			{
				response.addBinary(KeyID.KEY_PRIVATE_INFO, private_info.GetData());
			}
			
			if (_use_cross_promotion)
			{
				response.addBinary(KeyID.KEY_CROSS_PROMOTION, cross_promotion.GetData());
			}
			
			if (_use_new_dailygift)
			{
				response.addBinary(KeyID.KEY_NEW_DAILYGIFT, NewDailyGift().GetData());
			}
			
			if (_use_event_mid_autumn_festival)
			{
				response.addInt(KeyID.KEY_EVENT_MARKERS, GetEventMarkers());
				response.addString(KeyID.KEY_EVENT_GIFT_NUM, Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][userInfo.getLevel()][DatabaseID.CONSTANT_NUM_DROP_MOONCAKE]));
				response.addInt(KeyID.KEY_EVENT_CURRENT_TOTAL_NUM, userInfo.GetEventNum(KeyID.KEY_EVENT_MID_AUTUMN_FESTIVAL));
				response.addInt(KeyID.KEY_EVENT_ITEM_ID, DatabaseID.ITEM_EVENT_MOON_CAKE);
				response.addInt(KeyID.KEY_EVENT_START_TIME, Misc.SECONDS(_start_time_event_mid_autumn_festival));
				response.addInt(KeyID.KEY_EVENT_END_TIME, Misc.SECONDS(_end_time_event_mid_autumn_festival));
			}
			
			if (_use_event_20_11)
			{
				response.addInt(KeyID.KEY_EVENT_MARKERS, GetEventMarkers());
				response.addString(KeyID.KEY_EVENT_GIFT_NUM, Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][userInfo.getLevel()][DatabaseID.CONSTANT_NUM_DROP_MOONCAKE]));
				response.addInt(KeyID.KEY_EVENT_CURRENT_TOTAL_NUM, userInfo.GetEventNum(KeyID.KEY_EVENT_20_11));
				response.addInt(KeyID.KEY_EVENT_ITEM_ID, DatabaseID.ITEM_EVENT_FLOWER_20_11);
				response.addInt(KeyID.KEY_EVENT_START_TIME, Misc.SECONDS(_start_time_event_20_11));
				response.addInt(KeyID.KEY_EVENT_END_TIME, Misc.SECONDS(_end_time_event_20_11));
				response.addString(KeyID.KEY_EVENT_NAME, KeyID.KEY_EVENT_20_11);
				response.addInt(KeyID.KEY_EVENT_ITEM_SPRITE_ID, 173);
			}
			
			if (_use_event_xmas_mini)
			{
				response.addInt(KeyID.KEY_EVENT_MARKERS, GetEventMarkers());
				response.addString(KeyID.KEY_EVENT_GIFT_NUM, Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][userInfo.getLevel()][DatabaseID.CONSTANT_NUM_DROP_MOONCAKE]));
				response.addInt(KeyID.KEY_EVENT_CURRENT_TOTAL_NUM, userInfo.GetEventNum(KeyID.KEY_EVENT_XMAS_MINI));
				response.addInt(KeyID.KEY_EVENT_ITEM_ID, DatabaseID.ITEM_EVENT_XMAS_2014_1);
				response.addInt(KeyID.KEY_EVENT_START_TIME, Misc.SECONDS(_start_time_event_xmas_mini));
				response.addInt(KeyID.KEY_EVENT_END_TIME, Misc.SECONDS(_end_time_event_xmas_mini));
				response.addString(KeyID.KEY_EVENT_NAME, KeyID.KEY_EVENT_XMAS_MINI);
				response.addInt(KeyID.KEY_EVENT_ITEM_SPRITE_ID, 174);
			}
			
			if (_use_event_xmas_tree)
			{
				response.addInt(KeyID.KEY_EVENT_MARKERS, GetEventMarkers());
				response.addString(KeyID.KEY_EVENT_GIFT_NUM, Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][userInfo.getLevel()][DatabaseID.CONSTANT_NUM_DROP_MOONCAKE]));
				response.addInt(KeyID.KEY_EVENT_CURRENT_TOTAL_NUM, userInfo.GetEventNum(KeyID.KEY_EVENT_BIRTDAY_2015));
				response.addInt(KeyID.KEY_EVENT_ITEM_ID, DatabaseID.ITEM_EVENT_CANDLE);
				response.addInt(KeyID.KEY_EVENT_START_TIME, Misc.SECONDS(_start_time_event_xmas_tree));
				response.addInt(KeyID.KEY_EVENT_END_TIME, Misc.SECONDS(_end_time_event_xmas_tree));
				response.addString(KeyID.KEY_EVENT_NAME, KeyID.KEY_EVENT_BIRTDAY_2015);
				response.addInt(KeyID.KEY_EVENT_ITEM_SPRITE_ID, 173); // TODO
				response.addString(KeyID.KEY_EVENT_BIRTDAY_2015, Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][41][DatabaseID.GIFT_INFO_ITEMS_LIST]));
				response.addString(KeyID.KEY_EVENT_XMAS_TREE_2014, Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][41][DatabaseID.GIFT_INFO_ITEMS_LIST]));
			}
			
			if (_use_event_new_year_2015)
			{
				response.addInt(KeyID.KEY_EVENT_MARKERS, GetEventMarkers());
				response.addString(KeyID.KEY_EVENT_GIFT_NUM, Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][userInfo.getLevel()][DatabaseID.CONSTANT_NUM_DROP_MOONCAKE]));
				response.addInt(KeyID.KEY_EVENT_CURRENT_TOTAL_NUM, userInfo.GetEventNum(KeyID.KEY_EVENT_NEW_YEAR_2015));
				response.addInt(KeyID.KEY_EVENT_ITEM_ID, DatabaseID.ITEM_EVENT_BANH_CHUNG);
				response.addInt(KeyID.KEY_EVENT_START_TIME, Misc.SECONDS(_start_time_event_new_year_2015));
				response.addInt(KeyID.KEY_EVENT_END_TIME, Misc.SECONDS(_end_time_event_new_year_2015));
				response.addString(KeyID.KEY_EVENT_NAME, KeyID.KEY_EVENT_NEW_YEAR_2015);
				response.addInt(KeyID.KEY_EVENT_ITEM_SPRITE_ID, 173); // TODO
				response.addString(KeyID.KEY_EVENT_NEW_YEAR_2015, Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][41][DatabaseID.GIFT_INFO_ITEMS_LIST]));
				response.addInt(KeyID.KEY_EVENT_GIVE_FRIEND_GIFT_NUM, GetNumGiftGiveFriendPerTime());
			}
			
			if (_use_event_8_3_2015)
			{
				response.addInt(KeyID.KEY_EVENT_MARKERS, GetEventMarkers());
				response.addString(KeyID.KEY_EVENT_GIFT_NUM, Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][userInfo.getLevel()][DatabaseID.CONSTANT_NUM_DROP_MOONCAKE]));
				response.addInt(KeyID.KEY_EVENT_CURRENT_TOTAL_NUM, userInfo.GetEventNum(KeyID.KEY_EVENT_8_3_2015));
				response.addInt(KeyID.KEY_EVENT_ITEM_ID, DatabaseID.ITEM_EVENT_GLASS_ROSE);
				response.addInt(KeyID.KEY_EVENT_START_TIME, Misc.SECONDS(_start_time_event_8_3_2015));
				response.addInt(KeyID.KEY_EVENT_END_TIME, Misc.SECONDS(_end_time_event_8_3_2015));
				response.addString(KeyID.KEY_EVENT_NAME, KeyID.KEY_EVENT_8_3_2015);
				response.addInt(KeyID.KEY_EVENT_ITEM_SPRITE_ID, 173); // TODO
				response.addString(KeyID.KEY_EVENT_8_3_2015, Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][41][DatabaseID.GIFT_INFO_ITEMS_LIST]));
				response.addInt(KeyID.KEY_EVENT_GIVE_FRIEND_GIFT_NUM, GetNumGiftGiveFriendPerTime());
				response.addString(KeyID.KEY_EVENT_ITEM_NAME, "event_item_name");
			}
			
			if (_use_event_export)
			{
				response.addInt(KeyID.KEY_EVENT_MARKERS, GetEventMarkers());
				response.addString(KeyID.KEY_EVENT_GIFT_NUM, Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][userInfo.getLevel()][DatabaseID.CONSTANT_NUM_DROP_MOONCAKE]));
				response.addInt(KeyID.KEY_EVENT_CURRENT_TOTAL_NUM, userInfo.GetEventNum(KeyID.KEY_EVENT_EXPORT));
				response.addInt(KeyID.KEY_EVENT_ITEM_ID, DatabaseID.ITEM_EVENT_MOON_CAKE);
				response.addInt(KeyID.KEY_EVENT_START_TIME, Misc.SECONDS(_start_time_event_export));
				response.addInt(KeyID.KEY_EVENT_END_TIME, Misc.SECONDS(_end_time_event_export));
			}
			
			response.addBoolean(KeyID.KEY_EVENT_HALLOWEEN, (_use_event_halloween || _use_event_xmas_2014));
			
			// event notify
			if (_use_event_halloween)
			{
				response.addInt(KeyID.KEY_EVENT_START_TIME, Misc.SECONDS(_start_time_event_halloween));
				response.addInt(KeyID.KEY_EVENT_END_TIME, Misc.SECONDS(_end_time_event_halloween));
				response.addString(KeyID.KEY_ITEM_EVENT_DROP_FEATURE_DAILY_ORDER, DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_HALLOWEEN_3 + ":" + GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_HALLOWEEN_3, DatabaseID.FEATURE_ID_ORDER));
				response.addString(KeyID.KEY_ITEM_EVENT_DROP_FEATURE_ORDER_NORMAL, DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_HALLOWEEN_2 + ":" + DatabaseID.ORDER_NORMAL_ITEM_EVENT_NUM);
				response.addString(KeyID.KEY_ITEM_EVENT_DROP_FEATURE_AIRSHIP, DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_HALLOWEEN_1 + ":" + GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_HALLOWEEN_1, DatabaseID.FEATURE_ID_AIRSHIP));
				response.addString(KeyID.KEY_ITEM_EVENT_DROP_FEATURE_TOM, DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_HALLOWEEN_2 + ":" + GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_HALLOWEEN_2, DatabaseID.FEATURE_ID_TOM));
				response.addString(KeyID.KEY_ITEM_EVENT_DROP_FEATURE_FORTUNE, DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_HALLOWEEN_3 + ":" + GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_HALLOWEEN_3, DatabaseID.FEATURE_ID_FORTUNE_WHEEL));
				
				String[] reward_items = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_ORDER_EVENT][userInfo.getLevel()][DatabaseID.ORDER_EVENT_REWARD_ITEMS]).split(":");
				response.addString(KeyID.KEY_ITEM_EVENT_DROP_FEATURE_ORDER_EVENT, DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_HALLOWEEN_4 + ":" + reward_items[2]);
				
				String[] gift_info = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_NPC_MERCHANT][userInfo.getLevel()][DatabaseID.MERCHANT_GOLD_TO_ITEM]).split(":");
				int type = Integer.parseInt(gift_info[0]);
				int id = Integer.parseInt(gift_info[1]);
				if (type == DatabaseID.IT_MATERIAL)
				{
					if (id == DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_1 || 
						id == DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_2 || 
						id == DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_3)
					{

						switch (id)
						{
							case DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_1:
								id = DatabaseID.ITEM_EVENT_HALLOWEEN_1;
								type = DatabaseID.IT_EVENT;
								break;
							case DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_2:
								id = DatabaseID.ITEM_EVENT_HALLOWEEN_2;
								type = DatabaseID.IT_EVENT;
								break;
							case DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_3:
								id = DatabaseID.ITEM_EVENT_HALLOWEEN_3;
								type = DatabaseID.IT_EVENT;
								break;
						}
					}
				}
				StringBuilder sb = new StringBuilder();
				sb.append(type);
				sb.append(":").append(id);
				for (int i = 2; i < gift_info.length; i++)
				{
					sb.append(":").append(gift_info[i]); 
				}
				response.addString(KeyID.KEY_ITEM_EVENT_DROP_FEATURE_MERCHANTE, sb.toString());
				response.addString(KeyID.KEY_EVENT_NAME, KeyID.KEY_EVENT_XMAS_2014);
			}
			else if (_use_event_xmas_2014)
			{
				response.addInt(KeyID.KEY_EVENT_START_TIME, Misc.SECONDS(_start_time_event_xmas_2014));
				response.addInt(KeyID.KEY_EVENT_END_TIME, Misc.SECONDS(_end_time_event_xmas_2014));
				response.addString(KeyID.KEY_ITEM_EVENT_DROP_FEATURE_DAILY_ORDER, DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_XMAS_2014_2 + ":" + GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_HALLOWEEN_1, DatabaseID.FEATURE_ID_ORDER));
//				response.addString(KeyID.KEY_ITEM_EVENT_DROP_FEATURE_ORDER_NORMAL, DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_XMAS_2014_1 + ":" + DatabaseID.ORDER_NORMAL_ITEM_EVENT_NUM);
				response.addString(KeyID.KEY_ITEM_EVENT_DROP_FEATURE_AIRSHIP, DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_XMAS_2014_2 + ":" + GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_HALLOWEEN_1, DatabaseID.FEATURE_ID_AIRSHIP));
				response.addString(KeyID.KEY_ITEM_EVENT_DROP_FEATURE_TOM, DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_XMAS_2014_1 + ":" + GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_HALLOWEEN_2, DatabaseID.FEATURE_ID_TOM));
				response.addString(KeyID.KEY_ITEM_EVENT_DROP_FEATURE_FORTUNE, DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_XMAS_2014_1 + ":" + GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_HALLOWEEN_2, DatabaseID.FEATURE_ID_FORTUNE_WHEEL));
				
				String[] reward_items = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_ORDER_EVENT][userInfo.getLevel()][DatabaseID.ORDER_EVENT_REWARD_ITEMS]).split(":");
				response.addString(KeyID.KEY_ITEM_EVENT_DROP_FEATURE_ORDER_EVENT, DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_XMAS_2014_4 + ":" + reward_items[2]);
				
				StringBuilder sb = new StringBuilder();
				sb.append(DatabaseID.IT_EVENT).append(':');
				sb.append(DatabaseID.ITEM_EVENT_XMAS_2014_1).append(':');
				sb.append(DatabaseID.ITEM_EVENT_HALLOWEEN_1_PRICE).append(':');
				sb.append(DatabaseID.IT_EVENT).append(':');
				sb.append(DatabaseID.ITEM_EVENT_XMAS_2014_2).append(':');
				sb.append(DatabaseID.ITEM_EVENT_HALLOWEEN_2_PRICE).append(':');
				sb.append(DatabaseID.IT_EVENT).append(':');
				sb.append(DatabaseID.ITEM_EVENT_XMAS_2014_3).append(':');
				sb.append(DatabaseID.ITEM_EVENT_HALLOWEEN_3_PRICE);
				response.addString(KeyID.KEY_EVENT_ITEM_PRICE, sb.toString());
			}

			if (_use_stock_event)
			{
				response.addBinary(KeyID.KEY_STOCK_EVENT, stock_event.getDataToClient());
			}

			if (_use_event_x2)
			{
				response.addInt(KeyID.KEY_EVENT_MARKERS, GetEventMarkers());
				response.addString(KeyID.KEY_EVENT_GIFT_NUM, Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][userInfo.getLevel()][DatabaseID.CONSTANT_NUM_DROP_MOONCAKE]));
				response.addInt(KeyID.KEY_EVENT_CURRENT_TOTAL_NUM, userInfo.GetEventNum(KeyID.KEY_EVENT_EXPORT));
				response.addInt(KeyID.KEY_EVENT_ITEM_ID, DatabaseID.ITEM_EVENT_MOON_CAKE);
				response.addInt(KeyID.KEY_EVENT_START_TIME, Misc.SECONDS(_start_time_event_x2));
				response.addInt(KeyID.KEY_EVENT_END_TIME, Misc.SECONDS(_end_time_event_x2));
			}
			
			if (_use_event_button)
			{
				response.addInt(KeyID.KEY_EVENT_MARKERS, 0);
				response.addString(KeyID.KEY_EVENT_GIFT_NUM, Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][userInfo.getLevel()][DatabaseID.CONSTANT_NUM_DROP_MOONCAKE]));
				response.addInt(KeyID.KEY_EVENT_CURRENT_TOTAL_NUM, userInfo.GetEventNum(KeyID.KEY_EVENT_EXPORT));
				response.addInt(KeyID.KEY_EVENT_ITEM_ID, DatabaseID.ITEM_EVENT_MOON_CAKE);
				response.addInt(KeyID.KEY_EVENT_START_TIME, Misc.SECONDS(_start_use_button));
				response.addInt(KeyID.KEY_EVENT_END_TIME, Misc.SECONDS(_end_use_button));
			}
			
			if (_use_event_order)
			{
				response.addInt(KeyID.KEY_EVENT_MARKERS, 0);
				response.addString(KeyID.KEY_EVENT_GIFT_NUM, Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][userInfo.getLevel()][DatabaseID.CONSTANT_NUM_DROP_MOONCAKE]));
				response.addInt(KeyID.KEY_EVENT_CURRENT_TOTAL_NUM, userInfo.GetEventNum(KeyID.KEY_EVENT_EXPORT));
				response.addInt(KeyID.KEY_EVENT_ITEM_ID, DatabaseID.ITEM_EVENT_MOON_CAKE);
				response.addInt(KeyID.KEY_EVENT_START_TIME, Misc.SECONDS(_start_event_order));
				response.addInt(KeyID.KEY_EVENT_END_TIME, Misc.SECONDS(_end_event_order));
			}
			
			if (_use_event_happy_weekend)
			{
				response.addInt(KeyID.KEY_EVENT_MARKERS, GetEventMarkers());
				response.addString(KeyID.KEY_EVENT_GIFT_NUM, Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][userInfo.getLevel()][DatabaseID.CONSTANT_NUM_DROP_MOONCAKE]));
				response.addInt(KeyID.KEY_EVENT_CURRENT_TOTAL_NUM, userInfo.GetEventNum(KeyID.KEY_EVENT_EXPORT));
				response.addInt(KeyID.KEY_EVENT_ITEM_ID, DatabaseID.ITEM_EVENT_MOON_CAKE);
				response.addInt(KeyID.KEY_EVENT_START_TIME, Misc.SECONDS(_start_time_event_happy_weekend));
				response.addInt(KeyID.KEY_EVENT_END_TIME, Misc.SECONDS(_end_time_event_happy_weekend));
			}
			
			if (_use_event_uprade_pot)
			{
				response.addInt(KeyID.KEY_EVENT_MARKERS, GetEventMarkers());
				response.addString(KeyID.KEY_EVENT_GIFT_NUM, Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][userInfo.getLevel()][DatabaseID.CONSTANT_NUM_DROP_MOONCAKE]));
				response.addInt(KeyID.KEY_EVENT_CURRENT_TOTAL_NUM, userInfo.GetEventNum(KeyID.KEY_EVENT_UPGRADE_POT));
				response.addInt(KeyID.KEY_EVENT_ITEM_ID, DatabaseID.ITEM_EVENT_MOON_CAKE);
				response.addInt(KeyID.KEY_EVENT_START_TIME, Misc.SECONDS(_start_event_upgrade_pot));
				response.addInt(KeyID.KEY_EVENT_END_TIME, Misc.SECONDS(_end_event_upgrade_pot));
			}
			
			// chat
			response.addBoolean(KeyID.KEY_CHAT_ENABLE, GetChatStatus(client_platform, client_version));
			response.addString(KeyID.KEY_CHAT_ADDRESS, "120.138.76.46");
			response.addInt(KeyID.KEY_CHAT_PORT, 80);
			
			// game feature
			try
			{
				response.addBoolean(KeyID.KEY_USE_NPC_CUSTOME, ServerConfig().get("use_npc_custome_str") == 1);
				response.addBoolean(KeyID.KEY_SNOW, ServerConfig().get("use_snow_str") == 1);
				response.addBoolean(KeyID.KEY_FORTUNE_WHEEL, ServerConfig().get("use_fortune_wheel") == 1);
				response.addBoolean(KeyID.KEY_USE_NPC_FRIEND_GARDEN, ServerConfig().get("use_npc_at_friend_garden") == 1);
				response.addInt(KeyID.KEY_BROADCAST_FREQUENCY, ServerConfig().get("broadcast_frequence"));
				
				Object obj = DBConnector.GetMembaseServerForTemporaryData().Get("close_friend_link");
				if (obj != null) {
					response.addStringANSI(KeyID.KEY_CLOSE_FRIEND_LINK, (String)obj);
				}
				
				obj = DBConnector.GetMembaseServer(_user_id).Get(_user_id + "_" + "firstpay_bonus_order");
				
				if (IsServerHappy()) {
					obj = Misc.SECONDS() + 3 * 24 * 60 * 60;
				}
				
				if (obj != null) {
					_combo_manager.setOrderBonus(true);
					_combo_manager.setOrderBonusPercent(100);
					
					response.addBoolean(KeyID.KEY_PERSONAL_BONUS, true);
					response.addInt(KeyID.KEY_PERSONAL_BONUS_END_TIME, (int)obj);
					response.addInt(KeyID.KEY_PERSONAL_BONUS_GOLD, 100);
					response.addInt(KeyID.KEY_PERSONAL_BONUS_EXP, 100);
				} else {
					response.addBoolean(KeyID.KEY_PERSONAL_BONUS, false);
					response.addInt(KeyID.KEY_PERSONAL_BONUS_END_TIME, 0);
					response.addInt(KeyID.KEY_PERSONAL_BONUS_GOLD, 0);
					response.addInt(KeyID.KEY_PERSONAL_BONUS_EXP, 0);
				}
			}
			catch (Exception e)
			{
				LogHelper.LogException("login.KEY_USE_NPC_CUSTOME", e);
			}
			
			try
			{
				Object obj = DBConnector.GetMembaseServerForTemporaryData().Get(KeyID.KEY_EVENT_INFO);
				if (obj != null)
				{
					String event_info = (String)obj;
					String[] aos = event_info.split(";");
					if (aos.length >= 4)
					{
						String start = aos[0];
						String end = aos[1];
					
						SimpleDateFormat datef = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");

						long start_event = (datef.parse(start).getTime() - Misc.MILLISECONDS_OF_1_1_2010()) / 1000;
						long end_event = (datef.parse(end).getTime()  - Misc.MILLISECONDS_OF_1_1_2010()) / 1000;
						StringBuilder sb = new StringBuilder();
						sb.append(start_event);
						sb.append(':').append(end_event);
						sb.append(':').append(aos[2]);
						response.addString(KeyID.KEY_EVENT_INFO, sb.toString());
						LogHelper.LogHappy("Added key := " + KeyID.KEY_EVENT_INFO + ", value := " + sb.toString());
						
						_event_web_link = aos[3];
						LogHelper.LogHappy("_web_link := " + _event_web_link);
					}
				}
			}
			catch (Exception e)
			{
				LogHelper.LogException("login.KEY_EVENT_INFO", e);
			}
			
			// new offer system
			if (_use_new_offer)
			{
				if (_update_status == DatabaseID.VERSION_HAS_NOT_UPDATE && userInfo.getLevel() > 11)
				{
					if (UserOffer().isOfferUseable(UserOffer().getOfferBug()))
					{
						response.addBinary(KeyID.KEY_OFFER_BUG, UserOffer().getOfferData(UserOffer().getOfferBug()));
					}

					if (UserOffer().isOfferUseable(UserOffer().getOfferGem()))
					{
						response.addBinary(KeyID.KEY_OFFER_GEM, UserOffer().getOfferData(UserOffer().getOfferGem()));
					}

					if (UserOffer().isOfferUseable(UserOffer().getOfferLuckyLeafGreen()))
					{
						response.addBinary(KeyID.KEY_OFFER_LUCKY_LEAF_GREEN, UserOffer().getOfferData(UserOffer().getOfferLuckyLeafGreen()));
					}

					if (UserOffer().isOfferUseable(UserOffer().getOfferLuckyLeafPurple()))
					{
						response.addBinary(KeyID.KEY_OFFER_LUCKY_LEAF_PURPLE, UserOffer().getOfferData(UserOffer().getOfferLuckyLeafPurple()));
					}

//					if (GetUserOfferManager().isOfferUseable(GetUserOfferManager().getOfferFloor()))
//					{
//						response.addBinary(KeyID.KEY_OFFER_FLOOR, GetUserOfferManager().getOfferData(GetUserOfferManager().getOfferFloor()));
//					}
//					
//					if (GetUserOfferManager().isOfferUseable(GetUserOfferManager().getOfferMachine()))
//					{
//						response.addBinary(KeyID.KEY_OFFER_MACHINE, GetUserOfferManager().getOfferData(GetUserOfferManager().getOfferMachine()));
//					}

					if (UserOffer().isOfferUseable(UserOffer().getOfferGold()))
					{
						response.addBinary(KeyID.KEY_OFFER_GOLD, UserOffer().getOfferData(UserOffer().getOfferGold()));
					}
				}
			}
			
			if (_use_event_new_year_2015)
			{
				response.addInt(KeyID.KEY_NUM_GIFT_FROM_FRIEND, GetNumEventGiftFromFriend());
			}
			
			response.addInt(KeyID.KEY_BONUS_MARKER, GetBonusMarkers());
			
			if (_use_ref_code) {
                LogHelper.Log("received ref code := " + _ref_code);
				if (userInfo.getLevel() < 2 && (userInfo.getRefCode().equals("") || userInfo.getRefCode().equals("null"))) {
                    userInfo.setRefCode(_ref_code);
                    SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
                }
			}
			
			if (userInfo.getDeviceOS().equals("") && userInfo.getLevel() < 5) {
				userInfo.setDeviceOS(_client_OS);
				SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
			}
			
			if (_use_close_friend) {
				response.addBinary(KeyID.KEY_CLOSE_FRIEND, CloseFriend().GetData());
			}
			
			if (_use_treasure_trunk) {
				response.addBinary(KeyID.KEY_TREASURE, Trunk().GetData());
			}
		}

		try
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("login", ex);
		}
		
		// Log login
		String carrier_name = "unknownCarrier";
		String client_version = "unknownVersion";
		
		if (encrypt.hasKey(KeyID.KEY_USE_WIFI)) {
			useWifi = encrypt.getBoolean(KeyID.KEY_USE_WIFI);
		}
		
		if (encrypt.hasKey(KeyID.KEY_CARRIER_NAME)) {
			carrier_name = encrypt.getString(KeyID.KEY_CARRIER_NAME);
		}
		
		if (encrypt.hasKey(KeyID.KEY_VERSION_NUMBER)) {
			client_version	= encrypt.getString(KeyID.KEY_VERSION_NUMBER);
		}
		
		if (encrypt.hasKey(KeyID.APPFLYER_MEDIA_SOURCE_KEY)){
			_appflyer_media_source = encrypt.getString(KeyID.APPFLYER_MEDIA_SOURCE_KEY);
		}
		if (encrypt.hasKey(KeyID.APPFLYER_CAMPAIGN_NAME_KEY)){
			_appflyer_campaign_name = encrypt.getString(KeyID.APPFLYER_CAMPAIGN_NAME_KEY);
		}
		if (encrypt.hasKey(KeyID.APPFLYER_COMPAIGN_ID_KEY)){
			_appflyer_campaign_id = encrypt.getString(KeyID.APPFLYER_COMPAIGN_ID_KEY);
		}
		if (encrypt.hasKey(KeyID.APPFLYER_IS_FB_KEY)){
			_appflyer_is_fb = encrypt.getString(KeyID.APPFLYER_IS_FB_KEY);
		}
		if (encrypt.hasKey(KeyID.APPFLYER_ADGROUP_NAME_KEY)){
			_appflyer_adgroup_name = encrypt.getString(KeyID.APPFLYER_ADGROUP_NAME_KEY);
		}
		if (encrypt.hasKey(KeyID.APPFLYER_ADGROUP_ID_KEY)){
			_appflyer_adgroup_id = encrypt.getString(KeyID.APPFLYER_ADGROUP_ID_KEY);
		}
		if (encrypt.hasKey(KeyID.APPFLYER_ADSET_NAME_KEY)){
			_appflyer_adset_name = encrypt.getString(KeyID.APPFLYER_ADSET_NAME_KEY);
		}
		if (encrypt.hasKey(KeyID.APPFLYER_ADSET_ID_KEY))
		{
			_appflyer_adset_id = encrypt.getString(KeyID.APPFLYER_ADSET_ID_KEY);
		}
		if (encrypt.hasKey(KeyID.APPFLYER_AD_ID_KEY)){
			_appflyer_ad_id = encrypt.getString(KeyID.APPFLYER_AD_ID_KEY);
		}
		if (encrypt.hasKey(KeyID.APPFLYER_AF_SITEID_KEY)){
			_appflyer_af_siteid = encrypt.getString(KeyID.APPFLYER_AF_SITEID_KEY);
		}
		if (encrypt.hasKey(KeyID.APPFLYER_AF_SUB1_KEY)){
			_appflyer_af_sub1 = encrypt.getString(KeyID.APPFLYER_AF_SUB1_KEY);
		}
		if (encrypt.hasKey(KeyID.APPFLYER_AF_SUB2_KEY)){
			_appflyer_af_sub2 = encrypt.getString(KeyID.APPFLYER_AF_SUB2_KEY);
		}
		if (encrypt.hasKey(KeyID.APPFLYER_AF_SUB3_KEY)){
			_appflyer_af_sub3 = encrypt.getString(KeyID.APPFLYER_AF_SUB3_KEY);
		}
		if (encrypt.hasKey(KeyID.APPFLYER_AF_SUB4_KEY)){
			_appflyer_af_sub4 = encrypt.getString(KeyID.APPFLYER_AF_SUB4_KEY);
		}
		if (encrypt.hasKey(KeyID.APPFLYER_AF_SUB5_KEY)){
			_appflyer_af_sub5 = encrypt.getString(KeyID.APPFLYER_AF_SUB5_KEY);
		}
		if (encrypt.hasKey(KeyID.APPFLYER_INSTALL_TIME_KEY)){
			_appflyer_install_time = encrypt.getString(KeyID.APPFLYER_INSTALL_TIME_KEY);
		}
		if (encrypt.hasKey(KeyID.APPFLYER_ID)) {
			_appflyer_af_id = encrypt.getString(KeyID.APPFLYER_ID);
		}

		long end_login_time = System.currentTimeMillis();
		LogHelper.logLogIn(userInfo, money_mgr, _ip, SkyGarden._server_id, _session_id, _device_name, _device_firmware, ReturnCode.RESPONSE_OK, useWifi, carrier_name, _distributor, client_version, friend_mgr.GetSize(), end_login_time - start_login_time);
		
		// get pig id
		try
		{
			_pig_id = encrypt.getString(KeyID.PIG_ID);
			if (encrypt.hasKey(KeyID.PIG_ID)) {
				_pig_id = encrypt.getString(KeyID.PIG_ID);
				userInfo.setPigID(_pig_id);
				LogHelper.Log("Receive pig id := " + _pig_id);
			}
//			if (isClientIOS())
//			{
//				_pig_id = encrypt.getString(KeyID.PIG_ID);
//				userInfo.setAndroidID("empty_android_id");
//				userInfo.setAdvertisingID("empty_advertising_id");
//				userInfo.setPigID(_pig_id);
//			} else if (isClientAndroid() && encrypt.hasKey(KeyID.PIG_ID)) {
//				_pig_id = encrypt.getString(KeyID.PIG_ID);
//				userInfo.setAndroidID(Misc.GetAndroidID(_pig_id));
//				userInfo.setAdvertisingID(Misc.GetAndroidAdvertisingID(_pig_id));
//				userInfo.setPigID(_pig_id);
//			}
		} catch (Exception e) {
			LogHelper.LogException("GetPigID", e);
		}
		
		StringBuilder piglog = new StringBuilder();
		piglog.append(Misc.getCurrentDateTime());		//  1. thoi gian dang nhap
		piglog.append('\t').append("LogIn");
		piglog.append('\t').append(_pig_id);
		piglog.append('\t').append("CGMFBS");
		piglog.append('\t').append(SkyGarden._server_id);
		piglog.append('\t').append(_client_OS);
		piglog.append('\t').append(_user_id);
		piglog.append('\t').append(_session_id);
		piglog.append('\t').append(userInfo.getLevel());
		piglog.append('\t').append(money_mgr.GetRealMoney() + money_mgr.GetBonusMoney());
		piglog.append('\t').append(userInfo.getExp());
		LogHelper.Log(LogHelper.LogType.PIG_LOG, piglog.toString());

		try
		{
			logSnapShot();
		}
		catch (Exception e)
		{
			LogHelper.LogException("login.logSnapShot", e);
		}
		
		_load_result = true;
	}
	
	private void ExecuteBeforeLoginUpdate()
	{
		if (Misc.InEvent(_start_time_event_big_offer, _end_time_event_big_offer))
		{
			_use_event_big_offer = true;
		}

		if (Misc.InEvent(_start_time_event_export, _end_time_event_export))
		{
			_use_event_export = true;
		}

		_start_time_event_x2 = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_EVENT_GLOBAL][0][DatabaseID.EVENT_GLOBAL_START_DATE]);
		_end_time_event_x2 = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_EVENT_GLOBAL][0][DatabaseID.EVENT_GLOBAL_END_DATE]);
		if (Misc.InEvent(_start_time_event_x2, _end_time_event_x2))
		{
			_use_event_x2 = true;
		}
		
		_start_use_button = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_EVENT_GLOBAL][21][DatabaseID.EVENT_GLOBAL_START_DATE]);
		_end_use_button = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_EVENT_GLOBAL][21][DatabaseID.EVENT_GLOBAL_END_DATE]);
		if (Misc.InEvent(_start_use_button, _end_use_button))
		{
			_use_event_button = true;
		}

		_start_time_event_happy_weekend = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_EVENT_GLOBAL][6][DatabaseID.EVENT_GLOBAL_START_DATE]);
		_end_time_event_happy_weekend = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_EVENT_GLOBAL][6][DatabaseID.EVENT_GLOBAL_END_DATE]);
		if(Misc.InEvent(_start_time_event_happy_weekend, _end_time_event_happy_weekend))
		{
//			_use_event_happy_weekend = true;
		}

		_start_time_event_halloween = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_EVENT_GLOBAL][2][DatabaseID.EVENT_GLOBAL_START_DATE]);
		_end_time_event_halloween = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_EVENT_GLOBAL][2][DatabaseID.EVENT_GLOBAL_END_DATE]);
		if (Misc.InEvent(_start_time_event_halloween, _end_time_event_halloween))
		{
			_use_event_halloween = true;
			_use_stock_event = true;
		}
		
		_start_time_event_xmas_2014 = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_EVENT_GLOBAL][16][DatabaseID.EVENT_GLOBAL_START_DATE]);
		_end_time_event_xmas_2014 = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_EVENT_GLOBAL][16][DatabaseID.EVENT_GLOBAL_END_DATE]);
		if (Misc.InEvent(_start_time_event_xmas_2014, _end_time_event_xmas_2014))
		{
			_use_event_xmas_2014 = true;
			_use_stock_event = true;
		}

		_start_time_event_20_11 = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_EVENT_GLOBAL][3][DatabaseID.EVENT_GLOBAL_START_DATE]);
		_end_time_event_20_11 = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_EVENT_GLOBAL][3][DatabaseID.EVENT_GLOBAL_END_DATE]);
		if (Misc.InEvent(_start_time_event_20_11, _end_time_event_20_11))
		{
			_use_event_20_11 = true;
		}
		
		_start_time_event_xmas_mini = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_EVENT_GLOBAL][18][DatabaseID.EVENT_GLOBAL_START_DATE]);
		_end_time_event_xmas_mini = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_EVENT_GLOBAL][18][DatabaseID.EVENT_GLOBAL_END_DATE]);
		if (Misc.InEvent(_start_time_event_xmas_mini, _end_time_event_xmas_mini))
		{
			_use_event_xmas_mini = true;
		}
		
		_start_time_event_xmas_tree = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_EVENT_GLOBAL][17][DatabaseID.EVENT_GLOBAL_START_DATE]);
		_end_time_event_xmas_tree = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_EVENT_GLOBAL][17][DatabaseID.EVENT_GLOBAL_END_DATE]);
		if (Misc.InEvent(_start_time_event_xmas_tree, _end_time_event_xmas_tree))
		{
			_use_event_xmas_tree = true;
			_use_stock_event = true;
		}
		
		_start_time_event_new_year_2015 = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_EVENT_GLOBAL][19][DatabaseID.EVENT_GLOBAL_START_DATE]);
		_end_time_event_new_year_2015 = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_EVENT_GLOBAL][19][DatabaseID.EVENT_GLOBAL_END_DATE]);
		if (Misc.InEvent(_start_time_event_new_year_2015, _end_time_event_new_year_2015))
		{
			_use_event_new_year_2015 = true;
			_use_stock_event = true;
		}
		
		_start_time_event_new_comer = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_EVENT_GLOBAL][23][DatabaseID.EVENT_GLOBAL_START_DATE]);
		_end_time_event_new_comer = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_EVENT_GLOBAL][23][DatabaseID.EVENT_GLOBAL_END_DATE]);
		if (Misc.InEvent(_start_time_event_new_comer, _end_time_event_new_comer))
		{
			_use_event_new_comer = true;
		}
		
		_start_time_event_8_3_2015 = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_EVENT_GLOBAL][22][DatabaseID.EVENT_GLOBAL_START_DATE]);
		_end_time_event_8_3_2015 = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_EVENT_GLOBAL][22][DatabaseID.EVENT_GLOBAL_END_DATE]);
		if (Misc.InEvent(_start_time_event_8_3_2015, _end_time_event_8_3_2015))
		{
			_use_event_8_3_2015 = true;
			_use_stock_event = true;
		}
		
		_start_event_upgrade_pot = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_EVENT_GLOBAL][12][DatabaseID.EVENT_GLOBAL_START_DATE]);
		_end_event_upgrade_pot = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_EVENT_GLOBAL][12][DatabaseID.EVENT_GLOBAL_END_DATE]);
		if (Misc.InEvent(_start_event_upgrade_pot, _end_event_upgrade_pot))
		{
			_use_event_uprade_pot = true;
		}
		
		_start_event_order = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_EVENT_GLOBAL][20][DatabaseID.EVENT_GLOBAL_START_DATE]);
		_end_event_order = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_EVENT_GLOBAL][20][DatabaseID.EVENT_GLOBAL_END_DATE]);
		if (Misc.InEvent(_start_event_order, _end_event_order))
		{
			_use_event_order = true;
		}
		
		LogHelper.LogHappy("_use_event_uprade_pot := " + _use_event_uprade_pot);
		LogHelper.LogHappy("_use_event_xmas_2014 := " + _use_event_xmas_2014);
		LogHelper.LogHappy("_use_event_halloween := " + _use_event_halloween);
		LogHelper.LogHappy("_use_event_xmas_tree := " + _use_event_xmas_tree);
		LogHelper.LogHappy("_use_event_new_year_2015 := " + _use_event_new_year_2015);
		LogHelper.LogHappy("_use_event_order := " + _use_event_order);
		LogHelper.LogHappy("_use_stock_event := " + _use_stock_event);
		LogHelper.LogHappy("_use_event_8_3_2015 := " + _use_event_8_3_2015);
	}
	
	private void ExecuteAfterLoginUpdate()
	{		
		// update login time
		userInfo.SetLastLoginTime(userInfo.GetCurrentLoginTime());
		userInfo.SetCurrentLoginTime((int)(System.currentTimeMillis()/1000));
		userInfo.SetLastServerID(SkyGarden._server_id);
		
		// update ip
		userInfo.SetUserIP(_ip + "," + SkyGarden._server_id);
		
		// update records
		userInfo.updateRevenu();
		userInfo.updateOrderNum();
		
		// save new changes
		if (!_use_lazy_sync_user_info)
		{
			SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
		}
		
		boolean new_day = GetUserInfo().GetLastLoginTime() < Misc.GetServerCurrentResetTime();
		
		// revert reset owl power (new date & reset)
		// reset owl's power khi qua ngay moi
		if (bUseOwl)
		{
			if (new_day)
			{
				owl.resetPower();
			}

			if (owl.isNeedSave() || new_day)
			{
				SET_DB_VALUE_BINARY(KeyID.KEY_OWL, owl.getData());
			}
		}
		
		// reset enter_num khi qua ngay moi
		if (new_day && bUseGiftCode)
		{
			giftCodeEnter.resetEnterNum();
			SET_DB_VALUE_BINARY(KeyID.KEY_GIFT_CODE_ENTER, giftCodeEnter.getData());
		}
		
		if (new_day && bUseDailyGift)
		{
			dailygift.resetDailyGift();
			dailygift.initGifts(userInfo.getLevel());
			SET_DB_VALUE_BINARY(KeyID.KEY_DAILY_GIFT, dailygift.getData());
		}
		
		// reset order
		boolean need_save_order = false;
		if (orderManager.getOrderCount() > DatabaseID.ORDER_DAILY_INDEX && orderManager.isNewDate() && orderManager.getOrderDailyResetTime() > 0)
		{
			orderManager.resetDailyOrder();
			int _order_index = DatabaseID.ORDER_DAILY_INDEX;
			orderManager.createOrder(DatabaseID.ORDER_DAILY, _order_index, getRandomProducts(_order_index), null, machine, floor, userInfo.getLevel(), _is_order_bug_pearl, ComboManager().GetBonusDailyOrder(), ComboManager().GetBonusNormalOrder());
			need_save_order = true;
		}

		for (int i = 0; i < orderManager.getOrderCount(); i++)
		{
			Order _order = orderManager.getOrder(i);

			if (_order.getNewWaitTime() > 0 && _order.getNewWaitTime() - Misc.SECONDS() <= 0)
			{
				orderManager.createOrder(_order.getType(), i, getRandomProducts(i), null, machine, floor, userInfo.getLevel(), _is_order_bug_pearl, ComboManager().GetBonusDailyOrder(), ComboManager().GetBonusNormalOrder());

				if (_order.getType() == DatabaseID.ORDER_DAILY && orderManager.getTotalDeliveredNum() >= orderManager.getOrderDailyFreeMax() && orderManager.getTotalDeliveredNum() > 0)
				{
					Order new_order_daily = orderManager.getOrder(i);
					int diamond_need = Misc.initReceiveDailyOrderDiamond(userInfo.getLevel(),  orderManager.getOrderDailyPaidDeliveredNum(), new_order_daily.getRewardExp());
					new_order_daily.setReceiveDailyOrderDiamond(diamond_need);
				}

				// LogHelper.Log("--------- Create new Order when login: OK!"); 
				need_save_order = true;
			}
		}
		
		if (need_save_order)
		{
			SET_DB_VALUE_BINARY(KeyID.KEY_ORDER, orderManager.getData());
		}
		
		// Chaos's request: auto select 4 orders when newday
		if (new_day)
		{
			SetDefaultOrderSelection();
		}
		
		if (machineRepairLimit.isNewDate())
		{
			SET_DB_VALUE_BINARY(KeyID.KEY_MACHINES_REPAIR_LIMIT, machineRepairLimit.getData());
		}
		
		if (BugInfo.isEmpty())
		{
			catched_bug = true;
		}		
		
		if (_use_airship) 
		{
			// update airship status
			int airship_status = GetAirship().GetStatus();
			switch (airship_status)
			{
				case DatabaseID.AIRSHIP_LOCKED:
					break;
				case DatabaseID.AIRSHIP_PENDING:
					if (Misc.SECONDS() > GetAirship().GetUnlockTime())
					{

						GetAirship().SetStatus(DatabaseID.AIRSHIP_LANDING);
						GetAirship().Save();
					}
					break;
				case DatabaseID.AIRSHIP_UNLOCKED:
				{
					GetAirship().SetStatus(DatabaseID.AIRSHIP_LANDING);
					GetAirship().Save();
				}
					break;
				case DatabaseID.AIRSHIP_LANDING:
					if (Misc.SECONDS() > GetAirship().GetDepartTime())
					{
						GetAirship().GetCargoList().clear();
						GetAirship().GenerateRequest(GetUserInfo().getLevel(), ComboManager().GetAirshipBonusExp(), ComboManager().GetAirshipBonusGold());
						int seconds_pass_depart_time = Misc.SECONDS() - GetAirship().GetDepartTime();
						if (seconds_pass_depart_time > GetAirship().GetLeaveDuration(GetAirship().GetId()))
						{
							GetAirship().SetStatus(DatabaseID.AIRSHIP_LANDING);
							GetAirship().SetLastLandingTime(Misc.SECONDS() - 20);
							GetAirship().SetDepartTime(Misc.SECONDS() + GetAirship().GetStayDuration(GetAirship().GetId()));
							GetAirship().SetNextLandingTime(GetAirship().GetDepartTime() + GetAirship().GetLeaveDuration(GetAirship().GetId()));
						}
						else
						{
							GetAirship().SetStatus(DatabaseID.AIRSHIP_DEPARTING);
							GetAirship().SetNextLandingTime(Misc.SECONDS() + (GetAirship().GetLeaveDuration(GetAirship().GetId()) - seconds_pass_depart_time));
							GetAirship().SetDepartTime(GetAirship().GetNextLandingTime() + GetAirship().GetStayDuration(GetAirship().GetId()));
						}
						
						GetAirship().Save();
						SetNotifyStatus(_user_id, GetNotifyIndex(DatabaseID.NOTIFY_TYPE_AIRSHIP, -1), false);
					}
					break;
				case DatabaseID.AIRSHIP_DEPARTING:
					if (Misc.SECONDS() > GetAirship().GetNextLandingTime())
					{
						GetAirship().SetDepartTime(Misc.SECONDS() + GetAirship().GetStayDuration(GetAirship().GetId()));
						GetAirship().SetLastLandingTime(Misc.SECONDS() - 5);
						GetAirship().SetStatus(DatabaseID.AIRSHIP_LANDING);
						GetAirship().Save();
					}
					break;
				case DatabaseID.AIRSHIP_FULL:
					break;
			}
			
			if (new_day)
			{
				GetAirship().SetAirshipNum(0);
				GetAirship().Save();
			}
		}
		
		try 
		{
			if (new_day)
			{
				DumpDailySnapshot();
			}
		}
		catch (Exception e) 
		{
			LogHelper.LogException("DumpDailySnapshot", e);
		}
		
		_offer = null;
		
		// refresh fortune
		if (_use_fortune && userInfo.getLevel() >= 16 && fortune_manager != null && (new_day || fortune_manager.GetLastGenTime() < Misc.GetServerCurrentResetTime()))
		{
			fortune_manager.GetFortuneList().clear();
			fortune_manager.Gen();
			fortune_manager.Save();
			SET_DB_VALUE_BINARY(KeyID.KEY_FORTUNE, fortune_manager.GetDataToBase());
		}
		
		if (new_day && _use_event_mid_autumn_festival && _update_status == DatabaseID.VERSION_HAS_NOT_UPDATE)
		{
			String gift_name = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][26][DatabaseID.GIFT_INFO_NAME]);
			String gift_desc = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][26][DatabaseID.GIFT_INFO_DESCRIPTION]);
			String gift_list = DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_MOON_CAKE + ":" + GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, 4);

			gift_mgr.AddGiftBox(gift_name,	gift_desc,	gift_list);
			gift_mgr.SaveDataToDatabase(KeyID.KEY_GIFT);
		}
		
		// update floor achivement
//		if (_use_achievement && GetAchievementManager().GetAchievement(GetAchievementManager().GetAchievementIndex(CommandID.CMD_OPEN_NEW_FLOOR, -1)).getTotal() < userInfo.getTotalFloor())
//		{
//			for (int i = 0; i < userInfo.getTotalFloor(); i++)
//			{
//				GetAchievementManager().Increase(CommandID.CMD_OPEN_NEW_FLOOR, 1);
//			}
//		}
		
		// copy old friendlist to new friendlist
		if (friend_mgr.GetFriendList().equals("") || friend_mgr.GetFriendList().length() == 0)
		{
			String list = "";
			try
			{
				list = (String)DBConnector.GetMembaseServer(_user_id).Get(_user_id + "_" + KeyID.KEY_FRIENDS);
			}
			catch (Exception e)
			{
				list = "";
			}
			
			if (list != null && list.length() > 0)
			{
				String[] aos = list.split(";");
				for (String s : aos)
				{
					friend_mgr.AddFriend(s, FriendManager.TYPE.FACEBOOK);
				}
			}
		}
		
		// add random friends for user
		if ((_use_new_dailygift) && friend_mgr.GetSize() < 10)
		{
			if (IsServerHappy()) {
				friend_mgr.AddFriend("MAC00:bb:3a:39:7e:ef", FriendManager.TYPE.ZING);
				friend_mgr.AddFriend("585955685c59616459666366345b61555d60225763610xff27292d27292d24292b262a262a2825", FriendManager.TYPE.ZING);
				friend_mgr.AddFriend("1855608568_985006149", FriendManager.TYPE.ZING);
				friend_mgr.AddFriend("1855653323_985762464", FriendManager.TYPE.ZING);
				friend_mgr.AddFriend("60556a555560636259345b61555d60225763610xff27292c29242a24282d2725242b262d", FriendManager.TYPE.ZING);
				LogHelper.LogHappy("Added friend, size := " + friend_mgr.GetSize());
			} else {
				int num = 10 - friend_mgr.GetSize();
				for (int i = 0; i < num && SkyGarden.ActiveUsers().size() > 10; i++)
				{
					friend_mgr.AddFriend(SkyGarden.ActiveUsers().get(Misc.RANDOM_RANGE(0, SkyGarden.ActiveUsers().size() - 1)), FriendManager.TYPE.ZING);
				}
			}

			friend_mgr.SaveFriendListToDatabase(KeyID.KEY_FRIENDS);
		}

		// remove item moon cake from drop list
		if (_update_status != DatabaseID.VERSION_HAS_NOT_UPDATE || (!_use_event_mid_autumn_festival && !_use_event_20_11 && !_use_event_xmas_tree && !_use_event_xmas_mini && !_use_event_new_year_2015 && !_use_event_8_3_2015))
		{
			if (ArrayUtils.indexOf(DropItemList, DatabaseID.DROP_ITEM_BANH_TRUNG_THU) != ArrayUtils.INDEX_NOT_FOUND)
			{
				DropItemList = ArrayUtils.removeElement(DropItemList, DatabaseID.DROP_ITEM_BANH_TRUNG_THU);
			}
			
			if (ArrayUtils.indexOf(DropItemListFriendHome, DatabaseID.DROP_ITEM_BANH_TRUNG_THU) != ArrayUtils.INDEX_NOT_FOUND)
			{
				DropItemListFriendHome = ArrayUtils.removeElement(DropItemListFriendHome, DatabaseID.DROP_ITEM_BANH_TRUNG_THU);
				LogHelper.LogHappy("removed drop item banh trung thu");
			}
		}
		
		if (_use_event_export)
		{
			try
			{
				handleReceiveGiftEventExport();
			}
			catch (Exception e)
			{
				LogHelper.LogException("handleReceiveGiftEventExport", e);
			}
		}
		
		if (_update_status != DatabaseID.VERSION_HAS_NOT_UPDATE || userInfo.getLevel() < 11)
		{
			_use_event_halloween = false;
			_use_event_xmas_2014 = false;
//			_use_stock_event = false;
		}
		
		if (_update_status != DatabaseID.VERSION_HAS_NOT_UPDATE || userInfo.getLevel() < 11)
		{
			_use_event_20_11 = false;
			_use_event_xmas_tree = false;
			_use_stock_event = false;
			_use_event_xmas_mini = false;
			_use_event_new_year_2015 = false;
			_use_event_8_3_2015 = false;
			_use_stock_event = false;
		}

		if (!_use_event_halloween && !_use_event_xmas_2014)
		{
			// remove item event 1 2 3 in drop list
			int[] tmp = DropItemList;
			for (int drop_id : DropItemList)
			{
				if (drop_id == DatabaseID.DROP_ITEM_EVENT_1 || drop_id == DatabaseID.DROP_ITEM_EVENT_2 || drop_id == DatabaseID.DROP_ITEM_EVENT_3)
				{
					tmp = ArrayUtils.removeElement(tmp, drop_id);
				}
			}
			DropItemList = tmp;
			
			int[] tmp_2 = DropItemListFriendHome;
			for (int drop_id : DropItemListFriendHome)
			{
				if (drop_id == DatabaseID.DROP_ITEM_EVENT_1 || drop_id == DatabaseID.DROP_ITEM_EVENT_2 || drop_id == DatabaseID.DROP_ITEM_EVENT_3)
				{
					tmp_2 = ArrayUtils.removeElement(tmp_2, drop_id);
				}
			}
			DropItemListFriendHome = tmp_2;			
		}
		
		if (!_use_event_halloween)
		{
			_banned_ibshop_package = _banned_ibshop_package + ";" + "75;76;77;78";
		}
		
		if (!_use_event_xmas_2014)
		{
			_banned_ibshop_package = _banned_ibshop_package + ";" + "80;81;82;83";
		}
		
		if (!_use_event_xmas_mini)
		{
			_banned_ibshop_package = _banned_ibshop_package + ";" + "87";
		}
		
		// add gift event halloween
		if (new_day && _use_event_halloween)
		{
			String gift_name = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][37][DatabaseID.GIFT_INFO_NAME]);
			String gift_desc = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][37][DatabaseID.GIFT_INFO_DESCRIPTION]);
			
			StringBuilder gift_list = new StringBuilder();
			gift_list.append(DatabaseID.IT_EVENT);
			gift_list.append(':').append(DatabaseID.ITEM_EVENT_HALLOWEEN_1);
			gift_list.append(':').append(5);
			gift_list.append(':').append(DatabaseID.IT_EVENT);
			gift_list.append(':').append(DatabaseID.ITEM_EVENT_HALLOWEEN_2);
			gift_list.append(':').append(3);
			gift_list.append(':').append(DatabaseID.IT_EVENT);
			gift_list.append(':').append(DatabaseID.ITEM_EVENT_HALLOWEEN_3);
			gift_list.append(':').append(1);

			gift_mgr.AddGiftBox(gift_name,	gift_desc,	gift_list.toString());
			gift_mgr.SaveDataToDatabase(KeyID.KEY_GIFT);
		}
		
		// add gift event xmas
		if (new_day && _use_event_xmas_2014)
		{
			String gift_name = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][37][DatabaseID.GIFT_INFO_NAME]);
			String gift_desc = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][37][DatabaseID.GIFT_INFO_DESCRIPTION]);
			
			StringBuilder gift_list = new StringBuilder();
			gift_list.append(DatabaseID.IT_EVENT);
			gift_list.append(':').append(DatabaseID.ITEM_EVENT_XMAS_2014_1);
			gift_list.append(':').append(6);
			gift_list.append(':').append(DatabaseID.IT_EVENT);
			gift_list.append(':').append(DatabaseID.ITEM_EVENT_XMAS_2014_2);
			gift_list.append(':').append(6);

			gift_mgr.AddGiftBox(gift_name,	gift_desc,	gift_list.toString());
			gift_mgr.SaveDataToDatabase(KeyID.KEY_GIFT);
		}
		
		if (new_day && _use_event_20_11)
		{
			String gift_name = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][37][DatabaseID.GIFT_INFO_NAME]);
			String gift_desc = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][37][DatabaseID.GIFT_INFO_DESCRIPTION]);
			String gift_list = DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_FLOWER_20_11 + ":" + GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, 4);

			gift_mgr.AddGiftBox(gift_name,	gift_desc,	gift_list);
			gift_mgr.SaveDataToDatabase(KeyID.KEY_GIFT);
		}
		
		if (new_day && _use_event_xmas_mini)
		{
			String gift_name = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][37][DatabaseID.GIFT_INFO_NAME]);
			String gift_desc = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][37][DatabaseID.GIFT_INFO_DESCRIPTION]);
			String gift_list = DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_XMAS_2014_1 + ":" + GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, 4);

			gift_mgr.AddGiftBox(gift_name,	gift_desc,	gift_list);
			gift_mgr.SaveDataToDatabase(KeyID.KEY_GIFT);
		}

		if (new_day && _use_event_xmas_tree)
		{
			String gift_name = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][37][DatabaseID.GIFT_INFO_NAME]);
			String gift_desc = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][37][DatabaseID.GIFT_INFO_DESCRIPTION]);
			String gift_list = DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_CANDLE + ":" + GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, 4);

			gift_mgr.AddGiftBox(gift_name,	gift_desc,	gift_list);
			gift_mgr.SaveDataToDatabase(KeyID.KEY_GIFT);
		}
		
		if (new_day && _use_event_new_year_2015)
		{
			String gift_name = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][49][DatabaseID.GIFT_INFO_NAME]);
			String gift_desc = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][49][DatabaseID.GIFT_INFO_DESCRIPTION]);
			String gift_list = DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_BANH_CHUNG + ":" + GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, 4);

			gift_mgr.AddGiftBox(gift_name,	gift_desc,	gift_list);
			gift_mgr.SaveDataToDatabase(KeyID.KEY_GIFT);
		}
		
		if (new_day && _use_event_8_3_2015)
		{
			String gift_name = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][49][DatabaseID.GIFT_INFO_NAME]);
			String gift_desc = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][49][DatabaseID.GIFT_INFO_DESCRIPTION]);
			String gift_list = DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_GLASS_ROSE + ":" + GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, 4);

			gift_mgr.AddGiftBox(gift_name,	gift_desc,	gift_list);
			gift_mgr.SaveDataToDatabase(KeyID.KEY_GIFT);
		}
		
//		if (_use_event_8_3_2015) {
//			if (GameUtil.GetUserMisc(_user_id).Get("reset_8_3_2015_1").equals("")) {
//				GameUtil.GetUserMisc(_user_id).Set("reset_8_3_2015_1", Misc.getCurrentDateTime());
//				userInfo.SetEventNum(KeyID.KEY_EVENT_8_3_2015, 0);
//				SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
//			}
//		}

		// create order halloween
		if ((_use_event_halloween || _use_event_xmas_2014) && userInfo.getLevel() >= 11/* && orderManager.order.size() < 9*/) {
			orderManager.createOrderEvent(machine, floor, userInfo.getLevel());
		} else {
			orderManager.deleteOrderEvent();
		}

		// check receive gift event halloween
		if (_use_event_halloween)
		{
			handleReceiveGiftEventHalloween();
		}
		else if (_use_event_20_11)
		{
			checkReceiveGiftEvent2011();
		}
		else if (_use_event_xmas_mini)
		{
			checkReceiveGiftEventXmasMini();
		}
		else if (_use_event_xmas_tree)
		{
			handleReceiveGiftEventXmasTree();
			handleReceiveGiftEventXmasTreeAllServer();
		}
		else if (_use_event_new_year_2015)
		{
			handleReceiveGiftEventNewYear2015();
		}
		else if (_use_event_8_3_2015)
		{
			handleReceiveGiftEvent8March2015();
		}
		else if (_use_event_uprade_pot)
		{
			handleReceiveGiftEventUpgradePot();
		}
		else if (_use_event_xmas_2014)
		{
			handleReceiveGiftEventXmas2014();
		}
		else if (_use_event_order)
		{
			handleReceiveGiftEventOrder();
		}
		
		// update offer
		try {
			UpdateOfferFirstpay();
			UpdateOffer();
		} catch (Exception e) {
			LogHelper.LogException("UpdateOffer", e);
		}
		
		if ((_use_new_dailygift) && (new_day))
		{
			// check reset time daily gift
			if (Misc.SECONDS() > NewDailyGift().getNextResetTime()) {
				LogHelper.LogHappy("Reset daily gift");
				NewDailyGift().init();
				SET_DB_VALUE_BINARY(KeyID.KEY_NEW_DAILYGIFT, NewDailyGift().GetData());
			}
			
			// check login count
			NewDailyGift().increaseAttendCount();

			if (NewDailyGift().getAttendCount() < NewDailyGift().getAttendMax() &&
				!NewDailyGift().GetDay(NewDailyGift().getAttendCount()).isAttend())
			{
				NewDailyGift().GetDay(NewDailyGift().getAttendCount()).setAttend(true);
				
				gift_mgr.AddGiftBox(Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][60][DatabaseID.GIFT_INFO_NAME]), 
					Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][60][DatabaseID.GIFT_INFO_DESCRIPTION]).replace("%d", (NewDailyGift().getAttendCount() + 1) + ""),
					NewDailyGift().GetDay(NewDailyGift().getAttendCount()).getGift());
				gift_mgr.SaveDataToDatabase(KeyID.KEY_GIFT);
				
				SET_DB_VALUE_BINARY(KeyID.KEY_NEW_DAILYGIFT, NewDailyGift().GetData());
				LogHelper.LogHappy("Add gift daily login, day := " + NewDailyGift().getAttendCount());
				
				SkyGarden.ActiveUsers().put(SkyGarden.ActiveUsers().size(), _device_id);
			}
		}
		
		
		// compensate user zalo
//		if (_user_id >= 2577043 && _user_id < 2625905) {
//			if (!userInfo.GetZaloID().equals("null") && GameUtil.GetUserMisc(_user_id).Get("compensate_zalo").equals("")) {
//				GameUtil.GetUserMisc(_user_id).Set("compensate_zalo", Misc.getCurrentDateTime());
//				String gift_name = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][29][DatabaseID.GIFT_INFO_NAME]);
//				String gift_desc = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][29][DatabaseID.GIFT_INFO_DESCRIPTION]);
//				String gift_list = DatabaseID.IT_MONEY + ":" + DatabaseID.DIAMOND_ID + ":" + 40;
//
//				gift_mgr.AddGiftBox(gift_name,	gift_desc,	gift_list);
//				gift_mgr.SaveDataToDatabase(KeyID.KEY_GIFT);
//			}
//		}
		
//		GameUtil.AddGiftToMailBox("12/04/2015 06:00:00", "12/04/2015 24:00:00", _user_id, "gift_birthday_2015",
//			Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][62][DatabaseID.GIFT_INFO_NAME]),
//			Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][62][DatabaseID.GIFT_INFO_DESCRIPTION]),
//			Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][62][DatabaseID.GIFT_INFO_ITEMS_LIST]));
		
		try {
			if (_use_user_birthday && !userInfo.GetFacebookBirthday().equals("null")) {
				Calendar cal = Calendar.getInstance();
				int cur_year = cal.get(Calendar.YEAR);
				
				if (GameUtil.GetUserMisc(_user_id).Get("birthday_gift_" + cur_year).equals("")) {
					int cur_month = cal.get(Calendar.MONTH);
					int cur_day = cal.get(Calendar.DAY_OF_MONTH);
//					LogHelper.LogHappy("current month := " + cur_month + ", current day := " + cur_day);

					cal.setTime(new SimpleDateFormat("MM/dd/yyyy").parse(userInfo.GetFacebookBirthday()));
					int user_month = cal.get(Calendar.MONTH);
					int user_day = cal.get(Calendar.DAY_OF_MONTH);
//					LogHelper.LogHappy("user month := " + cur_month + ", user day := " + cur_day);

					if (cur_month == user_month) {
						boolean is_birthday = Math.abs(cur_day - user_day) <= 3;
						if (is_birthday) {
							gift_mgr.AddGiftBox(Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][63][DatabaseID.GIFT_INFO_NAME]), 
												Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][63][DatabaseID.GIFT_INFO_DESCRIPTION]),
												Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][63][DatabaseID.GIFT_INFO_ITEMS_LIST]));
							
							GameUtil.GetUserMisc(_user_id).Set("birthday_gift_" + cur_year, Misc.getCurrentDateTime());
//							LogHelper.LogHappy("added gift happy birthday");
						}
					}
				}
//				else {
//					LogHelper.LogHappy("Already give birthday gift");
//				}
			}
		} catch (Exception e) {
//			LogHelper.LogException("UserBirthday", e);
		}
		
		// move gift from giftbox to mailbox
		MoveGiftBoxToMailBox();
		
		// clear old items in stock event
		if (_use_stock_event)
		{
			if (!_use_event_halloween)
			{
				stock_event.updateValue(CommandID.CMD_LOGIN, DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_HALLOWEEN_1, 0);
				stock_event.updateValue(CommandID.CMD_LOGIN, DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_HALLOWEEN_2, 0);
				stock_event.updateValue(CommandID.CMD_LOGIN, DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_HALLOWEEN_3, 0);
				stock_event.updateValue(CommandID.CMD_LOGIN, DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_HALLOWEEN_4, 0);
				SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
			}
			if (!_use_event_xmas_2014)
			{
				stock_event.updateValue(CommandID.CMD_LOGIN, DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_XMAS_2014_1, 0);
				stock_event.updateValue(CommandID.CMD_LOGIN, DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_XMAS_2014_2, 0);
				stock_event.updateValue(CommandID.CMD_LOGIN, DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_XMAS_2014_3, 0);
				stock_event.updateValue(CommandID.CMD_LOGIN, DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_XMAS_2014_4, 0);
				SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
			}
		}
		
		if (ServerConfig().get("use_geo_ip") == 1) {
			try {
				Object obj = DBConnector.GetMembaseServer(_user_id).Get(_user_id + "_" + "country");
				if (obj != null) {
					_country = (String)obj;
					LogHelper.LogHappy("GeoIP, user location := " + _country);
				} else {
					Server._task_queue.AddTask(new GeoIPTask(_client, _ip));
				}
			} catch (Exception e) {
				LogHelper.LogException("UpdateGeoIP", e);
			}
		}
		
//		if (_use_close_friend) {
//			if (_user_id < DatabaseID.NEW_COMER_ID) {
//				_use_close_friend = false;
//			}
//		}
	}
	
	private void logSnapShot() throws Exception
	{
		StringBuilder log = new StringBuilder();
		
		log.append(Misc.getCurrentDateTime());		//  1. thoi gian dang nhap
		log.append('\t').append(userInfo.getID());	//  2. ten tai khoan dang nhap
		log.append('\t').append(userInfo.getID());	//  3. id cua role dang nhap
		log.append('\t').append(SkyGarden._server_id);					//  4. id cua server dang nhap
		log.append('\t').append("snapshot");		//  5. ten loai snapshot
		
		int[] pot = new int[Server.s_globalDB[DatabaseID.SHEET_POT].length];
		int[] decor = new int[Server.s_globalDB[DatabaseID.SHEET_DECOR].length];
		
		for (int i = 0; i < pot.length; i++) pot[i] = 0;
		for (int i = 0; i < decor.length; i++) decor[i] = 0;
		
		for (int f = 0; f < userInfo.getTotalFloor(); f++)
		{
			for (int s = 0; s < DatabaseID.MAX_SLOT_PER_FLOOR; s++)
			{
				int pot_id = GetPot(f, s).getID();
				if (pot_id > -1) pot[pot_id]++;

				int decor_id = GetDecor(f, s).getID();
				if (decor_id > -1) decor[decor_id]++;
			}
		}

		HashMap<String, Integer> items = new HashMap<String, Integer>();
		
		for (int _stock = 0; _stock < DatabaseID.STOCK_MAX; _stock++)
		{
			ConcurrentHashMap<String, Integer> stock_items = GetStock(_stock).getItems();
			
			for (Entry<String,Integer> item: stock_items.entrySet())
			{
				items.put(item.getKey(), item.getValue());
			}
		}
		
		for (int i = 0; i < pot.length; i++)
		{
			if (pot[i] > 0)
			{
				String pot_key = DatabaseID.IT_POT + "_" + i;
				
				if (items.containsKey(pot_key))
				{
					int item_in_stock = items.get(pot_key).intValue();
					items.remove(pot_key);
					items.put(pot_key, (item_in_stock + pot[i]));
				}
				else
				{
					items.put(pot_key, pot[i]);
				}
			}
		}

		for (int i = 0; i < decor.length; i++)
		{
			if (decor[i] > 0)
			{
				String decor_key = DatabaseID.IT_DECOR + "_" + i;
				
				if (items.containsKey(decor_key))
				{
					int item_in_stock = items.get(decor_key).intValue();
					items.remove(decor_key);
					items.put(decor_key, (item_in_stock + decor[i]));
				}
				else
				{
					items.put(decor_key, decor[i]);
				}
			}
		}
		
		// item list
		StringBuilder log_items = new StringBuilder();

		boolean second_item = false;
		for (Entry<String,Integer> item: items.entrySet())
        {
			if (second_item) log_items.append(",");
			
			log_items.append(item.getKey());
			log_items.append(":");
			log_items.append(item.getValue());
			
			second_item = true;
        }
		
		log.append('\t').append(log_items);		//  6. danh sach item theo format itemid1:quantity, itemid2:quantity, ...

		// extra field
		StringBuilder log_extra = new StringBuilder();
		
		for (int _stock = 0; _stock < DatabaseID.STOCK_MAX; _stock++)
		{
			if (_stock > 0) log_extra.append(",");
			log_extra.append(GetStock(_stock).LogProperties());
		}
		
		for (int _machine = 0; _machine < machine.size(); _machine++)
		{
			log_extra.append(",");
			log_extra.append(GetMachine(_machine).LogProperties());
		}
		
		log.append('\t').append(log_extra);		//  7. extra field: stock info, machine info, ...
		
		// extra field for KienCD
		StringBuilder log_user = new StringBuilder();
		log_user.append(",").append(DatabaseID.IT_MONEY).append("_").append(DatabaseID.GOLD_ID).append(":").append(userInfo.getGold());
		log_user.append(",").append(DatabaseID.IT_MONEY).append("_").append(DatabaseID.EXP_ID).append(":").append(userInfo.getExp());
		log_user.append(",").append(DatabaseID.IT_MONEY).append("_").append(DatabaseID.REPUTATION_ID).append(":").append(userInfo.getReputation());
		log_user.append(",").append(DatabaseID.IT_MONEY).append("_").append(DatabaseID.DIAMOND_ID).append(":").append(money_mgr.GetRealMoney() + money_mgr.GetBonusMoney());
		log.append('\t').append(log_user);

		StringBuilder extra_user_info = new StringBuilder();
		extra_user_info.append(userInfo.getName());
		extra_user_info.append(",").append(userInfo.getFaceBookID());
		extra_user_info.append(",").append(userInfo.GetFacebookName());
		extra_user_info.append(",").append(userInfo.GetZingID());
		extra_user_info.append(",").append(userInfo.GetZingAvatar());
		extra_user_info.append(",").append(userInfo.GetZingDisplayName());
		extra_user_info.append(",").append(userInfo.getDeviceID());
		log.append('\t').append(extra_user_info);
		
		StringBuilder private_shop = new StringBuilder();
		private_shop.append(userInfo.getName());
		for (PrivateShopSlot slot : PShopMgr.slots)
		{
			private_shop.append(",");
			private_shop.append(slot.getId());
			private_shop.append(":").append(slot.getLockStatus());
			private_shop.append(":").append(slot.item.getType()).append("_").append(slot.item.getId());
			private_shop.append(":").append(slot.item.getStatus());
			private_shop.append(":").append(slot.item.getPrice());
			private_shop.append(":").append(slot.item.getAdvertiseStatus());
			private_shop.append(":").append(slot.item.getStartDate());
			private_shop.append(":").append(slot.item.getEndDate());
		}
		log.append('\t').append(private_shop);
		
		LogHelper.Log(LogHelper.LogType.SNAPSHOT, log.toString());
	}
	
	private void getGameConstantData()
	{
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		
		// reponse game const data to client
		for (int i = DatabaseID.SHEET_USER_LEVEL; i < DatabaseID.SHEET_MAX; i++)
		{
			if (isServerSheet(i))
			{
				continue;
			}
			
			if (i == DatabaseID.SHEET_PAYMENT)
			{
				if (SkyGarden.InSaleOffEvent())
				{
					response.addBinary(KeyID.KEY_GAME_CONSTANT + i, Server.s_globalSheetData[DatabaseID.SHEET_PAYMENT_EVENT]);
				}
				else
				{
					response.addBinary(KeyID.KEY_GAME_CONSTANT + i, Server.s_globalSheetData[i]);
				}
			}
			else if (i == DatabaseID.SHEET_POT)
			{
				if (_use_event_uprade_pot)
				{
					response.addBinary(KeyID.KEY_GAME_CONSTANT + i, Misc.getCustomGameConstantSheetPot());
				}
				else
				{
					response.addBinary(KeyID.KEY_GAME_CONSTANT + i, Server.s_globalSheetData[i]);
				}
			}
			else
			{
				response.addBinary(KeyID.KEY_GAME_CONSTANT + i, Server.s_globalSheetData[i]);
			}
		}

		try
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("getGameConstantData", ex);
		}
	}
	
	private boolean isServerSheet(int sheet_index)
	{
		switch (sheet_index)
		{
			case DatabaseID.SHEET_ACHIEVEMENT: return !_use_achievement;
			case DatabaseID.SHEET_ITEM_DROP:
			case DatabaseID.SHEET_GOLD_XP_COEFFICIENT:
			case DatabaseID.SHEET_DAILY_ORDER:
			case DatabaseID.SHEET_TUTORIAL:
			case DatabaseID.SHEET_VERSION:
			case DatabaseID.SHEET_FRIEND_BUG:
			case DatabaseID.SHEET_MACHINE_APPRAISAL:
			case DatabaseID.SHEET_OWL_SLOT_UNLOCK:
//			case DatabaseID.SHEET_GIFTS_INFO:
			case DatabaseID.SHEET_DAILY_GIFT:
			case DatabaseID.SHEET_CONSTANT:
			case DatabaseID.SHEET_EVENT:
			case DatabaseID.SHEET_EVENT_MAIN_OBJECT:
			case DatabaseID.SHEET_EVENT_MAIN_ITEM:
			case DatabaseID.SHEET_FEED_INFO:
			case DatabaseID.SHEET_CDN:
			case DatabaseID.SHEET_EVENT_GLOBAL:
			case DatabaseID.SHEET_PAYMENT_EVENT:
				return true;
			case DatabaseID.SHEET_EVENT_MID_AUTUMN:
			{
				if (_use_event_mid_autumn_festival || _use_event_export || _use_event_x2 || _use_event_order|| _use_event_halloween || _use_event_20_11 || _use_event_happy_weekend || _use_event_uprade_pot || _use_event_xmas_2014 || _use_event_xmas_tree || _use_event_new_year_2015 || _use_event_8_3_2015 || _use_event_xmas_mini || _use_event_button)
					return false;
				else
					return true;
			}
		}
		
		return false;
	}
	
	public void changeUserToStable(long uid)
	{
		// LogHelper.Log("changeUserToStable.. use uid = " + uid );
		_user_id = uid;
		_is_stable_user = true;

		//move data
		base = DBConnector.GetMembaseServer(_user_id);
		
		userInfo.setID(_user_id);
		boolean result = initUserData();
		if (result == false)
		{
			LogHelper.Log("changeUserToStable.. err! move user data failed.");
			_is_stable_user = false;
			base = DBConnector.GetMembaseServerForTemporaryData();
			return;
		}

		//move money data
		result = money_mgr.MoveToDatabase(base, Long.toString(_user_id), KeyID.KEY_MONEY_REAL, KeyID.KEY_MONEY_TOTAL, KeyID.KEY_MONEY_BONUS, 0);
		if (result == false)
		{
			LogHelper.Log("changeUserToStable.. err! move money data failed.");
			_is_stable_user = false;
			base = DBConnector.GetMembaseServerForTemporaryData();
			return;
		}

		//get general bucket
		base = DBConnector.GetMembaseServerForGeneralData();
		byte[] data = new byte[8];
		data[0] = (byte)((uid>>56)&0xFF);
		data[1] = (byte)((uid>>48)&0xFF);
		data[2] = (byte)((uid>>40)&0xFF);
		data[3] = (byte)((uid>>32)&0xFF);
		data[4] = (byte)((uid>>24)&0xFF);
		data[5] = (byte)((uid>>16)&0xFF);
		data[6] = (byte)((uid>>8)&0xFF);
		data[7] = (byte)((uid&0xFF));

		// Add user id
		base.SetRaw(_device_id + "_" + KeyID.KEY_USER_ID, data, 0);
		
		// map social id and user id
		if (_should_map_social_id)
		{
			_should_map_social_id = false;
			if (!_facebook_id.equals(""))
			{
				base.Set("fb" + "_" + _facebook_id + "_" + "u", Long.toString(uid));
				base.Set(uid + "_" + "fb", _facebook_id);
				LogHelper.Log("Map fb id " + _facebook_id + " with user id " + uid);
			}
			else if (!_zing_id.equals(""))
			{
				base.Set("zing" + "_" + _zing_id + "_" + "u", Long.toString(uid));
				base.Set(uid + "_" + "zing", _zing_id);
				LogHelper.Log("Map zing id " + _zing_id + " with user id " + uid);
			}
			else if (!_zalo_id.equals(""))
			{
				base.Set("zalo" + "_" + _zalo_id + "_" + "u", Long.toString(uid));
				base.Set(uid + "_" + "zalo", _zalo_id);
				LogHelper.Log("Map zalo id " + _zalo_id + " with user id " + uid);
			}
		}

		//get bucket for this user
		base = DBConnector.GetMembaseServer(_user_id);
		
		// set register date
		userInfo.setRegisterDate(Misc.getCurrentDateTime());
		
		// Log VD REGISTER
		StringBuilder log = new StringBuilder();
		log.append(Misc.getCurrentDateTime());
		log.append('\t').append(_user_id);
		log.append('\t').append(_user_id);
		log.append('\t').append(userInfo.getName());
		log.append('\t').append(SkyGarden._server_id);
		log.append('\t').append(0);
		log.append('\t').append(0);
		log.append('\t').append(_ip);
		log.append('\t').append("0");
		log.append('\t').append(_distributor);
		log.append('\t').append(0); // result
		log.append('\t').append(_device_name);
		log.append('\t').append(_device_firmware);
		log.append('\t').append(_device_id);
		log.append('\t').append(_reference_src);
		log.append('\t').append(_appflyer_media_source);
		log.append('\t').append(_appflyer_campaign_name);
		log.append('\t').append(_appflyer_campaign_id);
		log.append('\t').append(_appflyer_is_fb);
		log.append('\t').append(_appflyer_adgroup_name);
		log.append('\t').append(_appflyer_adgroup_id);
		log.append('\t').append(_appflyer_adset_name);
		log.append('\t').append(_appflyer_adset_id);
		log.append('\t').append(_appflyer_ad_id);
		log.append('\t').append(_appflyer_af_siteid);
		log.append('\t').append(_appflyer_af_sub1);
		log.append('\t').append(_appflyer_af_sub2);
		log.append('\t').append(_appflyer_af_sub3);
		log.append('\t').append(_appflyer_af_sub4);
		log.append('\t').append(_appflyer_af_sub5);
		log.append('\t').append(_appflyer_install_time);
		log.append('\t').append(_appflyer_af_id);
		log.append('\t').append(_ref_code);
		LogHelper.Log(LogHelper.LogType.REGISTER, log.toString());
		
		// Log PIG LOG
		StringBuilder piglog = new StringBuilder();
		piglog.append(Misc.getCurrentDateTime());
		piglog.append('\t').append("Install");
		piglog.append('\t').append(_user_id);
		piglog.append('\t').append("CGMFBS");
		piglog.append('\t').append(SkyGarden._server_id);
		piglog.append('\t').append(_client_version);
		piglog.append('\t').append(_client_OS);
		piglog.append('\t').append(_pig_id);
		piglog.append('\t').append(_device_name);
		piglog.append('\t').append(_device_firmware);
		piglog.append('\t').append(_ip);
		piglog.append('\t').append(_appflyer_media_source);
		piglog.append('\t').append(_appflyer_campaign_name);
		piglog.append('\t').append(_appflyer_is_fb);
		piglog.append('\t').append(_appflyer_adgroup_name);
		piglog.append('\t').append(_appflyer_adgroup_id);
		piglog.append('\t').append(_appflyer_campaign_id);
		piglog.append('\t').append(_appflyer_campaign_name);
		piglog.append('\t').append(_appflyer_adset_id);
		piglog.append('\t').append(_appflyer_ad_id);
		piglog.append('\t').append(_appflyer_af_siteid);
		piglog.append('\t').append(_appflyer_af_sub1);
		piglog.append('\t').append(_appflyer_af_sub2);
		piglog.append('\t').append(_appflyer_af_sub3);
		piglog.append('\t').append(_appflyer_af_sub4);
		piglog.append('\t').append(_appflyer_af_sub5);
		piglog.append('\t').append(_appflyer_install_time);
		piglog.append('\t').append(_appflyer_af_id);
		LogHelper.Log(LogHelper.LogType.PIG_LOG, piglog.toString());
	}

	public boolean generateNewUser()
	{
		if (ProjectConfig.IS_SERVER_FREESTYLE == 1)
		{
			return false; // now allow to create account in freestyle db to avoid strange bugs.
		}
		
		boolean result = false;

		//get general bucket
		base = DBConnector.GetMembaseServerForGeneralData();
		byte[] data = new byte[] {0, 0, 0, 0, 0, 0, 0, 0};
		
		//Add device id
		if (!base.AddRaw(_device_id + "_" + KeyID.KEY_USER_ID, data, NEW_USER_EXPIRE_TIME))
		{
			LogHelper.Log("generate new user failed: device id " + _device_id  + " is already used.");
			return false;
		}
		
		//get temp bucket
		base = DBConnector.GetMembaseServerForTemporaryData();

		//set session to default
		_session_id = "0";
		base.Set(_device_id + "_" + KeyID.KEY_USER_SESSION_ID, _session_id);

		_user_id = 0;
		
		orderManager = new OrderManager();
		
		
		if (bUseDailyGift) dailygift = new DailyGift();
		
		tutorialManager = new TutorialManager();
		
		// new user info
		userInfo = new UserInfo(_user_id);
		userInfo.setDeviceID(_device_id);

		newsBoard = new NewsBoard(userInfo);

		if (_device_id.contains("0xff"))
		{
			userInfo.SetIMEI(Misc.GetIMEI(_device_id));
			userInfo.SetEmail(Misc.GetEmailAddress(_device_id));
		}
		
		result = ADD_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true), NEW_USER_EXPIRE_TIME);
		if (result == false)
		{
			LogHelper.Log("generateNewUser.. err! can not create user data.");
			return false;
		}
		
		//money info
		money_mgr = new MoneyManager(_device_id);
		money_mgr.SetDatabase(base);
		money_mgr.SetUserInfo(userInfo);
		result = money_mgr.InitValueOnDatabase(KeyID.KEY_MONEY_REAL, KeyID.KEY_MONEY_TOTAL, KeyID.KEY_MONEY_BONUS, NEW_USER_EXPIRE_TIME);
		if (result == false)
		{
			LogHelper.Log("generateNewUser.. err! can not create money data.");
			return false;
		}
		
		//private shop
		PShopMgr = new PrivateShopManager(_device_id);
		PShopMgr.SetDatabase(base);
		result = PShopMgr.initDefaultValues(KeyID.KEY_PRIVATE_SHOP);
		if (result == false)
		{
			LogHelper.Log("generateNewUser.. err! can not create private shop data.");
			return false;
		}
		
		//npc private shop
		NPCShopMgr = new PrivateShopManager(_device_id + "_" + "npc");
		NPCShopMgr.SetDatabase(base);
		result = NPCShopMgr.initDefaultValues(KeyID.KEY_PRIVATE_SHOP);
		if (result == false)
		{
			LogHelper.Log("generateNewUser.. err! can not create npc private shop data.");
			return false;
		}
		
		//gift
		gift_mgr = new GiftManager(_device_id);
		gift_mgr.SetDatabase(base);
		result = gift_mgr.LoadFromDatabase(KeyID.KEY_GIFT);
		if (result == false)
		{
			LogHelper.Log("generateNewUser.. err! can not create gift manager.");
			return false;
		}
		
		// merchant
		merchant_mgr = new MerchantManager(_device_id);
		merchant_mgr.SetDatabase(base);
		result = merchant_mgr.LoadFromDatabase(KeyID.KEY_MERCHANT);
		if (result == false)
		{
			LogHelper.Log("generateNewUser.. err! can not create merchant manager.");
			return false;
		}
		
		//friend
		friend_mgr = new FriendManager(_device_id);
		friend_mgr.SetDatabase(base);
		result = friend_mgr.LoadFromDatabase(KeyID.KEY_FRIENDS);
		if (result == false)
		{
			LogHelper.Log("generateNewUser.. err! can not create friend manager.");
			return false;
		}
		
		// default floor
		for (int i = 0; i < userInfo.getTotalFloor(); i++)
		{
			Floor f = new Floor(i);
			floor.add(i, f);

			for (int j = 0; j < DatabaseID.SLOT_TUTORIAL; j++) 
			{
				floor.get(i).slot[j].pot.createNewPot(0);
				floor.get(i).slot[j].pot.plant.createNewPlant(0);
				floor.get(i).slot[j].pot.plant.setGrowTime(Misc.SECONDS());
			}
			
			result = ADD_DB_VALUE_BINARY(KeyID.KEY_FLOORS + i, floor.get(i).getData(true), NEW_USER_EXPIRE_TIME);

			if (result == false)
			{
				LogHelper.Log("generateNewUser.. err! can not create floor data.");
				return false;
			}
		}

		// stock
		for (int i = 0; i < DatabaseID.STOCK_MAX; i++)
		{
			Stock st = new Stock(i, userInfo);
			stock.add(i, st);
			
			result = ADD_DB_VALUE_BINARY(KeyID.KEY_STOCKS + i, stock.get(i).getDataToDatabase(), NEW_USER_EXPIRE_TIME);

			if (result == false)
			{
				LogHelper.Log("generateNewUser.. err! can not create stock data.");
				return false;
			}
		}
		
		// add default items
		String[] items_reward = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_USER_LEVEL][userInfo.getLevel()][DatabaseID.USER_REWARD_ITEM]).split(":");
		
		if (items_reward.length % 3 == 0)
		{
			for (int i = 0; i < items_reward.length; i+=3)
			{
				int type = Integer.parseInt(items_reward[i]);
				int id = Integer.parseInt(items_reward[i+1]);
				int num = Integer.parseInt(items_reward[i+2]);
				
				if (num > 0)
				{
					if (type == DatabaseID.IT_PLANT)
					{
						GetStock(DatabaseID.STOCK_SILO).addGift(type, id, num, _command_id);
					}
					else if (type == DatabaseID.IT_PRODUCT || type == DatabaseID.IT_BUG)
					{
						GetStock(DatabaseID.STOCK_BARN).addGift(type, id, num, _command_id);
					}
					else
					{
						GetStock(DatabaseID.STOCK_WAREHOUSE).addGift(type, id, num, _command_id);
					}
				}
			}
		}
		
		String[] plants_unlock = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_USER_LEVEL][userInfo.getLevel()][DatabaseID.USER_SEED_ID_UNLOCK]).split(":");
		if (plants_unlock.length % 2 == 0)
		{
			for (int i = 0; i < plants_unlock.length; i+=2)
			{
				int id = Integer.parseInt(plants_unlock[i]);
				int num = Integer.parseInt(plants_unlock[i+1]);
				
				if (num > 0) 
				{
					GetStock(DatabaseID.STOCK_SILO).addGift(DatabaseID.IT_PLANT, id, num, _command_id);
				}
			}
		}

		String[] pots_unlock = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_USER_LEVEL][userInfo.getLevel()][DatabaseID.USER_POT_ID_UNLOCK]).split(":");
		if (pots_unlock.length % 2 == 0)
		{
			for (int i = 0; i < pots_unlock.length; i+=2)
			{
				int id = Integer.parseInt(pots_unlock[i]);
				int num = Integer.parseInt(pots_unlock[i+1]);
				
				if (num > 0) 
				{
					GetStock(DatabaseID.STOCK_WAREHOUSE).addGift(DatabaseID.IT_POT, id, num, _command_id);
				}
			}
		}
		
		String[] products_unlock = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_USER_LEVEL][userInfo.getLevel()][DatabaseID.USER_PROD_ID_UNLOCK]).split(":");
		if (products_unlock.length % 2 == 0)
		{
			for (int i = 0; i < products_unlock.length; i+=2)
			{
				int id = Integer.parseInt(products_unlock[i]);
				int num = Integer.parseInt(products_unlock[i+1]);
				
				if (num > 0) 
				{
					GetStock(DatabaseID.STOCK_BARN).addGift(DatabaseID.IT_PRODUCT, id, num, _command_id);
				}
			}
		}
		
		SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, GetStock(DatabaseID.STOCK_SILO).getDataToDatabase());
		SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, GetStock(DatabaseID.STOCK_BARN).getDataToDatabase());
		SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, GetStock(DatabaseID.STOCK_WAREHOUSE).getDataToDatabase());
		
		// machine
		for (int i = 0; i < userInfo.getTotalFloor(); i++)
		{
			Machine mc = new Machine(i);
			machine.add(i, mc);
			
			result = ADD_DB_VALUE_BINARY(KeyID.KEY_MACHINES + i, machine.get(i).getData(), NEW_USER_EXPIRE_TIME);

			if (result == false)
			{
				LogHelper.Log("generateNewUser.. err! can not create machine data.");
				return false;
			}
		} 
		
		machineRepairLimit = new MachineRepairLimit(userInfo.getLevel());

		// machine durability
		for (int i = 0; i < userInfo.getTotalFloor(); i++)
		{
			MachineDurability md = new MachineDurability(i);
			machineDurability.add(i, md);
			
			result = ADD_DB_VALUE_BINARY(KeyID.KEY_MACHINES_DURABILITY + i, machineDurability.get(i).getData(), NEW_USER_EXPIRE_TIME);

			if (result == false)
			{
				LogHelper.Log("generateNewUser.. err! can not create machine durability data.");
				return false;
			}
		} 

		// npc machine durability (generateNewUser)
		_npc_daily_reset_time = 0;
		
		// if (ProjectConfig.RUN_LOCAL != 1)
		{
			// due to user didnt have id yet so we use device id
			result = base.Add(_device_id + "_" + KeyID.KEY_NPC_MACHINE_DAILY_RESET_TIME, _npc_daily_reset_time);
			if (result == false)
			{
				LogHelper.Log("generateNewUser.. err! can not create npc machine daily reset time data.");
				return false;
			}
		}
		
		if (bUseNPCBuyItem)
		{
			// npc buy item timer (generateNewUser)
			initNPCBuyItemTimer();
			
			// due to user didnt have id yet so we use device id
			result = base.Add(_device_id + "_" + KeyID.KEY_NPC_BUY_ITEM_TIMER, npc_buy_item_timer);
			if (result == false)
			{
				LogHelper.Log("generateNewUser.. err! can not create npc_buy_item_timer data.");
				return false;
			}
		}
		
		for (int i = 0; i < Server.s_globalDB[DatabaseID.SHEET_MACHINE].length; i++)
		{
			MachineDurability npcMD = new MachineDurability(i);
			npcMD.setDurability(npcMD.getDurabilityMax());
			
			npcMachineDurability.add(i, npcMD);
			
			result = ADD_DB_VALUE_BINARY(KeyID.KEY_NPC_MACHINES_DURABILITY + i, npcMachineDurability.get(i).getData(), NEW_USER_EXPIRE_TIME);

			if (result == false)
			{
				LogHelper.Log("generateNewUser.. err! can not create npc machine durability data.");
				return false;
			}
		}

		if (bUseOwl)
		{
			owl = new Owl(userInfo.getLevel());
			result = ADD_DB_VALUE_BINARY(KeyID.KEY_OWL, owl.getData(), NEW_USER_EXPIRE_TIME);

			if (result == false)
			{
				LogHelper.Log("generateNewUser.. err! can not create owl data.");
				return false;
			}
		}
		
		if (bUseGiftCode)
		{
			giftCodeEnter = new GiftCodeEnter();
			result = ADD_DB_VALUE_BINARY(KeyID.KEY_GIFT_CODE_ENTER, giftCodeEnter.getData(), NEW_USER_EXPIRE_TIME);

			if (result == false)
			{
				LogHelper.Log("generateNewUser.. err! can not create giftCodeEnter data.");
				return false;
			}
		}

//		if (bUseEvent)
//		{
//			mainEvent = new Event();
//			result = ADD_DB_VALUE_BINARY(KeyID.KEY_EVENT, mainEvent.getData(), NEW_USER_EXPIRE_TIME);
//
//			if (result == false)
//			{
//				LogHelper.Log("generateNewUser.. err! can not create main event data.");
//				return false;
//			}
//			
//			eventMainObject = new EventMainObject(mainEvent.getEMO_ID());
//			result = ADD_DB_VALUE_BINARY(KeyID.KEY_EVENT_MAIN_OBJECT, eventMainObject.getData(), NEW_USER_EXPIRE_TIME);
//			
//			if (result == false)
//			{
//				LogHelper.Log("generateNewUser.. err! can not create EMO data.");
//				return false;
//			}
//		}
		
		// order
		result = ADD_DB_VALUE_BINARY(KeyID.KEY_ORDER, orderManager.getData(), NEW_USER_EXPIRE_TIME);
		if (result == false)
		{
			LogHelper.Log("generateNewUser.. err! can not create order data.");
			return false;
		}
		
		// news board
		result = ADD_DB_VALUE_BINARY(KeyID.KEY_NEWS_BOARD, newsBoard.getData(), NEW_USER_EXPIRE_TIME);
		if (result == false)
		{
			LogHelper.Log("generateNewUser.. err! can not create newsboard data.");
			return false;
		}
		
		if (bUseDailyGift)
		{
			result = ADD_DB_VALUE_BINARY(KeyID.KEY_DAILY_GIFT, dailygift.getData(), NEW_USER_EXPIRE_TIME);
			if (result == false)
			{
				LogHelper.Log("generateNewUser.. err! can not create daily gift data.");
				return false;
			}

			// dailygift.displayDataPackage();
		}

		// machine repair limit
		result = ADD_DB_VALUE_BINARY(KeyID.KEY_MACHINES_REPAIR_LIMIT, machineRepairLimit.getData(), NEW_USER_EXPIRE_TIME);
		if (result == false)
		{
			LogHelper.Log("generateNewUser.. err! can not create machine_repair_limit data.");
			return false;
		}
		
		// tutorialManager
		result = ADD_DB_VALUE_BINARY(KeyID.KEY_TUTORIAL, tutorialManager.getData(), NEW_USER_EXPIRE_TIME);
		if (result == false)
		{
			LogHelper.Log("generateNewUser.. err! can not create tutorial data.");
			return false;
		}
		
		// init ratio of bug appearing at friend's house
		bug_appear_time = Misc.SECONDS();
		try
		{
			InitialRandomBugAppearRatio();
		}
		catch (Exception e)
		{
			LogHelper.LogException("GenerateNewUser.InitialRandomBugAppearRatio", e);
		}
		
		StringBuilder sb = new StringBuilder(16);
		for (String s : BugAppearRatio)
		{
			if (sb.length() > 0)
			{
				sb.append(":").append(s);
			}
			else
			{
				sb.append(s);
			}
		}
		
		result = base.Add(_device_id + "_" + KeyID.KEY_USER_BUG_APPEAR_RATIO, sb.toString());
		if (result == false)
		{
			LogHelper.Log("generateNewUser.. err! can not init bug appear ratio.");
			return false;
		}
		
		// next time bug appear at friend house
		result = base.Add(_device_id + "_" + KeyID.KEY_NEXT_TIME_BUG_APPEAR, Misc.SECONDS());
		
		// default garden appraisal
		base.Set(_device_id + "_" + KeyID.KEY_GARDEN_APPRAISAL, 0L);
		
		// default last payment time
		base.Add(_device_id + "_" + KeyID.KEY_LAST_PAY_TIME, "null");

		_alert = new Alert();
		
		return true;
	}
	
	private boolean initUserData()
	{
		boolean result = ADD_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));

		if (result == false) return false;

		//default floor
		int i = 0;
		for (Floor f : floor)
		{
			result = ADD_DB_VALUE_BINARY(KeyID.KEY_FLOORS + i, f.getData(true));

			if (result == false) return false;
			// LogHelper.Log("initUserData.. move data floor [" + i +"] OK.");

			i++;
		}

		//stock
		i = 0;
		for (Stock s : stock)
		{
			result = ADD_DB_VALUE_BINARY(KeyID.KEY_STOCKS + i, s.getDataToDatabase());

			if (result == false) return false;
			// LogHelper.Log("initUserData.. move data stock [" + i + "] OK.");

			i++;
		}

		//machine
		i = 0;
		for (Machine m : machine)
		{
			result = ADD_DB_VALUE_BINARY(KeyID.KEY_MACHINES + i, m.getData());

			if (result == false) return false;
			// LogHelper.Log("initUserData.. move data machine [" + i +"] OK.");

			i++;
		}

		//machine durability
		i = 0;
		for (MachineDurability md : machineDurability)
		{
			result = ADD_DB_VALUE_BINARY(KeyID.KEY_MACHINES_DURABILITY + i, md.getData());

			if (result == false) return false;
			// LogHelper.Log("initUserData.. move data machine durability [" + i +"] OK.");

			i++;
		}
		
		//npc machine durability (initUserData)
		result = base.Add(_user_id + "_" + KeyID.KEY_NPC_MACHINE_DAILY_RESET_TIME, _npc_daily_reset_time);
		if (result == false) return false;
		
		if (bUseNPCBuyItem)
		{
			//npc buy item timer (initUserData)
			result = base.Add(_user_id + "_" + KeyID.KEY_NPC_BUY_ITEM_TIMER, npc_buy_item_timer);
			if (result == false) return false;
		}
		
		for (i = 0; i < Server.s_globalDB[DatabaseID.SHEET_MACHINE].length; i++)
		{
			result = ADD_DB_VALUE_BINARY(KeyID.KEY_NPC_MACHINES_DURABILITY + i, npcMachineDurability.get(i).getData());

			if (result == false) return false;
			// LogHelper.Log("initUserData.. move data npc machine durability [" + i +"] OK.");
		}

		if (bUseOwl)
		{
			result = ADD_DB_VALUE_BINARY(KeyID.KEY_OWL, owl.getData());

			if (result == false)
			{
				LogHelper.Log("generateNewUser.. err! can not create owl data.");
				return false;
			}
		}
		
		if (bUseGiftCode)
		{
			result = ADD_DB_VALUE_BINARY(KeyID.KEY_GIFT_CODE_ENTER, giftCodeEnter.getData());

			if (result == false)
			{
				LogHelper.Log("generateNewUser.. err! can not create giftCodeEnter data.");
				return false;
			}
		}
		
//		if (bUseEvent)
//		{
//			result = ADD_DB_VALUE_BINARY(KeyID.KEY_EVENT, mainEvent.getData());
//
//			if (result == false)
//			{
//				LogHelper.Log("generateNewUser.. err! can not create main event data.");
//				return false;
//			}
//			
//			result = ADD_DB_VALUE_BINARY(KeyID.KEY_EVENT_MAIN_OBJECT, eventMainObject.getData(), NEW_USER_EXPIRE_TIME);
//			
//			if (result == false)
//			{
//				LogHelper.Log("generateNewUser.. err! can not create EMO data.");
//				return false;
//			}
//		}
		
		// order manager
		result = ADD_DB_VALUE_BINARY(KeyID.KEY_ORDER, orderManager.getData());
		if (result == false) return false;
		// LogHelper.Log("initUserData.. move data order OK.");
		
		//private shop
		PShopMgr.SetUserId(Long.toString(_user_id));
		PShopMgr.SetDatabase(base);
		result = PShopMgr.saveDataToDatabase(KeyID.KEY_PRIVATE_SHOP);
		if (result == false) return false;
		// LogHelper.Log("initUserData.. move data private shop OK.");
		
		//npc private shop
		NPCShopMgr.SetUserId(_user_id + "_" + "npc");
		NPCShopMgr.SetDatabase(base);
		result = NPCShopMgr.saveDataToDatabase(KeyID.KEY_PRIVATE_SHOP);
		if (result == false) return false;
		// LogHelper.Log("initUserData.. move npc private shop OK.");
		
		//gift
		gift_mgr.SetUserId(Long.toString(_user_id));
		gift_mgr.SetDatabase(base);
		result = gift_mgr.SaveDataToDatabase(KeyID.KEY_GIFT);
		if (result == false) return false;
		// LogHelper.Log("initUserData.. move gift data OK.");
		
		// merchant
		merchant_mgr.SetUserId(Long.toString(_user_id));
		merchant_mgr.SetDatabase(base);
		result = merchant_mgr.SaveDataToDatabase(KeyID.KEY_MERCHANT);
		if (result == false) return false;
		// LogHelper.Log("initUserData.. move merchant data OK.");
		
		//last refresh time of npc private shop
		base.Add(_user_id + "_" + "npcshop_rt", 0);
		
		//friend
		friend_mgr.SetUserID(Long.toString(_user_id));
		friend_mgr.SetDatabase(base);
		result = friend_mgr.SaveFriendListToDatabase(KeyID.KEY_FRIENDS);
		if (result == false) return false;
		// LogHelper.Log("initUserData.. move friend list OK.");
		
		// news board
		result = ADD_DB_VALUE_BINARY(KeyID.KEY_NEWS_BOARD, newsBoard.getData());
		if (result == false) return false;
		// LogHelper.Log("initUserData.. move data news board OK.");
		
//		if (_use_achievement)
//		{
//			acm_mgr = new AchievementManager(userInfo);
//			acm_mgr.Load();
//		}
		
		// dailygift
		if (bUseDailyGift)
		{
			result = ADD_DB_VALUE_BINARY(KeyID.KEY_DAILY_GIFT, dailygift.getData());
			if (result == false) return false;
			// LogHelper.Log("initUserData.. move data dailygift OK.");
		}

		// machine_repair_limit
		result = ADD_DB_VALUE_BINARY(KeyID.KEY_MACHINES_REPAIR_LIMIT, machineRepairLimit.getData());
		if (result == false) return false;
		// LogHelper.Log("initUserData.. move data machine_repair_limit OK.");

		// tutorialManager (due to user is stable so we dont need this key)
		result = ADD_DB_VALUE_BINARY(KeyID.KEY_TUTORIAL, tutorialManager.getData());
		if (result == false) return false;
		// LogHelper.Log("initUserData.. move data tutorialManager OK.");
		
		// ratio of bug appearing at friend's house
		StringBuilder sb = new StringBuilder(16);
		for (String s : BugAppearRatio)
		{
			if (sb.length() > 0)
			{
				sb.append(":").append(s);
			}
			else
			{
				sb.append(s);
			}
		}

		result = base.Add(_user_id + "_" + KeyID.KEY_USER_BUG_APPEAR_RATIO, sb.toString());
		if (result == false) return false;
		// LogHelper.Log("initUserData.. move data bug ratio OK.");
		
		result = base.Add(_user_id + "_" + KeyID.KEY_NEXT_TIME_BUG_APPEAR, bug_appear_time);
		if (result == false) return false;
		// LogHelper.Log("initUserData.. move data next time bug appear OK.");
		
		// bug pool (if any)
		StringBuilder sb2 = new StringBuilder(16);
		for (String s : BugInfo)
		{
			if (sb2.length() > 0)
			{
				sb2.append(":").append(s);
			}
			else
			{
				sb2.append(s);
			}
		}
		result = base.Add(_user_id + "_" + KeyID.KEY_BUG_POOL, sb2.toString());
		if (result == false) return false;
		// LogHelper.Log("initUserData.. move data bug pool OK.");
		
		// garden appraisal
		try
		{
			garden_appraisal = UpdateGardenTotalAppraisal();
			result = base.Add(_user_id + "_" + KeyID.KEY_GARDEN_APPRAISAL, garden_appraisal);
		}
		catch (Exception e)
		{
			LogHelper.LogException("initUserData.GardenAppraisal", e);
		}
		
		// default last payment time
		try
		{
			base.Add(_user_id + "_" + KeyID.KEY_LAST_PAY_TIME, (String)DBConnector.GetMembaseServerForTemporaryData().Get(_device_id + "_" + KeyID.KEY_LAST_PAY_TIME));
		}
		catch (Exception e)
		{
			LogHelper.LogException("initUserData", e);
		}

		// liked garden
		// try
		// {
			// base.Add(_user_id + "_" + KeyID.KEY_USER_LIKED_COUNT, 0L);
		// }
		// catch (Exception e)
		// {
			// LogHelper.LogException("initUserData..LikedGardenCount", e);
		// }
		
		// default session
		base.Set(_user_id + "_" + KeyID.KEY_USER_SESSION_ID, "default_session");
		
		// airship
		if (_use_airship) {
			airship = new Airship(userInfo, KeyID.KEY_AIRSHIP, stock, machine, floor);
			airship.Save();
		}
		
		// tomkid
		if (_use_tomkid) {
			tomkid = new TomKid();
		}
		
		// invite friend
		if (_use_invite_friend)
		{
			invite_friend = new InviteFriend();
			base.AddRaw(_user_id + "_" + KeyID.KEY_INVITE_FRIEND, invite_friend.GetData());
		}
		
		// private info
		private_info = new PrivateInfo(_user_id);
		base.AddRaw(_user_id + "_" + KeyID.KEY_PRIVATE_INFO, private_info.GetData());
		
		// cross promotion info
		if (_use_cross_promotion) {
			String promotion_data = "null";
			try {
				if (_device_platform.equals("ANDROID")) {
					promotion_data = (String)DBConnector.GetMembaseServerForTemporaryData().Get(KeyID.KEY_CROSS_PROMOTION_ANDROID);
				} else {
					promotion_data = (String)DBConnector.GetMembaseServerForTemporaryData().Get(KeyID.KEY_CROSS_PROMOTION_IOS);
				}
			} catch (Exception e) {
				promotion_data = "null";
			}

			LogHelper.LogHappy("promotion data = " + promotion_data);
			cross_promotion = new CrossPromotion(promotion_data);
		}
		
		// new daily gift
		if (_use_new_dailygift)
		{
			_new_dailygift = new NewDailyGift();
			NewDailyGift().init();
			ADD_DB_VALUE_BINARY(KeyID.KEY_NEW_DAILYGIFT, NewDailyGift().GetData());
		}
		
		// decor combo
		if (_use_combo_decor || ProjectConfig.IS_SERVER_FREESTYLE == 1)
		{
			_combo_manager = new ComboManager();
			ADD_DB_VALUE_BINARY(KeyID.KEY_COMBO, _combo_manager.GetData());
		}
		
		if (_use_close_friend) {
			_close_friend = new CloseFriend();
			ADD_DB_VALUE_BINARY(KeyID.KEY_CLOSE_FRIEND, _close_friend.GetData());
		}
		
		return true;
	}
	
	public boolean loadCachedUserData()
	{
		// LogHelper.Log("loadCachedUserData.. start loading user data from catched.");
		
		SkyGardenUser cachedUser = Server.s_recentOnlineUser.get(_user_id);
		if (cachedUser != null)
		{
			try
			{
				// user info
				this.userInfo = cachedUser.userInfo;
				_device_id = userInfo.getDeviceID();				

				// money manager
				this.money_mgr = cachedUser.money_mgr;

				// private shop and npc's
				this.PShopMgr = cachedUser.PShopMgr;
				this.NPCShopMgr = cachedUser.NPCShopMgr;

				// gift
				this.gift_mgr = cachedUser.gift_mgr;

				// friend manager
				this.friend_mgr = cachedUser.friend_mgr;

				// stock
				this.stock = cachedUser.stock;

				// floor
				this.floor = cachedUser.floor;

				// machine
				this.machine = cachedUser.machine;

				// machine durability & npc's
				this.machineDurability = cachedUser.machineDurability;
				this.npcMachineDurability = cachedUser.npcMachineDurability;

				// owl
				if (bUseOwl) this.owl = cachedUser.owl;

				// giftCodeEnter
				if (bUseGiftCode) this.giftCodeEnter = cachedUser.giftCodeEnter;
				
//				if (bUseEvent)
//				{
//					this.mainEvent = cachedUser.mainEvent;
//					this.eventMainObject = cachedUser.eventMainObject;
//				}

				// order manager
				this.orderManager = cachedUser.orderManager;

				// newsboard
				this.newsBoard = cachedUser.newsBoard;

				// achievement
				if (_use_achievement) this.acm_mgr = cachedUser.acm_mgr;

				// daily gift
				if (bUseDailyGift) this.dailygift = cachedUser.dailygift;

				// machine repair limit
				this.machineRepairLimit = cachedUser.machineRepairLimit;

				// tutorial manager
				this.tutorialManager = cachedUser.tutorialManager;

				// bug info
				this.BugInfo = cachedUser.BugInfo;
				this.BugAppearRatio = cachedUser.BugAppearRatio;
				this.bug_appear_time = cachedUser.bug_appear_time;
				
				// garden appraisal
				this.garden_appraisal = cachedUser.garden_appraisal;
				
				// social friends
				this.FBFriendList = cachedUser.FBFriendList;
				this.ZingFriendList = cachedUser.ZingFriendList;
				
				// social rewards
				this.ShareFBLevelUpRewardPool = cachedUser.ShareFBLevelUpRewardPool;
				
				// LogHelper.Log("loadCachedUserData.. done!");
			}
			catch (Exception e)
			{
				LogHelper.LogException("loadCachedUserData", e);
				return false;
			}
		}
		else
		{
			LogHelper.Log("loadCachedUserData.. err! cached user data [" + _user_id + "] is null");
			return false;
		}
		
		// despite the result, remove this user from recent list
		Server.s_recentOnlineUser.remove(_user_id);
		
		return true;
	}

	public boolean loadUserData()
	{
		if (_use_cached_offline_user)
		{
			if (Server.s_recentOnlineUser.containsKey(_user_id))
			{
				if (loadCachedUserData())
				{
					return true;
				}
				else
				{
					LogHelper.Log("ERR! LOAD CACHED USER DATA FAILED");
				}
			}
			else
			{
				LogHelper.Log("loadUserData.. user [" + _user_id +"] is not in cached list. Load from DB.");
			}
		}
		
		boolean result = false;
		// LogHelper.Log("loadUserData.. loading..");

		// load user info from db
		byte[] userbin = null;
		try
		{
			userbin = GET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS);
		}
		catch (Exception e)
		{
			LogHelper.Log("loadUserData.. can not get user data.");
			LogHelper.LogException("loadUserData", e);
			userbin = null;
		}
		
		if (userbin == null || userbin.length == 0)
		{
			return false;
		}
		
		userInfo = new UserInfo(userbin);
		if (userInfo.isLoadSuccess() == false)
		{
			return false;
		}
		_alert = new Alert();
		
		
		/*IMPORTANT*/
		// for iOS
		// update old device id to new one
		// sample old device id: 5646351457458_54565454685
		// sample new device id: 9FCAA7E0-E3A1-4356-8649-5AAF8CBDBEA7
//		if (_device_platform.equals("iOS")) // apply for iOS only
//		{
//			String current_device_id = userInfo.getDeviceID();
//			LogHelper.Log("loadUserData.. current_device_id = " + current_device_id);
//			LogHelper.Log("loadUserData..  new _device_id = " + _device_id);
//			if (_device_id.contains("-")) // only with new iOS
//			{
//				LogHelper.Log("loadUserData.. new iOS");
//				if (current_device_id.contains("_")) // only with account that still uses old device id
//				{
//					LogHelper.Log("loadUserData.. uses old device id");
//					byte[] data = null;
//
//					try 
//					{
//						data = DBConnector.GetMembaseServerForGeneralData().GetRaw(current_device_id + "_" + KeyID.KEY_USER_ID);
//					} 
//					catch (Exception ex) 
//					{
//						LogHelper.LogException("loadUserData.ReadData", ex);
//					}
//
//					if (data != null && data.length > 0) 
//					{
//						DBConnector.GetMembaseServerForGeneralData().SetRaw(_device_id + "_" + KeyID.KEY_USER_ID, data, 0);
//						DBConnector.GetMembaseServerForGeneralData().Delete(current_device_id + "_" + KeyID.KEY_USER_ID);
//						
//						userInfo.setDeviceID(_device_id);
//						SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
//						
//						LogHelper.Log("loadUserData.. update id of device iOS finished");
//					}
//				}
//			}
//		}
		
		// re-fixed iOS
		if (_device_platform.equals("iOS") && _device_id.contains("-")) // only with new iOS
		{
			String current_device_id = userInfo.getDeviceID();
			if (current_device_id.contains("_")) // only user register using FB or Zing
			{
				try 
				{
					if (GameUtil.GetUserMisc(_user_id).Get("remap_id").equals(""))
					{
						GameUtil.GetUserMisc(_user_id).Set("remap_id", "1");
						
						byte[] data = new byte[8];
						data[0] = (byte)((_user_id>>56)&0xFF);
						data[1] = (byte)((_user_id>>48)&0xFF);
						data[2] = (byte)((_user_id>>40)&0xFF);
						data[3] = (byte)((_user_id>>32)&0xFF);
						data[4] = (byte)((_user_id>>24)&0xFF);
						data[5] = (byte)((_user_id>>16)&0xFF);
						data[6] = (byte)((_user_id>>8)&0xFF);
						data[7] = (byte)((_user_id&0xFF));
						
						boolean remap_result = DBConnector.GetMembaseServerForGeneralData().AddRaw(current_device_id + "_" + KeyID.KEY_USER_ID, data, 0);
						LogHelper.Log(LogHelper.LogType.NO_TAG, "Fix remapped user id := " + _user_id + ", device id := " + current_device_id + ", result := " + remap_result);
					}
				} 
				catch (Exception ex) 
				{
					LogHelper.LogException("remap_id", ex);
				}
			}
		}
		
		
		// update current device id with the saved device id (the first one when user registered)
		// *important: this is major change, if there are bugs occure, remember to rem this.
		_origin_device_id = _device_id;
		_device_id = userInfo.getDeviceID();
		
		//load money
		if (_is_stable_user)
		{
			money_mgr = new MoneyManager(Long.toString(_user_id));
		}
		else
		{
			money_mgr = new MoneyManager(_device_id);
		}
		money_mgr.SetDatabase(base);
		money_mgr.LoadFromDatabase(KeyID.KEY_MONEY_REAL, KeyID.KEY_MONEY_TOTAL, KeyID.KEY_MONEY_BONUS);
		money_mgr.SetUserInfo(userInfo);
		
		// private shop & npc private shop
		if (_is_stable_user)
		{
			PShopMgr = new PrivateShopManager(Long.toString(_user_id));
			PShopMgr.SetDatabase(base);
			result = PShopMgr.loadFromDatabase(KeyID.KEY_PRIVATE_SHOP);
			if (result == false) return false;
			
			NPCShopMgr = new PrivateShopManager(_user_id + "_" + "npc");
			NPCShopMgr.SetDatabase(base);
			result = NPCShopMgr.loadFromDatabase(KeyID.KEY_PRIVATE_SHOP);
			if (result == false) return false;		
		}		
		else
		{
			PShopMgr = new PrivateShopManager(_device_id);
			PShopMgr.SetDatabase(base);
			result = PShopMgr.loadFromDatabase(KeyID.KEY_PRIVATE_SHOP);
			if (result == false) return false;

			NPCShopMgr = new PrivateShopManager(_device_id + "_" + "npc");
			NPCShopMgr.SetDatabase(base);
			result = NPCShopMgr.loadFromDatabase(KeyID.KEY_PRIVATE_SHOP);
			if (result == false) return false;
		}
		
		//gift
		if (_is_stable_user)
		{
			gift_mgr = new GiftManager(Long.toString(_user_id));
			gift_mgr.SetDatabase(base);
			result = gift_mgr.LoadFromDatabase(KeyID.KEY_GIFT);
			if (result == false)
			{
				LogHelper.Log("loadUserData.. err! can not load gift manager");
				return false;
			}
		}
//		else
//		{
//			gift_mgr = new GiftManager(_device_id);
//			gift_mgr.SetDatabase(base);
//			result = gift_mgr.LoadFromDatabase(KeyID.KEY_GIFT);
//			if (result == false)
//			{
//				LogHelper.Log("loadUserData.. err! can not load gift manager");
//				return false;
//			}
//		}
		
		// merchant
		merchant_mgr = new MerchantManager(Long.toString(_user_id));
		merchant_mgr.SetDatabase(base);
		result = merchant_mgr.LoadFromDatabase(KeyID.KEY_MERCHANT);
		if (result == false)
		{
			LogHelper.Log("loadUserData.. err! can not load merchant manager");
			return false;
		}
		
		//friend
		if (_is_stable_user)
		{
			friend_mgr = new FriendManager(Long.toString(_user_id));
			friend_mgr.SetDatabase(base);
			result = friend_mgr.LoadFromDatabase(KeyID.KEY_FRIENDS);
			if (result == false)
			{
				LogHelper.Log("loadUserData.. err! can not load friend manager.");
				return false;
			}
		}
		else
		{
			friend_mgr = new FriendManager(_device_id);
			friend_mgr.SetDatabase(base);
			result = friend_mgr.LoadFromDatabase(KeyID.KEY_FRIENDS);
			if (result == false)
			{
				LogHelper.Log("loadUserData.. err! can not load friend manager.");
				return false;
			}
		}

		// load stock
		stock.clear();
		List<String> all_stock_keys = new ArrayList<String>();
		for (int i = 0; i < DatabaseID.STOCK_MAX; i++)
		{
			String key = _user_id + "_" + KeyID.KEY_STOCKS + i;
			all_stock_keys.add(key);
		}
		
		try
		{
			Map<String, Object> all_stock_data = DBConnector.GetMembaseServer(_user_id).GetMulti(all_stock_keys);
			for (int i = 0; i < DatabaseID.STOCK_MAX; i++)
			{
				String key = _user_id + "_" + KeyID.KEY_STOCKS + i;
				if (all_stock_data.containsKey(key))
				{
					byte[] stock_data = (byte[])all_stock_data.get(key);
					Stock inner_stock = new Stock(i, stock_data, userInfo);
					if (inner_stock.isLoadSuccess())
					{
						stock.add(i, inner_stock);
					}
					else
					{
						LogHelper.Log("err! load stock fail, key = " + key);
						return false;
					}
				}
				else
				{
					LogHelper.Log("err! can not load " + key);
					return false;
				}
			}
		}
		catch (Exception e)
		{
			LogHelper.LogException("load stocks data", e);
		}

		// load floor
		floor.clear();
		List<String> all_floor_keys = new ArrayList<String>();
		for (int i = 0; i < userInfo.getTotalFloor(); i++)
		{
			String key = _user_id + "_" + KeyID.KEY_FLOORS + i;
			all_floor_keys.add(key);
		}

		try
		{
			Map<String, Object> all_floor_data = DBConnector.GetMembaseServer(_user_id).GetMulti(all_floor_keys);
			for (int i = 0; i < userInfo.getTotalFloor(); i++)
			{
				String key = _user_id + "_" + KeyID.KEY_FLOORS + i;
				if (all_floor_data.containsKey(key))
				{
					byte[] floor_data = (byte[])all_floor_data.get(key);
					Floor f = new Floor(floor_data);
					if (f.isLoadSuccess() == false)
					{
						LogHelper.Log("err! load floor fail, user id = " + _user_id + ", floor key = " + key);
						return false;
					}
					floor.add(i, f);
				}
				else
				{
					LogHelper.Log("err! can not load " + key);
					return false;
				}
			}
		}
		catch (Exception e)
		{
			LogHelper.LogException("load_floors_data", e);
		}
		
		// load machine
		machine.clear();
		List<String> all_machine_keys = new ArrayList<String>();
		for (int i = 0; i < userInfo.getTotalFloor(); i++)
		{
			String key = _user_id + "_" + KeyID.KEY_MACHINES + i;
			all_machine_keys.add(key);
		}
		try
		{
			Map<String, Object> all_machines_data = DBConnector.GetMembaseServer(_user_id).GetMulti(all_machine_keys);
			for (int i = 0; i < userInfo.getTotalFloor(); i++)
			{
				String key = _user_id + "_" + KeyID.KEY_MACHINES + i;
				if (all_machines_data.containsKey(key))
				{
					byte[] machine_data = (byte[])all_machines_data.get(key);
					Machine mc = new Machine(machine_data);
					if (mc.isNeedSave())
					{
						SET_DB_VALUE_BINARY(KeyID.KEY_MACHINES + i, mc.getData());
					}
					machine.add(i, mc);
				}
				else
				{
					LogHelper.Log("err! can not load " + key);
					return false;
				}
			}
		}
		catch (Exception e)
		{
			LogHelper.LogException("load_machines_data", e);
		}

		// load machine durability
		machineDurability.clear();
		List<String> all_machine_durability_keys = new ArrayList<String>();
		for (int i = 0; i < userInfo.getTotalFloor(); i++)
		{
			String key = _user_id + "_" + KeyID.KEY_MACHINES_DURABILITY + i;
			all_machine_durability_keys.add(key);
		}
		
		try
		{
			Map<String, Object> all_machine_durability_data = DBConnector.GetMembaseServer(_user_id).GetMulti(all_machine_durability_keys);
			for (int i = 0; i < userInfo.getTotalFloor(); i++)
			{
				String key = _user_id + "_" + KeyID.KEY_MACHINES_DURABILITY + i;
				if (all_machine_durability_data.containsKey(key))
				{
					byte[] machine_durability_data = (byte[])all_machine_durability_data.get(key);
					MachineDurability md = new MachineDurability(machine_durability_data);
					machineDurability.add(i, md);
				}
				else
				{
					LogHelper.Log("err! can not load " + key);
					return false;
				}
			}
		}
		catch (Exception e)
		{
			LogHelper.LogException("load_machine_durability_data", e);
		}

		// load npc machine durability
		npcMachineDurability.clear();
		for (int i = 0; i < Server.s_globalDB[DatabaseID.SHEET_MACHINE].length; i++)
		{
			byte[] npc_machine_durabiliry_bin = null;

			try
			{
				npc_machine_durabiliry_bin = GET_DB_VALUE_BINARY(KeyID.KEY_NPC_MACHINES_DURABILITY + i);
			}
			catch (Exception e)
			{
				LogHelper.Log("loadUserData.. can not get npc machine durability data from db.");
				LogHelper.LogException("loadUserData", e);
				npc_machine_durabiliry_bin = null;
			}

			if (npc_machine_durabiliry_bin == null || npc_machine_durabiliry_bin.length == 0)
			{
				LogHelper.Log("loadUserData.. npc_machine_durabiliry_bin is null. i = " + i);
				// return false;

				// nnt need this for old acc, this should be deleted when release
				// npc machine durability (loadUserData)
				MachineDurability npcMD = new MachineDurability(i);
				npcMD.setDurability(npcMD.getDurabilityMax());
				SET_DB_VALUE_BINARY(KeyID.KEY_NPC_MACHINES_DURABILITY + i, npcMD.getData());
				
				npc_machine_durabiliry_bin = npcMD.getData();
			}

			MachineDurability md = new MachineDurability(npc_machine_durabiliry_bin);
			npcMachineDurability.add(i, md);
		}

		// owl
		if (bUseOwl)
		{
			byte[] owl_bin = null;

			try
			{
				owl_bin = GET_DB_VALUE_BINARY(KeyID.KEY_OWL);
			}
			catch (Exception e)
			{
				LogHelper.Log("loadUserData.. can not get owl data from db.");
				LogHelper.LogException("loadUserData", e);
				owl_bin = null;
			}

			if (owl_bin == null || owl_bin.length == 0)
			{
				LogHelper.Log("loadUserData.. owl_bin is null");
				// return false;
				
				// nnt this for old acc can play continue
				owl = new Owl(userInfo.getLevel());
				SET_DB_VALUE_BINARY(KeyID.KEY_OWL, owl.getData());
				owl_bin = owl.getData();
			}

			owl = new Owl(owl_bin);
		}
		
		// gift code enter
		if (bUseGiftCode)
		{
			byte[] gift_code_bin = null;

			try
			{
				gift_code_bin = GET_DB_VALUE_BINARY(KeyID.KEY_GIFT_CODE_ENTER);
			}
			catch (Exception e)
			{
				LogHelper.Log("loadUserData.. can not get gift_code_enter data from db.");
				LogHelper.LogException("loadUserData", e);
				gift_code_bin = null;
			}

			if (gift_code_bin == null || gift_code_bin.length == 0)
			{
				LogHelper.Log("loadUserData.. gift_code_bin is null");
				// return false;
				
				giftCodeEnter = new GiftCodeEnter();
				SET_DB_VALUE_BINARY(KeyID.KEY_GIFT_CODE_ENTER, giftCodeEnter.getData());
				gift_code_bin = giftCodeEnter.getData();
			}

			giftCodeEnter = new GiftCodeEnter(gift_code_bin);
		}

		// event
//		if (bUseEvent)
//		{
//			LogHelper.Log("\n\n\n");
//			
//			byte[] event_bin = null;
//
//			try
//			{
//				event_bin = GET_DB_VALUE_BINARY(KeyID.KEY_EVENT);
//			}
//			catch (Exception e)
//			{
//				LogHelper.Log("loadUserData.. can not get event data from db.");
//				LogHelper.LogException("loadUserData", e);
//				event_bin = null;
//			}
//
//			if (event_bin == null || event_bin.length == 0)
//			{
//				LogHelper.Log("loadUserData.. event_bin is null");
//				
//				mainEvent = new Event();
//				event_bin = mainEvent.getData();
//				SET_DB_VALUE_BINARY(KeyID.KEY_EVENT, event_bin);
//			}
//
//			mainEvent = new Event(event_bin);
//			
//			mainEvent.displayDataPackage();
//			
//			// -----------------------------------------------------------------------------
//			LogHelper.Log("");
//			
//			byte[] emo_bin = null;
//
//			try
//			{
//				emo_bin = GET_DB_VALUE_BINARY(KeyID.KEY_EVENT_MAIN_OBJECT);
//			}
//			catch (Exception e)
//			{
//				LogHelper.Log("loadUserData.. can not get event data from db.");
//				LogHelper.LogException("loadUserData", e);
//				emo_bin = null;
//			}
//
//			if (emo_bin == null || emo_bin.length == 0)
//			{
//				LogHelper.Log("loadUserData.. emo_bin is null");
//				
//				mainEvent = new Event();
//				emo_bin = mainEvent.getData();
//				SET_DB_VALUE_BINARY(KeyID.KEY_EVENT_MAIN_OBJECT, emo_bin);
//			}
//
//			eventMainObject = new EventMainObject(emo_bin);
//			
//			eventMainObject.displayDataPackage();
//			
//			LogHelper.Log("\n\n\n");
//		}
		
		// load order manager
		byte[] order_manager_bin = null;

		try
		{
			order_manager_bin = GET_DB_VALUE_BINARY(KeyID.KEY_ORDER);
			
			if (order_manager_bin == null || order_manager_bin.length == 0)
			{
				LogHelper.Log("loadUserData.. order_manager_bin is null.");

				return false;
			}
			
			orderManager = new OrderManager(order_manager_bin);

		}
		catch (Exception e)
		{
			LogHelper.Log("loadUserData.. can not get orders data from db.");
			LogHelper.LogException("loadUserData", e);
			return false;
		}
		
		// load news board
		byte[] news_board_bin = null;
		try
		{
			news_board_bin = GET_DB_VALUE_BINARY(KeyID.KEY_NEWS_BOARD);
			if (news_board_bin != null && news_board_bin.length > 0)
			{
				newsBoard = new NewsBoard(userInfo, news_board_bin);
			}
		}
		catch (Exception e)
		{
			LogHelper.LogException("loadUserData", e);
			return false;
		}
		
		// load dailygift
		if (bUseDailyGift)
		{
			byte[] dailygift_bin = null;
		
			try
			{
				dailygift_bin = GET_DB_VALUE_BINARY(KeyID.KEY_DAILY_GIFT);
				
				if (dailygift_bin == null || dailygift_bin.length == 0)
				{
					LogHelper.Log("loadUserData.. dailygift_bin is null.");
					dailygift = new DailyGift();
					dailygift.initGifts(userInfo.getLevel());
					
					dailygift_bin = dailygift.getData();
					
					SET_DB_VALUE_BINARY(KeyID.KEY_DAILY_GIFT, dailygift_bin);
					
					// return false;
				}
				
				dailygift = new DailyGift(dailygift_bin);
			}
			catch (Exception e)
			{
				LogHelper.Log("loadUserData.. can not get dailygift from db.");
				LogHelper.LogException("loadUserData", e);
				return false;
			}
		}
		
		// load machine_repair_limit
		byte[] machine_repair_limit_bin = null;
	
		try
		{
			machine_repair_limit_bin = GET_DB_VALUE_BINARY(KeyID.KEY_MACHINES_REPAIR_LIMIT);
			
			if (machine_repair_limit_bin == null || machine_repair_limit_bin.length == 0)
			{
				// nnt this for old acc can play continue
				machineRepairLimit = new MachineRepairLimit(userInfo.getLevel());
				machine_repair_limit_bin = machineRepairLimit.getData();
				SET_DB_VALUE_BINARY(KeyID.KEY_MACHINES_REPAIR_LIMIT, machine_repair_limit_bin);

				LogHelper.Log("loadUserData.. machine_repair_limit_bin is null.");
				// return false;
			}
			
			machineRepairLimit = new MachineRepairLimit(machine_repair_limit_bin);
		}
		catch (Exception e)
		{
			LogHelper.Log("loadUserData.. can not get machine_repair_limit from db.");
			LogHelper.LogException("loadUserData", e);
			return false;
		}

		// load tutorialManager
		byte[] tutorialManager_bin = null;
	
		try
		{
			tutorialManager_bin = GET_DB_VALUE_BINARY(KeyID.KEY_TUTORIAL);
			
			if (tutorialManager_bin == null || tutorialManager_bin.length == 0)
			{
				LogHelper.Log("loadUserData.. tutorialManager_bin is null.");
				// return false;
				
				// nnt need this for old acc, this should be deleted when release
				tutorialManager = new TutorialManager();
				SET_DB_VALUE_BINARY(KeyID.KEY_TUTORIAL, tutorialManager.getData());
				tutorialManager_bin = tutorialManager.getData();
			}
			
			tutorialManager = new TutorialManager(tutorialManager_bin);
		}
		catch (Exception e)
		{
			LogHelper.Log("loadUserData.. can not get tutorialManager_bin from db.");
			LogHelper.LogException("loadUserData", e);
			return false;
		}
		
		// load previous bug pool
		String bug_pool = "";
		try
		{
			bug_pool = (String)base.Get(_user_id + "_" + KeyID.KEY_BUG_POOL);
		}
		catch (Exception e)
		{
			LogHelper.LogException("loadUserData.LoadBugPool", e);
			bug_pool = "";
		}
		
		BugInfo.clear();
		if (bug_pool == null || bug_pool.length() == 0) // old user that does not have this key
		{
			base.Set(_user_id + "_" + KeyID.KEY_BUG_POOL, "null");
		}
		else
		{
			if (!bug_pool.equals("null"))
			{
				String aos[] = bug_pool.split(":");
				for (int i = 0; i < aos.length - 1; i += 2)
				{
					BugInfo.add(aos[0] + ":" + aos[1]);
				}
			}
		}
		
		// load ratio of bug appearing at friend's house
		String bugratio = "";
		try
		{
			bugratio = (String)base.Get(_user_id + "_" + KeyID.KEY_USER_BUG_APPEAR_RATIO);
		}
		catch (Exception e)
		{
			LogHelper.LogException("loadUserData.LoadBugAppearRatio", e);
			bugratio = null;
		}
		
		if (bugratio == null || bugratio.length() == 0)
		{
			try
			{
				InitialRandomBugAppearRatio();
			}
			catch (Exception e)
			{
				LogHelper.LogException("GenerateNewUser.InitialRandomBugAppearRatio", e);
			}
		
			StringBuilder sb = new StringBuilder(16);
			for (String s : BugAppearRatio)
			{
				if (sb.length() > 0)
				{
					sb.append(":").append(s);
				}
				else
				{
					sb.append(s);
				}
			}

			base.Add(_user_id + "_" + KeyID.KEY_USER_BUG_APPEAR_RATIO, sb.toString());
		}
		else
		{
			String[] aos = bugratio.split(":");
			BugAppearRatio.clear();
			for (int i = 0; i < aos.length - 2; i += 3)
			{
				int type = Integer.parseInt(aos[i]);
				int id = Integer.parseInt(aos[i+1]);
				double percent = Double.parseDouble(aos[i+2]);
				
				StringBuilder s = new StringBuilder(15);
				s.append(type);
				s.append(":").append(id);
				s.append(":").append(percent);
				
				BugAppearRatio.add(s.toString());
			}
			
		}
		
		// load next time bug appear
		try
		{
			bug_appear_time = (int)base.Get(_user_id + "_" + KeyID.KEY_NEXT_TIME_BUG_APPEAR);
		}
		catch (Exception e)
		{
			LogHelper.LogException("loadUserData.LoadBugAppearRatio", e);
			bug_appear_time = Misc.SECONDS();
		}
		
		try
		{
			garden_appraisal = UpdateGardenTotalAppraisal();
		}
		catch (Exception e)
		{
			LogHelper.LogException("login.UpdateGardenTotalAppraisal", e);
		}

		
		// load user ranking target
		byte[] ranking = null;
		try 
		{
			ranking = GET_DB_VALUE_BINARY(KeyID.KEY_USER_RANKING_TARGET);
		} 
		catch (Exception e) 
		{
			LogHelper.LogException("loadUserData.LoadRankingInfo", e);
			ranking = null;
		}
		
		if (ranking == null || ranking.length == 0) 
		{
			ranking_target = new RankingTarget(_user_id, userInfo);
		} 
		else 
		{
			ranking_target = new RankingTarget(ranking, userInfo);
		}
		
		// load airship
		if (_use_airship) 
		{
			airship = new Airship(userInfo, KeyID.KEY_AIRSHIP, stock, machine, floor);
			GetAirship().Load();
		}
		
		// load tomkid
		if (_use_tomkid) 
		{
			// load tomkid
			byte[] tom = null;
			try 
			{
				tom = GET_DB_VALUE_BINARY(KeyID.KEY_TOM_KID);
			} 
			catch (Exception e) 
			{
				LogHelper.LogException("loadUserData.LoadTomKid", e);
				tom = null;
			}
			
			if (tom == null || tom.length == 0) 
			{
				tomkid = new TomKid();
			}
			else 
			{
				tomkid = new TomKid(tom);
			}
		}
		
		// load fortune
		if (_use_fortune && userInfo.getLevel() >= 16)
		{
			byte[] b = null;
			try
			{
				b = GET_DB_VALUE_BINARY(KeyID.KEY_FORTUNE);
			}
			catch (Exception e)
			{
				b = null;
				LogHelper.LogException("loadUserData.LoadFortune", e);
			}

			if (b != null && b.length > 0)
			{
				fortune_manager = new RotaFortunaeManager(userInfo, b);
			}
			else
			{
				fortune_manager = new RotaFortunaeManager(userInfo);
			}
			
			fortune_manager.Load();
		}
		
		// load achievement
		if (_use_achievement)
		{
			acm_mgr = null;
		}
		
		// load invite friend
		if (_use_invite_friend)
		{
			byte[] invite_friend_data = null;
			try
			{
				invite_friend_data = GET_DB_VALUE_BINARY(KeyID.KEY_INVITE_FRIEND);
			}
			catch (Exception e)
			{
				invite_friend_data = null;
				LogHelper.Log("LoadUserData.LoadInviteFriend");
			}
			
			if (invite_friend_data != null && invite_friend_data.length > 0)
			{
				invite_friend = new InviteFriend(invite_friend_data);
			}
			else
			{
				invite_friend = new InviteFriend();
				base.AddRaw(_user_id + "_" + KeyID.KEY_INVITE_FRIEND, invite_friend.GetData());
			}
		}
		
		// private data
		byte[] private_data = null;
		try
		{
			private_data = GET_DB_VALUE_BINARY(KeyID.KEY_PRIVATE_INFO);
		}
		catch (Exception e)
		{
			private_data = null;
		}
		if (private_data != null && private_data.length > 0)
		{
			private_info = new PrivateInfo(private_data);
		}
		else
		{
			private_info = new PrivateInfo(_user_id);
			base.AddRaw(_user_id + "_" + KeyID.KEY_PRIVATE_INFO, private_info.GetData());
		}
		
		// cross promotion info
		if (_use_cross_promotion) {
			String promotion_data = "null";
			try {
				if (_device_platform.equals("ANDROID")) {
					promotion_data = (String)DBConnector.GetMembaseServerForTemporaryData().Get(KeyID.KEY_CROSS_PROMOTION_ANDROID);
				} else {
					promotion_data = (String)DBConnector.GetMembaseServerForTemporaryData().Get(KeyID.KEY_CROSS_PROMOTION_IOS);
				}
			} catch (Exception e) {
				promotion_data = "null";
			}

			cross_promotion = new CrossPromotion(promotion_data);
		}
		
//		try
//		{
//			_event_mid_autumn_ranking = (int)DBConnector.GetMembaseServer(_user_id).Get(_user_id + "_event_mid_autumn_ranking");
//		}
//		catch (Exception e)
//		{
//			_event_mid_autumn_ranking = -1;
//		}
//		
//		if (_event_mid_autumn_ranking == -1)
//		{
//			_event_mid_autumn_ranking = 0;
//			DBConnector.GetMembaseServer(_user_id).Add(_user_id + "_event_mid_autumn_ranking", 0);
//		}
		
		if (_use_stock_event)
		{
			try
			{
				byte[] data = DBConnector.GetMembaseServer(_user_id).GetRaw(_user_id + "_" + KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT);
				if (data != null && data.length > 0)
				{
					stock_event = new Stock(DatabaseID.STOCK_EVENT, data, userInfo);
				}
				else
				{
					stock_event = new Stock(DatabaseID.STOCK_EVENT, userInfo);
				}
			}
			catch (Exception e)
			{
				LogHelper.LogException("LoadStockEvent", e);
			}
			if (stock_event == null || !stock_event.isLoadSuccess())
			{
				LogHelper.Log("Can not load stock event!");
				return false;
			}
			if (ProjectConfig.IS_SERVER_FREESTYLE == 1)
			{
				stock_event.LogStorage();
			}
		}
		
		// offer manager
		_user_offer_manager = new OfferManager();
		try
		{
			byte[] b = DBConnector.GetMembaseServer(_user_id).GetRaw(_user_id + "_" + KeyID.KEY_OFFER_MANAGER);
			if (b != null && b.length > 0)
			{
				_user_offer_manager.Load(b);
			}
		}
		catch (Exception e)
		{
			LogHelper.LogException("LoadUserOfferManager",e );
		}
		
		if (_use_new_dailygift)
		{
			_new_dailygift = new NewDailyGift();
			try {
				byte[] ba = DBConnector.GetMembaseServer(_user_id).GetRaw(_user_id + "_" + KeyID.KEY_NEW_DAILYGIFT);
				if (ba != null && ba.length > 0) {
					NewDailyGift().Load(ba);
				} else {
					NewDailyGift().init();
					
					// check login count
					NewDailyGift().increaseAttendCount();

					if (NewDailyGift().getAttendCount() < NewDailyGift().getAttendMax() &&
						!NewDailyGift().GetDay(NewDailyGift().getAttendCount()).isAttend())
					{
						NewDailyGift().GetDay(NewDailyGift().getAttendCount()).setAttend(true);

						gift_mgr.AddGiftBox(Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][60][DatabaseID.GIFT_INFO_NAME]), 
							Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][60][DatabaseID.GIFT_INFO_DESCRIPTION]).replace("%d", (NewDailyGift().getAttendCount() + 1) + ""),
							NewDailyGift().GetDay(NewDailyGift().getAttendCount()).getGift());

						SkyGarden.ActiveUsers().put(SkyGarden.ActiveUsers().size(), _device_id);
					}
					
					ADD_DB_VALUE_BINARY(KeyID.KEY_NEW_DAILYGIFT, NewDailyGift().GetData());
				}
			} catch (Exception e) {
				LogHelper.LogException("LoadNewDailyGift",e );
			}
		}
		
		if (_use_combo_decor || ProjectConfig.IS_SERVER_FREESTYLE == 1)
		{
			try
			{
				byte[] ba = DBConnector.GetMembaseServer(_user_id).GetRaw(_user_id + "_" + KeyID.KEY_COMBO);
				if (ba != null && ba.length > 0) {
					_combo_manager = new ComboManager(ba);
				} else {
					_combo_manager = new ComboManager();
					ADD_DB_VALUE_BINARY(KeyID.KEY_COMBO, _combo_manager.GetData());
				}
			} catch (Exception e) {
				LogHelper.LogException("LoadCombo",e );
			}
		}
		
		if (_use_close_friend) {
			try {
				byte[] ba = DBConnector.GetMembaseServer(_user_id).GetRaw(_user_id + "_" + KeyID.KEY_CLOSE_FRIEND);
				if (ba != null && ba.length > 0) {
					_close_friend = new CloseFriend(ba);
				} else {
					_close_friend = new CloseFriend();
					ADD_DB_VALUE_BINARY(KeyID.KEY_CLOSE_FRIEND, _close_friend.GetData());
				}
				
				if (_user_id > DatabaseID.NEW_COMER_ID) {
					CloseFriend().SetAllowAddFriend(true);
				} else {
					CloseFriend().SetAllowAddFriend(false);
				}
			} catch (Exception e) {
				LogHelper.LogException("LoadCloseFriend",e );
			}
		}
		
		if (_use_treasure_trunk) {
			try {
				byte[] ba = DBConnector.GetMembaseServer(_user_id).GetRaw(_user_id + "_" + KeyID.KEY_TREASURE);
				if (ba != null) {
					_trunk = new TreasureTrunk(ba);
				} else {
					_trunk = new TreasureTrunk();
					ADD_DB_VALUE_BINARY(KeyID.KEY_TREASURE, _trunk.GetData());
				}
			} catch (Exception e) {
				LogHelper.LogException("LoadTrunk", e);
			}
		}
		
		return true;
	}
	
	private void handleHidePot(FBEncrypt encrypt)
	{
//		StringBuilder log = new StringBuilder();
		
		short fid = encrypt.getShort(KeyID.KEY_FLOOR_INDEX);
		short sid = encrypt.getShort(KeyID.KEY_SLOT_INDEX);
		
//		log.append(fid);
//		log.append('\t').append(sid);
		
		// valid params
		if (fid >= userInfo.getTotalFloor() || fid < 0)
		{
			LogHelper.Log("handleHidePot.. err! invalid floor param.");
			_return_id = ReturnCode.RESPONSE_INVALID_FLOOR_PARAM;
			requestError();
			return;
		}
		 
		if (sid >= DatabaseID.MAX_SLOT_PER_FLOOR || sid < 0)
		{
			LogHelper.Log("handleHidePot.. err! invalid slot param.");
			_return_id = ReturnCode.RESPONSE_INVALID_SLOT_PARAM;
			requestError();
			return;
		}
		
		short potid = GetPot(fid, sid).getID();
		if (potid == -1)
		{
			LogHelper.Log("handleHidePot.. err! can't find pot at slot[" + fid + "," + sid + "].");
			_return_id = ReturnCode.RESPONSE_CANT_FIND_POT;
			requestError();
			return;
		}
		 
		if (GetPlant(fid, sid).getID() != -1)
		{
			LogHelper.Log("handleHidePot.. err! pot is not empty.");
			_return_id = ReturnCode.RESPONSE_POT_IS_NOT_EMPTY;
			requestError();
			return;
		}
		 
		if (GetStock(DatabaseID.STOCK_WAREHOUSE).isFull())
		{
			LogHelper.Log("handleHidePot.. err! stock is full.");
			_return_id = ReturnCode.RESPONSE_STOCK_IS_FULL;
			requestError();
			return;
		}
		 
		 // proceed
		boolean result = false;
		
		result = GetPot(fid, sid).deletePot();
		
//		log.append('\t').append(potid);
//		log.append('\t').append(result);
		
		if (!result)
		{
			_return_id = ReturnCode.RESPONSE_CANT_DELETE_POT;
			requestError();
			LogHelper.Log("handleHidePot.. err! delete pot fail");
			return;
		}
		
		result = GetStock(DatabaseID.STOCK_WAREHOUSE).increaseObject(_command_id, DatabaseID.IT_POT, potid, SkyGarden._server_id);
//		log.append('\t').append(result);
		if (!result)
		{
			_return_id = ReturnCode.RESPONSE_CANT_INCREASE_OBJECT;
			requestError();
			LogHelper.Log("handleHidePot.. err! cannot increase items");
			return;
		}
		
		// LogHelper.Log("handleHidePot.. hide pot " + potid + " at slot [" + fid + "," + sid + "] OK.");
		
		// remove floor combo
		for (int i = 0; i < DatabaseID.MAX_SLOT_PER_FLOOR; i++)
		{
			if (GetPlant(fid, i).getID() < 0)
			{
				continue; // dont check empty pot
			} 
			
			int combo_id = GetPlant(fid, i).GetComboID();
			if (combo_id != -1) // only check plant that has combo
			{
				GetPlant(fid, i).SetComboID(-1); // remove combo
				
				// recalculate time
				int timereduce_percent = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_POT][potid][DatabaseID.POT_COMBO_TIME_BONUS]);
				
				if (timereduce_percent > 0)
				{
					int timereduce = (timereduce_percent * (int)(Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_SEED][GetPlant(fid, i).getID()][DatabaseID.SEED_GROW_TIME]))) / 100;
					GetPlant(fid, i).setGrowTime(GetPlant(fid, i).getGrowTime() + timereduce); // add more grow time
				}
			}
		}
		 
		// save to db
		result = SET_DB_VALUE_BINARY(KeyID.KEY_FLOORS + fid, GetFloor(fid).getData(true));
		if (!result)
		{
			LogHelper.Log("handleHidePot.. can not save floor to db");
			_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
			requestError();
			return;
		}
		
		result = SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, GetStock(DatabaseID.STOCK_WAREHOUSE).getDataToDatabase());
		if (!result)
		{
			LogHelper.Log("handleHidePot.. can not save stock to db");
			_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
			requestError();
			return;
		}
		
		// LogHelper.Log("handleHidePot.. save to db OK.");
//		LogHelper.Log(log.toString());
		
		// update garden appraisal
		try
		{
			garden_appraisal = UpdateAppraisal(DatabaseID.APPRAISAL_POT);
		}
		catch (Exception e)
		{
			LogHelper.LogException("handleHidePot.UpdateAppraisal", e);
		}

		// send to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		
		response.addShort(KeyID.KEY_TOTAL_FLOOR_CHANGED, 1);
		response.addBinary(KeyID.KEY_FLOORS + 0, GetFloor(fid).getData(false));
		
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, GetStock(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
		response.addLong(KeyID.KEY_GARDEN_APPRAISAL, garden_appraisal);
		
		try
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("handleHidePot.. response to client OK.");
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("handleHidePot", ex);
		}
	}
	
	private void handlePlantFlower(FBEncrypt encrypt)
	{
//		StringBuilder log = new StringBuilder();
		
		// get valid params.
		List<FBEncrypt> validParams = new LinkedList<FBEncrypt>();

//		log.append("client_param");
		for (int i = 0; i < DatabaseID.MAX_FLOOR_ON_SCREEN * DatabaseID.MAX_SLOT_PER_FLOOR; i++)
		{
			byte[] bin = null;
			if (encrypt.hasKey(KeyID.KEY_PLANT_FLOWER + i))
			{
				bin = encrypt.getBinary(KeyID.KEY_PLANT_FLOWER + i);
			}
			else
			{
				break;
			}

			if (bin == null || bin.length ==0)
			{
				break;
			}
			
			FBEncrypt f = new FBEncrypt(bin, true);
			short fid		= f.getShort(KeyID.KEY_FLOOR_INDEX);
			short sid		= f.getShort(KeyID.KEY_SLOT_INDEX);
			short plantid	= f.getShort(KeyID.KEY_PLANT_ID);
			
//			log.append('\t').append(fid);
//			log.append('\t').append(sid);
//			log.append('\t').append(plantid);

			// valid
			if (fid >= userInfo.getTotalFloor() || fid < 0) 
			{
				LogHelper.Log("handlePlantFlower.. err! invalid floor param: " + fid);
				_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
				requestError();
				return;
			}
			
			if (sid >= DatabaseID.MAX_SLOT_PER_FLOOR || sid < 0)
			{
				LogHelper.Log("handlePlantFlower.. err! invalid slot param: " + sid);
				_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
				requestError();
				return;
			}

			if (plantid >= Server.s_globalDB[DatabaseID.SHEET_SEED].length || plantid < 0)
			{
				LogHelper.Log("handlePlantFlower.. err! invalid plant id: " + plantid);
				_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
				requestError();
				return;
			}
			
			// add to list
			validParams.add(f);
		}
		
//		log.append('\t').append("valid_param");
		// proceed
		List<Integer> floorChanged = new LinkedList<Integer>();
		boolean change = false;
		for (FBEncrypt valid_param: validParams)
		{
			short fid		= valid_param.getShort(KeyID.KEY_FLOOR_INDEX);
			short sid		= valid_param.getShort(KeyID.KEY_SLOT_INDEX);
			short plantid	= valid_param.getShort(KeyID.KEY_PLANT_ID);
			
//			log.append('\t').append(fid);
//			log.append('\t').append(sid);
//			log.append('\t').append(plantid);
			
			if (!floorChanged.contains((int)fid))
			{
				floorChanged.add((int)fid);
			}
			
			int potid = GetPot(fid, sid).getID();
			
			if (potid == -1)
			{
				LogHelper.Log("handlePlantFlower.. can not find pot at [" + fid + "," + sid + "].");
				continue;
			}
			
			if (GetPlant(fid, sid).getID() != -1)
			{
				LogHelper.Log("handlePlantFlower.. pot [" + fid + "," + sid +  "] is not empty.");
				continue;
			}

			if (GetStock(DatabaseID.STOCK_SILO).getProductNum(DatabaseID.IT_PLANT, plantid) <= 0)
			{
				LogHelper.Log("handlePlantFlower.. not enough seed");
				break;
			}
			
			boolean result = false;

			result = GetStock(DatabaseID.STOCK_SILO).decreaseObject(_command_id, DatabaseID.IT_PLANT, plantid); // decrease quantity of plant in stock
//			log.append('\t').append(result);
			if (!result)
			{
				LogHelper.Log("handlePlantFlower.. err! can not decrease object");
				_return_id = ReturnCode.RESPONSE_CANT_DECREASE_OBJECT;
				requestError();
				return;
			}

			 // set plant id on pot
			GetPlant(fid, sid).createNewPlant(plantid);
			
			// set current decor id & floor combo id to plant
			int decor_id = GetDecor(fid, sid).getID();
			int combo_id = GetFloor(fid).GetComboID();
			GetPlant(fid, sid).SetDecorID(decor_id);
			GetPlant(fid, sid).SetComboID(combo_id);
			
//			log.append('\t').append(GetPlant(fid, sid).getGrowTime());
			
			// determine if plant has bug on it or not, base on pot, plant, decor, floor combo
			int bug_bonus_pot	= GetPot(fid, sid).getBugAppearRatio();
			int bug_bonus_plant	= GetPlant(fid, sid).getBugAppearRatio();
			int bug_bonus_decor	= GetDecor(fid, sid).getBugAppearRatio();
			int bug_bonus_combo	= 0; // floor combo
			int bug_bonus_decor_combo = 0;
			int bug_bonus_level = GetBugBonusLevel(plantid, userInfo.getLevel());
			LogHelper.Log("bug_bonus_level := " + bug_bonus_level);
			
			if (combo_id != -1)
			{
				try
				{
					bug_bonus_combo = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_POT][GetPot(fid, sid).getID()][DatabaseID.POT_COMBO_BUG_BONUS]);
				}
				catch (Exception e)
				{
					LogHelper.LogException("handlePlantFlower.GetComboBugBonus", e);
					bug_bonus_combo = 0;
				}
			}
			
			// bonus from decor combo
			if (!Strings.isNullOrEmpty(ComboManager().GetFloorCombo(fid)))
			{
				String[] decor_combos = ComboManager().GetFloorCombo(fid).split(";");
				for (String s : decor_combos) {
					bug_bonus_decor_combo += ComboManager().GetComboBonus(Integer.parseInt(s), DatabaseID.COMBO_BONUS_BUG);
				}
			}
			LogHelper.LogHappy("bug_bonus_decor_combo := " + bug_bonus_decor_combo);
			
			boolean hasBug = false;
			if (Misc.RANDOM_RANGE(0, 100) < (bug_bonus_pot + bug_bonus_plant + bug_bonus_decor + bug_bonus_combo + bug_bonus_decor_combo + bug_bonus_level))
			{
				hasBug = true;
			}
			
			// dont generate bug in tutorial
			if (tutorialManager.getFirstPlantHasBug() && userInfo.getLevel() == 2)
				hasBug = false;
			
			// will generate bug if on the first time planting
			if (tutorialManager.getFirstPlantHasBug() == false)
			{
				hasBug = true;
				tutorialManager.setFirstPlantHasBug(true);
				SET_DB_VALUE_BINARY(KeyID.KEY_TUTORIAL, tutorialManager.getData());
			}
			
			// will generate bugs on first time planting any kind of flowers
			if (userInfo.getLevel() < 14 && userInfo.isFirstPlant(plantid))
			{
				hasBug = true;
				userInfo.setUsedFirstPlant(plantid);
				LogHelper.Log("handlePlantFlower.. first time planting flower id = " + plantid + ", force to have bug");
			}
			
			if (hasBug)
			{
				GetPlant(fid, sid).setBugOnPlant(true);
//				log.append('\t').append("bug");
			}

			// determine bonus grow time base on pot, decor, floor combo
			int time_reduce_pot = 0;
			int time_reduce_decor = 0;
			int time_reduce_floor_combo = 0;
			int time_reduce_event = 0;
			int time_reduce_decor_combo = 0;
			
			if (potid >= 0)
			{
				time_reduce_pot = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_POT][potid][DatabaseID.POT_TIME_DECREASE]);  // pot bonus
			}
			
			if (decor_id >= 0)
			{
				time_reduce_decor = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_DECOR][decor_id][DatabaseID.DECOR_TIME_DECREASE]); // decor bonus
			}
			
			if (combo_id >= 0)
			{
				time_reduce_floor_combo = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_POT][potid][DatabaseID.POT_COMBO_TIME_BONUS]); // combo bonus
			}
			
			String start_event_time = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_EVENT_GLOBAL][13][DatabaseID.EVENT_GLOBAL_START_DATE]);
			String end_event_time = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_EVENT_GLOBAL][13][DatabaseID.EVENT_GLOBAL_END_DATE]);
			if(Misc.InEvent(start_event_time, end_event_time))
			{
				time_reduce_event = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_EVENT_GLOBAL][13][DatabaseID.EVENT_GLOBAL_BONUS_EXP_RATE]);
				LogHelper.LogHappy("Time reduce percent event := " + time_reduce_event);
			}
			
			// bonus from decor combo
			if (!Strings.isNullOrEmpty(ComboManager().GetFloorCombo(fid)))
			{
				String[] decor_combos = ComboManager().GetFloorCombo(fid).split(";");
				for (String s : decor_combos) {
					time_reduce_decor_combo += ComboManager().GetComboBonus(Integer.parseInt(s), DatabaseID.COMBO_BONUS_PLANT_TIME);
				}
			}
			LogHelper.LogHappy("time_reduce_decor_combo := " + time_reduce_decor_combo);
			
			int total_time_reduce_percent = time_reduce_pot + time_reduce_decor + time_reduce_floor_combo + time_reduce_event + time_reduce_decor_combo;
			
//			log.append('\t').append(total_time_reduce_percent);
			
			if (total_time_reduce_percent > 0)
			{
				int harvest_time = GetPlant(fid, sid).getGrowTime();
				int time_decrease = (int)((harvest_time - Misc.SECONDS()) * total_time_reduce_percent) / 100;
				
				GetPlant(fid, sid).setGrowTime(harvest_time - time_decrease);
				
//				log.append('\t').append(time_decrease);
//				log.append('\t').append(GetPlant(fid, sid).getGrowTime());
			}
			
			// LogHelper.Log("handlePlantFlower.. plant " + plantid + " at slot [" + fid + "," + sid + "] OK.");
			
			change = true;
		}

		// save db
		if (change)
		{
			boolean saveResult = false;
			
			saveResult = SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, GetStock(DatabaseID.STOCK_SILO).getDataToDatabase());
			if (!saveResult)
			{
				_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
				requestError();
				LogHelper.Log("handlePlantFlower.. err! save db error");
				return;
			}

			for (Integer fid: floorChanged)
			{
				saveResult = SET_DB_VALUE_BINARY(KeyID.KEY_FLOORS + fid.intValue(), GetFloor(fid.intValue()).getData(true));
				if (!saveResult)
				{
					_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
					requestError();
					LogHelper.Log("handlePlantFlower.. err! save db error");
					return;
				}
			}
			
			// LogHelper.Log("handlePlantFlower.. save to db OK.");
		}

//		LogHelper.Log(log.toString());
		
		// send result to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, GetStock(DatabaseID.STOCK_SILO).getDataToClient());

		response.addShort(KeyID.KEY_TOTAL_FLOOR_CHANGED, floorChanged.size());
		for (Integer fid: floorChanged)
		{
			response.addBinary(KeyID.KEY_FLOORS + floorChanged.indexOf(fid), GetFloor(fid.intValue()).getData(false));
		}

		try
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("handlePlantFlower.. response to client OK.");
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("handlePlantFlower", ex);
		}
	}
	
	private void handleHarvest(FBEncrypt encrypt)
	{
		List<FBEncrypt> validParams = new LinkedList<FBEncrypt>();
		for (int i = 0; i < DatabaseID.MAX_FLOOR_ON_SCREEN * DatabaseID.MAX_SLOT_PER_FLOOR; i++)
		{
			byte[] bin = null;
			if (encrypt.hasKey(KeyID.KEY_HARVEST + i))
			{
				bin = encrypt.getBinary(KeyID.KEY_HARVEST + i);
			}
			else
			{
				break;
			}

			if (bin == null || bin.length == 0)
			{
				break;
			}

			FBEncrypt f = new FBEncrypt(bin, true);
			short fid	= f.getShort(KeyID.KEY_FLOOR_INDEX);
			short sid	= f.getShort(KeyID.KEY_SLOT_INDEX);

			if (fid >= 0 && fid < userInfo.getTotalFloor() && sid >= 0 && sid < DatabaseID.MAX_SLOT_PER_FLOOR)
			{
				validParams.add(f);
			}
			else
			{
				LogHelper.Log("handleHarvest.. client sends invalid params.");
				_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
				requestError();
				return;
			}
		}
		
		long exp_used = 0;
		
		// proceed with valid params.
		List<Integer> floorChanged = new LinkedList<Integer>();
		StringBuilder dropList = new StringBuilder(48);
		StringBuilder expBonusList = new StringBuilder(48);

		boolean change = false;
		int acm_index = -1;
		for (FBEncrypt v : validParams)
		{
			short fid	= v.getShort(KeyID.KEY_FLOOR_INDEX);
			short sid	= v.getShort(KeyID.KEY_SLOT_INDEX);
			
			if (floorChanged.contains((int)fid) == false)
			{
				floorChanged.add((int)fid);
			}

			// check if plant is grown up.
			if (GetPlant(fid, sid).isGrownUp() == false)
			{
				LogHelper.Log("handleHarvest.. err! can not harvest plant at slot [" + fid +","+ sid +"].");
				continue;
			}

			// check if stock has enough space
			if (GetStock(DatabaseID.STOCK_SILO).checkFull(GetStock(DatabaseID.STOCK_SILO).getCapacityCurrent() + 2))
			{
				LogHelper.Log("handleHarvest.. err! stock is full.");
				_return_id = ReturnCode.RESPONSE_STOCK_IS_FULL;
				break;
			}

			int plantid		= GetPlant(fid, sid).getID();
			int exp_receive = 0;
			int bonus_percent = 0;
			
			boolean has_server_bonus = ServerConfig().containsKey(KeyID.KEY_BONUS_PLANT);
			if (has_server_bonus && userInfo.getLevel() > 10) {
				bonus_percent = ServerConfig().get(KeyID.KEY_BONUS_PLANT);
			}
			
			// bonus from decor combo
			if (!Strings.isNullOrEmpty(ComboManager().GetFloorCombo(fid)))
			{
				String[] decor_combos = ComboManager().GetFloorCombo(fid).split(";");
				for (String s : decor_combos) {
					bonus_percent += ComboManager().GetComboBonus(Integer.parseInt(s), DatabaseID.COMBO_BONUS_PLANT_EXP);
				}
			}
			LogHelper.LogHappy("bonus percent := " + bonus_percent);
			
			exp_receive = GetSlot(fid, sid).getHarvestExp(bonus_percent);

			boolean result = false;
			
			result = GetStock(DatabaseID.STOCK_SILO).add(DatabaseID.IT_PLANT, plantid, 2, _command_id);
			
			if (result == false)
			{
				_return_id = ReturnCode.RESPONSE_STOCK_ADD_ITEM_FAILED;
				requestError();
				LogHelper.Log("handleHarvest.. err! can not add item to stock");
				return;
			}
			
			// check if drops extra item when harvest
			int drop_item_id = -1;
			
			try
			{
				if (userInfo.getLevel() > 6 && userInfo.getLevel() < 15) {
					drop_item_id = GetDropItemCustom(userInfo.getLevel());
				} else {
					drop_item_id = GetDropItemAdvance(DropItemInfo, DatabaseID.ACTION_HARVEST_PLANT);
				}
			}
			catch (Exception e)
			{
				LogHelper.LogException("handleHarvest.GetDropItem", e);
				drop_item_id = -1;
			}
			
			if (drop_item_id > -1)
			{
				int item_type = DatabaseID.IT_MATERIAL;
				int item_id = drop_item_id;
				int item_num = 1;
				
				// handle event
				if (_use_event_mid_autumn_festival && item_id == DatabaseID.MATERIAL_MOON_CAKE)
				{
					item_type = DatabaseID.IT_EVENT;
					item_id = DatabaseID.ITEM_EVENT_MOON_CAKE;
					SetEventScore(KeyID.KEY_EVENT_MID_AUTUMN_FESTIVAL, 1);
				}
				
				// handle event 20-11
				if (_use_event_20_11 && item_id == DatabaseID.MATERIAL_ITEM_EVENT_FLOWER_20_11)
				{
					item_type = DatabaseID.IT_EVENT;
					item_id = DatabaseID.ITEM_EVENT_FLOWER_20_11;
					SetEventScore(KeyID.KEY_EVENT_20_11, 1);
				}
				
				// handle event xmas mini
				if (_use_event_xmas_mini && item_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_1)
				{
					item_type = DatabaseID.IT_EVENT;
					item_id = DatabaseID.ITEM_EVENT_XMAS_2014_1;
					SetEventScore(KeyID.KEY_EVENT_XMAS_MINI, 1);
				}
				
				// handle event xmas tree
				if (_use_event_xmas_tree && item_id == DatabaseID.MATERIAL_ITEM_CANDLE)
				{
					item_type = DatabaseID.IT_EVENT;
					item_id = DatabaseID.ITEM_EVENT_CANDLE;
					stock_event.add(item_type, item_id, 1, _command_id);
					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
					_event_item_num = 1;
				}
				
				if (_use_event_new_year_2015 && item_id == DatabaseID.MATERIAL_ITEM_BANH_CHUNG)
				{
					item_type = DatabaseID.IT_EVENT;
					item_id = DatabaseID.ITEM_EVENT_BANH_CHUNG;
					stock_event.add(item_type, item_id, 1, _command_id);
					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
					_event_item_num = 1;
				}
				
				if (_use_event_8_3_2015 && item_id == DatabaseID.MATERIAL_ITEM_GLASS_ROSE)
				{
					item_type = DatabaseID.IT_EVENT;
					item_id = DatabaseID.ITEM_EVENT_GLASS_ROSE;
					stock_event.add(item_type, item_id, 1, _command_id);
					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
					_event_item_num = 1;
				}
				
				// handle event halloween
				if (_use_event_halloween && (item_id == DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_1 || item_id == DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_2 || item_id == DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_3))
				{
					item_type = DatabaseID.IT_EVENT;
					switch (item_id)
					{
						case DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_1:
							item_id = DatabaseID.ITEM_EVENT_HALLOWEEN_1;
							break;
						case DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_2:
							item_id = DatabaseID.ITEM_EVENT_HALLOWEEN_2;
							break;
						case DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_3:
							item_id = DatabaseID.ITEM_EVENT_HALLOWEEN_3;
							break;
					}
					stock_event.addGift(item_type, item_id, item_num, _command_id);
					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
				}
				else if (_use_event_xmas_2014 && (item_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_1 || item_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_2 || item_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_3))
				{
					item_type = DatabaseID.IT_EVENT;
					switch (item_id)
					{
						case DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_1:
							item_id = DatabaseID.ITEM_EVENT_XMAS_2014_1;
							break;
						case DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_2:
							item_id = DatabaseID.ITEM_EVENT_XMAS_2014_2;
							break;
						case DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_3:
							item_id = DatabaseID.ITEM_EVENT_XMAS_2014_3;
							break;
					}
					stock_event.addGift(item_type, item_id, item_num, _command_id);
					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
				}
				
				boolean addstock = false;
				
				if (!GetStock(DatabaseID.STOCK_WAREHOUSE).isFull() && (item_type == DatabaseID.IT_MATERIAL) )
				{
					result = GetStock(DatabaseID.STOCK_WAREHOUSE).add(item_type, item_id, item_num, _command_id);
					addstock = true;
				}

				if (addstock == true && result == false)
				{
					requestError(ReturnCode.RESPONSE_STOCK_ADD_ITEM_FAILED);
					return;
				}

				if (dropList.length() > 0)
				{
					dropList.append(":").append(fid);
				}
				else
				{
					dropList.append(fid);
				}
				dropList.append(":").append(sid);
				dropList.append(":").append(item_type);
				dropList.append(":").append(item_id);
				dropList.append(":").append(item_num);
				dropList.append(":").append(addstock == true ? "1" : "0");
				
				LogHelper.Log("drop list: " + dropList.toString());
			}
			else
			{
				//LogHelper.Log("handleHarvest.. invalid drop item " + drop_item_id);
			}

			// harvest
			GetSlot(fid, sid).harvest(); 
			
			// calculate exp bonus base on pot, decor, floor combo
			int potbonus = 0;
			int combobonus = 0;
			int decorbonus = 0;
			try
			{
				potbonus = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_POT][GetPot(fid, sid).getID()][DatabaseID.POT_EXP_INCREASE]); // bonus from pot

				if (GetPlant(fid, sid).GetComboID() != -1)
				{
					combobonus = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_POT][GetPot(fid, sid).getID()][DatabaseID.POT_COMBO_EXP_BONUS]);
				}
				
				if (GetPlant(fid, sid).GetDecorID() != -1)
				{
					decorbonus = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_DECOR][GetPlant(fid, sid).GetDecorID()][DatabaseID.DECOR_EXP_INCREASE]); // bonus from decor
				}
			}
			catch (Exception e)
			{
				LogHelper.LogException("handleHarvest.GetBonusRate", e);
				potbonus = 0;
				combobonus = 0;
				decorbonus = 0;
			}
			
			if (potbonus + combobonus + decorbonus > 0)
			{
				double d = exp_receive * (potbonus + combobonus + decorbonus);
				d = Math.ceil(d / 100);
				
				int bonus_exp = (int)d;
				
				exp_receive += bonus_exp;
				
				if (expBonusList.length() > 0)
				{
					expBonusList.append(":").append(fid);
				}
				else
				{
					expBonusList.append(fid);
				}
				
				expBonusList.append(":").append(sid);
				expBonusList.append(":").append(bonus_exp);
			}
			
			exp_used = exp_receive;
			userInfo.setExp(userInfo.getExp() + exp_receive);
			
			change = true;
			GetRankingTarget().Increase(CommandID.CMD_HARVEST, plantid, 1);
			SET_DB_VALUE_BINARY(KeyID.KEY_USER_RANKING_TARGET, GetRankingTarget().GetData());
			
			if (_use_achievement)
			{
				acm_index = GetAchievementManager().Increase(CommandID.CMD_HARVEST, plantid, 1);
			}
		}
			
		if (change)
		{
			 // check if user level up after harvest
			checkLevelUp();
			if (!_use_lazy_sync_user_info) SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
		}
		
		// send result to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addLong(KeyID.KEY_EXP_USED, exp_used);
//		result.addInt(KeyID.KEY_PLANT_COMBO_EXP_BONUS, 0);

		response.addShort(KeyID.KEY_TOTAL_FLOOR_CHANGED,floorChanged.size());
		for (Integer fid: floorChanged)
		{
			response.addBinary(KeyID.KEY_FLOORS + floorChanged.indexOf(fid), GetFloor(fid.intValue()).getData(false));
		}

		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, GetStock(DatabaseID.STOCK_SILO).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, GetStock(DatabaseID.STOCK_BARN).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, GetStock(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
		
		if (dropList.length() > 0)
		{
			response.addStringANSI(KeyID.KEY_DROP_BONUS_ITEM, dropList.toString());
		}
		
		if (expBonusList.length() > 0)
		{
			response.addStringANSI(KeyID.KEY_SLOT_BONUS_EXP, expBonusList.toString());
		}

		if (user_level_up) checkAndUnlockItems();
		if (_use_achievement && acm_index != -1)
		{
			response.addInt(KeyID.KEY_ACHIEVEMENT_ID, acm_index);
			response.addBinary(KeyID.KEY_ACHIEVEMENT_INDEX + acm_index, GetAchievementManager().GetAchievement(acm_index).getData());
		}
		if (_use_event_mid_autumn_festival || _use_event_20_11 || _use_event_xmas_mini)
		{
			response.addString(GetEventKeyName(), GetEventItems());
		}
		
		if ((_use_event_halloween || _use_event_xmas_2014 || _use_event_xmas_tree || _use_event_new_year_2015 || _use_event_8_3_2015) && _use_stock_event)
		{
			response.addBinary(KeyID.KEY_STOCK_EVENT, stock_event.getDataToClient());
			response.addString(GetEventKeyName(), GetEventItems());
		}
		
		try
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("handleHarvest", ex);
		}

		// save db
		if (change)
		{
			boolean saveResult = false;

			if (!_use_lazy_sync_user_info)
			{
				saveResult = SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
				if (!saveResult)
				{
					_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
					requestError();
					LogHelper.Log("handleHarvest.. err! save to db fail");
					return;
				}
			}
			

			saveResult= SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToDatabase());
			if (!saveResult)
			{
				_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
				requestError();
				LogHelper.Log("handleHarvest.. err! save to db fail");
				return;
			}

			saveResult = SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToDatabase());
			if (!saveResult)
			{
				requestError(ReturnCode.RESPONSE_SAVE_ERROR);
				LogHelper.Log("handleHarvest.. err! save STOCK_BARN to db fail");
				return;
			}

			for (Integer floorIndex: floorChanged)
			{
				saveResult = SET_DB_VALUE_BINARY(KeyID.KEY_FLOORS + floorIndex.intValue(), floor.get(floorIndex.intValue()).getData(true));
				if (!saveResult)
				{
					_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
					requestError();
					LogHelper.Log("handleHarvest.. err! save to db fail");
					return;
				}
			}
		}
	}
		
	private void handleCatchBug(FBEncrypt encrypt)
	{
		List<FBEncrypt> validParams = new LinkedList<FBEncrypt>();
		for (int i = 0; i< DatabaseID.MAX_SLOT_PER_FLOOR * DatabaseID.MAX_FLOOR_ON_SCREEN; i++)
		{
			byte[] bin = null;

			if (encrypt.hasKey(KeyID.KEY_CATCH_BUG + i))
			{
				bin = encrypt.getBinary(KeyID.KEY_CATCH_BUG + i);
			}
			else
			{
				break;
			}

			if (bin == null || bin.length == 0)
			{
				break;
			}

			// get params
			FBEncrypt f = new FBEncrypt();
			f.decode(bin);
			short floorIndex	= f.getShort(KeyID.KEY_FLOOR_INDEX);
			short slotIndex		= f.getShort(KeyID.KEY_SLOT_INDEX);

			// valid
			if (floorIndex < 0 || floorIndex >= userInfo.getTotalFloor() || slotIndex < 0 || slotIndex >= DatabaseID.MAX_SLOT_PER_FLOOR)
			{
				LogHelper.Log("handleCatchBug.. invalid params.");
				_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
				requestError();
				return;
			}

			validParams.add(f);
		}

		StringBuilder drop_item_list = new StringBuilder(64);
		
		// proceed
		List<Integer> floorChanged = new LinkedList<Integer>();

		boolean change = false;
		int acm_index = -1;
		for (FBEncrypt valid_param : validParams)
		{
			//check if user has bug net
			int net_count = stock.get(DatabaseID.STOCK_WAREHOUSE).getProductNum(DatabaseID.IT_MATERIAL, DatabaseID.MATERIAL_NET_ID);
			if (net_count <= 0)
			{
				LogHelper.Log("handleCatchBug.. not enough net count");
				break;
			}
			
			short floorIndex	= valid_param.getShort(KeyID.KEY_FLOOR_INDEX);
			short slotIndex		= valid_param.getShort(KeyID.KEY_SLOT_INDEX);
			
			//check if stock is full
			if (GetStock(DatabaseID.STOCK_BARN).isFull())
			{
				LogHelper.Log("handleCatchBug.. err! stock is full");
				_return_id = ReturnCode.RESPONSE_STOCK_IS_FULL;
				break;
			}

			if (!floor.get(floorIndex).slot[slotIndex].pot.plant.hasBugOnPlant())
			{
				continue;
			}

			boolean result = false;

			result = stock.get(DatabaseID.STOCK_WAREHOUSE).decreaseObject(_command_id, DatabaseID.IT_MATERIAL, DatabaseID.MATERIAL_NET_ID); // decrease 1 net from stock warehouse
			if (result)
			{
				int log_bugID = floor.get(floorIndex).slot[slotIndex].pot.plant.getBugId();
				floor.get(floorIndex).slot[slotIndex].pot.plant.deleteBug();
				stock.get(DatabaseID.STOCK_BARN).add(DatabaseID.IT_BUG, floor.get(floorIndex).slot[slotIndex].pot.plant.getBugId(), 1, _command_id); // add 1 bug into stock

				change = true;

				if (!floorChanged.contains((int)floorIndex))
				{
					floorChanged.add((int)floorIndex);
				}
				
				int exp = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][userInfo.getLevel()][DatabaseID.CONSTANT_EXP_CATCH_BUG]);
				userInfo.setExp(userInfo.getExp() + exp);
				
				if (drop_item_list.length() > 0)
				{
					drop_item_list.append(":").append(DatabaseID.IT_MONEY + ":" + DatabaseID.EXP_ID);
				}
				else
				{
					drop_item_list.append(DatabaseID.IT_MONEY + ":" + DatabaseID.EXP_ID);
				}
				
				drop_item_list.append(":").append(floorIndex);
				drop_item_list.append(":").append(slotIndex);
				drop_item_list.append(":").append(exp);
				
				// add drop event items here
				int drop_item_event_per = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][userInfo.getLevel()][DatabaseID.CONSTANT_PERCENT_DROP_MOONCAKE_CATCH_BUG]);
				
				// handle event festival
				if (_use_event_mid_autumn_festival && Misc.RANDOM_RANGE(0, 100) < drop_item_event_per)
				{
					if (drop_item_list.length() > 0)
						drop_item_list.append(":").append(DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_MOON_CAKE);
					else
						drop_item_list.append(DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_MOON_CAKE);

					drop_item_list.append(":").append(floorIndex);
					drop_item_list.append(":").append(slotIndex);
					drop_item_list.append(":").append(1);
					
					SetEventScore(KeyID.KEY_EVENT_MID_AUTUMN_FESTIVAL, 1);
				}
				
				// handle event 20-11
				if (_use_event_20_11 && Misc.RANDOM_RANGE(0, 100) < drop_item_event_per)
				{
					if (drop_item_list.length() > 0)
						drop_item_list.append(":").append(DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_FLOWER_20_11);
					else
						drop_item_list.append(DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_FLOWER_20_11);

					drop_item_list.append(":").append(floorIndex);
					drop_item_list.append(":").append(slotIndex);
					drop_item_list.append(":").append(1);
					
					SetEventScore(KeyID.KEY_EVENT_20_11, 1);
				}
				
				// handle event xmas mini
				if (_use_event_xmas_mini && Misc.RANDOM_RANGE(0, 100) < drop_item_event_per)
				{
					if (drop_item_list.length() > 0)
						drop_item_list.append(":").append(DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_XMAS_2014_1);
					else
						drop_item_list.append(DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_XMAS_2014_1);

					drop_item_list.append(":").append(floorIndex);
					drop_item_list.append(":").append(slotIndex);
					drop_item_list.append(":").append(1);
					
					SetEventScore(KeyID.KEY_EVENT_XMAS_MINI, 1);
				}
				
				// handle event xmas tree
				if (_use_event_xmas_tree && Misc.RANDOM_RANGE(0, 100) < drop_item_event_per)
				{
					if (drop_item_list.length() > 0)
						drop_item_list.append(":").append(DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_CANDLE);
					else
						drop_item_list.append(DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_CANDLE);

					drop_item_list.append(":").append(floorIndex);
					drop_item_list.append(":").append(slotIndex);
					drop_item_list.append(":").append(1);
					
					stock_event.add(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_CANDLE, 1, _command_id);
					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
					_event_item_num = 1;
				}
				
				if (_use_event_new_year_2015 && Misc.RANDOM_RANGE(0, 100) < drop_item_event_per)
				{
					if (drop_item_list.length() > 0)
						drop_item_list.append(":").append(DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_BANH_CHUNG);
					else
						drop_item_list.append(DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_BANH_CHUNG);

					drop_item_list.append(":").append(floorIndex);
					drop_item_list.append(":").append(slotIndex);
					drop_item_list.append(":").append(1);
					
					stock_event.add(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_BANH_CHUNG, 1, _command_id);
					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
					_event_item_num = 1;
				}
				
				if (_use_event_8_3_2015 && Misc.RANDOM_RANGE(0, 100) < drop_item_event_per)
				{
					if (drop_item_list.length() > 0)
						drop_item_list.append(":").append(DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_GLASS_ROSE);
					else
						drop_item_list.append(DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_GLASS_ROSE);

					drop_item_list.append(":").append(floorIndex);
					drop_item_list.append(":").append(slotIndex);
					drop_item_list.append(":").append(1);
					
					stock_event.add(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_GLASS_ROSE, 1, _command_id);
					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
					_event_item_num = 1;
				}
				
				// handle event halloween
				if (_use_event_halloween && Misc.RANDOM_RANGE(0, 100) < drop_item_event_per)
				{
					if (drop_item_list.length() > 0)
						drop_item_list.append(":").append(DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_HALLOWEEN_3);
					else
						drop_item_list.append(DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_HALLOWEEN_3);

					drop_item_list.append(":").append(floorIndex);
					drop_item_list.append(":").append(slotIndex);
					drop_item_list.append(":").append(1);
					
					stock_event.addGift(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_HALLOWEEN_3, 1);
					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
				}
				
				// handle event xmas
				if (_use_event_xmas_2014 && Misc.RANDOM_RANGE(0, 100) < drop_item_event_per)
				{
					if (drop_item_list.length() > 0)
						drop_item_list.append(":").append(DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_XMAS_2014_1);
					else
						drop_item_list.append(DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_XMAS_2014_1);

					drop_item_list.append(":").append(floorIndex);
					drop_item_list.append(":").append(slotIndex);
					drop_item_list.append(":").append(1);
					
					stock_event.addGift(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_XMAS_2014_1, 1);
					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
				}
				
				// LOG SPENT ITEM
				StringBuilder log_spent = new StringBuilder();
				log_spent.append(Misc.getCurrentDateTime());											//  1. thoi gian tieu tien
				log_spent.append('\t').append(Misc.getActionName(_command_id));							//  2. hanh dong cua gamer
				log_spent.append('\t').append(userInfo.getID());										//  3. id
				log_spent.append('\t').append(userInfo.getID());										//  4. role id
				log_spent.append('\t').append(userInfo.getName());										//  5. name
				log_spent.append('\t').append(SkyGarden._server_id);														//  6. server id
				log_spent.append('\t').append(userInfo.getLevel());										//  7. level
				log_spent.append('\t').append(DatabaseID.IT_MATERIAL + "_" + DatabaseID.MATERIAL_NET_ID);		//  8. id item su dung
				log_spent.append('\t').append(1);														//  9. so luong item su dung
				log_spent.append('\t').append(DatabaseID.IT_BUG + "_" + log_bugID);						//  10. id item nhan
				log_spent.append('\t').append(1);														//  11. so luong item nhan
				log_spent.append('\t').append(1);														//  12. result
				log_spent.append('\t').append("");														//  13. ten tai khoan giao dich
				log_spent.append('\t').append(userInfo.getID() + "_" + System.currentTimeMillis());		//  14. transaction id
				LogHelper.Log(LogHelper.LogType.SPENT_ITEM, log_spent.toString());
				
				GetRankingTarget().Increase(CommandID.CMD_CATCH_BUG, 1);
				SET_DB_VALUE_BINARY(KeyID.KEY_USER_RANKING_TARGET, GetRankingTarget().GetData());
				
				if (_use_achievement)
				{
					acm_index = GetAchievementManager().Increase(CommandID.CMD_CATCH_BUG, 1);
				}
			}
			else
			{
				continue;
			}
		}
		
		 // save to db
		if (change)
		{
			boolean saveResult = false;

			saveResult = SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToDatabase());
			if (!saveResult)
			{
				_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
				requestError();
				return;
			}

			saveResult = SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToDatabase());
			if (!saveResult)
			{
				_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
				requestError();
				return;
			}
			
			for (Integer floorIndex: floorChanged)
			{
				saveResult = SET_DB_VALUE_BINARY(KeyID.KEY_FLOORS + floorIndex, floor.get(floorIndex).getData(true));
				if (!saveResult)
				{
					_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
					requestError();
					return;
				}
			}
			
			if (drop_item_list.length() > 0)
			{
				checkLevelUp();
			}
			
			if (user_level_up == false)
			{
				if (!_use_lazy_sync_user_info)
				{
					saveResult = SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
					if (!saveResult)
					{
						_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
						requestError();
						return;
					}
				}
			}
		}
		
		// reponse to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
		response.addShort(KeyID.KEY_TOTAL_FLOOR_CHANGED, floorChanged.size());
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		
		for (Integer floorIndex: floorChanged)
		{
			response.addBinary(KeyID.KEY_FLOORS + floorChanged.indexOf(floorIndex), floor.get(floorIndex).getData(false));
		}
		
		if (drop_item_list.length() > 0)
		{
			response.addStringANSI(KeyID.KEY_EXP_RECEIVE, drop_item_list.toString());
		}
		
		if (user_level_up) checkAndUnlockItems();
		
		if (_use_achievement && acm_index != -1)
		{
			response.addInt(KeyID.KEY_ACHIEVEMENT_ID, acm_index);
			response.addBinary(KeyID.KEY_ACHIEVEMENT_INDEX + acm_index, GetAchievementManager().GetAchievement(acm_index).getData());
		}
		if (_use_event_mid_autumn_festival || _use_event_20_11 || _use_event_xmas_mini)
		{
			response.addString(GetEventKeyName(), GetEventItems());
		}
		
		if ((_use_event_halloween || _use_event_xmas_2014 || _use_event_xmas_tree || _use_event_new_year_2015 || _use_event_8_3_2015) && _use_stock_event)
		{
			response.addBinary(KeyID.KEY_STOCK_EVENT, stock_event.getDataToClient());
			response.addString(GetEventKeyName(), GetEventItems());
		}
		
		try
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception e)
		{
			LogHelper.LogException("handleCatchBug", e);
		}
	}
	
	private void handleCatchBugFriend(FBEncrypt encrypt)
	{
		// get valid params
		List<FBEncrypt> validParams = new LinkedList<FBEncrypt>();
		for (int i = 0; i< DatabaseID.MAX_SLOT_PER_FLOOR * DatabaseID.MAX_FLOOR_ON_SCREEN; i++)
		{
			byte[] bin = null;

			if (encrypt.hasKey(KeyID.KEY_CATCH_BUG + i))
			{
				bin = encrypt.getBinary(KeyID.KEY_CATCH_BUG + i);
			}
			else
			{
				break;
			}

			if (bin == null || bin.length == 0)
			{
				break;
			}

			// get params
			FBEncrypt f = new FBEncrypt();
			f.decode(bin);
			short bugType	= f.getShort(KeyID.KEY_FRIEND_BUG_TYPE);
			short bugID		= f.getShort(KeyID.KEY_FRIEND_BUG_ID);

			// valid
			if (bugType < 0 || bugID < 0)
			{
				LogHelper.Log("handleCatchBugFriend.. invalid params.");
				_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
				requestError();
				return;
			}

			validParams.add(f);
		}
		
		int acm_index = -1;
		StringBuilder drop_item_list = new StringBuilder(64);
		for (FBEncrypt valid_param : validParams)
		{
			//check if user has bug net
			int net_count = stock.get(DatabaseID.STOCK_WAREHOUSE).getProductNum(DatabaseID.IT_MATERIAL, DatabaseID.MATERIAL_LONG_HANDNET);
			if (net_count <= 0)
			{
				LogHelper.Log("handleCatchBugFriend.. err! not enough net count");
				break;
			}
			
			//check if stock is full
			if (GetStock(DatabaseID.STOCK_BARN).isFull())
			{
				LogHelper.Log("handleCatchBugFriend.. err! stock is full");
				_return_id = ReturnCode.RESPONSE_STOCK_IS_FULL;
				break;
			}
			
			short bugType	= valid_param.getShort(KeyID.KEY_FRIEND_BUG_TYPE);
			short bugID		= valid_param.getShort(KeyID.KEY_FRIEND_BUG_ID);
			int bugPosX		= valid_param.getShort(KeyID.KEY_FRIEND_BUG_POS_X);
			int bugPosY		= valid_param.getShort(KeyID.KEY_FRIEND_BUG_POS_Y);
			
			if (BugInfo.contains(bugType + ":" + bugID))
			{
				boolean result = GetStock(DatabaseID.STOCK_WAREHOUSE).decreaseObject(_command_id, DatabaseID.IT_MATERIAL, DatabaseID.MATERIAL_LONG_HANDNET); // decrease 1 net from stock warehouse
				if (result)
				{
					BugInfo.remove(bugType + ":" + bugID);
					catched_bug = true;
					
					//TODO: delete key bug info
					base.Set(KeyID.KEY_BUG_POOL, "null");
					
					GetStock(DatabaseID.STOCK_BARN).add(bugType, bugID, 1, _command_id); // add 1 bug into stock
					
					int exp = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][userInfo.getLevel()][DatabaseID.CONSTANT_EXP_CATCH_BUG]);
					userInfo.setExp(userInfo.getExp() + exp);

					if (drop_item_list.length() > 0)
						drop_item_list.append(":").append(DatabaseID.IT_MONEY + ":" + DatabaseID.EXP_ID);
					else
						drop_item_list.append(DatabaseID.IT_MONEY + ":" + DatabaseID.EXP_ID);
					
					drop_item_list.append(":").append(bugPosX);
					drop_item_list.append(":").append(bugPosY);
					drop_item_list.append(":").append(exp);
					
					// add drop event items here
					int drop_item_event_percent = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][userInfo.getLevel()][DatabaseID.CONSTANT_PERCENT_DROP_MOONCAKE_CATCH_BUG]);
					
					// handle event festival
					if (_use_event_mid_autumn_festival && Misc.RANDOM_RANGE(0, 100) < drop_item_event_percent)
					{
						if (drop_item_list.length() > 0)
							drop_item_list.append(":").append(DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_MOON_CAKE);
						else
							drop_item_list.append(DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_MOON_CAKE);

						drop_item_list.append(":").append(bugPosX);
						drop_item_list.append(":").append(bugPosY);
						drop_item_list.append(":").append(1);
						
						SetEventScore(KeyID.KEY_EVENT_MID_AUTUMN_FESTIVAL, 1);
					}
					
					// handle event 20-11
					if (_use_event_20_11 && Misc.RANDOM_RANGE(0, 100) < drop_item_event_percent)
					{
						if (drop_item_list.length() > 0)
							drop_item_list.append(":").append(DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_FLOWER_20_11);
						else
							drop_item_list.append(DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_FLOWER_20_11);

						drop_item_list.append(":").append(bugPosX);
						drop_item_list.append(":").append(bugPosY);
						drop_item_list.append(":").append(1);
						
						SetEventScore(KeyID.KEY_EVENT_20_11, 1);
					}
					
					// handle event xmas mini
					if (_use_event_xmas_mini && Misc.RANDOM_RANGE(0, 100) < drop_item_event_percent)
					{
						if (drop_item_list.length() > 0)
							drop_item_list.append(":").append(DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_XMAS_2014_1);
						else
							drop_item_list.append(DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_XMAS_2014_1);

						drop_item_list.append(":").append(bugPosX);
						drop_item_list.append(":").append(bugPosY);
						drop_item_list.append(":").append(1);
						
						SetEventScore(KeyID.KEY_EVENT_XMAS_MINI, 1);
					}
					
					// handle event xmas tree
					if (_use_event_xmas_tree && Misc.RANDOM_RANGE(0, 100) < drop_item_event_percent)
					{
						if (drop_item_list.length() > 0)
							drop_item_list.append(":").append(DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_CANDLE);
						else
							drop_item_list.append(DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_CANDLE);

						drop_item_list.append(":").append(bugPosX);
						drop_item_list.append(":").append(bugPosY);
						drop_item_list.append(":").append(1);
						
						stock_event.add(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_CANDLE, 1, _command_id);
					}
					
					if (_use_event_new_year_2015 && Misc.RANDOM_RANGE(0, 100) < drop_item_event_percent)
					{
						if (drop_item_list.length() > 0)
							drop_item_list.append(":").append(DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_BANH_CHUNG);
						else
							drop_item_list.append(DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_BANH_CHUNG);

						drop_item_list.append(":").append(bugPosX);
						drop_item_list.append(":").append(bugPosY);
						drop_item_list.append(":").append(1);
						
						stock_event.add(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_BANH_CHUNG, 1, _command_id);
					}
					
					if (_use_event_8_3_2015 && Misc.RANDOM_RANGE(0, 100) < drop_item_event_percent)
					{
						if (drop_item_list.length() > 0)
							drop_item_list.append(":").append(DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_GLASS_ROSE);
						else
							drop_item_list.append(DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_GLASS_ROSE);

						drop_item_list.append(":").append(bugPosX);
						drop_item_list.append(":").append(bugPosY);
						drop_item_list.append(":").append(1);
						
						stock_event.add(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_GLASS_ROSE, 1, _command_id);
					}
					
					// handle event halloween
					if (_use_event_halloween && Misc.RANDOM_RANGE(0, 100) < drop_item_event_percent)
					{
						if (drop_item_list.length() > 0)
							drop_item_list.append(":").append(DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_HALLOWEEN_3);
						else
							drop_item_list.append(DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_HALLOWEEN_3);

						drop_item_list.append(":").append(bugPosX);
						drop_item_list.append(":").append(bugPosY);
						drop_item_list.append(":").append(1);
						
						stock_event.addGift(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_HALLOWEEN_3, 1);
						SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
					}
					
					// handle event xmas 2014
					if (_use_event_xmas_2014 && Misc.RANDOM_RANGE(0, 100) < drop_item_event_percent)
					{
						if (drop_item_list.length() > 0)
							drop_item_list.append(":").append(DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_XMAS_2014_1);
						else
							drop_item_list.append(DatabaseID.IT_EVENT + ":" + DatabaseID.ITEM_EVENT_XMAS_2014_1);

						drop_item_list.append(":").append(bugPosX);
						drop_item_list.append(":").append(bugPosY);
						drop_item_list.append(":").append(1);
						
						stock_event.addGift(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_XMAS_2014_1, 1);
						SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
					}
					
					// LOG SPENT ITEM
					StringBuilder log_spent = new StringBuilder();
					log_spent.append(Misc.getCurrentDateTime());											//  1. thoi gian tieu tien
					log_spent.append('\t').append(Misc.getActionName(_command_id));							//  2. hanh dong cua gamer
					log_spent.append('\t').append(userInfo.getID());										//  3. id
					log_spent.append('\t').append(userInfo.getID());										//  4. role id
					log_spent.append('\t').append(userInfo.getName());										//  5. name
					log_spent.append('\t').append(SkyGarden._server_id);														//  6. server id
					log_spent.append('\t').append(userInfo.getLevel());										//  7. level
					log_spent.append('\t').append(DatabaseID.IT_MATERIAL + "_" + DatabaseID.MATERIAL_LONG_HANDNET);		//  8. id item su dung
					log_spent.append('\t').append(1);														//  9. so luong item su dung
					log_spent.append('\t').append(DatabaseID.IT_BUG + "_" + bugID);						//  10. id item nhan
					log_spent.append('\t').append(1);														//  11. so luong item nhan
					log_spent.append('\t').append(1);														//  12. result
					log_spent.append('\t').append("");														//  13. ten tai khoan giao dich
					log_spent.append('\t').append(userInfo.getID() + "_" + System.currentTimeMillis());		//  14. transaction id
					LogHelper.Log(LogHelper.LogType.SPENT_ITEM, log_spent.toString());
					
					GetRankingTarget().Increase(CommandID.CMD_CATCH_BUG, 1);
					SET_DB_VALUE_BINARY(KeyID.KEY_USER_RANKING_TARGET, GetRankingTarget().GetData());
					
					if (_use_achievement)
					{
						acm_index = GetAchievementManager().Increase(CommandID.CMD_CATCH_BUG_FRIEND, 1);
					}
				}
			}
			else
			{
				LogHelper.Log("handleCatchBugFriend.. bug pool does not contain " + bugType + ":" + bugID);
				continue;
			}
		}
		
		// save data
		boolean saveResult = false;
		
		if (drop_item_list.length() > 0)
		{
			checkLevelUp();
		}

		if (user_level_up == false)
		{
			if (!_use_lazy_sync_user_info)
			{
				saveResult = SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
				if (!saveResult)
				{
					_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
					requestError();
					return;
				}
			}
		}

		saveResult = SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, GetStock(DatabaseID.STOCK_BARN).getDataToDatabase());
		if (!saveResult)
		{
			_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
			requestError();
			return;
		}

		saveResult = SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, GetStock(DatabaseID.STOCK_WAREHOUSE).getDataToDatabase());
		if (!saveResult)
		{
			_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
			requestError();
			return;
		}
		
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
		if (drop_item_list.length() > 0)
		{
			response.addStringANSI(KeyID.KEY_EXP_RECEIVE, drop_item_list.toString());
		}
		
		if (user_level_up) checkAndUnlockItems();
		
		if (_use_achievement && acm_index != -1)
		{
			response.addInt(KeyID.KEY_ACHIEVEMENT_ID, acm_index);
			response.addBinary(KeyID.KEY_ACHIEVEMENT_INDEX + acm_index, GetAchievementManager().GetAchievement(acm_index).getData());
		}
		if (_use_event_mid_autumn_festival || _use_event_20_11 || _use_event_xmas_mini)
		{
			response.addString(GetEventKeyName(), GetEventItems());
		}

		if ((_use_event_halloween || _use_event_xmas_2014 || _use_event_xmas_tree || _use_event_new_year_2015 || _use_event_8_3_2015) && _use_stock_event)
		{
			response.addBinary(KeyID.KEY_STOCK_EVENT, stock_event.getDataToClient());
			response.addString(GetEventKeyName(), GetEventItems());
		}

		try
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("handleCatchBugFriend.. response to client OK.");
		}
		catch (Exception e)
		{
			LogHelper.LogException("handleCatchBug", e);
		}
	}
		
	private void handlePlantInstantGrowUp(FBEncrypt encrypt)
	{
//		StringBuilder log = new StringBuilder();
		// get valid params
		List<FBEncrypt> validParams = new LinkedList<FBEncrypt>();
		
//		log.append("client_param");
		for (int i=0; i < DatabaseID.MAX_FLOOR_ON_SCREEN * DatabaseID.MAX_SLOT_PER_FLOOR; i++)
		{
			byte[] bin = null;
			if (encrypt.hasKey(KeyID.KEY_PLANT_INSTANT_GROW + i))
			{
				bin = encrypt.getBinary(KeyID.KEY_PLANT_INSTANT_GROW + i);
			}
			else
			{
				break;
			}

			if (bin == null || bin.length == 0)
			{
				break;
			}

			FBEncrypt f = new FBEncrypt();
			f.decode(bin,true);

			short floorIndex = f.getShort(KeyID.KEY_FLOOR_INDEX);
			if (floorIndex < 0 || floorIndex >= userInfo.getTotalFloor())
			{
				LogHelper.Log("handlePlantInstantGrowUp.. invalid floor param");
				_return_id = ReturnCode.RESPONSE_INVALID_FLOOR_PARAM;
				requestError();
				return;
			}

			short slotIndex = f.getShort(KeyID.KEY_SLOT_INDEX);
			if (slotIndex <0 || slotIndex >= DatabaseID.MAX_SLOT_PER_FLOOR)
			{
				LogHelper.Log("handlePlantInstantGrowUp.. invalid slot param");
				_return_id = ReturnCode.RESPONSE_INVALID_SLOT_PARAM;
				requestError();
				return;
			}

//			log.append('\t').append(floorIndex);
//			log.append('\t').append(slotIndex);
			
			validParams.add(f);
		}

		long diamond_used = 0;

		// proceed
		List<Integer> floorChanged = new LinkedList<Integer>();
		boolean change = false;

//		log.append('\t').append("valid_param");
		for (FBEncrypt f: validParams)
		{
			short floorIndex = f.getShort(KeyID.KEY_FLOOR_INDEX);
			short slotIndex = f.getShort(KeyID.KEY_SLOT_INDEX);
			
//			log.append('\t').append(floorIndex);
//			log.append('\t').append(slotIndex);

			if (floor.get(floorIndex).slot[slotIndex].pot.plant.getID() == -1)
			{
				// LogHelper.Log("handlePlantInstantGrowUp.. can not find plant at slot [" + floorIndex + "," + slotIndex + "]");
				_return_id = ReturnCode.RESPONSE_ERROR;
				continue;
			}
			
			if (floor.get(floorIndex).slot[slotIndex].pot.plant.isGrownUp())
			{
				 LogHelper.Log("handlePlantInstantGrowUp.. err! plant at slot [" + floorIndex + "," + slotIndex + "] is already grown up");
				_return_id = ReturnCode.RESPONSE_ERROR;
				
				// this case means client has outdated data, should response new data.
				if (!floorChanged.contains((int)floorIndex))
				{
					floorChanged.add((int)floorIndex);
				}
				
				continue;
			}

			long diamond_skip_time = Misc.getDiamondEstimate(DatabaseID.DIAMOND_SKIP_TIME_PLANT, floor.get(floorIndex).slot[slotIndex].pot.plant.getGrowTime());
			
//			log.append('\t').append(diamond_skip_time);

			if ((money_mgr.GetRealMoney() + money_mgr.GetBonusMoney()) < diamond_skip_time)
			{
				LogHelper.Log("handlePlantInstantGrowUp.. not enough diamond. User diamond / required diamond: " + (money_mgr.GetRealMoney() + money_mgr.GetBonusMoney()) + " / " + diamond_skip_time);
				break;
			}

//			log.append('\t').append(money_mgr.GetBonusMoney() + money_mgr.GetRealMoney());
			
			int plant_id = floor.get(floorIndex).slot[slotIndex].pot.plant.getID();
			
			diamond_used = diamond_skip_time;
			UseMoneyResult usemoneyresult = money_mgr.UseRealMoneyAndBonusMoney((int)diamond_skip_time,		// log
													// _command_id, "" + floorIndex + "_" + slotIndex + "_" + plant_id,//  2. hanh dong cua gamer
													_command_id, "" + plant_id,//  2. hanh dong cua gamer
													userInfo.getName(),										//  3. ten tai khoan
													userInfo.getLevel(),									//  7. level cua gamer
													_ip,													//  9. ip login v4 cua gamer
													DatabaseID.IT_PLANT,									// 10. id cua loai item
													plant_id,												// 11. id cua item
													Misc.GetItemName(DatabaseID.IT_PLANT, plant_id),		// 12. ten item
													(int)diamond_skip_time,									// 13. gia game coin cua item
													1);														// 14. so luong vat pham

			if (usemoneyresult._code == UseMoneyResult.CODE.SUCCESS)
			{
				floor.get(floorIndex).slot[slotIndex].pot.plant.resetGrowTime();
				
				change = true;

				if (!floorChanged.contains((int)floorIndex))
				{
					floorChanged.add((int)floorIndex);
				}
				
				// LogHelper.Log("handlePlantInstantGrowUp.. plant instant grow OK.");
//				log.append('\t').append(money_mgr.GetBonusMoney() + money_mgr.GetRealMoney());
			}
			else
			{
				_return_id = ReturnCode.RESPONSE_CANT_SUBSTRACT_MONEY;
				LogHelper.Log("handlePlantInstantGrowUp.. err! can't substract user money: " + usemoneyresult._code);
				break;
			}
		}

		// save to db
		if (change)
		{
			boolean saveResult = false;

			if (!_use_lazy_sync_user_info)
			{
				saveResult = SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
				if (saveResult == false)
				{
					_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
					requestError();
					return;
				}
			}

			for (Integer floorIndex: floorChanged)
			{
				saveResult = SET_DB_VALUE_BINARY(KeyID.KEY_FLOORS + floorIndex.intValue(), floor.get(floorIndex.intValue()).getData(true));
				if (saveResult == false)
				{
					_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
					requestError();
					return;
				}
			}
		}

//		LogHelper.Log(log.toString());
		
		// reponse to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addLong(KeyID.KEY_DIAMOND_USED, diamond_used);
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));

		response.addShort(KeyID.KEY_TOTAL_FLOOR_CHANGED, floorChanged.size());
		for (Integer floorIndex: floorChanged)
		{
			response.addBinary(KeyID.KEY_FLOORS + floorChanged.indexOf(floorIndex), floor.get(floorIndex.intValue()).getData(false));
		}

		try
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("handlePlantInstantGrowUp.. response to client OK.");
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("handlePlantInstantGrowUp", ex);
		}
	}
		
	private void handlePlacePot(FBEncrypt encrypt)
	{
//		StringBuilder log = new StringBuilder();
		// check valid params
		List<FBEncrypt> validParams = new LinkedList<FBEncrypt>();
		
//		log.append("client_param");
		for (int i=0; i < DatabaseID.MAX_SLOT_PER_FLOOR * DatabaseID.MAX_FLOOR_ON_SCREEN; i++)
		{
			byte[] bin = null;
			if (encrypt.hasKey(KeyID.KEY_PUT_POT + i))
			{
				bin = encrypt.getBinary(KeyID.KEY_PUT_POT + i);
			}
			else
			{
				break;
			}

			if (bin == null || bin.length ==0)
			{
				break;
			}

			FBEncrypt f = new FBEncrypt();
			f.decode(bin,true);
			short floorIndex = f.getShort(KeyID.KEY_FLOOR_INDEX);
			short slotIndex = f.getShort(KeyID.KEY_SLOT_INDEX);
			short potID = f.getShort(KeyID.KEY_POT_ID);
			
//			log.append('\t').append(floorIndex);
//			log.append('\t').append(slotIndex);
//			log.append('\t').append(potID);

			if (floorIndex >= userInfo.getTotalFloor() || floorIndex < 0) 
			{
				LogHelper.Log("handlePlacePot.. invalid floor.");
				_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
				requestError();
				return;
			}
			
			if (slotIndex >= DatabaseID.MAX_SLOT_PER_FLOOR || slotIndex < 0)
			{
				LogHelper.Log("handlePlacePot.. invalid slot.");
				_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
				requestError();
				return;
			}
			
			if (potID < 0 || potID >= Server.s_globalDB[DatabaseID.SHEET_POT].length)
			{
				LogHelper.Log("handlePlacePot.. invalid pot id.");
				_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
				requestError();
				return;
			}
			
			validParams.add(f);
		}
			
		List<Integer> floorChanged = new LinkedList<Integer>();

		boolean change = false;
		
		
//		log.append('\t').append("valid_param");
		
		// proceed
		for (FBEncrypt valid_param: validParams)
		{
			short floorIndex	= valid_param.getShort(KeyID.KEY_FLOOR_INDEX);
			short slotIndex		= valid_param.getShort(KeyID.KEY_SLOT_INDEX);
			short potID			= valid_param.getShort(KeyID.KEY_POT_ID);
			
//			log.append('\t').append(floorIndex);
//			log.append('\t').append(slotIndex);
//			log.append('\t').append(potID);
			
			if (floor.get(floorIndex).slot[slotIndex].pot.getID() != -1)
			{
				// LogHelper.Log("handlePlacePot.. slot not empty. Continue to next slot.");
				continue;
			}

			if (stock.get(DatabaseID.STOCK_WAREHOUSE).getProductNum(DatabaseID.IT_POT, potID) <= 0)
			{
				LogHelper.Log("handlePlacePot.. ran out of pot " + potID);
				break;
			}
			
			boolean result = false;

			result = stock.get(DatabaseID.STOCK_WAREHOUSE).decreaseObject(_command_id, DatabaseID.IT_POT, potID); // decrease the value of the pot in stock
			if (result == false)
			{
				_return_id = ReturnCode.RESPONSE_CANT_DECREASE_OBJECT;
				requestError();
				return;
			}
			
			result = floor.get(floorIndex).slot[slotIndex].pot.createNewPot(potID); // update value of the empty pot at the pot(floor_id, slot_id).
			if (result == false)
			{
				_return_id = ReturnCode.RESPONSE_CANT_CREATE_NEW_POT;
				requestError();
				return;
			}

			if (!floorChanged.contains((int)floorIndex))
			{
				floorChanged.add((int)floorIndex);
			}

			change = true;
			
			// LogHelper.Log("handlePlacePot.. place pot " + potID + " at slot [" + floorIndex + "," + slotIndex + "] OK.");
		}

		// save db
		if (change)
		{
			boolean saveResult = false;
			
			saveResult = SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToDatabase());
			if (saveResult == false)
			{
				_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
				requestError();
				LogHelper.Log("doPlacePot.. save to db fail.");
				return;
			}
			
			for (Integer floorIndex: floorChanged)
			{
				saveResult = SET_DB_VALUE_BINARY(KeyID.KEY_FLOORS + floorIndex.intValue(), floor.get(floorIndex.intValue()).getData(true));
				if (saveResult == false)
				{
					_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
					requestError();
					LogHelper.Log("doPlacePot.. save to db fail.");
					return;
				}
			}
			
			// LogHelper.Log("doPlacePot.. save to db OK.");
		}

//		LogHelper.Log(log.toString());
		// update garden appraisal
		try
		{
			garden_appraisal = UpdateAppraisal(DatabaseID.APPRAISAL_POT);
		}
		catch (Exception e)
		{
			LogHelper.LogException("handlePlacePot.UpdateAppraisal", e);
		}
		
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addShort(KeyID.KEY_TOTAL_FLOOR_CHANGED, floorChanged.size());

		for (Integer floorIndex: floorChanged)
		{
			response.addBinary(KeyID.KEY_FLOORS + floorChanged.indexOf(floorIndex), floor.get(floorIndex.intValue()).getData(false));
		}
	
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
		response.addLong(KeyID.KEY_GARDEN_APPRAISAL, garden_appraisal);
		
		try
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("doPlacePot.. response to client OK.");
		}
		catch (Exception ex) 
		{
			ex.printStackTrace();
		}
	}

	private void handleMovePot(FBEncrypt encrypt)
	{
//		StringBuilder log = new StringBuilder();
		
		// get params from client
		short srcFloorIndex = encrypt.getShort(KeyID.KEY_MOVE_POT_SRC_FLOOR_INDEX);
		short srcSlotIndex = encrypt.getShort(KeyID.KEY_MOVE_POT_SRC_SLOT_INDEX);
		short desFloorIndex = encrypt.getShort(KeyID.KEY_MOVE_POT_DES_FLOOR_INDEX);
		short desSlotIndex = encrypt.getShort(KeyID.KEY_MOVE_POT_DES_SLOT_INDEX);

		// valid
		if (srcFloorIndex < 0 || srcFloorIndex >= userInfo.getTotalFloor() || srcSlotIndex < 0 || srcSlotIndex >= DatabaseID.MAX_SLOT_PER_FLOOR)
		{
			LogHelper.Log("handleMovePotRequest.. invalid src params.");
			_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
			requestError();
			return;
		}

		if (desFloorIndex < 0 || desFloorIndex >= userInfo.getTotalFloor() || desSlotIndex < 0 || desSlotIndex >= DatabaseID.MAX_SLOT_PER_FLOOR)
		{
			LogHelper.Log("handleMovePotRequest.. invalid des params.");
			_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
			requestError();
			return;
		}

		if (floor.get(srcFloorIndex).slot[srcSlotIndex].pot.getID() == -1)
		{
			LogHelper.Log("handleMovePotRequest.. can not find pot at slot [" + srcFloorIndex + "," + srcSlotIndex + "].");
			_return_id = ReturnCode.RESPONSE_CANT_FIND_POT;
			requestError();
			return;
		}

		if (floor.get(srcFloorIndex).slot[srcSlotIndex].pot.plant.getID() != -1)
		{
			LogHelper.Log("handleMovePotRequest.. pot at slot [" + srcFloorIndex + "," + srcSlotIndex + "] is not empty.");
			_return_id = ReturnCode.RESPONSE_POT_IS_NOT_EMPTY;
			requestError();
			return;
		}

		if (floor.get(desFloorIndex).slot[desSlotIndex].pot.getID() != -1)
		{
			LogHelper.Log("handleMovePotRequest.. destination slot [" + desFloorIndex + "," + desSlotIndex + "] is not empty.");
			_return_id = ReturnCode.RESPONSE_SLOT_IS_NOT_EMPTY;
			requestError();
			return;
		}

		// proceed
		short potID = floor.get(srcFloorIndex).slot[srcSlotIndex].pot.getID();
		
		boolean result = floor.get(srcFloorIndex).slot[srcSlotIndex].pot.deletePot(); // delete the pot at src slot.
		
		if (result == true)
		{
			floor.get(desFloorIndex).slot[desSlotIndex].pot.createNewPot(potID); // create a pot with the same id at src slot
			
//			log.append(srcFloorIndex);
//			log.append('\t').append(srcSlotIndex);
//			log.append('\t').append(desFloorIndex);
//			log.append('\t').append(desSlotIndex);
//			log.append('\t').append(potID);
//			LogHelper.Log(log.toString());
		}
		else
		{
			_return_id = ReturnCode.RESPONSE_CANT_DELETE_POT;
			requestError();
			return;
		}
		
		// save db
		boolean saveResult = false;
		if (srcFloorIndex != desFloorIndex)
		{
			saveResult = SET_DB_VALUE_BINARY(KeyID.KEY_FLOORS + srcFloorIndex, floor.get(srcFloorIndex).getData(true));
			if (saveResult == false)
			{
				_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
				requestError();
				return;
			}

			saveResult = SET_DB_VALUE_BINARY(KeyID.KEY_FLOORS + desFloorIndex, floor.get(desFloorIndex).getData(true));
			if (saveResult == false)
			{
				_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
				requestError();
				return;
			}
		}
		else
		{
			saveResult = SET_DB_VALUE_BINARY(KeyID.KEY_FLOORS + desFloorIndex, floor.get(desFloorIndex).getData(true));
			if (saveResult == false)
			{
				_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
				requestError();
				return;
			}
		}

		// send result to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		if (srcFloorIndex != desFloorIndex)
		{
			response.addShort(KeyID.KEY_TOTAL_FLOOR_CHANGED, 2);
			response.addBinary(KeyID.KEY_FLOORS + 0, floor.get(srcFloorIndex).getData(false));
			response.addBinary(KeyID.KEY_FLOORS + 1, floor.get(desFloorIndex).getData(false));
		}
		else
		{
			response.addShort(KeyID.KEY_TOTAL_FLOOR_CHANGED, 1);
			response.addBinary(KeyID.KEY_FLOORS + 0, floor.get(desFloorIndex).getData(false));
		}

		try
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception e)
		{
		}
	}
	
	private void handleCreateOrder(FBEncrypt encrypt)
	{
		byte _order_type = encrypt.getByte(KeyID.KEY_ORDER_TYPE);
		short _order_index = encrypt.getByte(KeyID.KEY_ORDER_INDEX);

		if (_order_type == DatabaseID.ORDER_DAILY && _order_index != DatabaseID.ORDER_DAILY_INDEX)
		{
			requestError(ReturnCode.RESPONSE_INVALID_ORDER_TYPE);
			return;
		}
		
		if (_order_type < 0 || _order_type >= DatabaseID.ORDER_TYPE_MAX)
		{
			requestError(ReturnCode.RESPONSE_INVALID_ORDER_TYPE);
			return;
		}
		
		if (_order_index < 0 || _order_index > orderManager.getOrderCount())
		{
			requestError(ReturnCode.RESPONSE_INVALID_ORDER_INDEX);
			return;
		}
		
		if (_order_index == DatabaseID.ORDER_DAILY_INDEX && orderManager.getOrderDailyPaidDeliveredNum() >= orderManager.getOrderDailyPaidMax())
		{
			requestError();
			return;
		}
		
		Order _order = orderManager.getOrder(_order_index);
		
		if (Misc.SECONDS() >= _order.getNewWaitTime() && _order.getNewWaitTime() > 0 && _order.isSkipping())
		{
			if (_order_index == DatabaseID.ORDER_DAILY_INDEX)
			{
				boolean _order_received = _order.getReceiveDailyOrder();

				if (orderManager.isDailyOrderLimited())
				{
					_return_id = ReturnCode.RESPONSE_ERROR;
				}
				else
				{
					orderManager.createOrder(_order_type, _order_index, getRandomProducts(_order_index), null, machine, floor, userInfo.getLevel(), _is_order_bug_pearl, ComboManager().GetBonusDailyOrder(), ComboManager().GetBonusNormalOrder());
					
					Order new_order_daily = orderManager.getOrder(_order_index);

					int total_delivered_num = orderManager.getTotalDeliveredNum();
					int order_daily_free_max = orderManager.getOrderDailyFreeMax();
					
					if (total_delivered_num < order_daily_free_max)
					{
						new_order_daily.setReceiveDailyOrder(true);
					}
					else
					{
						new_order_daily.setReceiveDailyOrder(_order_received);

						int diamond_need = Misc.initReceiveDailyOrderDiamond(userInfo.getLevel(), orderManager.getOrderDailyPaidDeliveredNum(), new_order_daily.getRewardExp());
						new_order_daily.setReceiveDailyOrderDiamond(diamond_need);
					}
					SET_DB_VALUE_BINARY(KeyID.KEY_ORDER, orderManager.getData());
				}
			}
			else
			{
				orderManager.createOrder(_order_type, _order_index, getRandomProducts(_order_index), null, machine, floor, userInfo.getLevel(), _is_order_bug_pearl, ComboManager().GetBonusDailyOrder(), ComboManager().GetBonusNormalOrder());
				SET_DB_VALUE_BINARY(KeyID.KEY_ORDER, orderManager.getData());
			}
		}
		else
		{
			LogHelper.Log("--------- Create Order: Failed!"); 
			_return_id = ReturnCode.RESPONSE_ERROR;
		}
		
		// response to client
		FBEncrypt result = new FBEncrypt();
		result.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		result.addBinary(KeyID.KEY_ORDER, orderManager.getData());

		try
		{
			_client.WriteZip(result.toByteArray());
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("handleCreateOrder", ex);
		}		
	}

	private void SetDefaultOrderSelection() 
	{
		try {
			if (GetUserInfo().getLevel() < 11) 
			{
				return;
			}
			
			// select letter
			byte order_index = DatabaseID.ORDER_DAILY_INDEX;
			byte letter_index = 0;
			if (orderManager.isNewDate() || true) 
			{
				if (orderManager.getOrderDailyLetterSelected() == false || true)  
				{
					orderManager.resetDailyOrder();
					orderManager.createOrder(DatabaseID.ORDER_DAILY, order_index, getRandomProducts(order_index), null, machine, floor, userInfo.getLevel(), _is_order_bug_pearl, ComboManager().GetBonusDailyOrder(), ComboManager().GetBonusNormalOrder());
				}
				
				if (orderManager.getOrder(order_index).setLettersRandomValue(letter_index, userInfo.getLevel())) {
					SET_DB_VALUE_BINARY(KeyID.KEY_ORDER, orderManager.getData());
				}
			}
			
			// accept letter result
			Order order_daily = orderManager.getOrder(order_index);
			if (order_daily.getReceiveDailyOrder() == true) 
			{
				LogHelper.Log("receiveDailyOrderFree.. this order had already received!");
				return;
			}
			int daily_order_free_num = order_daily.getLetterSelectValue();
			order_daily.setReceiveDailyOrder(true);
			int daily_order_paid_unlock = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][userInfo.getLevel()][DatabaseID.CONSTANT_DO_PAID_UNLOCK]);
			orderManager.initDailyOrder(daily_order_free_num, daily_order_paid_unlock);
			orderManager.resetAllLetters(order_index);
			orderManager.setOrderDailyLetterSelected(false);
			SET_DB_VALUE_BINARY(KeyID.KEY_ORDER, orderManager.getData());
		} catch (Exception e) {
			LogHelper.LogException("SetDefaultOrderSelection", e);
		}
	}
	
	private void orderLetterSelect(FBEncrypt encrypt)
	{
		byte _order_index = encrypt.getByte(KeyID.KEY_ORDER_INDEX);
		byte _letter_index = encrypt.getByte(KeyID.KEY_ORDER_LETTER_INDEX);

		if (_order_index != DatabaseID.ORDER_DAILY_INDEX || _order_index < 0 || _order_index > orderManager.getOrderCount())
		{
			LogHelper.Log("orderLetterSelect.. invalid _order_index");
			requestError(ReturnCode.RESPONSE_INVALID_ORDER_INDEX);
			return;
		}
		
		if (_letter_index < 0 || _letter_index >= DatabaseID.ORDER_LETTER_COUNT)
		{
			LogHelper.Log("orderLetterSelect.. invalid _letter_index");
			requestError(ReturnCode.RESPONSE_INVALID_ORDER_LETTER_INDEX);
			return;
		}
		
		if (orderManager.isNewDate())
		{
			if (orderManager.getOrderDailyLetterSelected() == false)
			{
				orderManager.resetDailyOrder();
				orderManager.createOrder(DatabaseID.ORDER_DAILY, _order_index, getRandomProducts(_order_index), null, machine, floor, userInfo.getLevel(), _is_order_bug_pearl, ComboManager().GetBonusDailyOrder(), ComboManager().GetBonusNormalOrder());
			}
			
			if (orderManager.getOrder(_order_index).setLettersRandomValue(_letter_index, userInfo.getLevel()))
			{
				SET_DB_VALUE_BINARY(KeyID.KEY_ORDER, orderManager.getData());
			}
			
			int letter_result = orderManager.getOrder(_order_index).getLetterSelectValue();
			
			// track action
			StringBuilder log = new StringBuilder();
			log.append(Misc.getCurrentDateTime());								//  1. thoi gian tieu tien
			log.append('\t').append(Misc.getActionName(_command_id, "" + letter_result));			//  2. hanh dong cua gamer
			log.append('\t').append(userInfo.getID());							//  3. id
			log.append('\t').append(userInfo.getID());							//  4. role id
			log.append('\t').append(userInfo.getName());						//  5. name
			log.append('\t').append(SkyGarden._server_id);											//  6. server id
			log.append('\t').append(userInfo.getLevel());						//  7. level
			LogHelper.Log(LogHelper.LogType.TRACKING_ACTION, log.toString());
		}
		else
		{
			LogHelper.Log("orderLetterSelect.. Daily order is limited!");
			_return_id = ReturnCode.RESPONSE_NEW_DATE;
		}
		
		// response to client
		FBEncrypt result = new FBEncrypt();
		result.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		result.addBinary(KeyID.KEY_ORDER, orderManager.getData());

		try
		{
			_client.WriteZip(result.toByteArray());
			// LogHelper.Log("orderLetterSelect.. response to client OK");
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("orderLetterSelect", ex);
		}
	}
	
	private void orderLetterReselect(FBEncrypt encrypt)
	{
		byte _order_index = encrypt.getByte(KeyID.KEY_ORDER_INDEX);
		byte _letter_index = encrypt.getByte(KeyID.KEY_ORDER_LETTER_INDEX);

		if (_order_index != DatabaseID.ORDER_DAILY_INDEX || _order_index < 0 || _order_index > orderManager.getOrderCount())
		{
			LogHelper.Log("orderLetterReselect.. invalid _order_index");
			requestError(ReturnCode.RESPONSE_INVALID_ORDER_INDEX);
			return;
		}
		
		if (_letter_index < 0 || _letter_index >= DatabaseID.ORDER_LETTER_COUNT)
		{
			LogHelper.Log("orderLetterReselect.. invalid _letter_index");
			requestError(ReturnCode.RESPONSE_INVALID_ORDER_LETTER_INDEX);
			return;
		}
		
		Order order_daily = orderManager.getOrder(_order_index);
		
		if (_letter_index != order_daily.getLetterSelectIndex())
		{
			LogHelper.Log("orderLetterReselect.. invalid _letter_index");
			requestError(ReturnCode.RESPONSE_INVALID_ORDER_LETTER_INDEX);
			return;
		}

		long diamond_used = 0;
		long user_diamond = money_mgr.GetBonusMoney() + money_mgr.GetRealMoney();
		int order_daily_select_diamond = order_daily.getLetterReselectDiamond();
		
		if (user_diamond < order_daily_select_diamond)
		{
			LogHelper.Log("orderLetterReselect.. FAILED! Not enough diamond");
		}
		else
		{
			diamond_used = order_daily_select_diamond;
			money_mgr.UseRealMoneyAndBonusMoney(order_daily_select_diamond,							// log
													_command_id, "",//  2. hanh dong cua gamer
													userInfo.getName(),								//  3. ten tai khoan
													userInfo.getLevel(),							//  7. level cua gamer
													_ip,											//  9. ip login v4 cua gamer
													-1,												// 10. id cua loai item
													-1,												// 11. id cua item
													"",												// 12. ten item
													order_daily_select_diamond,						// 13. gia game coin cua item
													1);												// 14. so luong vat pham
		
			order_daily.setLettersEnable(_letter_index, false);
			order_daily.setLetterReselectDiamond(0);
			
			SET_DB_VALUE_BINARY(KeyID.KEY_ORDER, orderManager.getData());
		
			// orderManager.displayDataPackage();
		}
		
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_ORDER, orderManager.getData());
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addLong(KeyID.KEY_DIAMOND_USED, diamond_used);
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));

		try
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("orderLetterReselect.. response to client OK");
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("orderLetterReselect", ex);
		}
	}
	
	private void receiveDailyOrderFree(FBEncrypt encrypt)
	{
		byte _order_index = encrypt.getByte(KeyID.KEY_ORDER_INDEX);

		if (_order_index != DatabaseID.ORDER_DAILY_INDEX || _order_index < 0 || _order_index > orderManager.getOrderCount())
		{
			LogHelper.Log("receiveDailyOrderFree.. invalid _order_index");
			requestError(ReturnCode.RESPONSE_INVALID_ORDER_INDEX);
			return;
		}
		
		Order order_daily = orderManager.getOrder(_order_index);

		if (order_daily.getReceiveDailyOrder() == true)
		{
			LogHelper.Log("receiveDailyOrderFree.. this order had already received!");
			requestError(ReturnCode.RESPONSE_INVALID_ORDER_LETTER_INDEX);
			return;
		}
		
		int daily_order_free_num = order_daily.getLetterSelectValue();
		
		order_daily.setReceiveDailyOrder(true);
		
		int daily_order_paid_unlock = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][userInfo.getLevel()][DatabaseID.CONSTANT_DO_PAID_UNLOCK]);
		orderManager.initDailyOrder(daily_order_free_num, daily_order_paid_unlock);
		// orderManager.initDailyOrder(daily_order_free_num, Server.s_globalDB[DatabaseID.SHEET_DAILY_ORDER].length);
			
		orderManager.resetAllLetters(_order_index);
		orderManager.setOrderDailyLetterSelected(false);

		SET_DB_VALUE_BINARY(KeyID.KEY_ORDER, orderManager.getData());

		// track action
		StringBuilder log = new StringBuilder();
		log.append(Misc.getCurrentDateTime());								//  1. thoi gian tieu tien
		log.append('\t').append(Misc.getActionName(_command_id, "" + daily_order_free_num));			//  2. hanh dong cua gamer
		log.append('\t').append(userInfo.getID());							//  3. id
		log.append('\t').append(userInfo.getID());							//  4. role id
		log.append('\t').append(userInfo.getName());						//  5. name
		log.append('\t').append(SkyGarden._server_id);											//  6. server id
		log.append('\t').append(userInfo.getLevel());						//  7. level
		LogHelper.Log(LogHelper.LogType.TRACKING_ACTION, log.toString());
		
		
		// response to client
		FBEncrypt result = new FBEncrypt();
		result.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		result.addBinary(KeyID.KEY_ORDER, orderManager.getData());

		try
		{
			_client.WriteZip(result.toByteArray());
			// LogHelper.Log("receiveDailyOrderFree.. response to client OK");
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("receiveDailyOrderFree", ex);
		}		
	}
	
	private void receiveDailyOrderPaid(FBEncrypt encrypt)
	{
		byte _order_index = encrypt.getByte(KeyID.KEY_ORDER_INDEX);

		if (_order_index != DatabaseID.ORDER_DAILY_INDEX || _order_index < 0 || _order_index > orderManager.getOrderCount())
		{
			LogHelper.Log("receiveDailyOrderPaid.. invalid _order_index");
			requestError(ReturnCode.RESPONSE_INVALID_ORDER_INDEX);
			return;
		}
		
		Order order_daily = orderManager.getOrder(_order_index);

		if (order_daily.getReceiveDailyOrder() == true)
		{
			LogHelper.Log("receiveDailyOrderPaid.. receive order failed!");
			requestError(ReturnCode.RESPONSE_INVALID_ORDER_LETTER_INDEX);
			return;
		}
		
		if (orderManager.isNewDate())
		{
			LogHelper.Log("receiveDailyOrderPaid: isNewDate() = true! Cannot skip this order");
			requestError(ReturnCode.RESPONSE_NEW_DATE);
			return;
		}
		
		long diamond_used = 0;
		long user_diamond = money_mgr.GetBonusMoney() + money_mgr.GetRealMoney();
		int daily_order_paid_diamond = order_daily.getReceiveDailyOrderDiamond();
		
		if (user_diamond < daily_order_paid_diamond)
		{
			LogHelper.Log("receiveDailyOrderPaid.. FAILED! Not enough diamond");
		}
		else
		{
			diamond_used = daily_order_paid_diamond;
			money_mgr.UseRealMoneyAndBonusMoney(daily_order_paid_diamond,							// log
													_command_id, "" + (orderManager.getOrderDailyPaidDeliveredNum() + 1), //  2. hanh dong cua gamer
													userInfo.getName(),								//  3. ten tai khoan
													userInfo.getLevel(),							//  7. level cua gamer
													_ip,											//  9. ip login v4 cua gamer
													-1,												// 10. id cua loai item
													-1,												// 11. id cua item
													"",												// 12. ten item
													daily_order_paid_diamond,						// 13. gia game coin cua item
													1);												// 14. so luong vat pham
			
			order_daily.setReceiveDailyOrder(true);
			
			SET_DB_VALUE_BINARY(KeyID.KEY_ORDER, orderManager.getData());
		}
		
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_ORDER, orderManager.getData());
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addLong(KeyID.KEY_DIAMOND_USED, diamond_used);
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));

		try
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("receiveDailyOrderPaid", ex);
		}		
	}
	
	private void tutorialUpdateStep(FBEncrypt encrypt)
	{
		byte tutorial_step = encrypt.getByte(KeyID.KEY_TUTORIAL_STEP);
		
		short exp_receive = 0;

		if (encrypt.hasKey(KeyID.KEY_TUTORIAL_START))
		{
			tutorialManager.setStartedStep(tutorial_step);
		}
		
		if (encrypt.hasKey(KeyID.KEY_TUTORIAL_FINISH))
		{
			exp_receive = tutorialManager.setFinishedStep(tutorial_step);
			
			if (exp_receive > 0)
			{
				userInfo.setExp(userInfo.getExp() + exp_receive);
				
				checkLevelUp();
				if (!_use_lazy_sync_user_info) SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
			}
		}
		
		SET_DB_VALUE_BINARY(KeyID.KEY_TUTORIAL, tutorialManager.getData());
		
//		tutorialManager.displayDataPackage();
		
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_TUTORIAL, tutorialManager.getData());
		
		if (exp_receive > 0)
		{
			response.addShort(KeyID.KEY_TUTORIAL_EXP_REWARD, exp_receive);
			response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		}

		if (user_level_up) checkAndUnlockItems();
		
		try
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("tutorialUpdateStep.. response to client OK");
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("tutorialUpdateStep", ex);
		}
		
		if (encrypt.hasKey(KeyID.KEY_TUTORIAL_FINISH))
		{
			// LOG VD
			StringBuilder log = new StringBuilder();
			log.append(Misc.getCurrentDateTime());
			log.append('\t').append(_user_id);
			log.append('\t').append(0);
			log.append('\t').append(tutorial_step);
			log.append('\t').append(0);
			log.append('\t').append(1);
			log.append('\t').append(_device_id);
			log.append('\t').append(_ip);
			LogHelper.Log(LogHelper.LogType.TUTORIAL, log.toString());
		}
	}
	
	private void skipOrderWaitTime(FBEncrypt encrypt)
	{
		byte _order_type = encrypt.getByte(KeyID.KEY_ORDER_TYPE);
		short _order_index = encrypt.getByte(KeyID.KEY_ORDER_INDEX);

		if (_order_type == DatabaseID.ORDER_DAILY && _order_index != DatabaseID.ORDER_DAILY_INDEX)
		{
			LogHelper.Log("invalid _order_daily_type");
			requestError(ReturnCode.RESPONSE_INVALID_ORDER_TYPE);
			return;
		}
		
		if (_order_type < 0 || _order_type >= DatabaseID.ORDER_TYPE_MAX)
		{
			LogHelper.Log("skipOrderWaitTime.. invalid _order_type");
			requestError(ReturnCode.RESPONSE_INVALID_ORDER_TYPE);
			return;
		}
		
		if (_order_index < 0 || _order_index > orderManager.getOrderCount())
		{
			LogHelper.Log("skipOrderWaitTime.. invalid _order_index");
			requestError(ReturnCode.RESPONSE_INVALID_ORDER_INDEX);
			return;
		}

		Order _order = orderManager.getOrder(_order_index);
		
		if (_order_index == DatabaseID.ORDER_DAILY_INDEX && orderManager.getOrderDailyPaidDeliveredNum() >= orderManager.getOrderDailyPaidMax())
		{
			LogHelper.Log("skipOrderWaitTime.. daily order is limited!");
			requestError();
			return;
		}
		
		if (_order_index == DatabaseID.ORDER_DAILY_INDEX && orderManager.isNewDate())
		{
			LogHelper.Log("skipOrderWaitTime: isNewDate() = true! Cannot skip time.");
			requestError(ReturnCode.RESPONSE_NEW_DATE);
			return;
		}
		
		long user_diamond = money_mgr.GetBonusMoney() + money_mgr.GetRealMoney();
		
		long diamond_skip_time = Misc.getDiamondEstimate(DatabaseID.DIAMOND_SKIP_TIME_PLANT, orderManager.getOrder(_order_index).getNewWaitTime());
		long diamond_used = 0;
		
		if (user_diamond >= diamond_skip_time && orderManager.getOrder(_order_index).getNewWaitTime() > 0)
		{
			//log
//			StringBuilder log = new StringBuilder();
//			log.append("CMD_SKIP_ORDER_WAIT_TIME");
//			log.append('\t').append(userInfo.getID());
//			log.append('\t').append(userInfo.getID());
//			log.append('\t').append(userInfo.getName());
//			log.append('\t').append(0);
//			log.append('\t').append(userInfo.getLevel());
//			log.append('\t').append("transaction_id");
//			log.append('\t').append(_ip);
//			log.append('\t').append("");
//			log.append('\t').append("");
//			log.append('\t').append("diamond");
//			log.append('\t').append(diamond_skip_time);
//			log.append('\t').append(0);
//			log.append('\t').append(0);
//			log.append('\t').append(money_mgr.GetRealMoney());
//			log.append('\t').append(money_mgr.GetBonusMoney());
				
			diamond_used = diamond_skip_time;
			money_mgr.UseRealMoneyAndBonusMoney((int)diamond_skip_time,								// log
													// _command_id, "" + _order_index,					//  2. hanh dong cua gamer
													_command_id,									//  2. hanh dong cua gamer
													userInfo.getName(),								//  3. ten tai khoan
													userInfo.getLevel(),							//  7. level cua gamer
													_ip,											//  9. ip login v4 cua gamer
													-1,												// 10. id cua loai item
													-1,												// 11. id cua item
													"",												// 12. ten item
													(int)diamond_skip_time,							// 13. gia game coin cua item
													1);												// 14. so luong vat pham
		
			boolean _order_received = _order.getReceiveDailyOrder();
			// LogHelper.Log("------------------------------- _order_received = " + _order_received); 
			
			orderManager.createOrder(_order_type, _order_index, getRandomProducts(_order_index), null, machine, floor, userInfo.getLevel(), _is_order_bug_pearl, ComboManager().GetBonusDailyOrder(), ComboManager().GetBonusNormalOrder());
			
			// skipOrderWaitTime
			if (_order_index == DatabaseID.ORDER_DAILY_INDEX)
			{
				Order new_order_daily = orderManager.getOrder(_order_index);
				
				int total_delivered_num = orderManager.getTotalDeliveredNum();
				int order_daily_free_max = orderManager.getOrderDailyFreeMax();
				
				if (total_delivered_num < order_daily_free_max)
				{
					new_order_daily.setReceiveDailyOrder(true);
				}
				else
				{
					new_order_daily.setReceiveDailyOrder(_order_received);

					int diamond_need = Misc.initReceiveDailyOrderDiamond(userInfo.getLevel(), orderManager.getOrderDailyPaidDeliveredNum(), new_order_daily.getRewardExp());
					new_order_daily.setReceiveDailyOrderDiamond(diamond_need);
				}
			}
			
			// LogHelper.Log("--------- Skip order wait time & Create new Order: OK!"); 
			
			SET_DB_VALUE_BINARY(KeyID.KEY_ORDER, orderManager.getData());
			if (!_use_lazy_sync_user_info) SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
		}
		else
		{
			LogHelper.Log("--------- Create Order: Failed!"); 
			if (user_diamond < diamond_skip_time) LogHelper.Log("Not enough diamond to skip order wait time!"); 
			if (orderManager.getOrder(_order_index).getNewWaitTime() <= 0) LogHelper.Log("No wait time to skip!"); 

			_return_id = ReturnCode.RESPONSE_ERROR;
		}
		
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_ORDER, orderManager.getData());
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addLong(KeyID.KEY_DIAMOND_USED, diamond_used);
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		

		try
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("skipOrderWaitTime.. response to client OK");
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("skipOrderWaitTime", ex);
		}		
	}
	
	private void deliveryOrder(FBEncrypt encrypt)
	{
		byte _order_type = encrypt.getByte(KeyID.KEY_ORDER_TYPE);
		short _order_index = encrypt.getByte(KeyID.KEY_ORDER_INDEX);

		if (_order_type == DatabaseID.ORDER_DAILY && _order_index != DatabaseID.ORDER_DAILY_INDEX)
		{
			LogHelper.Log("deliveryOrder.. invalid _order_daily_type");
			requestError(ReturnCode.RESPONSE_INVALID_ORDER_TYPE);
			return;
		}
		
		if (_order_type < 0 || _order_type >= DatabaseID.ORDER_TYPE_MAX)
		{
			LogHelper.Log("deliveryOrder.. invalid _order_type");
			requestError(ReturnCode.RESPONSE_INVALID_ORDER_TYPE);
			return;
		}
		
		if (_order_index < DatabaseID.ORDER_EVENT_SLOT_INDEX) {
			if (_order_index < 0 || _order_index > orderManager.getOrderCount())
			{
				LogHelper.Log("deliveryOrder.. invalid _order_index");
				requestError(ReturnCode.RESPONSE_INVALID_ORDER_INDEX);
				return;
			}
		}
		
		if (bUseOwl)
		{
			if (owl.getPowerCurrent() <= 0)
			{
				LogHelper.Log("deliveryOrder.. Owl's power is empty");
				requestError();
				return;
			}
		}
		
		if (!bCheatDeliveryOrder)
		if (orderManager.getRewardPackage() == true)
		{
			LogHelper.Log("deliveryOrder.. FAILED!!! Must be receive old order reward before delivery next order.");
			
			FBEncrypt result = new FBEncrypt();
			result.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
			result.addBinary(KeyID.KEY_ORDER, orderManager.getData());
			result.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToClient());
			result.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToClient());

			try
			{
				_client.WriteZip(result.toByteArray());
			} 
			catch (Exception ex) 
			{
				LogHelper.LogException("deliverOrder", ex);
			}
			
			return;
		}
		
		Stock stock_silo = stock.get(DatabaseID.STOCK_SILO);
		Stock stock_barn = stock.get(DatabaseID.STOCK_BARN);
		Order _order;
		
		if (_order_index == DatabaseID.ORDER_EVENT_SLOT_INDEX) {
			_order = orderManager.getOrderEvent();
		} else {
			_order = orderManager.getOrder(_order_index);
		}
		
		if (_order_index == DatabaseID.ORDER_DAILY_INDEX && _order.getReceiveDailyOrder() == false)
		{
			LogHelper.Log("Daily order is not received! Delivery failed.");
			requestError(ReturnCode.RESPONSE_INVALID_ORDER_INDEX);
			return;
		}
		
		if (_order_index == DatabaseID.ORDER_DAILY_INDEX && orderManager.isNewDate())
		{
			LogHelper.Log("deliveryOrder: isNewDate() = true! Cannot delivery this order");
			requestError(ReturnCode.RESPONSE_NEW_DATE);
			return;
		}

		ArrayList<byte[]> _order_stock = _order.getStock();
		
		int acm_index = -1;
		if (_order.getNewWaitTime() == 0 && _order_stock.size() > 0)
		{
			// check kho
			String plants_need = "";
			String products_need = "";
			String bugs_need = "";
			String item_event_need = "";
			
			for (int i = 0; i < _order_stock.size(); i++)
			{
				FBEncrypt _prod = new FBEncrypt(_order_stock.get(i));
				byte _prod_type = _prod.getByte(KeyID.KEY_PROD_TYPE);
				short _prod_id = _prod.getShort(KeyID.KEY_PROD_ID);
				short _prod_num = _prod.getShort(KeyID.KEY_PROD_NUM);
				
				if (_prod_type == DatabaseID.IT_PLANT)
				{
					plants_need += _prod_id + ":" + _prod_num + ":";
				}
				else if (_prod_type == DatabaseID.IT_PRODUCT)
				{
					products_need += _prod_id + ":" + _prod_num + ":";
				}
				else if (_prod_type == DatabaseID.IT_BUG)
				{
					bugs_need += _prod_id + ":" + _prod_num + ":";
				}
				else if (_prod_type == DatabaseID.IT_EVENT)
				{
					item_event_need += _prod_id + ":" + _prod_num + ":";
				}
				
			}
			
			if (plants_need.length() > 0)
			{
				plants_need = plants_need.substring(0, plants_need.length() - 1);
			}

			if (products_need.length() > 0)
			{
				products_need = products_need.substring(0, products_need.length() - 1);
			}

			if (bugs_need.length() > 0)
			{
				bugs_need = bugs_need.substring(0, bugs_need.length() - 1);
			}
			
			if (item_event_need.length() > 0)
			{
				item_event_need = item_event_need.substring(0, item_event_need.length() - 1);
			}
			
			if (plants_need.length() == 0 && products_need.length() == 0 && bugs_need.length() == 0 && item_event_need.length() == 0)
			{
				LogHelper.Log("--------- Delivery Order: Failed! Not exist any plants and products!"); 
				requestError(ReturnCode.RESPONSE_ORDER_PRODUCT_NOT_ENOUGH);
				return;
			}
			
			boolean can_delivery = true;
			
			if (plants_need.equals("") == false)
			{
				can_delivery = stock_silo.checkProducts(plants_need.split(":"), DatabaseID.IT_PLANT);
			}
			
			if (products_need.equals("") == false && can_delivery)
			{
				can_delivery = stock_barn.checkProducts(products_need.split(":"), DatabaseID.IT_PRODUCT);
			}
			
			if (bugs_need.equals("") == false && can_delivery)
			{
				can_delivery = stock_barn.checkProducts(bugs_need.split(":"), DatabaseID.IT_BUG);
			}
			
			if (item_event_need.equals("") == false && can_delivery)
			{
				can_delivery = stock_event.checkProducts(item_event_need.split(":"), DatabaseID.IT_EVENT);
			}
			
			// enough all items in this order, update stock
			if (can_delivery)
			{
				if (bUseOwl)
				{
					owl.setPowerCurrent(owl.getPowerCurrent() - 1);
					SET_DB_VALUE_BINARY(KeyID.KEY_OWL, owl.getData());
				}
				
				userInfo.increaseDeliveryOrderNum();
				if (!_use_lazy_sync_user_info) SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
				
				if (plants_need.equals("") == false)
				{
					stock_silo.updateProducts(_command_id, plants_need.split(":"), DatabaseID.IT_PLANT);
					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock_silo.getDataToDatabase());
				}
				
				boolean save_stock_barn = false;
				
				if (products_need.equals("") == false)
				{
					stock_barn.updateProducts(_command_id, products_need.split(":"), DatabaseID.IT_PRODUCT);
					save_stock_barn = true;
				}
				
				if (bugs_need.equals("") == false)
				{
					stock_barn.updateProducts(_command_id, bugs_need.split(":"), DatabaseID.IT_BUG);
					save_stock_barn = true;
				}
				
				if (save_stock_barn)
				{
					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock_barn.getDataToDatabase());
				}
				
				if (item_event_need.equals("") == false)
				{
					stock_event.updateProducts(_command_id, item_event_need.split(":"), DatabaseID.IT_EVENT);
					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
				}
			
				orderManager.addRewards(_order.getRewardGold(), _order.getRewardGoldBonus(), _order.getRewardExp(), _order.getRewardExpBonus(), _order.getRewardItems());
				
				if (_order.getRewardItemCount() > 0)
				{
					StringBuilder logItem = new StringBuilder();
					logItem.append("addIems: ");
		
					for (int i = 0; i < _order.reward_items.size(); i++)
					{
						FBEncrypt items = new FBEncrypt(_order.reward_items.get(i));
						
						String item_name = Misc.GetItemName(items.getByte(KeyID.KEY_PROD_TYPE), items.getShort(KeyID.KEY_PROD_ID));
						logItem.append("[").append(item_name + ": " + items.getShort(KeyID.KEY_PROD_NUM)).append("]");
					}
					
					LogHelper.Log(logItem.toString());
				}
				
				if (floor.size() > userInfo.getTotalFloor())
				{
					LogHelper.Log("NEED CHECK LOGIN FUNCTION!!! " + userInfo.getTotalFloor() + " " + floor.size() + " " + machine.size());
				}
				
				// tracking action
				if (_order_index == DatabaseID.ORDER_DAILY_INDEX && _order.getReceiveDailyOrderDiamond() > 0)
				{
					StringBuilder log = new StringBuilder();
					log.append(Misc.getCurrentDateTime());								//  1. thoi gian tieu tien
					log.append('\t').append("CompletePayingOrder");			//  2. hanh dong cua gamer
					log.append('\t').append(userInfo.getID());							//  3. id
					log.append('\t').append(userInfo.getID());							//  4. role id
					log.append('\t').append(userInfo.getName());						//  5. name
					log.append('\t').append(SkyGarden._server_id);											//  6. server id
					log.append('\t').append(userInfo.getLevel());						//  7. level
					LogHelper.Log(LogHelper.LogType.TRACKING_ACTION, log.toString());
				}
				
				if ((_use_event_halloween || _use_event_xmas_2014) && _order_index == DatabaseID.ORDER_EVENT_SLOT_INDEX)
				{
					orderManager.createOrderEvent(machine, floor, userInfo.getLevel());
				}
				else
				{
					orderManager.createOrder(_order_type, _order_index, getRandomProducts(_order_index), null, machine, floor, userInfo.getLevel(), _is_order_bug_pearl, ComboManager().GetBonusDailyOrder(), ComboManager().GetBonusNormalOrder());
				}

				// deliveryOrder
				if (_order_index == DatabaseID.ORDER_DAILY_INDEX)
				{
					updateDailyOrderDeliveredNum(_order_index);
				}
				
				SET_DB_VALUE_BINARY(KeyID.KEY_ORDER, orderManager.getData());

//				GetRankingTarget().Increase(CommandID.CMD_DELIVERY_ORDER, 1);
//				SET_DB_VALUE_BINARY(KeyID.KEY_USER_RANKING_TARGET, GetRankingTarget().GetData());
				
				if (_use_event_order)
				{
					SetEventScore(KeyID.KEY_EVENT_ORDER_JAN_2015, 1, CommandID.CMD_DELIVERY_ORDER);
				}
				
				if (_use_achievement)
				{
					acm_index = GetAchievementManager().Increase(CommandID.CMD_DELIVERY_ORDER, 1);
				}
				
				if (_order_index == DatabaseID.ORDER_DAILY_INDEX && _use_event_mid_autumn_festival)
				{
					SetEventScore(KeyID.KEY_EVENT_MID_AUTUMN_FESTIVAL, GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, 2));
				}
				
				if (_order_index == DatabaseID.ORDER_DAILY_INDEX && _use_event_20_11)
				{
					SetEventScore(KeyID.KEY_EVENT_20_11, GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, 2));
				}
				
				if (_order_index == DatabaseID.ORDER_DAILY_INDEX && _use_event_xmas_mini)
				{
					SetEventScore(KeyID.KEY_EVENT_XMAS_MINI, GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, 2));
				}
				
				if (_order_index == DatabaseID.ORDER_DAILY_INDEX && _use_event_xmas_tree)
				{
					stock_event.add(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_CANDLE, GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, 2), _command_id);
					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
					_event_item_num = GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, 2);
				}
				
				if (_order_index == DatabaseID.ORDER_DAILY_INDEX && _use_event_new_year_2015)
				{
					stock_event.add(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_BANH_CHUNG, GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, 2), _command_id);
					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
					_event_item_num = GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, 2);
				}
				
				if (_order_index == DatabaseID.ORDER_DAILY_INDEX && _use_event_8_3_2015)
				{
					stock_event.add(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_GLASS_ROSE, GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, 2), _command_id);
					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
					_event_item_num = GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, 2);
				}
				
				if (_use_event_halloween)
				{
					if (_order_index == DatabaseID.ORDER_DAILY_INDEX)
					{
						stock_event.addGift(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_HALLOWEEN_3, GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_HALLOWEEN_3, DatabaseID.FEATURE_ID_ORDER));
						SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
					}
					else if (_order_index == DatabaseID.ORDER_EVENT_SLOT_INDEX)
					{
						String[] reward_items = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_ORDER_EVENT][userInfo.getLevel()][DatabaseID.ORDER_EVENT_REWARD_ITEMS]).split(":");
						stock_event.addGift(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_HALLOWEEN_4, Integer.parseInt(reward_items[2]));
						SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
						
						// ranking
						GetRankingTarget().Set(CommandID.CMD_UPDATE_GARDEN_APPRAISAL, -1, stock_event.getProductNum(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_HALLOWEEN_4));
					}
					else
					{
						stock_event.addGift(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_HALLOWEEN_2, DatabaseID.ORDER_NORMAL_ITEM_EVENT_NUM);
						SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
					}
				}
				else if (_use_event_xmas_2014)
				{
					if (_order_index == DatabaseID.ORDER_DAILY_INDEX)
					{
						stock_event.addGift(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_XMAS_2014_2, GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_HALLOWEEN_1, DatabaseID.FEATURE_ID_ORDER));
						SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
					}
					else if (_order_index == DatabaseID.ORDER_EVENT_SLOT_INDEX)
					{
						String[] reward_items = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_ORDER_EVENT][userInfo.getLevel()][DatabaseID.ORDER_EVENT_REWARD_ITEMS]).split(":");
						stock_event.addGift(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_XMAS_2014_4, Integer.parseInt(reward_items[2]));
						SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
						
						// ranking
						GetRankingTarget().Set(CommandID.CMD_UPDATE_GARDEN_APPRAISAL, -1, stock_event.getProductNum(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_XMAS_2014_4));
					}
//					else
//					{
//						stock_event.addGift(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_XMAS_2014_2, DatabaseID.ORDER_NORMAL_ITEM_EVENT_NUM);
//						SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
//					}
				}
			}
			else
			{
				
				_return_id = ReturnCode.RESPONSE_ORDER_PRODUCT_NOT_ENOUGH;
				LogHelper.Log("--------- Delivery Order: Failed! " + _return_id); 
			}
		}
		else
		{
			_return_id = ReturnCode.RESPONSE_ORDER_STILL_WAITING;
			LogHelper.Log("--------- Delivery Order: Failed! " + _return_id); 
		}		
		
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_ORDER, orderManager.getData());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock_silo.getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock_barn.getDataToClient());
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));

		if (bUseOwl)
		{
			response.addBinary(KeyID.KEY_OWL, owl.getData());
		}
		
		if (_use_achievement && acm_index != -1)
		{
			response.addInt(KeyID.KEY_ACHIEVEMENT_ID, acm_index);
			response.addBinary(KeyID.KEY_ACHIEVEMENT_INDEX + acm_index, GetAchievementManager().GetAchievement(acm_index).getData());
		}

		if (_use_event_mid_autumn_festival || _use_event_20_11 || _use_event_xmas_mini)
		{
			response.addString(GetEventKeyName(), GetEventItems());
		}
		
		if ((_use_event_halloween || _use_event_xmas_2014 || _use_event_xmas_tree || _use_event_new_year_2015 || _use_event_8_3_2015) && _use_stock_event)
		{
			response.addBinary(KeyID.KEY_STOCK_EVENT, stock_event.getDataToClient());
			response.addString(GetEventKeyName(), GetEventItems());
		}

		try
		{
			_client.WriteZip(response.toByteArray());
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("deliverOrder", ex);
		}
	}

	private void skipOrder(FBEncrypt encrypt)
	{
		byte _order_type = encrypt.getByte(KeyID.KEY_ORDER_TYPE);
		short _order_index = encrypt.getByte(KeyID.KEY_ORDER_INDEX);

		if (_order_type == DatabaseID.ORDER_DAILY && _order_index != DatabaseID.ORDER_DAILY_INDEX)
		{
			LogHelper.Log("skipOrder: invalid _order_daily_type");
			requestError(ReturnCode.RESPONSE_INVALID_ORDER_TYPE);
			return;
		}
		
		if (_order_type < 0 || _order_type >= DatabaseID.ORDER_TYPE_MAX)
		{
			LogHelper.Log("skipOrder: invalid _order_type");
			requestError(ReturnCode.RESPONSE_INVALID_ORDER_TYPE);
			return;
		}
		
		if (_order_index < 0 || _order_index > orderManager.getOrderCount())
		{
			LogHelper.Log("skipOrder: invalid _order_index");
			requestError(ReturnCode.RESPONSE_INVALID_ORDER_INDEX);
			return;
		}
		
		Order _order = orderManager.getOrder(_order_index);
		
		if (_order.getNewWaitTime() == 0)
		{
			// skip order
			if (_order_index == DatabaseID.ORDER_DAILY_INDEX)
			{
				if (orderManager.isNewDate())
				{
					LogHelper.Log("skipOrder: isNewDate() = true! Cannot skip this order");
					requestError(ReturnCode.RESPONSE_NEW_DATE);
					return;
				}
				else
				{
					if (orderManager.getOrderDailyPaidDeliveredNum() == orderManager.getOrderDailyPaidMax() - 1)
					{
						orderManager.createOrder(_order_type, _order_index, getRandomProducts(_order_index), null, machine, floor, userInfo.getLevel(), _is_order_bug_pearl, ComboManager().GetBonusDailyOrder(), ComboManager().GetBonusNormalOrder());
					}
					
					updateDailyOrderDeliveredNum(_order_index);
					
					// ---------------------------------------------------------------------------------------------
					
					int total_delivered_num = orderManager.getTotalDeliveredNum();
					int order_daily_free_max = orderManager.getOrderDailyFreeMax();
					
					if (total_delivered_num < order_daily_free_max)
					{
						_order.setNewWaitTime(Misc.SECONDS() + getNewOrderWaitTimeFromUserLevel());
					}
					else if (orderManager.getOrderDailyPaidDeliveredNum() == orderManager.getOrderDailyPaidMax())
					{

					}
					else
					{
						boolean _order_received = _order.getReceiveDailyOrder();
						
						if (_order_received == false)
						{
							_order.setNewWaitTime(Misc.SECONDS() + DatabaseID.NEW_DAILY_ORDER_PAID_WAIT_TIME);
						}
						else
						{
							orderManager.createOrder(_order_type, _order_index, getRandomProducts(_order_index), null, machine, floor, userInfo.getLevel(), _is_order_bug_pearl, ComboManager().GetBonusDailyOrder(), ComboManager().GetBonusNormalOrder());
							
							Order new_order_daily = orderManager.getOrder(_order_index);
							
							int diamond_need = Misc.initReceiveDailyOrderDiamond(userInfo.getLevel(), orderManager.getOrderDailyPaidDeliveredNum(), new_order_daily.getRewardExp());
							new_order_daily.setReceiveDailyOrderDiamond(diamond_need);
						}
					}
				}
			}
			else
			{
				_order.setNewWaitTime(Misc.SECONDS() + getNewOrderWaitTimeFromUserLevel());
			}
			
			// LogHelper.Log("\n--------- Cancel Order: OK!"); 
			
			SET_DB_VALUE_BINARY(KeyID.KEY_ORDER, orderManager.getData());
			
			StringBuilder log = new StringBuilder();
			log.append(Misc.getCurrentDateTime());								//  1. thoi gian tieu tien
			log.append('\t').append(Misc.getActionName(_command_id));			//  2. hanh dong cua gamer
			log.append('\t').append(userInfo.getID());							//  3. id
			log.append('\t').append(userInfo.getID());							//  4. role id
			log.append('\t').append(userInfo.getName());						//  5. name
			log.append('\t').append(SkyGarden._server_id);											//  6. server id
			log.append('\t').append(userInfo.getLevel());						//  7. level
			LogHelper.Log(LogHelper.LogType.TRACKING_ACTION, log.toString());
			
			// orderManager.displayDataPackage();
		}
		else
		{
			LogHelper.Log("--------- Cancel Order: Failed!"); 

			_return_id = ReturnCode.RESPONSE_ERROR;
		}
		
		// response to client
		FBEncrypt result = new FBEncrypt();
		result.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		result.addBinary(KeyID.KEY_ORDER, orderManager.getData());

		try
		{
			_client.WriteZip(result.toByteArray());
			// LogHelper.Log("skipOrder.. response to client OK");
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("skipOrder", ex);
		}
	}

	private int getNewOrderWaitTimeFromUserLevel()
	{
		int wait_time = 0;
		
		for (int i = userInfo.getLevel(); i > 0 ; i--)
		{
			wait_time = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][i][DatabaseID.CONSTANT_NEW_ORDER_WAIT_TIME]);
			
			if (wait_time > 0)
			{
				return wait_time;
			}
		}
		
		LogHelper.Log("Err at getNewOrderWaitTimeFromUserLevel, cannot get wait time!");
		return wait_time;
	}
	
	public HashMap<String, Short> getRandomProducts(int _order_index)
	{
		short user_level = userInfo.getLevel();
		if (user_level < 3)
		{
			LogHelper.Log("getRandomProducts.. user level should be > 3 to create order");
			return null;
		}

		_is_order_bug_pearl = false;
		boolean _is_order_plant = false;
		
		int range = Misc.RANDOM_RANGE(0, 100);
		int order_bug_pearl_rate = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][user_level][DatabaseID.CONSTANT_ORDER_BUG_PEARL]);
        
		if (range <= order_bug_pearl_rate && user_level >= DatabaseID.USER_LEVEL_ORDER_BUG_PEARL && _order_index != DatabaseID.ORDER_DAILY_INDEX)
		{
			_is_order_bug_pearl = true;
		}
		else
		{
			range = Misc.RANDOM_RANGE(0, 100);
			int order_plant_rate = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][user_level][DatabaseID.CONSTANT_ORDER_PLANT]);
			_is_order_plant = (range < order_plant_rate ? true : false);
		}
		
		orderManager.isOrderPlant = _is_order_plant;
		
		int item_nums = 0;
		int item_per_order = 1;
		int item_min = 1;
		int item_max = 1;
		
		if (_is_order_bug_pearl)
		{
			item_per_order = Misc.RANDOM_RANGE(1, (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][user_level][DatabaseID.CONSTANT_ITEM_PER_ORDER_BUG_PEARL]));
			item_max = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][user_level][DatabaseID.CONSTANT_ITEM_MAX_ORDER_BUG_PEARL]);
			item_nums = Misc.RANDOM_RANGE(item_per_order, item_max);
		}
		else if (_order_index == DatabaseID.ORDER_DAILY_INDEX)
		{
			item_per_order = Misc.RANDOM_RANGE(1, (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][user_level][DatabaseID.CONSTANT_ITEM_PER_ORDER]));
			item_max = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][user_level][DatabaseID.CONSTANT_ITEM_MAX_ORDER_DAILY]);

			item_min = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][user_level][DatabaseID.CONSTANT_ITEM_MIN_ORDER_DAILY]);
			item_nums = Misc.RANDOM_RANGE(item_min, item_max);
		}
		else if (_is_order_plant)
		{
			// LogHelper.Log("\n++++++++++++++++++++++++++ Order plant"); 
			
			item_per_order = Misc.RANDOM_RANGE(1, (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][user_level][DatabaseID.CONSTANT_ITEM_PER_ORDER_PLANT]));
			item_max = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][user_level][DatabaseID.CONSTANT_ORDER_PLANT_ITEM_MAX]);
			
			item_min = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][user_level][DatabaseID.CONSTANT_ORDER_PLANT_ITEM_MIN]);
			item_nums = Misc.RANDOM_RANGE(item_min, item_max);
		}
		else
		{
			item_per_order = Misc.RANDOM_RANGE(1, (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][user_level][DatabaseID.CONSTANT_ITEM_PER_ORDER]));
			item_max = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][user_level][DatabaseID.CONSTANT_ITEM_MAX]);
			item_nums = Misc.RANDOM_RANGE(item_per_order, item_max);
		}
		
		int prod_per_item = (item_nums/item_per_order);
		if (prod_per_item == 0)
		{
			LogHelper.Log("Need re-check! prod_per_item = 0, item_nums = " + item_nums + " item_per_order = " + item_per_order);
			prod_per_item = 1;
		}

		ArrayList<String> plants_unlock = new ArrayList<String>();

		// daily order paid
		/*
		int total_delivered_num = orderManager.getTotalDeliveredNum();
		if (_order_index == DatabaseID.ORDER_DAILY_INDEX && total_delivered_num >= orderManager.getOrderDailyFreeMax() && total_delivered_num > 0)
		{
			item_min = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][user_level][DatabaseID.CONSTANT_DO_PAID_ITEM_MIN]);
			item_max = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][user_level][DatabaseID.CONSTANT_DO_PAID_ITEM_MAX]);
			item_nums = Misc.RANDOM_RANGE(item_min, item_max);
			prod_per_item = (item_nums/item_per_order);
			if (prod_per_item == 0)
			{
				LogHelper.Log("daily order paid...Need re-check! prod_per_item = 0, item_nums = " + item_nums + " item_per_order = " + item_per_order);
				prod_per_item = 1;
			}
			
			String[] do_plants = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][user_level][DatabaseID.CONSTANT_DO_RANDOM_PLANT]).split(":");
			
			for (int i = 0; i < do_plants.length; i++)
			{
				plants_unlock.add(do_plants[i]);
			}
		}
		else
		{
			plants_unlock = getItemsUnlock(user_level, DatabaseID.USER_SEED_ID_UNLOCK);		
		}
		*/

		// daily order
		if (_order_index == DatabaseID.ORDER_DAILY_INDEX)
		{
			item_min = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][user_level][DatabaseID.CONSTANT_DO_PAID_ITEM_MIN]);
			item_max = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][user_level][DatabaseID.CONSTANT_DO_PAID_ITEM_MAX]);

			String[] do_plants = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][user_level][DatabaseID.CONSTANT_DO_RANDOM_PLANT]).split(":");
			item_per_order = Misc.RANDOM_RANGE(1, do_plants.length);
			
			item_nums = Misc.RANDOM_RANGE(item_min, item_max);
			prod_per_item = (item_nums/item_per_order);
			if (prod_per_item == 0)
			{
				LogHelper.Log("daily order paid...Need re-check! prod_per_item = 0, item_nums = " + item_nums + " item_per_order = " + item_per_order);
				prod_per_item = 1;
			}
			
			for (int i = 0; i < do_plants.length; i++)
			{
				long plant_level_unlock = Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_SEED][Integer.parseInt(do_plants[i])][DatabaseID.SEED_LEVEL_UNLOCK]);
				
				if (user_level >= plant_level_unlock)
				{
					plants_unlock.add(do_plants[i]);
				}
			}
		}
		else
		{
			plants_unlock = Misc.getItemsUnlock(user_level, DatabaseID.USER_SEED_ID_UNLOCK);		
		}
		
		ArrayList<String> products_unlock = Misc.getItemsUnlock(user_level, DatabaseID.USER_PROD_ID_UNLOCK);
		
		int product_count = 0;
		
		product_count += plants_unlock.size();
		product_count += products_unlock.size();
		
		// LogHelper.Log("\n----------- user_level = " + user_level);
		// LogHelper.Log("----------- product_count = " + product_count);
		// LogHelper.Log("----------- item_per_order = " + item_per_order);
		// LogHelper.Log("----------- item_max = " + item_max);
		// LogHelper.Log("----------- item_nums = " + item_nums);
		// LogHelper.Log("----------- prod_per_item = " + prod_per_item + "\n");
		
		if (product_count == 0)
		{
			LogHelper.Log("----------- Create order failed due to product_count = 0"); 
			return null;
		}
		
		int enough_range = Misc.RANDOM_RANGE(0, 100);
		int enough_db_range = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][user_level][DatabaseID.CONSTANT_ORDER_CONTROL_ENOUGH]);
		
		if (_is_order_bug_pearl == false && _is_order_plant == false &&
			_order_index != DatabaseID.ORDER_DAILY_INDEX &&
			enough_range < enough_db_range)
		{
			// LogHelper.Log("\n++++++++++++++++++++++++++ Order control with 'enough' items\n"); 
			return getEnoughProductFromStock(plants_unlock, products_unlock);
		}
		
		ArrayList<String> items;

		if (_is_order_bug_pearl)
		{
			items = getRandomProductFromStock(stock.get(DatabaseID.STOCK_BARN), item_per_order, prod_per_item, products_unlock, DatabaseID.IT_PRODUCT, true);				
		}
		else if (_order_index == DatabaseID.ORDER_DAILY_INDEX)
		{
			items = getRandomProductFromStock(stock.get(DatabaseID.STOCK_SILO), item_per_order, prod_per_item, plants_unlock, DatabaseID.IT_PLANT, false);
		}
		else if (_is_order_plant)
		{
			items = getRandomProductFromStock(stock.get(DatabaseID.STOCK_SILO), item_per_order, prod_per_item, plants_unlock, DatabaseID.IT_PLANT, false);
		}
		else
		{
			// for (int k = 0; k < products_unlock.size(); k++)
				// System.out.println(products_unlock.get(k)); 

			// System.out.println("\n\n\n1111111111111111111111111111111111111111111111112222222222222222222222222222222"); 
			// System.out.println("products_unlock = " + products_unlock.size()); 
			// System.out.println("plants_unlock = " + plants_unlock.size()); 
			
			int prod_count_per_order = 0;
			
			int NO_ITEM_PRODUCT_RATE = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][userInfo.getLevel()][DatabaseID.CONSTANT_NO_ITEM_PRODUCT_RATE]);
			
			for (int i = 0; i < item_per_order; i++)
			{
				int item_range = Misc.RANDOM_RANGE(0, 100);
				
				if (item_range <= NO_ITEM_PRODUCT_RATE) 
				{
					prod_count_per_order++;
				}
			}
			if (prod_count_per_order == 0 && plants_unlock.size() < item_per_order) prod_count_per_order = item_per_order - plants_unlock.size();
			
			items = getRandomProductFromStock(stock.get(DatabaseID.STOCK_BARN), prod_count_per_order, prod_per_item, products_unlock, DatabaseID.IT_PRODUCT, false);
			
			int plant_count_per_order = item_per_order - items.size();
			
			if (plant_count_per_order > 0)
			{
				ArrayList<String> items_prod = getRandomProductFromStock(stock.get(DatabaseID.STOCK_SILO), plant_count_per_order, prod_per_item, plants_unlock, DatabaseID.IT_PLANT, false);
				
				for (String i: items_prod)
				{
					items.add(i);
				}
			}

			// System.out.println("item_per_order = " + item_per_order); 
			// System.out.println("prod_count_per_order = " + prod_count_per_order); 
			// System.out.println("plant_count_per_order = " + plant_count_per_order); 
			// System.out.println("\n\n\n"); 
			
			// removed to make new generate items (second design)
			/*
			int rand = Misc.RANDOM_RANGE(0, 100);
			
			if (rand < 50)
			{
				LogHelper.Log("product first"); 
				int prod_num_per_order = (products_unlock.size() * item_per_order) / product_count;
				if (prod_num_per_order == 0) prod_num_per_order = 1;
				
				items = getRandomProductFromStock(stock.get(DatabaseID.STOCK_BARN), prod_num_per_order, prod_per_item, products_unlock, DatabaseID.IT_PRODUCT, false);
				
				// int plant_num_per_order = item_per_order - prod_num_per_order;
				int plant_num_per_order = item_per_order - items.size();
				
				if (plant_num_per_order > 0)
				{
					ArrayList<String> items_prod = getRandomProductFromStock(stock.get(DatabaseID.STOCK_SILO), plant_num_per_order, prod_per_item, plants_unlock, DatabaseID.IT_PLANT, false);
					
					for (String i: items_prod)
					{
						items.add(i);
					}
				}
			}
			else
			{
				LogHelper.Log("plant first"); 
				int plant_num_per_order = (plants_unlock.size() * item_per_order) / product_count;
				if (plant_num_per_order == 0) plant_num_per_order = 1;
				
				items = getRandomProductFromStock(stock.get(DatabaseID.STOCK_SILO), plant_num_per_order, prod_per_item, plants_unlock, DatabaseID.IT_PLANT, false);
				
				// int prod_num_per_order = item_per_order - plant_num_per_order;
				int prod_num_per_order = item_per_order - items.size();
				
				if (prod_num_per_order > 0)
				{
					ArrayList<String> items_prod = getRandomProductFromStock(stock.get(DatabaseID.STOCK_BARN), prod_num_per_order, prod_per_item, products_unlock, DatabaseID.IT_PRODUCT, false);
					
					for (String i: items_prod)
					{
						items.add(i);
					}
				}
			}
			*/
			
			// removed to make new generate items (first design)
			/*
			if (user_level < DatabaseID.USER_LEVEL_ORDER_CONTROL)	// 10
			{
				if (item_per_order < 3)
				{
					LogHelper.Log("----------- create only plant"); 
					items = getRandomProductFromStock(stock.get(DatabaseID.STOCK_SILO), item_per_order, prod_per_item, plants_unlock, DatabaseID.IT_PLANT, false);
				}
				else
				{
					int prod_num_per_order = (products_unlock.size() * item_per_order) / product_count;
					items = getRandomProductFromStock(stock.get(DatabaseID.STOCK_BARN), prod_num_per_order, prod_per_item, products_unlock, DatabaseID.IT_PRODUCT, false);
					
					int plant_num_per_order = item_per_order - prod_num_per_order;
					ArrayList<String> items_prod = getRandomProductFromStock(stock.get(DatabaseID.STOCK_SILO), plant_num_per_order, prod_per_item, plants_unlock, DatabaseID.IT_PLANT, false);
					
					for (String i: items_prod)
					{
						items.add(i);
					}
				}
			}
			else
			{
				if (item_per_order < 3)
				{
					LogHelper.Log("----------- create only product"); 
					items = getRandomProductFromStock(stock.get(DatabaseID.STOCK_BARN), item_per_order, prod_per_item, products_unlock, DatabaseID.IT_PRODUCT, false);
				}
				else
				{
					int prod_num_per_order = (products_unlock.size() * item_per_order) / product_count;
					items = getRandomProductFromStock(stock.get(DatabaseID.STOCK_BARN), prod_num_per_order, prod_per_item, products_unlock, DatabaseID.IT_PRODUCT, false);
					
					int plant_num_per_order = item_per_order - prod_num_per_order;
					ArrayList<String> items_prod = getRandomProductFromStock(stock.get(DatabaseID.STOCK_SILO), plant_num_per_order, prod_per_item, plants_unlock, DatabaseID.IT_PLANT, false);
					
					for (String i: items_prod)
					{
						items.add(i);
					}
				}
			}
			*/
		}
		
		HashMap<String, Short> products = new HashMap();
		
		for (int i = 0; i < items.size(); i++)
		{
			products.put(items.get(i), (short)prod_per_item);
		}
		
		return products;
	}

	private HashMap<String, Short> getEnoughProductFromStock(ArrayList<String> plants_unlock, ArrayList<String> products_unlock)
	{
		ArrayList<String> items_unlock = new ArrayList<String>();
		ArrayList<String> items_available = new ArrayList<String>();
		
		int item_min = Integer.MAX_VALUE;
		
		Stock stock_silo = GetStock(DatabaseID.STOCK_SILO);
		Stock stock_barn = GetStock(DatabaseID.STOCK_BARN);
		
		for (int i = 0; i < plants_unlock.size(); i++)
		{
			String plant_id = plants_unlock.get(i);
			int plant_num = stock_silo.getProductNum(DatabaseID.IT_PLANT, Integer.parseInt(plant_id));
			
			if (plant_num > 0)
			{
				if (item_min > plant_num) item_min = plant_num;
				items_available.add(DatabaseID.IT_PLANT + "_" + plant_id);
			}
			
			items_unlock.add(DatabaseID.IT_PLANT + "_" + plant_id);
		}
		
		for (int i = 0; i < products_unlock.size(); i++)
		{
			String product_id = products_unlock.get(i);
			
			int id = Integer.parseInt(product_id);
			
			if (isInBugPearlList(id) == true)
			{
				continue;
			}
		
			int prod_num = stock_barn.getProductNum(DatabaseID.IT_PRODUCT, id);
			
			if (prod_num > 0)
			{
				if (item_min > prod_num) item_min = prod_num;
				items_available.add(DatabaseID.IT_PRODUCT + "_" + product_id);
			}
		
			items_unlock.add(DatabaseID.IT_PRODUCT + "_" + product_id);
		}
		
		int item_per_order = Misc.RANDOM_RANGE(1, (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][userInfo.getLevel()][DatabaseID.CONSTANT_ITEM_PER_ORDER]));
		int item_max = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][userInfo.getLevel()][DatabaseID.CONSTANT_ITEM_MAX]);

		if (item_min > item_max) item_min = item_max;
		else if (item_min == 0) item_min = 1;
		
		item_min = Misc.RANDOM_RANGE(1, item_min);

		ArrayList<String> items = new ArrayList<String>();
		
		if (items_available.size() > 0)
		{
			items = getRandomItemInList(items_available, item_per_order);
		}
		else
		{
			items = getRandomItemInList(items_unlock, item_per_order);
		}
		
		// ---------------------------------------------------------
		
		HashMap<String, Short> products = new HashMap();
		
		for (int i = 0; i < items.size(); i++)
		{
			products.put(items.get(i), (short)item_min);
		}

		return products;
	}

	private ArrayList<String> getRandomItemInList(ArrayList<String> items_list, int item_per_order)
	{
		if (item_per_order > items_list.size()) item_per_order = items_list.size();
		
		ArrayList<String> items = new ArrayList<String>();
		
		do
		{
			int rnd = Misc.RANDOM_RANGE(0, items_list.size()-1);
			
			items.add(items_list.get(rnd));
			items_list.remove(rnd);
		}
		while (items.size() < item_per_order);
		
		return items;
	}

	private ArrayList<String> getRandomProductFromStock(Stock _stock, int item_per_order, int prod_per_item, ArrayList<String> prods_unlock, int item_type, boolean _is_order_bug_pearl)
	{
		ArrayList<String> lstItem = new ArrayList<String>();
		
		ArrayList<String> lstA = new ArrayList<String>();
		ArrayList<String> lstB = new ArrayList<String>();
	
		int order_type = 0;
	
		if (_is_order_bug_pearl)
		{
			order_type = DatabaseID.ORDER_RANDOM_BUG_AND_PEARL;					// order chi bao gom bo va ngoc
		}
		else
		{
			// if (userInfo.getLevel() < DatabaseID.USER_LEVEL_ORDER_CONTROL)
			// {
				// order_type = DatabaseID.ORDER_RANDOM_ITEM;						// order sinh ra ngau nhien
			// }
			// else
			{
				int range = Misc.RANDOM_RANGE(0, 100);
				int order_control_miss = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][userInfo.getLevel()][DatabaseID.CONSTANT_ORDER_CONTROL_MISS]);
				
				if (range > order_control_miss)
				{
					order_type = DatabaseID.ORDER_RANDOM_ITEM;						// order sinh ra ngau nhien
				}
				else
				{
					order_type = DatabaseID.ORDER_RANDOM_ITEM_FOLLOW_USER_STOCK;	// order sinh ra ngau nhien nhung theo tinh trang kho cua user
				}
			}
		}

		// neu item_type la product thi remove bo va ngoc ra khoi danh sach tuy vao kieu order_type
		if (item_type == DatabaseID.IT_PRODUCT)
		{
			for (int i = 0; i < prods_unlock.size(); )
			{
				int id = Integer.parseInt(prods_unlock.get(i));
				
				if (order_type == DatabaseID.ORDER_RANDOM_BUG_AND_PEARL)
				{
					if (isInBugPearlList(id) == false)
					{
						// remove cac product khac ra khoi list chi chua lai bo va ngoc
						prods_unlock.remove(i);
						continue;
					}
				}
				else
				{
					if (isInBugPearlList(id) == true)
					{
						// remove bo va ngoc ra khoi list
						prods_unlock.remove(i);
						continue;
					}
				}
				
				i++;
			}
		}
		
		// --------------------------------------------------------------------------------------------------------
		
		if (_is_order_bug_pearl)
		{
			ArrayList<String> lstC = new ArrayList<String>();	// use for friend bug list
			
			for (int i = 0; i < prods_unlock.size(); i++)
			{
				int type = item_type;
				int id = Integer.parseInt(prods_unlock.get(i));
				
				if (type == DatabaseID.IT_PRODUCT)
				{
					if (id == DatabaseID.PRODUCT_ID_BORUA || 
						id == DatabaseID.PRODUCT_ID_DOMDOM || 
						id == DatabaseID.PRODUCT_ID_OCSEN || 
						id == DatabaseID.PRODUCT_ID_CHUONCHUON || 
						id == DatabaseID.PRODUCT_ID_BUOM || 
						id == DatabaseID.PRODUCT_ID_ONG)
					{
						type = DatabaseID.IT_BUG;
					
						switch (id)
						{
							case DatabaseID.PRODUCT_ID_BORUA: 		id = 0; break;
							case DatabaseID.PRODUCT_ID_DOMDOM: 		id = 1; break;
							case DatabaseID.PRODUCT_ID_OCSEN: 		id = 2; break;
							case DatabaseID.PRODUCT_ID_CHUONCHUON: 	id = 3; break;
							case DatabaseID.PRODUCT_ID_BUOM: 		id = 4; break;
							case DatabaseID.PRODUCT_ID_ONG: 		id = 5; break;
						}
						
						if (id < 3)
						{
							lstA.add(type + "_" + id);	// list bug
						}
						else
						{
							lstC.add(type + "_" + id);	// list friend bug
						}
					}
					else
					{
						lstB.add(type + "_" + id);	// list pearl
					}
				}
			}
			
			for (int h = 0; h < item_per_order; h++)
			{
				int range = Misc.RANDOM_RANGE(0, 100);
				int order_pearl_rate = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][userInfo.getLevel()][DatabaseID.CONSTANT_ORDER_PEARL_RATE]);
				
				if (range > order_pearl_rate)	// lay item la BO
				{
					int rangeBugType = Misc.RANDOM_RANGE(0, 100);
					int order_bug_rate = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][userInfo.getLevel()][DatabaseID.CONSTANT_ORDER_BUG_RATE]);
					
					if (rangeBugType <= order_bug_rate)	// BO nha minh
					{
						if (lstA.size() > 0)
						{
							int index = Misc.RANDOM_RANGE(0, lstA.size() - 1);
							
							lstItem.add(lstA.get(index));
							lstA.remove(index);
						}
						else if (lstB.size() > 0)
						{
							int index = Misc.RANDOM_RANGE(0, lstB.size() - 1);
							
							lstItem.add(lstB.get(index));
							lstB.remove(index);
						}
					}
					else	// Bo nha ban
					{
						if (lstC.size() > 0)
						{
							int index = Misc.RANDOM_RANGE(0, lstC.size() - 1);
							
							lstItem.add(lstC.get(index));
							lstC.remove(index);
						}
						else if (lstB.size() > 0)
						{
							int index = Misc.RANDOM_RANGE(0, lstB.size() - 1);
							
							lstItem.add(lstB.get(index));
							lstB.remove(index);
						}
					}
				}
				else
				{
					if (lstB.size() > 0)
					{
						int index = Misc.RANDOM_RANGE(0, lstB.size() - 1);
						
						lstItem.add(lstB.get(index));
						lstB.remove(index);
					}
					else if (lstA.size() > 0)
					{
						int index = Misc.RANDOM_RANGE(0, lstA.size() - 1);
						
						lstItem.add(lstA.get(index));
						lstA.remove(index);
					}
				}
			}
			
			return lstItem;
		}
		
		// --------------------------------------------------------------------------------------------------------
		
		for (int i = 0; i < prods_unlock.size(); i++)
		{
			int type = item_type;
			int id = Integer.parseInt(prods_unlock.get(i));
			
			// cheat random but never use BUG product (1, 4, 9 ~ Bo rua, Dom dom, Oc sen)
			if (item_type == DatabaseID.IT_PRODUCT &&  (id == DatabaseID.PRODUCT_ID_BORUA || 
														id == DatabaseID.PRODUCT_ID_DOMDOM || 
														id == DatabaseID.PRODUCT_ID_OCSEN || 
														id == DatabaseID.PRODUCT_ID_CHUONCHUON || 
														id == DatabaseID.PRODUCT_ID_BUOM || 
														id == DatabaseID.PRODUCT_ID_ONG))
			{
				type = DatabaseID.IT_BUG;
				
				switch (id)
				{
					case DatabaseID.PRODUCT_ID_BORUA: 		id = 0; break;
					case DatabaseID.PRODUCT_ID_DOMDOM: 		id = 1; break;
					case DatabaseID.PRODUCT_ID_OCSEN: 		id = 2; break;
					case DatabaseID.PRODUCT_ID_CHUONCHUON: 	id = 3; break;
					case DatabaseID.PRODUCT_ID_BUOM: 		id = 4; break;
					case DatabaseID.PRODUCT_ID_ONG: 		id = 5; break;
				}
			}
			
			int num = _stock.getProductNum(type , id);

			if (num >= prod_per_item)
			{
				// add to list A
				lstA.add(type + "_" + id);
			}
			else
			{
				// add to list B
				lstB.add(type + "_" + id);
			}
		}
		
		// chon ngau nhien product id trong lstA va lstB
		for (int h = 0; h < item_per_order; h++)
		{
			int sizeAB = lstA.size() + lstB.size();
			int sizeA = lstA.size();
			
			// product dau tien luon nam trong lstB (thieu)
			if (order_type == DatabaseID.ORDER_RANDOM_ITEM_FOLLOW_USER_STOCK && h == 0)
			{
				if (lstB.size() > 0)
				{
					int index = Misc.RANDOM_RANGE(0, lstB.size() - 1);
					
					lstItem.add(lstB.get(index));
					lstB.remove(index);
				}
				else if (lstA.size() > 0)
				{
					int index = Misc.RANDOM_RANGE(0, lstA.size() - 1);
					
					lstItem.add(lstA.get(index));
					lstA.remove(index);
				}
			}
			else
			{
				if (Misc.RANDOM_RANGE(0, sizeAB) < sizeA)
				{
					if (lstA.size() > 0)
					{
						int index = Misc.RANDOM_RANGE(0, lstA.size() - 1);
						
						lstItem.add(lstA.get(index));
						lstA.remove(index);
					}
					else if (lstB.size() > 0)
					{
						int index = Misc.RANDOM_RANGE(0, lstB.size() - 1);
						
						lstItem.add(lstB.get(index));
						lstB.remove(index);
					}
				}
				else
				{
					if (lstB.size() > 0)
					{
						int index = Misc.RANDOM_RANGE(0, lstB.size() - 1);
						
						lstItem.add(lstB.get(index));
						lstB.remove(index);
					}
					else if (lstA.size() > 0)
					{
						int index = Misc.RANDOM_RANGE(0, lstA.size() - 1);
						
						lstItem.add(lstA.get(index));
						lstA.remove(index);
					}
				}
			}
		}
		
		return lstItem;
	}
	
	private boolean isInBugPearlList(int id)
	{
		for (int i = 0; i < Misc.itemListBugAndPearl.length; i++)
		{
			if (id == Misc.itemListBugAndPearl[i])
			{
				return true;
			}
		}
		
		return false;
	}
	
	public void checkLevelUp()
	{
		boolean level_up = false;
		
		last_level = userInfo.getLevel();
		long exp = userInfo.getExp();
		
		while (exp >= userInfo.expRequiredToLevelUp())
		{
			// LogHelper.Log("userInfo.. checkLevelUp: currentExp / requiredExp: " + exp + "/" + userInfo.expRequiredToLevelUp());
			
			// make sure read database ok
			if (userInfo.expRequiredToLevelUp() <= 0)
			{
				level_up = false;
				break;
			}
			
			// Log VD LEVEL UP
			StringBuilder log = new StringBuilder();
			log.append(Misc.getCurrentDateTime());
			log.append('\t').append(_user_id);
			log.append('\t').append(_user_id);
			log.append('\t').append(userInfo.getName());
			log.append('\t').append(SkyGarden._server_id);
			log.append('\t').append(userInfo.getLevel());
			
			int last_time_levelup = userInfo.GetTimeLevelUp();
			userInfo.increaseLevel();
			userInfo.SetTimeLevelUp(Misc.SECONDS());
			// LogHelper.Log("useInfo.. user level up [" + userInfo.getLevel() + "] !.");
			level_up = true;
			
			log.append('\t').append(userInfo.getLevel());
			log.append('\t').append(userInfo.getExp());
			log.append('\t').append(Misc.SECONDS() - last_time_levelup);
			log.append('\t').append("Normal");
			LogHelper.Log(LogHelper.LogType.LEVELUP, log.toString());
			
			// PIG LOG
			StringBuilder piglog = new StringBuilder();
			piglog.append(Misc.getCurrentDateTime());		//  1. thoi gian dang nhap
			piglog.append('\t').append("LevelUp");
			piglog.append('\t').append(_pig_id);
			piglog.append('\t').append("CGMFBS");
			piglog.append('\t').append(SkyGarden._server_id);
			piglog.append('\t').append(_client_OS);
			piglog.append('\t').append(_user_id);
			piglog.append('\t').append(userInfo.getLevel() - 1);
			piglog.append('\t').append(userInfo.getLevel());
			LogHelper.Log(LogHelper.LogType.PIG_LOG, piglog.toString());
			
			user_level_up = true;
			// checkAndUnlockItems();
			
			if (userInfo.getDeviceOS().equals("WINPHONE") && userInfo.getLevel() <= 25)
			{
				String gift_name = "";
				String gift_desc = "";
				String gift_list = "";
				
				try
				{
					Object obj = null;
					switch (userInfo.getLevel())
					{
						case 5:
						case 10:
						case 15:
						case 20:
						case 25:
							obj = DBConnector.GetMembaseServerForTemporaryData().Get("winphone_level_up_gift" + "_" + userInfo.getLevel());
							break;
						default:
							break;
					}
					
					if (obj != null)
					{
						gift_list = (String)obj;
						gift_name = (String)DBConnector.GetMembaseServerForTemporaryData().Get("winphone_level_up_title" + "_" + userInfo.getLevel());
						gift_desc = (String)DBConnector.GetMembaseServerForTemporaryData().Get("winphone_level_up_desc" + "_" + userInfo.getLevel());
						
						if (!Strings.isNullOrEmpty(gift_list) && !Strings.isNullOrEmpty(gift_name) && !Strings.isNullOrEmpty(gift_desc))
						{
							gift_mgr.AddGiftBox(gift_name, gift_desc, gift_list);
							gift_mgr.SaveDataToDatabase(KeyID.KEY_GIFT);
							MoveGiftBoxToMailBox();
						}
					}
				}
				catch (Exception e)
				{
					LogHelper.LogException("GiveGiftLevelUpWinPhone", e);
				}
			}
		}
		
		if (level_up)
		{
			// SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData());
			
			machineRepairLimit.updateReputationMax(userInfo.getLevel());
			SET_DB_VALUE_BINARY(KeyID.KEY_MACHINES_REPAIR_LIMIT, machineRepairLimit.getData());
			
			if (bUseOwl)
			{
				owl.updatePowerLimit(userInfo.getLevel());
				owl.resetPower();
				SET_DB_VALUE_BINARY(KeyID.KEY_OWL, owl.getData());
			}
			
			// read share reward from db and add to reward pool
			if (userInfo.getLevel() > 6)
			{
				try
				{
					String reward = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_USER_LEVEL][userInfo.getLevel()][DatabaseID.USER_LEVEL_SHARE_REWARD]);
					ShareFBLevelUpRewardPool.clear(); // dont stack old rewards
					ShareFBLevelUpRewardPool.add(reward);
				}
				catch (Exception e)
				{
					LogHelper.LogException("checkLevelUp.GetShareReward", e);
				}
			}
			
//			if (userInfo.getLevel() == 10)
//			{
//				SetDefaultOrderSelection();
//			}
		}
		
		if (level_up) {
			// gift close friend
			if (_use_close_friend) {
				long close_friend = CloseFriend().GetCloseFriend();
				if (close_friend > -1) {
					String my_gift;
					String closefriend_gift;
					for (int i = 0; i < Server.s_globalDB[DatabaseID.SHEET_CLOSE_FRIEND].length; i++) {
						if (userInfo.getLevel() == Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_CLOSE_FRIEND][i][DatabaseID.CLOSE_FRIEND_LEVEL])) {
							my_gift = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_CLOSE_FRIEND][i][DatabaseID.CLOSE_FRIEND_MY_GIFT]);
							closefriend_gift = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_CLOSE_FRIEND][i][DatabaseID.CLOSE_FRIEND_GIFT]);

							// add gift
							GameUtil.AddGiftToMailBox("01/01/2015 06:00:00", "01/01/2020 24:00:00", userInfo, "gift_close_friend_" + close_friend + "_" + userInfo.getLevel(),
								Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][58][DatabaseID.GIFT_INFO_NAME]),
								Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][58][DatabaseID.GIFT_INFO_DESCRIPTION]).replace("%d", userInfo.getLevel() + ""),
								my_gift,
								Misc.getActionName(_command_id),
								SkyGarden._server_id);


							GameUtil.AddGiftToMailBox("01/01/2015 06:00:00", "01/01/2020 24:00:00", GameUtil.GetUserInfo(close_friend), "gift_close_friend_" + _user_id + "_" + userInfo.getLevel(),
								Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][59][DatabaseID.GIFT_INFO_NAME]),
								Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][59][DatabaseID.GIFT_INFO_DESCRIPTION]).replace("%s", userInfo.getName()).replace("%d", userInfo.getLevel() + ""),
								closefriend_gift,
								Misc.getActionName(_command_id),
								SkyGarden._server_id);

							LogHelper.LogHappy("Added gift HXTT");
							break;
						}
					}
				}
			}
			
			// reset order
			SetDefaultOrderSelection();
			
			try {
				Object obj = DBConnector.GetMembaseServerForTemporaryData().Get("gift_new_comer");
				if (obj != null) {
					if (((String)obj).equals("ON")) {
						String gift_list = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_USER_LEVEL][userInfo.getLevel()][DatabaseID.USER_NEW_COMER_GIFT]);
						if (!gift_list.equals("null")) {
							GameUtil.AddGiftToMailBox("01/01/2015 06:00:00", "01/01/2020 24:00:00", userInfo, "new_comer_gift_" + userInfo.getLevel(),
								Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][61][DatabaseID.GIFT_INFO_NAME]),
								Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][61][DatabaseID.GIFT_INFO_DESCRIPTION]).replace("%d", userInfo.getLevel() + ""),
								gift_list,
								Misc.getActionName(_command_id),
								SkyGarden._server_id);
							LogHelper.LogHappy("Added gift new comer level " + userInfo.getLevel());
						}
					}
				}
			} catch (Exception e) {
				LogHelper.LogException("GiftNewUser", e);
			}


			if (_use_event_new_comer) {
				if (userInfo.getLevel() == 15) { //TODO: check user id to make sure it's new user.
					try {
						long l = DBConnector.GetMembaseServerForTemporaryData().Increase("total_new_comer", 1, 0L);
						LogHelper.LogHappy("Total level := " + l);
					} catch (Exception e) {
						LogHelper.LogException("IncreaseTotalNewComer", e);
					}
				}
			}
		}
	}
	
	public void handleLevelUp()
	{
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
		response.addBinary(KeyID.KEY_ORDER, orderManager.getData());
		response.addBinary(KeyID.KEY_MACHINES_REPAIR_LIMIT, machineRepairLimit.getData());
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		MailBox mailbox = new MailBox(userInfo);
		mailbox.Load();
		response.addBinary(KeyID.KEY_MAIL_BOX, mailbox.GetData());
		
		if (bUseOwl)
		{
			response.addBinary(KeyID.KEY_OWL, owl.getData());
		}

		try
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("handleLevelUp.. response to client OK.");
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("handleLevelUp", ex);
		}
	}
	
	private void checkAndUnlockItems()
	{
		if (userInfo.getLevel() > last_level)
		{
			user_level_up = false;
			
			for (int i = last_level+1; i <= userInfo.getLevel(); i++)
			{
				checkAndUnlockItems(i);
			}
		}
	}
	
	public void checkAndUnlockItems(int user_level)
	{
		boolean stock_silo_has_change = false;
		boolean stock_barn_has_change = false;
		boolean stock_warehouse_has_change = false;
		
		StringBuilder log_item = new StringBuilder();
		
		String[] plant_unlock = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_USER_LEVEL][user_level][DatabaseID.USER_SEED_ID_UNLOCK]).split(":");
		if (plant_unlock.length % 2 == 0)	// id:num
		{
			for (int i = 0; i < plant_unlock.length; i += 2)
			{
				int id = Integer.parseInt(plant_unlock[i]);
				int num = Integer.parseInt(plant_unlock[i+1]);
				
				if (id > -1 && num > 0)
				{
					if (stock.get(DatabaseID.STOCK_SILO).addGift(DatabaseID.IT_PLANT, id, num, _command_id))
					{
						stock_silo_has_change = true;
						// LogHelper.Log("Increased " + num + " plants " + id + " to stock");
						
						if (log_item.length() == 0)
						{
							log_item.append(DatabaseID.IT_PLANT + "_" + id);
						}
						else
						{
							log_item.append(":").append(DatabaseID.IT_PLANT + "_" + id);
						}
						log_item.append(":").append(num);
					}
					else
					{
						LogHelper.Log("checkAndUnlockItems.. critial err! can not add seed to stock.");
					}
				}
			}
		}
		
		String[] pot_unlock = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_USER_LEVEL][user_level][DatabaseID.USER_POT_ID_UNLOCK]).split(":");
		if (pot_unlock.length % 2 == 0)	// id:num
		{
			for (int i = 0; i < pot_unlock.length; i += 2)
			{
				int id = Integer.parseInt(pot_unlock[i]);
				int num = Integer.parseInt(pot_unlock[i+1]);
				
				if (id > -1 && num > 0)
				{
					if (stock.get(DatabaseID.STOCK_WAREHOUSE).addGift(DatabaseID.IT_POT, id, num, _command_id))
					{
						stock_warehouse_has_change = true;
						// LogHelper.Log("Increased " + num + " pots " + id + " to stock");
						
						if (log_item.length() == 0)
						{
							log_item.append(DatabaseID.IT_POT + "_" + id);
						}
						else
						{
							log_item.append(":").append(DatabaseID.IT_POT + "_" + id);
						}
						log_item.append(":").append(num);
					}
					else
					{
						LogHelper.Log("checkAndUnlockItems.. critial err! can not add pot to stock.");
					}
				}
			}
		}

		String[] pro_unlock = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_USER_LEVEL][user_level][DatabaseID.USER_PROD_ID_UNLOCK]).split(":");
		if (pro_unlock.length % 2 == 0)	// id:num
		{
			for (int i = 0; i < pro_unlock.length; i += 2)
			{
				int id = Integer.parseInt(pro_unlock[i]);
				int num = Integer.parseInt(pro_unlock[i+1]);
				
				if (id > -1 && num > 0)
				{
					if (id == DatabaseID.PRODUCT_ID_BORUA || 
						id == DatabaseID.PRODUCT_ID_DOMDOM || 
						id == DatabaseID.PRODUCT_ID_OCSEN || 
						id == DatabaseID.PRODUCT_ID_CHUONCHUON || 
						id == DatabaseID.PRODUCT_ID_BUOM || 
						id == DatabaseID.PRODUCT_ID_ONG)
					{
						continue;
					}
					
					if (stock.get(DatabaseID.STOCK_BARN).addGift(DatabaseID.IT_PRODUCT, id, num, _command_id))
					{
						stock_barn_has_change = true;
						// LogHelper.Log("Increased " + num + " products " + id + " to stock");
						
						if (log_item.length() == 0)
						{
							log_item.append(DatabaseID.IT_PRODUCT + "_" + id);
						}
						else
						{
							log_item.append(":").append(DatabaseID.IT_PRODUCT + "_" + id);
						}
						log_item.append(":").append(num);
					}
					else
					{
						LogHelper.Log("checkAndUnlockItems.. critial err! can not add product to stock.");
					}
				}
			}
		}
		
		// gift
		String[] item_unlock = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_USER_LEVEL][user_level][DatabaseID.USER_REWARD_ITEM]).split(":");
		if (item_unlock.length % 3 == 0)	// type:id:num
		{
			for (int i = 0; i < item_unlock.length; i += 3)
			{
				int type = Integer.parseInt(item_unlock[i]);
				int id = Integer.parseInt(item_unlock[i+1]);
				int num = Integer.parseInt(item_unlock[i+2]);
				
				if (num <= 0) continue;
				
				if (type == DatabaseID.IT_PLANT)
				{
					if (stock.get(DatabaseID.STOCK_SILO).addGift(type, id, num, _command_id))
					{
						stock_silo_has_change = true;
						// LogHelper.Log("checkAndUnlockItems.. added seed to stock silo");
						
						if (log_item.length() == 0)
						{
							log_item.append(type + "_" + id);
						}
						else
						{
							log_item.append(":").append(type + "_" + id);
						}
						log_item.append(":").append(num);
					}
					else
					{
						LogHelper.Log("checkAndUnlockItems.. critial err! can not add seed to stock.");
					}
				}
				else if (type == DatabaseID.IT_PRODUCT || type == DatabaseID.IT_BUG)
				{
					if (stock.get(DatabaseID.STOCK_BARN).addGift(type, id, num, _command_id))
					{
						stock_barn_has_change = true;
						// LogHelper.Log("checkAndUnlockItems.. added product/bug to stock barn");
						
						if (log_item.length() == 0)
						{
							log_item.append(type + "_" + id);
						}
						else
						{
							log_item.append(":").append(type + "_" + id);
						}
						log_item.append(":").append(num);
					}
					else
					{
						LogHelper.Log("checkAndUnlockItems.. critial err! can not add product to stock.");
					}
				}
				else
				{
					if (stock.get(DatabaseID.STOCK_WAREHOUSE).addGift(type, id, num, _command_id))
					{
						stock_warehouse_has_change = true;
						// LogHelper.Log("checkAndUnlockItems.. added item to stock warehouse");
						
						if (log_item.length() == 0)
						{
							log_item.append(type + "_" + id);
						}
						else
						{
							log_item.append(":").append(type + "_" + id);
						}
						log_item.append(":").append(num);
					}
					else
					{
						LogHelper.Log("checkAndUnlockItems.. critial err! can not add product to stock.");
					}
				}
			}
		}
		
		if (stock_silo_has_change)
		{
			SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToDatabase());
		}
		
		if (stock_barn_has_change)
		{
			SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToDatabase());
		}
		
		if (stock_warehouse_has_change)
		{
			SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToDatabase());
		}
		
		// order
		long order_slot_unlock = Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_USER_LEVEL][user_level][DatabaseID.USER_ORDER_SLOT_UNLOCK]);
		if (order_slot_unlock > 0)
		{
			orderManager.createOrder(order_slot_unlock == (DatabaseID.ORDER_DAILY_INDEX+1) ? DatabaseID.ORDER_DAILY : DatabaseID.ORDER_NORMAL, getRandomProducts((int)(order_slot_unlock-1)), null, machine, floor, userInfo.getLevel(), _is_order_bug_pearl, ComboManager().GetBonusDailyOrder(), ComboManager().GetBonusNormalOrder());
			SET_DB_VALUE_BINARY(KeyID.KEY_ORDER, orderManager.getData());
			
			// trong mot so truong hop, khi len level user bi disconnect nen khong gui duoc lenh levelUp, do do khong nhan duoc dung so order
			// Doan lenh nay kiem tra so order hien tai voi so order duoc unlock de tao lai du so order can o level tiep theo.
			if (orderManager.getOrderCount() < order_slot_unlock)
			{
				OrderManager _orderManager = new OrderManager();
				
				for (int i = 1; i <= order_slot_unlock; i++)
				{
					_orderManager.createOrder(i == (DatabaseID.ORDER_DAILY_INDEX+1) ? DatabaseID.ORDER_DAILY : DatabaseID.ORDER_NORMAL, 
						getRandomProducts((int)(i-1)), 
						null, 
						machine, 
						floor, 
						userInfo.getLevel(), 
						false, ComboManager().GetBonusDailyOrder(), ComboManager().GetBonusNormalOrder());
				}
				
				orderManager = _orderManager;
				SET_DB_VALUE_BINARY(KeyID.KEY_ORDER, orderManager.getData());
			}
		}
		
		// user info
		boolean user_info_has_change = false;
		
		long reward_gold = Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_USER_LEVEL][user_level][DatabaseID.USER_REWARD_GOLD]);
		if (reward_gold > 0)
		{
			userInfo.setGold(userInfo.getGold() + reward_gold);
			
			user_info_has_change = true;
		}
		
		if (log_item.length() == 0)
		{
			log_item.append(DatabaseID.IT_MONEY + "_" + DatabaseID.GOLD_ID);
		}
		else
		{
			log_item.append(":").append(DatabaseID.IT_MONEY + "_" + DatabaseID.GOLD_ID);
		}
		log_item.append(":").append(reward_gold);
		
		long reward_reputation = Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_USER_LEVEL][user_level][DatabaseID.USER_REWARD_REPUTATION]);
		if (reward_reputation > 0)
		{
			userInfo.setReputation(userInfo.getReputation() + reward_reputation);
			
			user_info_has_change = true;
		}
		
		if (log_item.length() == 0)
		{
			log_item.append(DatabaseID.IT_MONEY + "_" + DatabaseID.REPUTATION_ID);
		}
		else
		{
			log_item.append(":").append(DatabaseID.IT_MONEY + "_" + DatabaseID.REPUTATION_ID);
		}
		log_item.append(":").append(reward_reputation);
		
		if (user_info_has_change)
		{
			if (!_use_lazy_sync_user_info) SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
		}
		
		int reward_diamond = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_USER_LEVEL][user_level][DatabaseID.USER_REWARD_DIAMOND]);
		
		if (reward_diamond > 0)
		{
			money_mgr.IncreaseBonusMoney(reward_diamond, MoneyManager.Reason.BONUS_MONEY_FOR_USER,
														(int)CommandID.CMD_LEVEL_UP,
														userInfo.getName(),								//  3. ten tai khoan
														(int)userInfo.getLevel(),						//  7. level cua gamer
														_ip,											//  9. ip login v4 cua gamer
														-1,												// 10. id cua loai item
														-1,												// 11. id cua item
														"",												// 12. ten item
														(int)reward_diamond,							// 13. gia game coin cua item
														1);												// 14. so luong vat pham
		}
		
		if (log_item.length() == 0)
		{
			log_item.append(DatabaseID.IT_MONEY + "_" + DatabaseID.DIAMOND_ID);
		}
		else
		{
			log_item.append(":").append(DatabaseID.IT_MONEY + "_" + DatabaseID.DIAMOND_ID);
		}
		log_item.append(":").append(reward_diamond);
		
		StringBuilder log = new StringBuilder();
		log.append(Misc.getCurrentDateTime());						//  1. thoi gian tieu tien
		log.append('\t').append(Misc.getActionName(_command_id));	//  2. hanh dong cua gamer
		log.append('\t').append(userInfo.getID());					//  3. ten tai khoan
		log.append('\t').append(userInfo.getID());					//  4. id cua role nap tien
		log.append('\t').append(userInfo.getName());				//  5. ten role
		log.append('\t').append(SkyGarden._server_id);									//  6. id cua server
		log.append('\t').append(userInfo.getLevel());				//  7. level cua gamer
		log.append('\t').append("");								//	8. id item nhan
		log.append('\t').append(0);									//	9. so luong item
		log.append('\t').append(1);									//	10. result
		log.append('\t').append(log_item);							//	11. desciption as item list
		LogHelper.Log(LogHelper.LogType.RECEIVING_ITEM, log.toString());
	}
	
	public static void udpRequest(ByteBuffer buffer, String ip, int port, boolean receive)
	{
		if (true)
		{
			try
			{
				simpleUDP(buffer, ip, port);
			}
			catch (Exception e)
			{
				LogHelper.LogException("udpRequest.simpleUDP", e);
			}
		}
		else
		{
			try
			{
				// LogHelper.Log("udpRequest " + buffer.remaining() + " to " + ip + ":" + port + " receive=" + receive);
				InetSocketAddress server = new InetSocketAddress(ip, port);
				DatagramChannel channel = DatagramChannel.open();
				channel.configureBlocking(false);
				channel.connect(server);
				if (channel.send(buffer, server) > 0 && receive)
				{
					buffer.clear();
					int count = 0;
					do
					{
						Thread.sleep(/*DELAY_RETRY_UDPRECEIVE*/100);
						channel.receive(buffer);
						count++;
						// LogHelper.Log("[Retry] count=" + count + " buffer=" + buffer);
					}
					while (buffer.position() == 0 && count < /*MAX_RETRY_UDPRECEIVE*/3);

					// LogHelper.Log("[after]" + buffer);
					buffer.flip();
					// LogHelper.Log("[udpRequest]" + buffer);

					short i = buffer.getShort();
					// LogHelper.Log("i = " + i);
					int j = buffer.getInt();
					// LogHelper.Log("j = " + j);
				}
				channel.close();
			}
			catch(Exception e)
			{
				LogHelper.LogException("udpRequest.udpRequest", e);
				if(receive)
					buffer.flip();
			}
		}
	}
	
	public static int simpleUDP(ByteBuffer input, String ip, int port) throws IOException
    {
        try (DatagramChannel channel = DatagramChannel.open())
        {
            InetSocketAddress address = new InetSocketAddress(ip, port);            
            channel.configureBlocking(false);
            channel.connect(address);
            return channel.send(input, address);
        }
    }
	
	private void handleInstantBuySeed(FBEncrypt encrypt)
	{
//		StringBuilder log = new StringBuilder();
		
		int seed_id = encrypt.getShort(KeyID.KEY_PLANT_ID);
		// LogHelper.Log("handleInstantBuySeed.. client param seed id: " + seed_id);
		
		if (seed_id < 0 || seed_id >= Server.s_globalDB[DatabaseID.SHEET_SEED].length)
		{
			LogHelper.Log("handleInstantBuySeed.. err! invalid seed id");
			_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
			requestError();
			return;
		}
		
		short user_level = userInfo.getLevel();
		boolean seed_available = false;
		
		for (int i = user_level; i > 0; i--)
		{
			String unlock_list[] = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_USER_LEVEL][i][DatabaseID.USER_SEED_ID_UNLOCK]).split(":");
			
			if (unlock_list.length < 2)
			{
				continue;
			}
			
			// type:id:..:..:..:..:..
			for (int j = 0; j < unlock_list.length - 1; j += 2)
			{
				int id_unlock = -1;
				try
				{
					id_unlock = Integer.parseInt(unlock_list[j+1]);
				}
				catch (Exception e)
				{
					LogHelper.LogException("handleInstantBuySeed", e);
					id_unlock = -1;
				}

				if (id_unlock == seed_id)
				{
					seed_available = true;
					break;
				}
			}
			
			if (seed_available == true) 
			{
				break;
			}
		}
		
		if (!seed_available)
		{
			LogHelper.Log("handleInstantBuySeed.. err! seed id still be locked");
						
			// reponse to client
			FBEncrypt res = new FBEncrypt();
			res.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
			res.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
			res.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToClient());

			try
			{
				_client.WriteZip(res.toByteArray());
				// LogHelper.Log("handleInstantBuySeed.. response to client OK.");
			} 
			catch (Exception ex) 
			{
				LogHelper.LogException("handleInstantBuySeed.ResponseSeedIsLocked", ex);
			}
		}
		
		// get seed price
		int required_diamond = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_SEED][seed_id][DatabaseID.SEED_DIAMOND_BUY]);
		long diamond_used = 0;
		
//		log.append('\t').append(seed_id);
//		log.append('\t').append(required_diamond);
//		log.append('\t').append(money_mgr.GetRealMoney());
//		log.append('\t').append(money_mgr.GetBonusMoney());
		
		if (required_diamond > 0) 
		{
			// check stock and substract user money
			if (money_mgr.GetRealMoney() + money_mgr.GetBonusMoney() >= required_diamond)
			{
				diamond_used = required_diamond;
				UseMoneyResult use_money_result = money_mgr.UseRealMoneyAndBonusMoney(required_diamond,	// log
														_command_id,									//  2. hanh dong cua gamer
														userInfo.getName(),								//  3. ten tai khoan
														userInfo.getLevel(),							//  7. level cua gamer
														_ip,											//  9. ip login v4 cua gamer
														DatabaseID.IT_PLANT,							// 10. id cua loai item
														seed_id,										// 11. id cua item
														Misc.GetItemName(DatabaseID.IT_PLANT, seed_id),	// 12. ten item
														required_diamond,								// 13. gia game coin cua item
														1);												// 14. so luong vat pham
				
				if (use_money_result._code == UseMoneyResult.CODE.SUCCESS)
				{
					// LogHelper.Log("handleInstantBuySeed.. substract user money OK.");
					
//					log.append('\t').append(money_mgr.GetRealMoney());
//					log.append('\t').append(money_mgr.GetBonusMoney());
//					LogHelper.Log(log.toString());
					
					if (stock.get(DatabaseID.STOCK_SILO).addGift(DatabaseID.IT_PLANT, seed_id, 1, _command_id))
					{
						// LogHelper.Log("handleInstantBuySeed.. add seed to stock OK.");
						
						// save to db
						SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToDatabase());
						// LogHelper.Log("handleInstantBuySeed.. save to db OK.");
					}
					else
					{
						LogHelper.Log("handleInstantBuySeed.. critial err! can not add seed to stock.");
						_request_id = ReturnCode.RESPONSE_CONCURRENT_ACCESS_PROBLEM;
					}
				}
				else
				{
					LogHelper.Log("handleInstantBuySeed.. err! can not substract user money.");
					_return_id = ReturnCode.RESPONSE_CANT_SUBSTRACT_MONEY;
				}
			}
			else
			{
				LogHelper.Log("handleInstantBuySeed.. user not enough money.");
				_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_DIAMOND;
			}
		}
		else
		{
			LogHelper.Log("handleInstantBuySeed.. invalid seed price.");
			_return_id = ReturnCode.RESPONSE_IBS_INVALID_PRICE;
		}
		
		// reponse to client
		FBEncrypt res = new FBEncrypt();
		res.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		res.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		res.addLong(KeyID.KEY_DIAMOND_USED, diamond_used);
		res.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToClient());
		
		try
		{
			_client.WriteZip(res.toByteArray());
			// LogHelper.Log("handleInstantBuySeed.. response to client OK.");
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("handleInstantBuySeed", ex);
		}
	}
	
	private void handleInstantBuyLuckyLeaf(FBEncrypt encrypt)
	{
		short leaf_id = encrypt.getShort(KeyID.KEY_LUCKY_LEAF);
		
		if (leaf_id < DatabaseID.MATERIAL_LUCKY_LEAF_RED_SMALL || leaf_id > DatabaseID.MATERIAL_LUCKY_LEAF_BLUE_LARGE)
		{
			LogHelper.Log("handleInstantBuyLuckyLeaf.. err! invalid leaf id " + leaf_id);
			_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
			requestError();
			return;
		}
		
//		StringBuilder log = new StringBuilder();
//		log.append("BuyItem");
//		log.append('\t').append(userInfo.getID());
//		log.append('\t').append(userInfo.getID());
//		log.append('\t').append(userInfo.getName());
//		log.append('\t').append(0);
//		log.append('\t').append(userInfo.getLevel());
//		log.append('\t').append("transaction_id");
//		log.append('\t').append(_ip);
//		log.append('\t').append(leaf_id);
//		log.append('\t').append(Misc.GetItemName(DatabaseID.IT_MATERIAL, leaf_id));

		// get price
		int price = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_MATERIAL][leaf_id][DatabaseID.MATERIAL_DIAMOND_BUY]);
		long diamond_used = 0;
		
		if (price > 0)
		{
			// substract money
			if (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney() >= price)
			{
//				log.append('\t').append(price); // price
//				log.append('\t').append(1); // quantity
//				log.append('\t').append(price); // total price
//				log.append('\t').append(0);
//				log.append('\t').append(0);
//				log.append('\t').append(money_mgr.GetRealMoney());
//				log.append('\t').append(money_mgr.GetBonusMoney());
				
				diamond_used = price;
				UseMoneyResult umr = money_mgr.UseRealMoneyAndBonusMoney(price,								// log
														_command_id,										//  2. hanh dong cua gamer
														userInfo.getName(),									//  3. ten tai khoan
														userInfo.getLevel(),								//  7. level cua gamer
														_ip,												//  9. ip login v4 cua gamer
														DatabaseID.IT_MATERIAL,								// 10. id cua loai item
														leaf_id,											// 11. id cua item
														Misc.GetItemName(DatabaseID.IT_MATERIAL, leaf_id),	// 12. ten item
														price,												// 13. gia game coin cua item
														1);													// 14. so luong vat pham

				if (umr._code == UseMoneyResult.CODE.SUCCESS)
				{
//					log.append('\t').append(money_mgr.GetRealMoney());
//					log.append('\t').append(money_mgr.GetBonusMoney());
					
					// add stock
//					log.append('\t').append(stock.get(DatabaseID.STOCK_WAREHOUSE).getProductNum(DatabaseID.IT_MATERIAL, leaf_id));
					stock.get(DatabaseID.STOCK_WAREHOUSE).addGift(DatabaseID.IT_MATERIAL, leaf_id, 1, _command_id);
//					log.append('\t').append(stock.get(DatabaseID.STOCK_WAREHOUSE).getProductNum(DatabaseID.IT_MATERIAL, leaf_id));					
					
//					LogHelper.Log(log.toString());
					
					// save db
					boolean save_result = SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToDatabase());
					if (save_result == false)
					{
						LogHelper.Log("handleInstantBuyLuckyLeaf.. err! can't write db");
						_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
						requestError();
						return;
					}
				}
				else
				{
					LogHelper.Log("handleInstantBuyLuckyLeaf.. err! can't substract user money");
					_return_id = ReturnCode.RESPONSE_CANT_SUBSTRACT_MONEY;
				}
			}
			else
			{
				LogHelper.Log("handleInstantBuyLuckyLeaf.. err! not enough money");
				_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_DIAMOND;
			}
		}
		else
		{
			LogHelper.Log("handleInstantBuyLuckyLeaf.. err! invalid item price");
			_return_id = ReturnCode.RESPONSE_IBS_INVALID_PRICE;
		}
		
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addLong(KeyID.KEY_DIAMOND_USED, diamond_used);
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToClient());

		try 
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("handleInstantBuyLuckyLeaf.. response to client OK.");
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("handleInstantBuyLuckyLeaf", ex);
		}
	}
	
	private void handleInstantBuyBugZapper()
	{
//		StringBuilder log = new StringBuilder();
		
		// get bug zapper price
		int required_diamond = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_MATERIAL][DatabaseID.MATERIAL_NET_ID][DatabaseID.MATERIAL_DIAMOND_BUY]);
//		log.append(required_diamond);
//		log.append(money_mgr.GetRealMoney());
//		log.append(money_mgr.GetBonusMoney());
		
		long diamond_used = 0;
		
		if (required_diamond > 0) 
		{
			// check stock and substract user money
			if (money_mgr.GetRealMoney() + money_mgr.GetBonusMoney() >= required_diamond)
			{
				diamond_used = required_diamond;
				UseMoneyResult use_money_result = money_mgr.UseRealMoneyAndBonusMoney(required_diamond,							// log
														_command_id,															//  2. hanh dong cua gamer
														userInfo.getName(),														//  3. ten tai khoan
														userInfo.getLevel(),													//  7. level cua gamer
														_ip,																	//  9. ip login v4 cua gamer
														DatabaseID.IT_MATERIAL,													// 10. id cua loai item
														DatabaseID.MATERIAL_NET_ID,												// 11. id cua item
														Misc.GetItemName(DatabaseID.IT_MATERIAL, DatabaseID.MATERIAL_NET_ID),	// 12. ten item
														required_diamond,														// 13. gia game coin cua item
														1);																		// 14. so luong vat pham
		
				if (use_money_result._code == UseMoneyResult.CODE.SUCCESS)
				{
					// LogHelper.Log("handleInstantBuyBugZapper.. substract user money OK.");
					
//					log.append(money_mgr.GetRealMoney());
//					log.append(money_mgr.GetBonusMoney());
//					LogHelper.Log(log.toString());
					
					if (stock.get(DatabaseID.STOCK_WAREHOUSE).addGift(DatabaseID.IT_MATERIAL, DatabaseID.MATERIAL_NET_ID, 1, _command_id))
					{
						// LogHelper.Log("handleInstantBuyBugZapper.. add bug zapper to stock OK.");
						
						// save to db
						SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToDatabase());
						// LogHelper.Log("handleInstantBuyBugZapper.. save to db OK.");
					}
					else
					{
						LogHelper.Log("handleInstantBuyBugZapper.. critial err! can not add item to stock.");
						_request_id = ReturnCode.RESPONSE_CONCURRENT_ACCESS_PROBLEM;
					}
				}
				else
				{
					LogHelper.Log("handleInstantBuyBugZapper.. err! can not substract user money.");
					_return_id = ReturnCode.RESPONSE_CANT_SUBSTRACT_MONEY;
				}
			}
			else
			{
				LogHelper.Log("handleInstantBuyBugZapper.. user not enough money.");
				_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_DIAMOND;
			}
		}
		else
		{
			LogHelper.Log("handleInstantBuyBugZapper.. invalid price.");
			_return_id = ReturnCode.RESPONSE_IBS_INVALID_PRICE;
		}
		
		// reponse to client
		FBEncrypt res = new FBEncrypt();
		res.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		res.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		res.addLong(KeyID.KEY_DIAMOND_USED, diamond_used);
		res.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
		
		try
		{
			_client.WriteZip(res.toByteArray());
			LogHelper.Log("handleInstantBuyBugZapper.. response to client OK.");
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("handleInstantBuyBugZapper", ex);
		}
	}
	
	private void handleInstantBuyLongHandnet()
	{
//		StringBuilder log = new StringBuilder();
		
		// get bug zapper price
		int required_diamond = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_MATERIAL][DatabaseID.MATERIAL_LONG_HANDNET][DatabaseID.MATERIAL_DIAMOND_BUY]);
//		log.append(required_diamond);
//		log.append(money_mgr.GetRealMoney());
//		log.append(money_mgr.GetBonusMoney());
		
		long diamond_used = 0;
		
		if (required_diamond > 0) 
		{
			// check stock and substract user money
			if (money_mgr.GetRealMoney() + money_mgr.GetBonusMoney() >= required_diamond)
			{
				diamond_used = required_diamond;
				UseMoneyResult use_money_result = money_mgr.UseRealMoneyAndBonusMoney(required_diamond,							// log
														_command_id,															//  2. hanh dong cua gamer
														userInfo.getName(),														//  3. ten tai khoan
														userInfo.getLevel(),													//  7. level cua gamer
														_ip,																	//  9. ip login v4 cua gamer
														DatabaseID.IT_MATERIAL,													// 10. id cua loai item
														DatabaseID.MATERIAL_LONG_HANDNET,												// 11. id cua item
														Misc.GetItemName(DatabaseID.IT_MATERIAL, DatabaseID.MATERIAL_LONG_HANDNET),	// 12. ten item
														required_diamond,														// 13. gia game coin cua item
														1);																		// 14. so luong vat pham
		
				if (use_money_result._code == UseMoneyResult.CODE.SUCCESS)
				{
//					LogHelper.Log("handleInstantBuyLongHandnet.. substract user money OK.");
					
//					log.append(money_mgr.GetRealMoney());
//					log.append(money_mgr.GetBonusMoney());
//					LogHelper.Log(log.toString());
					
					if (stock.get(DatabaseID.STOCK_WAREHOUSE).addGift(DatabaseID.IT_MATERIAL, DatabaseID.MATERIAL_LONG_HANDNET, 1, _command_id))
					{
						LogHelper.Log("handleInstantBuyLongHandnet.. add bug zapper to stock OK.");
						
						// save to db
						SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToDatabase());
						LogHelper.Log("handleInstantBuyLongHandnet.. save to db OK.");
					}
					else
					{
						LogHelper.Log("handleInstantBuyLongHandnet.. critial err! can not add item to stock.");
						_request_id = ReturnCode.RESPONSE_CONCURRENT_ACCESS_PROBLEM;
					}
				}
				else
				{
					LogHelper.Log("handleInstantBuyLongHandnet.. err! can not substract user money.");
					_return_id = ReturnCode.RESPONSE_CANT_SUBSTRACT_MONEY;
				}
			}
			else
			{
				LogHelper.Log("handleInstantBuyLongHandnet.. user not enough money.");
				_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_DIAMOND;
			}
		}
		else
		{
			LogHelper.Log("handleInstantBuyLongHandnet.. invalid price.");
			_return_id = ReturnCode.RESPONSE_IBS_INVALID_PRICE;
		}
		
		// reponse to client
		FBEncrypt res = new FBEncrypt();
		res.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		res.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		res.addLong(KeyID.KEY_DIAMOND_USED, diamond_used);
		res.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
		
		try
		{
			_client.WriteZip(res.toByteArray());
			// LogHelper.Log("handleInstantBuyLongHandnet.. response to client OK.");
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("handleInstantBuyBugZapper", ex);
		}
	}
	
	private void handlePlaceDecor(FBEncrypt encrypt)
	{
//		StringBuilder log = new StringBuilder();
//		log.append("client_param");
		
		// check valid params
		List<FBEncrypt> validParams = new LinkedList<FBEncrypt>();
		
		for (int i=0; i < DatabaseID.MAX_SLOT_PER_FLOOR * DatabaseID.MAX_FLOOR_ON_SCREEN; i++)
		{
			byte[] bin = null;
			if (encrypt.hasKey(KeyID.KEY_PLACE_DECOR + i))
			{
				bin = encrypt.getBinary(KeyID.KEY_PLACE_DECOR + i);
			}
			else
			{
				break;
			}

			if (bin == null || bin.length ==0)
			{
				break;
			}

			FBEncrypt f = new FBEncrypt();
			f.decode(bin,true);
			short floorIndex = f.getShort(KeyID.KEY_FLOOR_INDEX);
			short slotIndex = f.getShort(KeyID.KEY_SLOT_INDEX);
			short decorID = f.getShort(KeyID.KEY_DECOR_ID);
			
//			log.append('\t').append(floorIndex);
//			log.append('\t').append(slotIndex);
//			log.append('\t').append(decorID);

			if (floorIndex >= userInfo.getTotalFloor() || floorIndex < 0) 
			{
				LogHelper.Log("handlePlaceDecor.. invalid floor.");
				_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
				requestError();
				return;
			}
			
			if (slotIndex >= DatabaseID.MAX_SLOT_PER_FLOOR || slotIndex < 0)
			{
				LogHelper.Log("handlePlaceDecor.. invalid slot.");
				_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
				requestError();
				return;
			}
			
			if (decorID < 0 || decorID >= Server.s_globalDB[DatabaseID.SHEET_DECOR].length)
			{
				LogHelper.Log("handlePlaceDecor.. invalid decor id.");
				_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
				requestError();
				return;
			}
			
			validParams.add(f);
		}
		
		List<Integer> floorChanged = new LinkedList<Integer>();

		boolean change = false;
		
//		log.append('\t').append("valid_param");
		
		// proceed
		for (FBEncrypt valid_param: validParams)
		{
			short floorIndex	= valid_param.getShort(KeyID.KEY_FLOOR_INDEX);
			short slotIndex		= valid_param.getShort(KeyID.KEY_SLOT_INDEX);
			short decorID			= valid_param.getShort(KeyID.KEY_DECOR_ID);
			
//			log.append('\t').append(floorIndex);
//			log.append('\t').append(slotIndex);
//			log.append('\t').append(decorID);
			
			if (GetDecor(floorIndex, slotIndex).getID() != -1)
			{
				LogHelper.Log("handlePlaceDecor.. slot not empty. Continue to next slot.");
				continue;
			}

			if (GetStock(DatabaseID.STOCK_WAREHOUSE).getProductNum(DatabaseID.IT_DECOR, decorID) <= 0)
			{
				LogHelper.Log("handlePlaceDecor.. ran out of decor " + decorID);
				break;
			}
			
			if (!GetDecor(floorIndex, slotIndex).getUseDuration().equals("null"))
			{
				String[] usage_time = GetDecor(floorIndex, slotIndex).getUseDuration().split("");
				if (usage_time.length == 2)
				{
					if (Misc.SECONDS() < Misc.SECONDS(usage_time[0]) && Misc.SECONDS() >= Misc.SECONDS(usage_time[1]))
					{
						LogHelper.Log("handlePlaceDecor.. ran out of usage time");
						break;
					}
				}
				else
				{
					LogHelper.Log("handlePlaceDecor.. invalid usage time.");
					break;
				}
			}
			
			boolean result = false;

			result = GetStock(DatabaseID.STOCK_WAREHOUSE).decreaseObject(_command_id, DatabaseID.IT_DECOR, decorID);
			if (result == false)
			{
				_return_id = ReturnCode.RESPONSE_CANT_DECREASE_OBJECT;
				requestError();
				return;
			}
			
			result = GetDecor(floorIndex, slotIndex).createNewDecor(decorID);
			if (result == false)
			{
				_return_id = ReturnCode.RESPONSE_ERROR;
				requestError();
				return;
			}

			if (!floorChanged.contains((int)floorIndex))
			{
				floorChanged.add((int)floorIndex);
			}

			change = true;
			ComboManager().computeCombo(GetFloor(floorIndex));
			
			// LogHelper.Log("handlePlaceDecor.. place decor " + decorID + " at slot [" + floorIndex + "," + slotIndex + "] OK.");
		}
		
		// save db
		if (change)
		{
			boolean saveResult = false;
			
			saveResult = SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, GetStock(DatabaseID.STOCK_WAREHOUSE).getDataToDatabase());
			if (saveResult == false)
			{
				_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
				requestError();
				LogHelper.Log("handlePlaceDecor.. save to db fail.");
				return;
			}
			
			for (Integer floorIndex: floorChanged)
			{
				saveResult = SET_DB_VALUE_BINARY(KeyID.KEY_FLOORS + floorIndex.intValue(), floor.get(floorIndex.intValue()).getData(true));
				if (saveResult == false)
				{
					_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
					requestError();
					LogHelper.Log("handlePlaceDecor.. save to db fail.");
					return;
				}
			}
			
			// save combo
			SET_DB_VALUE_BINARY(KeyID.KEY_COMBO, ComboManager().GetData());
			
			// LogHelper.Log("handlePlaceDecor.. save to db OK.");
		}
		
//		LogHelper.Log(log.toString());
		
		// response to client
		FBEncrypt reponse = new FBEncrypt();
		reponse.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		reponse.addShort(KeyID.KEY_TOTAL_FLOOR_CHANGED, floorChanged.size());

		for (Integer floorIndex: floorChanged)
		{
			reponse.addBinary(KeyID.KEY_FLOORS + floorChanged.indexOf(floorIndex), floor.get(floorIndex.intValue()).getData(false));
		}
	
		reponse.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, GetStock(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
		
		try
		{
			_client.WriteZip(reponse.toByteArray());
			// LogHelper.Log("handlePlaceDecor.. response to client OK.");
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("handlePlaceDecor", ex);
		}
	}
	
	private void handleHideDecor(FBEncrypt encrypt)
	{
//		StringBuilder log = new StringBuilder();
		
		short fid = encrypt.getShort(KeyID.KEY_FLOOR_INDEX);
		short sid = encrypt.getShort(KeyID.KEY_SLOT_INDEX);
		
//		log.append(fid);
//		log.append('\t').append(sid);
		
		// valid params
		if (fid >= userInfo.getTotalFloor() || fid < 0)
		{
			LogHelper.Log("handleHideDecor.. err! invalid floor param.");
			_return_id = ReturnCode.RESPONSE_INVALID_FLOOR_PARAM;
			requestError();
			return;
		}
		 
		if (sid >= DatabaseID.MAX_SLOT_PER_FLOOR || sid < 0)
		{
			LogHelper.Log("handleHideDecor.. err! invalid slot param.");
			_return_id = ReturnCode.RESPONSE_INVALID_SLOT_PARAM;
			requestError();
			return;
		}
		
		int decorID = GetDecor(fid, sid).getID();
		if (decorID == -1)
		{
			LogHelper.Log("handleHideDecor.. err! can't find decor at slot[" + fid + "," + sid + "].");
			_return_id = ReturnCode.RESPONSE_CANT_FIND_POT;
			requestError();
			return;
		}
		 
		if (GetStock(DatabaseID.STOCK_WAREHOUSE).isFull())
		{
			LogHelper.Log("handleHideDecor.. err! stock is full.");
			_return_id = ReturnCode.RESPONSE_STOCK_IS_FULL;
			requestError();
			return;
		}
		 
		 // proceed
		boolean result = false;
		
		result = GetDecor(fid, sid).deleteDecor();
		
//		log.append('\t').append(decorID);
//		log.append('\t').append(result);
		
		if (!result)
		{
			requestError();
			LogHelper.Log("handleHideDecor.. err! delete pot fail");
			return;
		}
		
		result = GetStock(DatabaseID.STOCK_WAREHOUSE).increaseObject(_command_id, DatabaseID.IT_DECOR, decorID, SkyGarden._server_id);
//		log.append('\t').append(result);
		if (!result)
		{
			_return_id = ReturnCode.RESPONSE_CANT_INCREASE_OBJECT;
			requestError();
			LogHelper.Log("handleHideDecor.. err! cannot increase items");
			return;
		}
		
		// LogHelper.Log("handleHideDecor.. hide decor " + decorID + " at slot [" + fid + "," + sid + "] OK.");
		
		// remove floor decor combo
		ComboManager().computeCombo(GetFloor(fid));
		SET_DB_VALUE_BINARY(KeyID.KEY_COMBO, ComboManager().GetData());
		 
		// save to db
		result = SET_DB_VALUE_BINARY(KeyID.KEY_FLOORS + fid, GetFloor(fid).getData(true));
		if (!result)
		{
			LogHelper.Log("handleHideDecor.. can not save floor to db");
			_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
			requestError();
			return;
		}
		
		result = SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, GetStock(DatabaseID.STOCK_WAREHOUSE).getDataToDatabase());
		if (!result)
		{
			LogHelper.Log("handleHideDecor.. can not save stock to db");
			_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
			requestError();
			return;
		}
		
		// LogHelper.Log("handleHideDecor.. save to db OK.");
//		LogHelper.Log(log.toString());

		// send to client
		FBEncrypt reponse = new FBEncrypt();
		reponse.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		
		reponse.addShort(KeyID.KEY_TOTAL_FLOOR_CHANGED, 1);
		reponse.addBinary(KeyID.KEY_FLOORS + 0, GetFloor(fid).getData(false));
		
		reponse.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, GetStock(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
		try
		{
			_client.WriteZip(reponse.toByteArray());
			// LogHelper.Log("handleHideDecor.. response to client OK.");
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("handleHideDecor", ex);
		}
	}
	
	private void handleUseFertilizer(FBEncrypt encrypt)
	{
//		StringBuilder log = new StringBuilder();
//		log.append("client_param");
		
		// check valid params
		List<FBEncrypt> validParams = new LinkedList<FBEncrypt>();
		
		for (int i=0; i < DatabaseID.MAX_SLOT_PER_FLOOR * DatabaseID.MAX_FLOOR_ON_SCREEN; i++)
		{
			byte[] bin = null;
			if (encrypt.hasKey(KeyID.KEY_USE_FERTILIZER + i))
			{
				bin = encrypt.getBinary(KeyID.KEY_USE_FERTILIZER + i);
			}
			else
			{
				break;
			}

			if (bin == null || bin.length ==0)
			{
				break;
			}

			FBEncrypt f = new FBEncrypt();
			f.decode(bin,true);
			short floorIndex = f.getShort(KeyID.KEY_FLOOR_INDEX);
			short slotIndex = f.getShort(KeyID.KEY_SLOT_INDEX);
			short fertilizerID = f.getShort(KeyID.KEY_MATERIAL_ID);
			
//			log.append('\t').append(floorIndex);
//			log.append('\t').append(slotIndex);
//			log.append('\t').append(fertilizerID);

			if (floorIndex >= userInfo.getTotalFloor() || floorIndex < 0) 
			{
				LogHelper.Log("handleUseFertilizer.. invalid floor.");
				_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
				requestError();
				return;
			}
			
			if (slotIndex >= DatabaseID.MAX_SLOT_PER_FLOOR || slotIndex < 0)
			{
				LogHelper.Log("handleUseFertilizer.. invalid slot.");
				_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
				requestError();
				return;
			}
			
			if (fertilizerID < DatabaseID.MATERIAL_FERTILIZER_1 || fertilizerID > DatabaseID.MATERIAL_FERTILIZER_3)
			{
				LogHelper.Log("handleUseFertilizer.. invalid fertilizer id.");
				_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
				requestError();
				return;
			}
			
			validParams.add(f);
		}
		
		List<Integer> floorChanged = new LinkedList<Integer>();

		boolean change = false;
		
//		log.append('\t').append("valid_param");
		
		// proceed
		for (FBEncrypt valid_param: validParams)
		{
			short floorIndex	= valid_param.getShort(KeyID.KEY_FLOOR_INDEX);
			short slotIndex		= valid_param.getShort(KeyID.KEY_SLOT_INDEX);
			short fertilizerID			= valid_param.getShort(KeyID.KEY_MATERIAL_ID);
			
//			log.append('\t').append(floorIndex);
//			log.append('\t').append(slotIndex);
//			log.append('\t').append(fertilizerID);
			
			if (GetStock(DatabaseID.STOCK_WAREHOUSE).getProductNum(DatabaseID.IT_MATERIAL, fertilizerID) <= 0)	
			{
				LogHelper.Log("handleUseFertilizer.. ran out of fertilizer " + fertilizerID);
				break;
			}
			
			if (GetPlant(floorIndex, slotIndex).getID() == -1)
			{
				LogHelper.Log("handleUseFertilizer.. err! slot [" + floorIndex +","+ slotIndex +"] does not have any plant.");
				continue;
			}
			
			if (GetPlant(floorIndex, slotIndex).isGrownUp() == true)
			{
				LogHelper.Log("handleUseFertilizer.. err! plant at slot [" + floorIndex +","+ slotIndex +"] is already grown up.");
				continue;
			}
			
			if (GetPlant(floorIndex, slotIndex).GetFertilizerID() != -1)
			{
				LogHelper.Log("handleUseFertilizer.. err! plant at slot [" + floorIndex +","+ slotIndex +"] is already fertilized.");
				continue;
			}
			
			boolean result = GetStock(DatabaseID.STOCK_WAREHOUSE).decreaseObject(_command_id, DatabaseID.IT_MATERIAL, fertilizerID);
			if (result == false)
			{
				_return_id = ReturnCode.RESPONSE_CANT_DECREASE_OBJECT;
				requestError();
				return;
			}
			
			// reduce grow time of plant
			int current_grow_time  = GetPlant(floorIndex, slotIndex).getGrowTime();
			int reduce_time = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_MATERIAL][fertilizerID][DatabaseID.MATERIAL_FERTILIZER_TIME_REDUCE]);
			GetPlant(floorIndex, slotIndex).setGrowTime(current_grow_time - reduce_time);
			GetPlant(floorIndex, slotIndex).SetFertilizerID(fertilizerID);
			GetPlant(floorIndex, slotIndex).SetFertilizerReduceTime(reduce_time);

			if (!floorChanged.contains((int)floorIndex))
			{
				floorChanged.add((int)floorIndex);
			}

			change = true;
			
			LogHelper.Log("handleUseFertilizer.. use fertilizer " + fertilizerID + " at slot [" + floorIndex + "," + slotIndex + "] OK.");
		}
		
		// save db
		if (change)
		{
			boolean saveResult = false;
			
			saveResult = SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, GetStock(DatabaseID.STOCK_WAREHOUSE).getDataToDatabase());
			if (saveResult == false)
			{
				_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
				requestError();
				LogHelper.Log("handleUseFertilizer.. save to db fail.");
				return;
			}
			
			for (Integer floorIndex: floorChanged)
			{
				saveResult = SET_DB_VALUE_BINARY(KeyID.KEY_FLOORS + floorIndex.intValue(), floor.get(floorIndex.intValue()).getData(true));
				if (saveResult == false)
				{
					_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
					requestError();
					LogHelper.Log("handleUseFertilizer.. save to db fail.");
					return;
				}
			}
			
			// LogHelper.Log("handleUseFertilizer.. save to db OK.");
		}
		
//		LogHelper.Log(log.toString());
		
		// response to client
		FBEncrypt reponse = new FBEncrypt();
		reponse.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		reponse.addShort(KeyID.KEY_TOTAL_FLOOR_CHANGED, floorChanged.size());

		for (Integer floorIndex: floorChanged)
		{
			reponse.addBinary(KeyID.KEY_FLOORS + floorChanged.indexOf(floorIndex), floor.get(floorIndex.intValue()).getData(false));
		}
	
		reponse.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, GetStock(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
		
		try
		{
			_client.WriteZip(reponse.toByteArray());
			// LogHelper.Log("handleUseFertilizer.. response to client OK.");
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("handleUseFertilizer", ex);
		}
	}
	
	private void handleConfirmLogin()
	{
		FBEncrypt res = new FBEncrypt();
		res.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		
		try
		{
			_client.WriteZip(res.toByteArray());
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("handleConfirmLogin", ex);
		}
		_is_waiting_for_confirm_login = false;
		_is_login = true;
	}
	
	private void handleOpenGift()
	{
		FBEncrypt res = new FBEncrypt();
		res.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		
		if (gift_mgr._gifts.size() > 0)
		{
			res.addInt(KeyID.KEY_GIFT_ID, gift_mgr._gifts.getLast().GetId());
			res.addString(KeyID.KEY_GIFT_NAME, gift_mgr._gifts.getLast().GetName());
			res.addString(KeyID.KEY_GIFT_DESCRIPTION, gift_mgr._gifts.getLast().GetDescription());
			res.addString(KeyID.KEY_GIFT_ITEM_LIST, gift_mgr._gifts.getLast().GetItemList());
		}
		
		try
		{
			_client.WriteZip(res.toByteArray());
			// LogHelper.Log("handleOpenGift.. response to client OK.");
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("handleConfirmLogin", ex);
		}
	}
	
	private void handleAcceptGift(FBEncrypt encrypt)
	{
		int gift_id = encrypt.getInt(KeyID.KEY_GIFT_ID);
		
		if (gift_mgr._gifts.size() == 0)
		{
			LogHelper.Log("handleReceiveGift.. gift size is 0. uid=" + _user_id);
			requestError();
			return;
		}
		
		// change: get the last gift first
		gift_id = gift_mgr._gifts.getLast().GetId();
		
		if (gift_id == gift_mgr._gifts.getLast().GetId())
		{
			gift2Stock(gift_mgr._gifts.getLast().GetItemList(), CommandID.CMD_ACCEPT_GIFT, gift_mgr._gifts.getLast().GetName());
			
			// **important: remove the gift event when the add gift process has exception (gift has wrong format etc...)
			gift_mgr._gifts.removeLast();
			gift_mgr.SaveDataToDatabase(KeyID.KEY_GIFT);
		}
		else
		{
			LogHelper.Log("handleReceiveGift.. mismatch gift id");
			requestError();
			return;
		}
		
		// send result to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_USER_INFOS, GetUserInfo().getData(false));
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, GetStock(DatabaseID.STOCK_SILO).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, GetStock(DatabaseID.STOCK_BARN).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, GetStock(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
		response.addBoolean(KeyID.KEY_GIFT_AVAILABLE, gift_mgr._gifts.size() > 0 ? true : false);
		if (gift_mgr._gifts.size() > 0)
		{
			response.addInt(KeyID.KEY_GIFT_ID, gift_mgr._gifts.getLast().GetId());
			response.addString(KeyID.KEY_GIFT_NAME, gift_mgr._gifts.getLast().GetName());
			response.addString(KeyID.KEY_GIFT_DESCRIPTION, gift_mgr._gifts.getLast().GetDescription());
			response.addString(KeyID.KEY_GIFT_ITEM_LIST, gift_mgr._gifts.getLast().GetItemList());
		}
		
		response.addLong(KeyID.KEY_GARDEN_APPRAISAL, garden_appraisal);
		if (_use_event_mid_autumn_festival || _use_event_20_11 || _use_event_xmas_mini)
		{
			response.addString(GetEventKeyName(), GetEventItems());
		}
		
		try 
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("handleReceiveGift.. response to client OK.");
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("handleReceiveGift", ex);
		}
	}
	
	private void handleDiscardGift(FBEncrypt encrypt)
	{
		if (true) return;
		int gift_id = encrypt.getInt(KeyID.KEY_GIFT_ID);
		
		gift_id = gift_mgr._gifts.getLast().GetId();
		
		if (gift_id == gift_mgr._gifts.getLast().GetId())
		{
			// remove the gift
			gift_mgr._gifts.removeLast();
			gift_mgr.SaveDataToDatabase(KeyID.KEY_GIFT);
			
			StringBuilder log = new StringBuilder();
			log.append(Misc.getCurrentDateTime());								//  1. thoi gian tieu tien
			log.append('\t').append(Misc.getActionName(_command_id));			//  2. hanh dong cua gamer
			log.append('\t').append(userInfo.getID());							//  3. id
			log.append('\t').append(userInfo.getID());							//  4. role id
			log.append('\t').append(userInfo.getName());						//  5. name
			log.append('\t').append(SkyGarden._server_id);						//  6. server id
			log.append('\t').append(userInfo.getLevel());						//  7. level
			log.append('\t').append(gift_mgr._gifts.getLast().GetItemList());	//  8. id item su dung
			log.append('\t').append(1);											//  9. so luong item su dung
			log.append('\t').append(1);											//  10. result
			LogHelper.Log(LogHelper.LogType.DROP_ITEM, log.toString());
		}
		else
		{
			LogHelper.Log("handleDiscardGift.. mismatch gift id");
			requestError();
			return;
		}
		
		// send result to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBoolean(KeyID.KEY_GIFT_AVAILABLE, gift_mgr._gifts.size() > 0 ? true : false);
		if (gift_mgr._gifts.size() > 0)
		{
			response.addInt(KeyID.KEY_GIFT_ID, gift_mgr._gifts.getLast().GetId());
			response.addString(KeyID.KEY_GIFT_NAME, gift_mgr._gifts.getLast().GetName());
			response.addString(KeyID.KEY_GIFT_DESCRIPTION, gift_mgr._gifts.getLast().GetDescription());
			response.addString(KeyID.KEY_GIFT_ITEM_LIST, gift_mgr._gifts.getLast().GetItemList());
		}
		
		try 
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("handleDiscardGift.. response to client OK.");
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("handleDiscardGift", ex);
		}
	}
	
	private void handleNotifyLikeFBFinish()
	{
		if (!userInfo.GetFacebookLike())
		{
			userInfo.SetFacebookLike(true);
			
			// add gift
			try
			{
				GetGiftManager().LoadFromDatabase(KeyID.KEY_GIFT);
				GetGiftManager().AddGiftBox(Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][3][DatabaseID.GIFT_INFO_NAME]),
											Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][3][DatabaseID.GIFT_INFO_DESCRIPTION]),
											Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][3][DatabaseID.GIFT_INFO_ITEMS_LIST]));	
				GetGiftManager().SaveDataToDatabase(KeyID.KEY_GIFT);
				MoveGiftBoxToMailBox();
				
				StringBuilder log = new StringBuilder();
				log.append(Misc.getCurrentDateTime());						//  1. log time
				log.append('\t').append(_command_id);						//  2. action name
				log.append('\t').append(_user_id);							//  3. account name
				log.append('\t').append(_user_id);							//  4. role id
				log.append('\t').append(GetUserInfo().getName());			//  5. role name
				log.append('\t').append("0");								//  6. server id
				log.append('\t').append(GetUserInfo().getLevel());			//  7. user level
				log.append('\t').append(GetUserInfo().GetUserIP());			//  8. user ip
				log.append('\t').append(Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][3][DatabaseID.GIFT_INFO_NAME]));				//  9. user gift code
				log.append('\t').append(Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][3][DatabaseID.GIFT_INFO_DESCRIPTION]));		//  10. user gift code
				log.append('\t').append(Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][3][DatabaseID.GIFT_INFO_ITEMS_LIST]));			//  11. user gift code
				LogHelper.Log(LogHelper.LogType.GIFT_BOX, log.toString());
				
				if (!_use_lazy_sync_user_info)
					SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
			}
			catch (Exception e)
			{
				LogHelper.LogException("handleNotifyLikeFBFinish", e);
			}
			
			// send result to client
			FBEncrypt response = new FBEncrypt();
			response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
			response.addBinary(KeyID.KEY_USER_INFOS, GetUserInfo().getData(false));
			if (GetGiftManager()._gifts.size() > 0)
			{
				response.addInt(KeyID.KEY_GIFT_ID, GetGiftManager()._gifts.getLast().GetId());
				response.addString(KeyID.KEY_GIFT_NAME, GetGiftManager()._gifts.getLast().GetName());
				response.addString(KeyID.KEY_GIFT_DESCRIPTION, GetGiftManager()._gifts.getLast().GetDescription());
				response.addString(KeyID.KEY_GIFT_ITEM_LIST, GetGiftManager()._gifts.getLast().GetItemList());
			}
			response.addBoolean(KeyID.KEY_NEW_MAIL, true);

			try 
			{
				_client.WriteZip(response.toByteArray());
			} 
			catch (Exception ex) 
			{
				LogHelper.LogException("handleNotifyShareFBFinish", ex);
			}
		}
		else
		{
			LogHelper.Log(LogHelper.LogType.HACK, "err! already liked facebook, uid = " + _user_id);
			requestError();
		}
	}
	
	private void discardDailyGift()
	{
		if (dailygift.canReceivedGift() && dailygift.cancelGift())
		{
			// LogHelper.Log("discardDailyGift.. OK");			
			SET_DB_VALUE_BINARY(KeyID.KEY_DAILY_GIFT, dailygift.getData());
		}
		else
		{
			LogHelper.Log("discardDailyGift.. err! can not discard daily gift");
			_return_id = ReturnCode.RESPONSE_ERROR;
		}
		
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_DAILY_GIFT, dailygift.getData());
		
		try
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("discardDailyGift.. response to client OK");
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("discardDailyGift", ex);
		}
	}
	
	private void receiveDailyGift()
	{
		try
		{
			if (dailygift.canReceivedGift())
			{
				// add items to stock
				
				String items_string = dailygift.getItems();
				SET_DB_VALUE_BINARY(KeyID.KEY_DAILY_GIFT, dailygift.getData());
				
				if (items_string.equals("") == false)
				{
					String[] items = items_string.split(":");
					
					for (int i = 0; i < items.length; i += 3)
					{
						int type = Integer.parseInt(items[i]);
						int id = Integer.parseInt(items[i+1]);
						int num = Integer.parseInt(items[i+2]);
						
						Stock stock = null;
						
						if (type != DatabaseID.IT_MONEY)
						{
							stock = GetStockOfItemType(type);
							
							if (stock == null)
							{
								LogHelper.Log("receiveDailyGift.. err! invalid item type & stock");
								_return_id = ReturnCode.RESPONSE_IBS_INVALID_ITEM_TYPE;
								requestError();
								return;
							}
						}
						
						switch (type)
						{
							case DatabaseID.IT_BUG:
							case DatabaseID.IT_POT:
							case DatabaseID.IT_MATERIAL:
							case DatabaseID.IT_PRODUCT:
							case DatabaseID.IT_PLANT:
							case DatabaseID.IT_DECOR:
								if (!stock.addGift(type, id, num, _command_id))
								{
									LogHelper.Log("receiveDailyGift.. err! add to stock failed");
									_return_id = ReturnCode.RESPONSE_CANT_INCREASE_OBJECT;
									requestError();
									return;
								}
								break;
								
							case DatabaseID.IT_MONEY:
							{
								switch (id)
								{
									case DatabaseID.GOLD_ID:
										userInfo.setGold(userInfo.getGold() + (long)num,						// log
																				_command_id,					//  2. hanh dong cua gamer
																				-1, 							// 11. id cua loai item
																				-1,								// 12. id cua item
																				"",								// 13. name
																				0);								// num
										break;
										
									case DatabaseID.DIAMOND_ID:
										money_mgr.IncreaseBonusMoney(num,
																	MoneyManager.Reason.SYSTEM_GIFT, 
																	_command_id,
																	GetUserInfo().getName(), 
																	GetUserInfo().getLevel(),
																	_ip,
																	-1,
																	-1,
																	"",
																	num,
																	1);
										break;
										
									case DatabaseID.REPUTATION_ID:
										userInfo.setReputation(userInfo.getReputation() + (long)num,	// log
																				_command_id,			//  2. hanh dong cua gamer
																				-1, 					// 11. id cua loai item
																				-1,						// 12. id cua item
																				"",						// 13. ten item
																				10);
										
										break;
									
									case DatabaseID.EXP_ID:
									case DatabaseID.EXP_GIFT:
										userInfo.setExp(userInfo.getExp() + (long)num);
										checkLevelUp();
										break;
								}
								break;
							}
							default:
								_return_id = ReturnCode.RESPONSE_IBS_INVALID_ITEM_TYPE;
								requestError();
								return;
						}
					}
				}
				else
				{
					_return_id = ReturnCode.RESPONSE_ERROR;
					LogHelper.Log("receiveDailyGift.. cannot get dailygift");
				}
			}
			else
			{
				_return_id = ReturnCode.RESPONSE_ERROR;
				LogHelper.Log("receiveDailyGift.. receive dailygift failed");
			}
		}
		catch (Exception e)
		{
			LogHelper.LogException("getGift", e);
		}
		
		// save
		boolean result = false;

		result = SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, GetStock(DatabaseID.STOCK_SILO).getDataToDatabase());
		if (result == false)
		{
			LogHelper.Log("receiveDailyGift.. save stock silo error."); 
			_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
			requestError();
			return;
		}

		result = SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, GetStock(DatabaseID.STOCK_BARN).getDataToDatabase());
		if (result == false)
		{
			LogHelper.Log("receiveDailyGift.. save stock barn error."); 
			_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
			requestError();
			return;
		}

		result = SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, GetStock(DatabaseID.STOCK_WAREHOUSE).getDataToDatabase());
		if (result == false)
		{
			LogHelper.Log("receiveDailyGift.. save stock warehouse error."); 
			_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
			requestError();
			return;
		}

		if (!_use_lazy_sync_user_info)
		{
			result = SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, GetUserInfo().getData(true));
			if (result == false)
			{
				LogHelper.Log("receiveDailyGift.. err! save user info error."); 
				_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
				requestError();
				return;
			}
		}
		
		
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_DAILY_GIFT, dailygift.getData());

		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, GetStock(DatabaseID.STOCK_SILO).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, GetStock(DatabaseID.STOCK_BARN).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, GetStock(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
		
		if (user_level_up) checkAndUnlockItems();
		
		try
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("receiveDailyGift.. response to client OK");
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("receiveDailyGift", ex);
		}		
	}
	
	private void interactEMO(FBEncrypt encrypt)
	{
		int emi_id = eventMainObject.getEMI_ID();
		if (GetStock(DatabaseID.STOCK_WAREHOUSE).getProductNum(DatabaseID.IT_EMI, emi_id) <= 0)
		{
			LogHelper.Log("interactEMO.. not enough item " + emi_id);
			requestError();
			return;
		}
		
		// ------------------------------------------------------------------------------------------------------------------
		
		StringBuilder dropList = new StringBuilder(8);
		int emo_current_hit_current = eventMainObject.getEMOHitCurrent();
		
		if (emo_current_hit_current > 0)
		{
			boolean result = GetStock(DatabaseID.STOCK_WAREHOUSE).decreaseObject(_command_id, DatabaseID.IT_EMI, emi_id); // decrease quantity of plant in stock
			if (!result)
			{
				LogHelper.Log("interactEMO.. err! can not decrease object");
				requestError(ReturnCode.RESPONSE_CANT_DECREASE_OBJECT);
				return;
			}
			SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToDatabase());

			// ------------------------
			
			eventMainObject.setEMOHitCurrent(emo_current_hit_current - 1);
			SET_DB_VALUE_BINARY(KeyID.KEY_EVENT_MAIN_OBJECT, eventMainObject.getData());
			
			// check if drops extra item
			int drop_item_id = -1;
			
			try
			{
				drop_item_id = GetDropItemAdvance(DropItemInfo, DatabaseID.ACTION_HARVEST_PRODUCT);
			}
			catch (Exception e)
			{
				LogHelper.LogException("interactEMO", e);
				drop_item_id = -1;
			}
			
			if (drop_item_id > -1)
			{
				// control from design (what they want) - current fake gold drop
				int item_type = DatabaseID.IT_MONEY;
				int item_id = DatabaseID.GOLD_ID;
				int item_num = 10;
				
				userInfo.setGold(userInfo.getGold() + 10,	// 1. gold use
									_command_id,			//  2. hanh dong cua gamer
									-1, 					// 11. received item type
									-1,						// 12. received item id
									"",						// 13. received item name
									0);						// 14. received item num
													
				SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
				
				dropList.append(0);
				dropList.append(":").append(item_type);
				dropList.append(":").append(item_id);
				dropList.append(":").append(item_num);
				dropList.append(":").append("0");
			}
			
			eventMainObject.displayDataPackage();
		}
		else
		{
			LogHelper.Log("interactEMO: emi count is " + emo_current_hit_current);
		}
		
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_EVENT_MAIN_OBJECT, eventMainObject.getData());
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(true));
		
		if (dropList.length() > 0)
		{
			response.addStringANSI(KeyID.KEY_DROP_BONUS_ITEM, dropList.toString());
			response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
		}
		
		try
		{
			_client.WriteZip(response.toByteArray());
			LogHelper.Log("interactEMO.. response to client OK");
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("interactEMO", ex);
		}		
	}
	
	private void buyEMI(FBEncrypt encrypt)
	{
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		
		try
		{
			_client.WriteZip(response.toByteArray());
			LogHelper.Log("buyEMI.. response to client OK");
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("buyEMI", ex);
		}		
	}
	
	private void feedOwl(FBEncrypt encrypt)
	{
		if (!bUseOwl)
		{
			requestError();
			return;
		}
		
		int food_id = encrypt.getByte(KeyID.KEY_OWL_FOOD_ID);
		
		if (food_id < 0 || (food_id != DatabaseID.PRODUCT_ID_BINHSUA && food_id != DatabaseID.PRODUCT_ID_BANHDONU && food_id != DatabaseID.PRODUCT_ID_KEOCHANH))
		{
			LogHelper.Log("feedOwl.. Invalid food_id, " + food_id);
			requestError(ReturnCode.RESPONSE_INVALID_PRODUCT_ID);
			return;
		}
		
		Stock barn = GetStock(DatabaseID.STOCK_BARN);
		
		int food_num = barn.getProductNum(DatabaseID.IT_PRODUCT, food_id);

		// do not check owl power limited
		// if (food_num > 0 && owl.getPowerCurrent() < owl.getPowerLimit())
		if (food_num > 0)
		{
//			StringBuilder log = new StringBuilder();
//			log.append("feedOwl");
//			log.append('\t').append(food_id);
//			log.append('\t').append(Misc.GetItemName(DatabaseID.IT_PRODUCT, food_id));
//			log.append('\t').append(food_num);
//			log.append('\t').append(owl.getSlotCur());
//			log.append('\t').append(owl.getPowerCurrent());
			
			barn.decreaseProductInStock(_command_id, DatabaseID.IT_PRODUCT, food_id, 1);
			
			owl.addFood(food_id);

			// follow designer
			owl.increasePower(food_id);
			
//			log.append('\t').append(barn.getProductNum(DatabaseID.IT_PRODUCT, food_id));
//			log.append('\t').append(owl.getSlotCur());
//			log.append('\t').append(owl.getPowerCurrent());
			
//			LogHelper.Log(log.toString());
			
			// LogHelper.Log("--------- feedOwl: OK!"); 
			
			SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, barn.getDataToDatabase());
			SET_DB_VALUE_BINARY(KeyID.KEY_OWL, owl.getData());
		}
		else
		{
			// if (owl.getPowerCurrent() < owl.getPowerLimit()) LogHelper.Log("feedOwl: Failed! Dont need feed Owl, " + owl.getPowerCurrent() + " = " + owl.getPowerLimit()); 
			if (food_num <= 0) LogHelper.Log("feedOwl: Failed! Dont enough food to feed"); 
			_return_id = ReturnCode.RESPONSE_ERROR;
		}
		
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_OWL, owl.getData());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, barn.getDataToClient());

		try
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("feedOwl.. response to client OK");
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("feedOwl", ex);
		}		
	}
	
	private void unlockOwlSlot(FBEncrypt encrypt)
	{
		if (!bUseOwl)
		{
			requestError();
			return;
		}
		
		long gold_used = 0;
		long diamond_used = 0;
		
		if (owl.isLimitSlot())
		{
			LogHelper.Log("--------- Upgrade OWL Slot: Failed! Slots is limit. " + owl.getSlotMax() + " " + Server.s_globalDB[DatabaseID.SHEET_OWL_SLOT_UNLOCK].length);
			_return_id = ReturnCode.RESPONSE_ERROR;
		}
		else
		{
			if (encrypt.hasKey(KeyID.KEY_OWL_GOLD_UNLOCK_NEXT_SLOT))
			{
				long user_gold = userInfo.getGold();
				long gold_unlock = owl.getGoldUnlock();
				
				if (user_gold >= gold_unlock)
				{
					userInfo.setGold(user_gold - gold_unlock, 								// log
															_command_id,					//  2. hanh dong cua gamer
															-1, 							// 11. id cua loai item
															-1,								// 12. id cua item
															"",							// 13. ten item
															0);
															
					owl.increaseSlot(DatabaseID.OWL_SLOT_UNLOCK_GOLD_TYPE);
					SET_DB_VALUE_BINARY(KeyID.KEY_OWL, owl.getData());
					if (!_use_lazy_sync_user_info) SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
					
					// LogHelper.Log("--------- Upgrade OWL Slot by Gold: OK!"); 

				}
				else
				{
					LogHelper.Log("unlockOwlSlot.. err! not enough gold.");
					_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_GOLD;
				}
			}
			else
			{
				long user_diamond = money_mgr.GetRealMoney() + money_mgr.GetBonusMoney();
				long diamond_unlock = owl.getDiamondUnlock();
				
//				System.out.println("\n\nuser_diamond = " + user_diamond); 
//				System.out.println("diamond_unlock = " + diamond_unlock + "\n\n"); 
				
				if (user_diamond >= diamond_unlock)
				{
					diamond_used = diamond_unlock;
					UseMoneyResult umr = money_mgr.UseRealMoneyAndBonusMoney((int)diamond_unlock,	// log
															_command_id,							//  2. hanh dong cua gamer
															userInfo.getName(),						//  3. ten tai khoan
															userInfo.getLevel(),					//  7. level cua gamer
															_ip,									//  9. ip login v4 cua gamer
															-1,										// 10. id cua loai item
															owl.getSlotMax()+1,						// 11. id cua item
															"slot_" + (owl.getSlotMax()+1),			// 12. ten item
															diamond_unlock,							// 13. gia game coin cua item
															1);										// 14. so luong vat pham

					if (umr._code == UseMoneyResult.CODE.SUCCESS)
					{
						owl.increaseSlot(DatabaseID.OWL_SLOT_UNLOCK_DIAMOND_TYPE);
						SET_DB_VALUE_BINARY(KeyID.KEY_OWL, owl.getData());
						if (!_use_lazy_sync_user_info) SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
						
						// LogHelper.Log("--------- Upgrade OWL Slot by Diamond: OK!"); 
					}
					else
					{
						LogHelper.Log("unlockOwlSlot.. err! can't substract user money");
						_return_id = ReturnCode.RESPONSE_CANT_SUBSTRACT_MONEY;
					}
				}
				else
				{
					LogHelper.Log("unlockOwlSlot.. err! not enough money.");
					_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_DIAMOND;
				}
			}
		}
		
		// response to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_OWL, owl.getData());
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addLong(KeyID.KEY_GOLD_USED, gold_used);
		response.addLong(KeyID.KEY_DIAMOND_USED, diamond_used);
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));

		try
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("unlockOwlSlot.. response to client ok");
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("unlockOwlSlot", ex);
		}		
	}
	
	private void digestCompleted()
	{
		if (!bUseOwl)
		{
			requestError();
			return;
		}
		
		if (owl.getSlotCur() <= 0)
		{
			LogHelper.Log("digestCompleted.. owl's slot is empty.");
			requestError(ReturnCode.RESPONSE_MACHINE_IS_EMPTY);
			return;
		}
		
		OwlSlot first_slot = owl.getSlot(0);
		
		int food_id = first_slot.getFoodID();
		int digest_time = first_slot.getDigestTime();

		if (digest_time <= Misc.SECONDS())
		{
//			StringBuilder log = new StringBuilder();
//			log.append("CMD_DIGEST_COMPLETED");
//			log.append('\t').append(food_id);
//			log.append('\t').append(owl.getSlotCur());
//			log.append('\t').append(owl.getPowerCurrent());
			
			owl.removeFirstSlot();
			
			// follow designer
			// owl.increasePower(food_id);

//			log.append('\t').append(owl.getSlotCur());
//			log.append('\t').append(owl.getPowerCurrent());
//			LogHelper.Log(log.toString());
			
			SET_DB_VALUE_BINARY(KeyID.KEY_OWL, owl.getData());
			
			// LogHelper.Log("--------- digestCompleted: OK!");
		}
		else
		{
			LogHelper.Log("--------- digestCompleted: Failed! DegestTime didn't completed yet!");
			_return_id = ReturnCode.RESPONSE_PRODUCT_NOT_COMPLETE;
		}
		
		// response to client
		FBEncrypt reponse = new FBEncrypt();
		reponse.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		reponse.addBinary(KeyID.KEY_OWL, owl.getData());
		
		try
		{
			_client.WriteZip(reponse.toByteArray());
			LogHelper.Log("digestCompleted.. response to client OK.");
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("digestCompleted", ex);
		}		
	}
	
	private void digestCompleteInstant()
	{
		if (!bUseOwl)
		{
			requestError();
			return;
		}
		
		if (owl.getSlotCur() <= 0)
		{
			LogHelper.Log("digestCompleteInstant.. owl's slot is empty.");
			requestError(ReturnCode.RESPONSE_MACHINE_IS_EMPTY);
			return;
		}
		
		OwlSlot first_slot = owl.getSlot(0);
		
		int food_id = first_slot.getFoodID();
		int digest_time = first_slot.getDigestTime();

		long diamond_skip_time = Misc.getDiamondEstimate(DatabaseID.DIAMOND_SKIP_TIME_PRODUCT, digest_time);
		long diamond_used = 0;
		long user_diamond = money_mgr.GetBonusMoney() + money_mgr.GetRealMoney();
		
		if (user_diamond >= diamond_skip_time)
		{
			diamond_used = diamond_skip_time;
			money_mgr.UseRealMoneyAndBonusMoney((int)diamond_skip_time,										// log
													_command_id,											//  2. hanh dong cua gamer
													userInfo.getName(),										//  3. ten tai khoan
													userInfo.getLevel(),									//  7. level cua gamer
													_ip,													//  9. ip login v4 cua gamer
													-1,														// 10. id cua loai item
													-1,														// 11. id cua item
													Misc.GetItemName(DatabaseID.IT_PRODUCT, food_id),		// 12. ten item
													diamond_skip_time,										// 13. gia game coin cua item
													1);														// 14. so luong vat pham			
			
			digest_time = owl.getFirstSlotDigestTime() - Misc.SECONDS();
			
			owl.removeFirstSlot();
			owl.updateDigestListTime(digest_time);
			
			// follow designer
			// owl.increasePower(food_id);

			SET_DB_VALUE_BINARY(KeyID.KEY_OWL, owl.getData());
			
			LogHelper.Log("--------- digestCompleteInstant: OK!");
		}
		else
		{
			LogHelper.Log("--------- digestCompleteInstant: Failed! DegestTime didn't completed yet!");
			_return_id = ReturnCode.RESPONSE_PRODUCT_NOT_COMPLETE;
		}
		
		// response to client
		FBEncrypt reponse = new FBEncrypt();
		reponse.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		reponse.addBinary(KeyID.KEY_OWL, owl.getData());
		reponse.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		reponse.addLong(KeyID.KEY_DIAMOND_USED, diamond_used);
		reponse.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		
		try
		{
			_client.WriteZip(reponse.toByteArray());
			// LogHelper.Log("digestCompleteInstant.. response to client OK.");
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("digestCompleteInstant", ex);
		}		
	}
	
	/*
	 * Return drop item id when harvest plant and product or repair friend's machine.
	 */
	private int GetDropItem(int[] list, int action_type) throws Exception
	{
		if (action_type < DatabaseID.ACTION_HARVEST_PLANT || action_type > DatabaseID.ACTION_REPAIR_FRIEND_MACHINE)
		{
			LogHelper.Log("GetDropItem.. err! invalid action type");
			return -1;
		}
		
		double r = Misc.RANDOM_DOUBLE_RANGE(0.0, 100.0);
		double current_percent = 0.0;
		
		for (int i = 0; i < list.length; i++)
		{
			//[type:id:drop_harvest_plant:drop_harvest_product:drop_repair_machine]
			String[] item_info = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_ITEM_DROP][userInfo.getLevel()][list[i]]).split(":");
			
			if (item_info.length != 5)
			{
				LogHelper.Log(LogHelper.LogType.ERROR, "err! GetDropItem: invalid drop item info.");
				return -1;
			}
			
			int item_id = Integer.parseInt(item_info[1]);
			double item_drop_rate = Double.parseDouble(item_info[action_type]);
			current_percent += item_drop_rate;
			
			StringBuilder s = new StringBuilder();
			s.append(Integer.parseInt(item_info[0]));
			s.append(":").append(item_id);
			s.append(":").append(Misc.GetItemName(DatabaseID.IT_MATERIAL, item_id));
			s.append(":").append(item_drop_rate);
			s.append(":").append(current_percent);
			s.append(":").append(r);
//			LogHelper.Log("GetDropItem.. ###DEBUG: " + s.toString());
			
			if (current_percent >= r)
			{
//				LogHelper.Log("GetDropItem.. drop item " + Misc.GetItemName(DatabaseID.IT_MATERIAL, item_id));
				return item_id;
			}
		}
		
		return -1;
	}
	
	private int GetDropItemCustom(int level) throws Exception {
		// get current drop id
		String tmp = GameUtil.GetUserMisc(_user_id).Get("drop_custom");
		int drop_id;
		if (Strings.isNullOrEmpty(tmp)) {
			drop_id = -1;
		} else {
			drop_id = Integer.parseInt(tmp);
		}
		
		// next drop id
		drop_id++;
		
		if (drop_id < Server.s_globalDB[DatabaseID.SHEET_DROP_CUSTOM].length && 
			level >= Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_DROP_CUSTOM][drop_id][DatabaseID.DROP_CUSTOM_LEVEL])) {
			GameUtil.GetUserMisc(_user_id).Set("drop_custom", "" + drop_id);
			String drop_item = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_DROP_CUSTOM][drop_id][DatabaseID.DROP_CUSTOM_ITEM]);
			LogHelper.LogHappy("Get drop custom item, current drop id := " + drop_id + ", level := " + level + ", item := " + Integer.parseInt(drop_item.split(":")[1]));
			return Integer.parseInt(drop_item.split(":")[1]);
		}
		
		return -1;
	}
	
	private int GetDropItemAdvance(List<String> list, int action_type) throws Exception
	{
		if (action_type < DatabaseID.ACTION_HARVEST_PLANT || action_type > DatabaseID.ACTION_HARVEST_PRODUCT)
		{
			LogHelper.Log("GetDropItemAdvance.. err! invalid action type");
			return -1;
		}
		
//		// cheat drop item only for HAPPY
//		if (ProjectConfig.IS_SERVER_FREESTYLE == 1 && action_type == DatabaseID.ACTION_HARVEST_PRODUCT)
//		{
//			int drop_item_id = Misc.RANDOM_RANGE(0, 8);
//			return drop_item_id;
//		}
		
		double r = Misc.RANDOM_DOUBLE_RANGE(0.0, 100.0);
		double current_percent = 0.0;
		
		for (String s : list)
		{
			String[] item_info = s.split(":");
			
			if (item_info.length != 5)
			{
				LogHelper.Log(LogHelper.LogType.ERROR, "err! GetDropItemAdvance: invalid drop item info.");
				return -1;
			}
			
			int item_id = Integer.parseInt(item_info[1]);
			double item_drop_rate = Double.parseDouble(item_info[action_type]);
			current_percent += item_drop_rate;
			
			if (current_percent >= 100)
			{
				return -1;
			}
			
			if (current_percent >= r)
			{
				// LogHelper.Log("GetDropItemAdvance.. drop item " + Misc.GetItemName(DatabaseID.IT_MATERIAL, item_id));
				return item_id;
			}
		}
		
		return -1;
	}
	
	/*
	 * The purpose of this function is to re-adjust the drop rate of material items when user harvests plant/products.
	 * This is just a draft version,  to quick test the balance of this weird design.
	 */
	private void AdjustDropItemPercent(int[] list) throws Exception
	{
		DropItemInfo.clear();
		for (int i = 0; i < 9; i += 3)
		{
			String[] i0 = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_ITEM_DROP][userInfo.getLevel()][list[i]]).split(":");
			String[] i1 = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_ITEM_DROP][userInfo.getLevel()][list[i+1]]).split(":");
			String[] i2 = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_ITEM_DROP][userInfo.getLevel()][list[i+2]]).split(":");
			
			// get number of each item in stock
			int n0 = GetStock(DatabaseID.STOCK_WAREHOUSE).getProductNum(DatabaseID.IT_MATERIAL, Integer.parseInt(i0[1]));
			int n1 = GetStock(DatabaseID.STOCK_WAREHOUSE).getProductNum(DatabaseID.IT_MATERIAL, Integer.parseInt(i1[1]));
			int n2 = GetStock(DatabaseID.STOCK_WAREHOUSE).getProductNum(DatabaseID.IT_MATERIAL, Integer.parseInt(i2[1]));

			for (int j = DatabaseID.ACTION_HARVEST_PLANT; j <= DatabaseID.ACTION_HARVEST_PRODUCT; j++ )
			{
				// get drop rate of each item
				double r0 = Double.parseDouble(i0[j]);
				double r1 = Double.parseDouble(i1[j]);
				double r2 = Double.parseDouble(i2[j]);
				
				if (n0 == 0 && n1 == 0 && n2 == 0)
				{
					// if there is nothing in stock, assign some random values (as designed)
					// so, well, we should do some random crazy stuff here to unbalance the ratio.
					if ((Misc.SECONDS() % 2) == 0)
					{
						i0[j] = "" + r2;
						
						if (Misc.RANDOM_RANGE(0, 100) >= 50)
						{
							i1[j] = "" + r0;
							i2[j] = "" + r1;
						}
						else
						{
							i1[j] = "" + r1;
							i2[j] = "" + r0;
						}
					}
					else
					{
						i0[j] = "" + r1;
						
						if (Misc.RANDOM_RANGE(0, 100) >= 50)
						{
							i1[j] = "" + r2;
							i2[j] = "" + r0;
						}
						else
						{
							i1[j] = "" + r0;
							i2[j] = "" + r2;
						}
					}
					
					break;
				}

				// reassign drop rate
				if (n0 > n1)
				{
					if (n0 > n2) // max
					{
						i0[j] = "" + Misc.MaxRate(r0, r1, r2);

						if (n1 > n2)
						{
							i1[j] = "" + Misc.MedRate(r0, r1, r2);
							i2[j] = "" + Misc.MinRate(r0, r1, r2);
						}
						else
						{
							i1[j] = "" + Misc.MinRate(r0, r1, r2);
							i2[j] = "" + Misc.MedRate(r0, r1, r2);
						}
					}
					else // med
					{
						i0[j] = "" + Misc.MedRate(r0, r1, r2);

						if (n1 > n2)
						{
							i1[j] = "" + Misc.MaxRate(r0, r1, r2);
							i2[j] = "" + Misc.MinRate(r0, r1, r2);
						}
						else
						{
							i1[j] = "" + Misc.MinRate(r0, r1, r2);
							i2[j] = "" + Misc.MaxRate(r0, r1, r2);
						}
					}
				}
				else
				{
					if (n0 > n2) // med
					{
						i0[j] = "" + Misc.MedRate(r0, r1, r2);

						if (n1 > n2)
						{
							i1[j] = "" + Misc.MaxRate(r0, r1, r2);
							i2[j] = "" + Misc.MinRate(r0, r1, r2);
						}
						else
						{
							i1[j] = "" + Misc.MinRate(r0, r1, r2);
							i2[j] = "" + Misc.MaxRate(r0, r1, r2);
						}

					}
					else // min
					{
						i0[j] = "" + Misc.MinRate(r0, r1, r2);

						if (n1 > n2)
						{
							i1[j] = "" + Misc.MaxRate(r0, r1, r2);
							i2[j] = "" + Misc.MedRate(r0, r1, r2);
						}
						else
						{
							i1[j] = "" + Misc.MedRate(r0, r1, r2);
							i2[j] = "" + Misc.MaxRate(r0, r1, r2);
						}
					}
				}
			}
			
			DropItemInfo.add(Arrays.toString(i0).replace(", ", ":").replaceAll("\\[", "").replaceAll("]", ""));
			DropItemInfo.add(Arrays.toString(i1).replace(", ", ":").replaceAll("\\[", "").replaceAll("]", ""));
			DropItemInfo.add(Arrays.toString(i2).replace(", ", ":").replaceAll("\\[", "").replaceAll("]", ""));
		}
		
		// handnet
		String handnet = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_ITEM_DROP][userInfo.getLevel()][DatabaseID.DROP_ITEM_VOT]);
		DropItemInfo.add(handnet);
		
		// longhandnet
		String longhandnet = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_ITEM_DROP][userInfo.getLevel()][DatabaseID.DROP_ITEM_VOTDAI]);
		DropItemInfo.add(longhandnet);		
		
		// event drop 1
		if (_update_status == DatabaseID.VERSION_HAS_NOT_UPDATE && (_use_event_mid_autumn_festival || _use_event_20_11 || _use_event_xmas_tree || _use_event_xmas_mini || _use_event_new_year_2015 || _use_event_8_3_2015))
		{
			String moon_cake = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_ITEM_DROP][userInfo.getLevel()][DatabaseID.DROP_ITEM_BANH_TRUNG_THU]);
			DropItemInfo.add(moon_cake);	
		}
		
		// event drop 3
		if (_update_status == DatabaseID.VERSION_HAS_NOT_UPDATE && (_use_event_halloween || _use_event_xmas_2014))
		{
			String item_event_halloween_1 = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_ITEM_DROP][userInfo.getLevel()][DatabaseID.DROP_ITEM_EVENT_1]);
			DropItemInfo.add(item_event_halloween_1);

			String item_event_halloween_2 = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_ITEM_DROP][userInfo.getLevel()][DatabaseID.DROP_ITEM_EVENT_2]);
			DropItemInfo.add(item_event_halloween_2);

			String item_event_halloween_3 = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_ITEM_DROP][userInfo.getLevel()][DatabaseID.DROP_ITEM_EVENT_3]);
			DropItemInfo.add(item_event_halloween_3);
		}
		
		// trunks
		if (_use_treasure_trunk) {
			String item_trunk = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_ITEM_DROP][userInfo.getLevel()][DatabaseID.DROP_ITEM_TREASURE]);
			DropItemInfo.add(item_trunk);
		}
	}
	
	private void ExecuteNPCAI()
	{
		try {
			boolean should_buy_expired_item = GetUserInfo().GetLastLoginTime() < Misc.GetServerCurrentResetTime();
		
			// buy expired item in private shop
			int expired_time = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][userInfo.getLevel()][DatabaseID.CONSTANT_PS_ITEM_EXPIRED_TIME]);

			boolean bought = false;

			// collect a list of expired items
			List<Integer> expired_list = new LinkedList<Integer>();
			if (expired_time > 0) 
			{
				for (PrivateShopSlot slot: PShopMgr.slots)
				{
					if (slot.item.getStatus() == DatabaseID.PS_ITEM_STATUS_SELLING && Misc.SECONDS() > slot.item.getStartDate() + expired_time)
						expired_list.add(slot.getId());
				}
			}

			if (expired_list.size() > 0)
			{
				// decide which item in the list will be bought
				int lucky_slot_id = expired_list.get(Misc.RANDOM_RANGE(0, expired_list.size() - 1));

				for (PrivateShopSlot slot: PShopMgr.slots)
				{
					// double check
					if ((slot.item.getStatus() == DatabaseID.PS_ITEM_STATUS_SELLING) && (Misc.SECONDS() > slot.item.getStartDate() + expired_time) && (slot.getId() == lucky_slot_id))
					{
						 // reset friend item and set its status to SOLD
						if (slot.item.setStatus(DatabaseID.PS_ITEM_STATUS_SOLD) == false)
						{
							LogHelper.Log("ExecuteNPCAI.BuyExpiredItem.. err! can't set item status to sold. Concurrent access error.");
							_return_id = ReturnCode.RESPONSE_CONCURRENT_ACCESS_PROBLEM;
							break;
						}

						slot.item.setAdvertise(false);
						slot.item.setAdvertiseEndTime(-1);
						slot.item.setBuyerID(KeyID.NPC_NAME);

						removeADS(userInfo.getDeviceID() + KeyID.NEWSBOARD_SLOT_CHAR + slot.getId());

						PShopMgr.saveDataToDatabase(KeyID.KEY_PRIVATE_SHOP);

						bought = true;

						// log SPENT_ITEM
						StringBuilder log = new StringBuilder();
						log.append(Misc.getCurrentDateTime());													//  1. thoi gian tieu tien
						log.append('\t').append(Misc.getActionName(CommandID.CMD_NPC_BUY_EXPIRED_ITEM));		//  2. hanh dong cua gamer
						log.append('\t').append(userInfo.getID());												//  3. id
						log.append('\t').append(userInfo.getID());												//  4. role id
						log.append('\t').append(userInfo.getName());											//  5. name
						log.append('\t').append(SkyGarden._server_id
						);																//  6. server id
						log.append('\t').append(userInfo.getLevel());											//  7. level
						log.append('\t').append(slot.item.getType() + "_" + slot.item.getId());					//  8. id item su dung
						log.append('\t').append(slot.item.getPrice());											//  9. so luong item su dung
						log.append('\t').append(DatabaseID.IT_MONEY + "_" + slot.item.getMoneyType());			//  10. id item nhan
						log.append('\t').append(slot.item.getPrice());											//  11. so luong item nhan
						log.append('\t').append(1);																//  12. result
						log.append('\t').append(KeyID.NPC_NAME);												//  13. ten tai khoan giao dich
						log.append('\t').append(userInfo.getID() + "_" + System.currentTimeMillis());			//  14. transaction id
						LogHelper.Log(LogHelper.LogType.SPENT_ITEM, log.toString());

						break;
					}
				}
			}

			// reset start time of all the remaining items in private shop list
			if (bought)
			{
				for (PrivateShopSlot slot: PShopMgr.slots) {
					if (slot.item.getStatus() == DatabaseID.PS_ITEM_STATUS_SELLING)
						slot.item.setStartDate(Misc.SECONDS());
				}

				PShopMgr.saveDataToDatabase(KeyID.KEY_PRIVATE_SHOP);
			}

			// refresh npc shop
			RefreshNPCShop();
		} catch (Exception e) {
			LogHelper.LogException("ExecuteNPCAI", e);
		}
	}

	private void loadNPCDailyResetTime()
	{
		// load npc machine daily reset time
		try
		{
			if (_is_stable_user)
			{
				_npc_daily_reset_time = (int)DBConnector.GetMembaseServer(_user_id).Get(_user_id + "_" + KeyID.KEY_NPC_MACHINE_DAILY_RESET_TIME);
			}
			else
			{
				_npc_daily_reset_time = (int)DBConnector.GetMembaseServerForTemporaryData().Get(_device_id + "_" + KeyID.KEY_NPC_MACHINE_DAILY_RESET_TIME);
			}
		}
		catch (Exception e)
		{
			LogHelper.LogException("loadNPCDailyResetTime", e);
			_npc_daily_reset_time = -1;
		}
		
		if (_npc_daily_reset_time == -1) // read error
		{
			LogHelper.Log("loadNPCDailyResetTime.. err! can't read machine daily reset time");
		}
	}

	private void loadNPCBuyItemTimer()
	{
		// load npc buy item timer
		try
		{
			if (_is_stable_user)
			{
				npc_buy_item_timer = (int)DBConnector.GetMembaseServer(_user_id).Get(_user_id + "_" + KeyID.KEY_NPC_BUY_ITEM_TIMER);
			}
			else
			{
				npc_buy_item_timer = (int)DBConnector.GetMembaseServerForTemporaryData().Get(_device_id + "_" + KeyID.KEY_NPC_BUY_ITEM_TIMER);
			}
		}
		catch (Exception e)
		{
			LogHelper.LogException("loadNPCBuyItemTimer", e);
			npc_buy_item_timer = -1;
		}
		
		if (npc_buy_item_timer == -1) // read error
		{
			LogHelper.Log("loadNPCBuyItemTimer.. err! can't read npc buy item timer");
		}
	}
	
	
	private void addADS(String device_slot_id, PrivateShopItem item)
	{
		FBEncrypt ads_bin = new FBEncrypt();
		ads_bin.addShort(KeyID.KEY_USER_COMMAND_ID, CommandID.CMD_ADS_ADD);
		ads_bin.addString(KeyID.KEY_ADS_KEY, device_slot_id);
		ads_bin.addBinary(KeyID.KEY_ADS_ITEM, item.getData());
		if (_use_newsboard_udp)
		{
			ByteBuffer buffer = ByteBuffer.allocate(ads_bin.toByteArray().length + 8);
			buffer.put(ads_bin.toByteArray());
			buffer.flip();
			if (ProjectConfig.IS_SERVER_FREESTYLE == 1)
			{
				udpRequest(buffer, ProjectConfig.NEWSBOARD_IP, 8305, false);
			}
			else if (ProjectConfig.IS_SERVER_LOGIC == 1)
			{
				udpRequest(buffer, ProjectConfig.NEWSBOARD_IP, ProjectConfig.UDP_PORT, false);
			} 
			else if (ProjectConfig.IS_SERVER_ZALO_LOGIC == 1)
			{
				udpRequest(buffer, ProjectConfig.NEWSBOARD_IP_ZALO, ProjectConfig.UDP_PORT, false);
			}
		}
	}
	
	private void removeADS(String device_slot_id)
	{
		FBEncrypt ads_bin = new FBEncrypt();
		ads_bin.addShort(KeyID.KEY_USER_COMMAND_ID, CommandID.CMD_ADS_REMOVE);
		ads_bin.addString(KeyID.KEY_ADS_KEY, device_slot_id);
		if (_use_newsboard_udp)
		{
			ByteBuffer buffer = ByteBuffer.allocate(ads_bin.toByteArray().length + 8);
			buffer.put(ads_bin.toByteArray());
			buffer.flip();
			if (ProjectConfig.IS_SERVER_FREESTYLE == 1)
			{
				udpRequest(buffer, ProjectConfig.NEWSBOARD_IP, 8305, false);
			}
			else if (ProjectConfig.IS_SERVER_LOGIC == 1)
			{
				udpRequest(buffer, ProjectConfig.NEWSBOARD_IP, ProjectConfig.UDP_PORT, false);
			}
			else if (ProjectConfig.IS_SERVER_ZALO_LOGIC == 1)
			{
				udpRequest(buffer, ProjectConfig.NEWSBOARD_IP_ZALO, ProjectConfig.UDP_PORT, false);
			}
		}
	}
	
	private void InitialRandomBugAppearRatio() throws Exception
	{
		String bug_1 = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_FRIEND_BUG][1][DatabaseID.FRIEND_BUG_1]);
		String bug_2 = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_FRIEND_BUG][1][DatabaseID.FRIEND_BUG_2]);
		String bug_3 = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_FRIEND_BUG][1][DatabaseID.FRIEND_BUG_3]);
		int i_rand = Misc.RANDOM_RANGE(0, 5); // 6 type
		
		BugAppearRatio.clear();
		
		switch (i_rand)
		{
			case 0:
				BugAppearRatio.add(bug_1);
				BugAppearRatio.add(bug_2);
				BugAppearRatio.add(bug_3);
				break;
			case 1:
				BugAppearRatio.add(bug_1);
				BugAppearRatio.add(bug_3);
				BugAppearRatio.add(bug_2);
				break;
			case 2:
				BugAppearRatio.add(bug_2);
				BugAppearRatio.add(bug_1);
				BugAppearRatio.add(bug_3);
				break;
			case 3:
				BugAppearRatio.add(bug_2);
				BugAppearRatio.add(bug_3);
				BugAppearRatio.add(bug_1);
				break;
			case 4:
				BugAppearRatio.add(bug_3);
				BugAppearRatio.add(bug_2);
				BugAppearRatio.add(bug_1);
				break;
			case 5:
				BugAppearRatio.add(bug_3);
				BugAppearRatio.add(bug_1);
				BugAppearRatio.add(bug_2);
				break;
			default:
				break;
		}
		
		// for (String s : BugAppearRatio)
		// {
			// LogHelper.Log("InitialRandomBugAppearRatio.. bug appear ratio: " + s);
		// }
		
		// calculate the real appear percent of each bug
		double total_percent = 0;
		for (String s : BugAppearRatio)
		{
			total_percent += Double.parseDouble(s.split(":")[2]);
		}
		
		for (int i = 0; i < BugAppearRatio.size(); i++)
		{
			String[] aos = BugAppearRatio.get(i).split(":");
			double real_percent = (Double.parseDouble(aos[2]) / total_percent) * 100;

			BugAppearRatio.remove(i);
			BugAppearRatio.add(i, aos[0] + ":" + aos[1] + ":" + real_percent);

			// LogHelper.Log("InitialRandomBugAppearRatio.. real percent: " + aos[0] + ":" + aos[1] + ":" + real_percent);
		}
	}
	
	// calculate the garden total appraisal
	private long UpdateGardenTotalAppraisal() throws Exception
	{
		// calculate pot
		pot_appraisal = 0;
//		for (Entry<String,Integer> item: GetStock(DatabaseID.STOCK_WAREHOUSE).getItems().entrySet())
//        {
//			String[] aos = item.getKey().split("_");
//			if (Integer.parseInt(aos[0]) == DatabaseID.IT_POT)
//			{
//				int pot_id = Integer.parseInt(aos[1]);
//				int pot_num = item.getValue();
//				if (pot_id >= 0)
//				{
//					pot_appraisal += Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_POT][pot_id][DatabaseID.POT_APPRAISAL]) * pot_num;
//				}
//			}
//        }
//		LogHelper.Log("UpdateGardenTotalAppraisal.. appraisal of pot in stock: " + pot_appraisal);
		
		for (int i = 0; i < GetUserInfo().getTotalFloor(); i++)
		{
			for (int j = 0; j < DatabaseID.MAX_SLOT_PER_FLOOR; j++)
			{
				int pot_id = GetSlot(i, j).getPot().getID();
				if (pot_id >= 0)
				{
					pot_appraisal += Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_POT][pot_id][DatabaseID.POT_APPRAISAL]);
				}
			}
		}
//		 LogHelper.Log("UpdateGardenTotalAppraisal.. total appraisal of pot: " + pot_appraisal);
		
		// calculate floor
		floor_appraisal = 0;
		for (int i = 0; i < GetUserInfo().getTotalFloor(); i++)
		{
			int floor_idx = GetFloor(i).getID();
			floor_appraisal += Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_FLOOR_UNLOCK][floor_idx][DatabaseID.FLOOR_APPRAISAL]);
		}
//		 LogHelper.Log("UpdateGardenTotalAppraisal.. total appraisal of floor: " + floor_appraisal);
		
		// calculate machine
		machine_appraisal = 0;
		for (int i = 0; i < GetUserInfo().getTotalFloor(); i++)
		{
			int machine_level = GetMachine(i).getLevel();
			int machine_id = GetMachine(i).getFloor();
			machine_appraisal += Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_MACHINE_APPRAISAL][machine_level][machine_id]);
		}
//		 LogHelper.Log("UpdateGardenTotalAppraisal.. total appraisal of machine: " + machine_appraisal);
		
		// calculate stock
		stock_appraisal = 0;
		for (int i = 0; i < DatabaseID.STOCK_MAX; i++)
		{
			int stock_level = GetStock(i).getLevel();
			String[] aos = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_STOCK_UPGRADE][stock_level][DatabaseID.STOCK_APPRAISAL]).split(":");
			if (aos.length != DatabaseID.STOCK_MAX)
			{
				LogHelper.Log("UpdateGardenTotalAppraisal.. data stock appraisal is invalid. Recheck data.");
				break;
			}
			
			stock_appraisal += Long.parseLong(aos[i]);
		}
//		LogHelper.Log("UpdateGardenTotalAppraisal.. total appraisal of stock: " + stock_appraisal);
		
		// calculate material
		decor_appraisal = 0;
		for (Entry<String,Integer> item: GetStock(DatabaseID.STOCK_WAREHOUSE).getItems().entrySet())
        {
			String[] aos = item.getKey().split("_");
			if (Integer.parseInt(aos[0]) == DatabaseID.IT_DECOR)
			{
				int decor_id = Integer.parseInt(aos[1]);
				int decor_num = item.getValue();
				if (decor_id >= 0)
				{
					decor_appraisal += (Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_DECOR][decor_id][DatabaseID.DECOR_APPRAISAL]) * decor_num);
				}
			}
        }
//		LogHelper.Log("UpdateGardenTotalAppraisal.. appraisal of decor in stock: " + decor_appraisal);
		
		for (int i = 0; i < GetUserInfo().getTotalFloor(); i++)
		{
			for (int j = 0; j < DatabaseID.MAX_SLOT_PER_FLOOR; j++)
			{
				int decor_id = GetSlot(i, j).GetDecor().getID();
				if (decor_id >= 0)
				{
					decor_appraisal += Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_DECOR][decor_id][DatabaseID.DECOR_APPRAISAL]);
				}
			}
		}
//		 LogHelper.Log("UpdateGardenTotalAppraisal.. total appraisal of decor: " + decor_appraisal);
		
		garden_appraisal = pot_appraisal + floor_appraisal + machine_appraisal + stock_appraisal + decor_appraisal;
		base.Set(_user_id + "_" + KeyID.KEY_GARDEN_APPRAISAL, garden_appraisal);
		
		return garden_appraisal;
	}
	
	// calculate the appraisal of specific item type
	private long UpdateAppraisal(int type) throws Exception
	{
		switch (type)
		{
			case DatabaseID.APPRAISAL_POT:
			{
				pot_appraisal = 0;
//				for (Entry<String,Integer> item: GetStock(DatabaseID.STOCK_WAREHOUSE).getItems().entrySet())
//				{
//					String[] aos = item.getKey().split("_");
//					if (Integer.parseInt(aos[0]) == DatabaseID.IT_POT)
//					{
//						int pot_id = Integer.parseInt(aos[1]);
//						int pot_num = item.getValue();
//						if (pot_id >= 0)
//						{
//							pot_appraisal += Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_POT][pot_id][DatabaseID.POT_APPRAISAL]) * pot_num;
//						}
//					}
//				}
//				 LogHelper.Log("UpdateAppraisal.. appraisal of pot in stock: " + pot_appraisal);

				for (int i = 0; i < GetUserInfo().getTotalFloor(); i++)
				{
					for (int j = 0; j < DatabaseID.MAX_SLOT_PER_FLOOR; j++)
					{
						int pot_id = GetSlot(i, j).getPot().getID();
						if (pot_id >= 0)
						{
							pot_appraisal += Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_POT][pot_id][DatabaseID.POT_APPRAISAL]);
						}
					}
				}
//				 LogHelper.Log("UpdateAppraisal.. total appraisal of pot: " + pot_appraisal);
			}
				break;
			case DatabaseID.APPRAISAL_FLOOR:
			{
				floor_appraisal = 0;
				for (int i = 0; i < GetUserInfo().getTotalFloor(); i++)
				{
					int floor_idx = GetFloor(i).getID();
					floor_appraisal += Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_FLOOR_UNLOCK][floor_idx][DatabaseID.FLOOR_APPRAISAL]);
				}
//				 LogHelper.Log("UpdateAppraisal.. total appraisal of floor: " + floor_appraisal);
			}
				break;
			case DatabaseID.APPRAISAL_MACHINE:
			{
				machine_appraisal = 0;
				for (int i = 0; i < GetUserInfo().getTotalFloor(); i++)
				{
					int machine_level = GetMachine(i).getLevel();
					int machine_id = GetMachine(i).getFloor();
					machine_appraisal += Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_MACHINE_APPRAISAL][machine_level][machine_id]);
				}
//				 LogHelper.Log("UpdateAppraisal.. total appraisal of machine: " + machine_appraisal);
			}
				break;
			case DatabaseID.APPRAISAL_STOCK:
			{
				stock_appraisal = 0;
				for (int i = 0; i < DatabaseID.STOCK_MAX; i++)
				{
					int stock_level = GetStock(i).getLevel();
					String[] aos = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_STOCK_UPGRADE][stock_level][DatabaseID.STOCK_APPRAISAL]).split(":");
					if (aos.length != DatabaseID.STOCK_MAX)
					{
						LogHelper.Log("UpdateGardenTotalAppraisal.. data stock appraisal is invalid. Recheck data.");
						break;
					}

					stock_appraisal += Integer.parseInt(aos[i]);
				}
//				 LogHelper.Log("UpdateGardenTotalAppraisal.. total appraisal of stock: " + stock_appraisal);
			}
				break;
			case DatabaseID.APPRAISAL_DECOR:
			{
				decor_appraisal = 0;
				for (Entry<String,Integer> item: GetStock(DatabaseID.STOCK_WAREHOUSE).getItems().entrySet())
				{
					String[] aos = item.getKey().split("_");
					if (Integer.parseInt(aos[0]) == DatabaseID.IT_DECOR)
					{
						int decor_id = Integer.parseInt(aos[1]);
						int decor_num = item.getValue();
						if (decor_id >= 0)
						{
							decor_appraisal += (Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_DECOR][decor_id][DatabaseID.DECOR_APPRAISAL]) * decor_num);
						}
					}
				}
//				 LogHelper.Log("UpdateGardenTotalAppraisal.. appraisal of decor in stock: " + decor_appraisal);

				for (int i = 0; i < GetUserInfo().getTotalFloor(); i++)
				{
					for (int j = 0; j < DatabaseID.MAX_SLOT_PER_FLOOR; j++)
					{
						int decor_id = GetSlot(i, j).GetDecor().getID();
						if (decor_id >= 0)
						{
							decor_appraisal += Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_DECOR][decor_id][DatabaseID.DECOR_APPRAISAL]);
						}
					}
				}
//				 LogHelper.Log("UpdateGardenTotalAppraisal.. total appraisal of decor: " + decor_appraisal);
			}
				break;
		}
		
		garden_appraisal = pot_appraisal + floor_appraisal + machine_appraisal + stock_appraisal + decor_appraisal;
		base.Set(_user_id + "_" + KeyID.KEY_GARDEN_APPRAISAL, garden_appraisal);
		
//		GetRankingTarget().Set(CommandID.CMD_UPDATE_GARDEN_APPRAISAL, -1, garden_appraisal);
//		SET_DB_VALUE_BINARY(KeyID.KEY_USER_RANKING_TARGET, GetRankingTarget().GetData());
		
		if (_use_achievement)
		{
			GetAchievementManager().Set(CommandID.CMD_UPDATE_GARDEN_APPRAISAL, -1, garden_appraisal);
		}
		
		return garden_appraisal;
	}
	
	private void handleNotifyShareFBFinish(FBEncrypt encrypt)
	{
		int share_content = encrypt.getInt(KeyID.KEY_SHARE_CONTENT);
		// LogHelper.Log("handleNotifyShareFBFinish.. share content: " + share_content);
		try
		{
			if (share_content == DatabaseID.SHARE_FB_LEVEL_UP)
			{
				for (String gift : ShareFBLevelUpRewardPool)
				{
					GetGiftManager().LoadFromDatabase(KeyID.KEY_GIFT);
					GetGiftManager().AddGiftBox(Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][4][DatabaseID.GIFT_INFO_NAME]),
												Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][4][DatabaseID.GIFT_INFO_DESCRIPTION]),
												gift);	
					GetGiftManager().SaveDataToDatabase(KeyID.KEY_GIFT);
					MoveGiftBoxToMailBox();
					
					StringBuilder log = new StringBuilder();
					log.append(Misc.getCurrentDateTime());						//  1. log time
					log.append('\t').append(_command_id);						//  2. action name
					log.append('\t').append(_user_id);							//  3. account name
					log.append('\t').append(_user_id);							//  4. role id
					log.append('\t').append(GetUserInfo().getName());			//  5. role name
					log.append('\t').append("0");								//  6. server id
					log.append('\t').append(GetUserInfo().getLevel());			//  7. user level
					log.append('\t').append(GetUserInfo().GetUserIP());			//  8. user ip
					log.append('\t').append(Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][4][DatabaseID.GIFT_INFO_NAME]));				//  9. user gift code
					log.append('\t').append(Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][4][DatabaseID.GIFT_INFO_DESCRIPTION]));		//  10. user gift code
					log.append('\t').append(gift);								//  11. user gift code
					LogHelper.Log(LogHelper.LogType.GIFT_BOX, log.toString());
				}
				ShareFBLevelUpRewardPool.clear();
			}
			else
			{
				requestError();
				return;
			}
		}
		catch (Exception e)
		{
			LogHelper.LogException("handleNotifyShareFBFinish", e);
		}
		
		// send result to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		if (GetGiftManager()._gifts.size() > 0)
		{
			response.addInt(KeyID.KEY_GIFT_ID, GetGiftManager()._gifts.getLast().GetId());
			response.addString(KeyID.KEY_GIFT_NAME, GetGiftManager()._gifts.getLast().GetName());
			response.addString(KeyID.KEY_GIFT_DESCRIPTION, GetGiftManager()._gifts.getLast().GetDescription());
			response.addString(KeyID.KEY_GIFT_ITEM_LIST, GetGiftManager()._gifts.getLast().GetItemList());
		}
		response.addBoolean(KeyID.KEY_NEW_MAIL, true);
		
		try 
		{
			_client.WriteZip(response.toByteArray());
			// LogHelper.Log("handleNotifyShareFBFinish.. response to client OK.");
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("handleNotifyShareFBFinish", ex);
		}
	}
	
	public void handleLikeGarden(FBEncrypt encrypt)
	{
		long friend_uid = -1;
		
		if (encrypt.hasKey(KeyID.KEY_FRIEND_ID))
		{
			friend_uid = encrypt.getLong(KeyID.KEY_FRIEND_ID);
		}
		else if (encrypt.hasKey(KeyID.KEY_FRIEND_DEVICE_ID))
		{
			friend_uid = GetUserID(encrypt.getString(KeyID.KEY_FRIEND_DEVICE_ID));
		}
		
		if (friend_uid < 0)
		{
			LogHelper.Log("Friend is not existed!");
			requestError();
			return;
		}
		
		// kiem tra minh da like friend nay chua, neu da like roi thi return
		
		byte[] liked_list = null;
		try
		{
			liked_list = GET_DB_VALUE_BINARY(KeyID.KEY_USER_LIKED_LIST);
		}
		catch (Exception e)
		{
			liked_list = null;
		}

		FBEncrypt liked_enc = null;
		if (liked_list == null || liked_list.length == 0)
		{
			liked_enc = new FBEncrypt();
		}
		else
		{
			liked_enc = new FBEncrypt(liked_list);
		}
			
		long[] user_liked_list = liked_enc.getLongArray(KeyID.KEY_USER_LIKED_LIST);
		
		if (user_liked_list == null)
		{
			user_liked_list = new long[0];
		}

		Long[] uid_list_obj = ArrayUtils.toObject(user_liked_list);	// convert long[] to LONG[] de dua vao List
		List<Long> user_list_fixed = Arrays.asList(uid_list_obj);
		
		// execute check
		if (user_list_fixed.contains(friend_uid))
		{
			LogHelper.Log(friend_uid + " is existed in liked list"); 
			requestError(ReturnCode.RESPONSE_ALREADY_LIKED_GARDEN);
			return;
		}

		List<Long> new_user_liked_list = new ArrayList(user_list_fixed);	// clone ra 1 List khac de co the add them
		new_user_liked_list.add(friend_uid);
		
		Long[] list = new Long[new_user_liked_list.size()];
		list = new_user_liked_list.toArray(list);
		
		long[] list_obj = ArrayUtils.toPrimitive(list);	// convert Long[] to long[] de save xuong db

		try
		{
			FBEncrypt liked_list_dec = new FBEncrypt();
			liked_list_dec.addArray(KeyID.KEY_USER_LIKED_LIST, list_obj);
			
			if (!SET_DB_VALUE_BINARY(KeyID.KEY_USER_LIKED_LIST, liked_list_dec.toByteArray()))
			{
				LogHelper.Log("Cannot update user liked list"); 
			}
		}
		catch (Exception e)
		{
			LogHelper.LogException("handleLikeGarden1", e);
		}
		
		// send facebook notify to friend's facebook
		// String friend_fb_id = Misc.GetFacebookID(friend_uid);
		// String my_fb_id = userInfo.getFaceBookID();
		// LogHelper.Log("handleLikeGarden.. friend fb id: " + friend_fb_id);
		// LogHelper.Log("handleLikeGarden.. my fb id: " + my_fb_id);
//		if (!friend_fb_id.equals("null") && !my_fb_id.equals("null")) {
//			Server._task_queue.AddTask(new FBNotificationTask(_user_id, my_fb_id, friend_fb_id));
//		}
		
		// read liked list of friend from db
		long liked_count = 0;
		
		try
		{
			liked_count = DBConnector.GetMembaseServer(friend_uid).Increase(friend_uid + "_" + KeyID.KEY_USER_LIKED_COUNT, 1, 1L);
			
			if (liked_count < 0)
			{
				liked_count = Long.parseLong((String)DBConnector.GetMembaseServer(friend_uid).Get(friend_uid + "_" + KeyID.KEY_USER_LIKED_COUNT));
			}
			else
			{
				LogHelper.logLikeGarden(userInfo.getID(),
									userInfo.getName(),
									userInfo.getLevel(),
									GetIP(),
									0,
									friend_uid,
									liked_count);
			}
		}
		catch (Exception e)
		{
			liked_count = 0;
			LogHelper.LogException("handleLikeGarden2", e);
		}
		
		// ---------------------------------------------------------------------
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addLong(KeyID.KEY_USER_LIKED_COUNT, liked_count);
		
		try 
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("handleLikeGarden", ex);
		}
	}
	
	private boolean isLikedGarden(long friend_uid)
	{
		byte[] liked_list = null;
		try
		{
			liked_list = GET_DB_VALUE_BINARY(KeyID.KEY_USER_LIKED_LIST);
		}
		catch (Exception e)
		{
			liked_list = null;
		}

		FBEncrypt liked_enc = null;
		if (liked_list == null || liked_list.length == 0)
		{
			return false;
		}
		else
		{
			liked_enc = new FBEncrypt(liked_list);
		}
			
		long[] user_liked_list = liked_enc.getLongArray(KeyID.KEY_USER_LIKED_LIST);
		
		if (user_liked_list == null)
		{
			return false;
		}

		Long[] uid_list_obj = ArrayUtils.toObject(user_liked_list);	// convert long[] to LONG[] de dua vao List
		List<Long> user_list_fixed = Arrays.asList(uid_list_obj);
		
		// execute check
		return user_list_fixed.contains(friend_uid);
	}
	
	private void handleRefillATM()
	{
		String game_id = ProjectConfig.GAME_ID;
		String secret_key = ProjectConfig.SECRECT_KEY;
		String add_info = "null";
		String encoded_add_info = "";
		String token = "";
		String img_link = "http://sgmb.static.g6.zing.vn/atm/atm_%s.png";
		String img_md5 = "5b50f1b03c71041a330b7080f48323f6:a2ce7250f3246b2f404db81f2671267e:97170e65ae77c63051375c5cf0ce798c";
		
		if (_offer != null && _offer.isOfferring() && _offer.getOfferType() == DatabaseID.OFFER_CONTENT_DIAMOND)
		{
			img_link = "http://sgmb.static.g6.zing.vn/atm/saleoff/atm_%s.png";
			img_md5 = "a47502e5da07151d65d91511eebb4349:189c2bda412257ecd66e8b467d3e2592:418cb3fe0757e66cbe0e37e65aa887ec";
		}
		
		try 
		{
			if (userInfo.getRefCode().equals("") || userInfo.getRefCode().equals("null"))
				add_info = "";
			else
				add_info = "mwo:" + userInfo.getRefCode();
			
			encoded_add_info = com.vng.util.Base64.encodeToString(add_info.getBytes("UTF-8"), false);
		}
		catch (Exception e) 
		{
			LogHelper.LogException("handleRefillATM.Encode", e);
		}
		
		token = Misc.Hash(game_id + _user_id + secret_key + add_info, "MD5");
		StringBuilder url = new StringBuilder();
		if (ProjectConfig.IS_SERVER_FREESTYLE == 1)
		{
			url.append("http://bpaytest.g6-mobile.zing.vn/GateWay.php?");
		}
		else
		{
			url.append("https://pay6.zing.vn/GateWay.php?");
		}
		url.append("user_id=").append(_user_id);
		url.append("&game_id=").append(game_id);
		url.append("&add_info=").append(encoded_add_info);
		url.append("&platform=").append(_device_platform);
		url.append("&token=").append(token);
		LogHelper.Log("atm url = " + url.toString());
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addStringANSI(KeyID.KEY_ATM_TARGET_URL, url.toString());
		response.addStringANSI(KeyID.KEY_ATM_IMAGE, img_link);
		response.addStringANSI(KeyID.KEY_ATM_MD5, img_md5);
		
		try 
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("handleRefillATM", ex);
		}
	}
	
	private void handleAcceptMerchantRequest(FBEncrypt encrypt)
	{
		int merchant_id = encrypt.getInt(KeyID.KEY_MERCHANT_ID);
		boolean result = false;
		int stock_id = -1;
		
		int acm_index = -1;
		for (Merchant m : merchant_mgr.GetMerchantList()) {
			if (m.GetMerchantID() == merchant_id) {
				// check if user has enough requested item in stock
				int req_item_type = m.GetRequestItemType();
				int req_item_id = m.GetRequestItemID();
				int req_item_num = m.GetRequestItemNum();
				
				switch (req_item_type) {
					case DatabaseID.IT_PLANT:
						stock_id = DatabaseID.STOCK_SILO;
						break;
					case DatabaseID.IT_MATERIAL:
					case DatabaseID.IT_POT:
					case DatabaseID.IT_DECOR:
						stock_id = DatabaseID.STOCK_WAREHOUSE;
						break;
					case DatabaseID.IT_PRODUCT:
					case DatabaseID.IT_BUG:
						stock_id = DatabaseID.STOCK_BARN;
						break;
					default:
						LogHelper.Log("handleAcceptMerchantRequest.. invalid item type");
						_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
						requestError();
						return;
				}
				
				int num_item_in_stock = GetStock(stock_id).getProductNum(req_item_type, req_item_id);
				if (num_item_in_stock < req_item_num)
				{
					LogHelper.Log("handleAcceptMerchantRequest.. not enough item in stock");
					_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_PRODUCT;
					requestError();
					return;
				}
				
				// decrease the item in stocks.
				result = GetStock(stock_id).updateValue(_command_id, req_item_type, req_item_id, num_item_in_stock - req_item_num);
				if (!result) {
					LogHelper.Log("handleAcceptMerchantRequest.. can not reduce item in stock");
					requestError();
					return;
				}
				
				// add moneys
				int money_id = m.GetMoneyID();
				long money_num = m.GetMoneyNum();
				switch(money_id) {
					case DatabaseID.GOLD_ID:
						GetUserInfo().setGold(GetUserInfo().getGold() + money_num, _command_id, DatabaseID.IT_MONEY, DatabaseID.GOLD_ID, Misc.GetItemName(DatabaseID.IT_MONEY, DatabaseID.GOLD_ID), (int)money_num);
						break;
					case DatabaseID.DIAMOND_ID:
						money_mgr.IncreaseBonusMoney((int)money_num,
									MoneyManager.Reason.SYSTEM_GIFT, 
									_command_id,
									GetUserInfo().getName(), 
									GetUserInfo().getLevel(),
									_ip,
									-1,
									-1,
									"",
									-1,
									-1);
						break;
					case DatabaseID.REPUTATION_ID:
						GetUserInfo().setReputation(GetUserInfo().getReputation() + money_num, _command_id, DatabaseID.IT_MONEY, DatabaseID.REPUTATION_ID, Misc.GetItemName(DatabaseID.IT_MONEY, DatabaseID.REPUTATION_ID), (int)money_num);
						break;
				}
				
				// remove this merchant
				merchant_mgr.RemoveMerchant(m.GetMerchantID());
				merchant_mgr.SaveDataToDatabase(KeyID.KEY_MERCHANT);
				
				if (_use_achievement)
				{
					acm_index = GetAchievementManager().Increase(CommandID.CMD_DELIVERY_ORDER, 1);
				}
					
				// save to base
				result = SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + stock_id, GetStock(stock_id).getDataToDatabase());
				if (result == false)
				{
					LogHelper.Log("handleAcceptMerchantRequest.. save stock error."); 
					_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
					requestError();
					return;
				}

				if (!_use_lazy_sync_user_info)
				{
					result = SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, GetUserInfo().getData(true));
					if (result == false)
					{
						LogHelper.Log("handleAcceptMerchantRequest.. err! save user info error."); 
						_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
						requestError();
						return;
					}
				}
				
				if (_use_event_halloween)
				{
					String[] gift_info = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_NPC_MERCHANT][userInfo.getLevel()][DatabaseID.MERCHANT_GOLD_TO_ITEM]).split(":");
					int gift_type = Integer.parseInt(gift_info[0]);
					int gift_id = Integer.parseInt(gift_info[1]);
					int gift_num = -1;
					for (int i = 2; i < gift_info.length - 1; i += 2)
					{
						int require = Integer.parseInt(gift_info[i]);
						int num = Integer.parseInt(gift_info[i+1]);
						LogHelper.LogHappy("require gold = " + require + ", gold = " + money_num + ", gift num = " + num);
						if (money_num < require)
						{
							gift_num = num;
							break;
						}
					}
					
					if (gift_num > 0)
					{
						if (gift_id == DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_1 || gift_id == DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_2 || gift_id == DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_3)
						{
							gift_type = DatabaseID.IT_EVENT;
							switch (gift_id)
							{
								case DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_1:
									gift_id = DatabaseID.ITEM_EVENT_HALLOWEEN_1;
									break;
								case DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_2:
									gift_id = DatabaseID.ITEM_EVENT_HALLOWEEN_2;
									break;
								case DatabaseID.MATERIAL_ITEM_EVENT_HALLOWEEN_3:
									gift_id = DatabaseID.ITEM_EVENT_HALLOWEEN_3;
									break;
							}
							stock_event.addGift(gift_type, gift_id, gift_num, _command_id);
							SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
							LogHelper.LogHappy("Add stocked := " + gift_type + ":" + gift_id + ":" + gift_num);
						}
					}
				}
//				else if (_use_event_xmas_2014)
//				{
//					String[] gift_info = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_NPC_MERCHANT][userInfo.getLevel()][DatabaseID.MERCHANT_GOLD_TO_ITEM]).split(":");
//					int gift_type = Integer.parseInt(gift_info[0]);
//					int gift_id = Integer.parseInt(gift_info[1]);
//					int gift_num = -1;
//					for (int i = 2; i < gift_info.length - 1; i += 2)
//					{
//						int require = Integer.parseInt(gift_info[i]);
//						int num = Integer.parseInt(gift_info[i+1]);
//						LogHelper.LogHappy("require gold = " + require + ", gold = " + money_num + ", gift num = " + num);
//						if (money_num < require)
//						{
//							gift_num = num;
//							break;
//						}
//					}
//					
//					if (gift_num > 0)
//					{
//						if (gift_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_1 || gift_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_2 || gift_id == DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_3)
//						{
//							gift_type = DatabaseID.IT_EVENT;
//							switch (gift_id)
//							{
//								case DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_1:
//									gift_id = DatabaseID.ITEM_EVENT_XMAS_2014_1;
//									break;
//								case DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_2:
//									gift_id = DatabaseID.ITEM_EVENT_XMAS_2014_2;
//									break;
//								case DatabaseID.MATERIAL_ITEM_EVENT_XMAS_2014_3:
//									gift_id = DatabaseID.ITEM_EVENT_XMAS_2014_3;
//									break;
//							}
//							stock_event.addGift(gift_type, gift_id, gift_num, _command_id);
//							SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
//							LogHelper.LogHappy("Add stocked := " + gift_type + ":" + gift_id + ":" + gift_num);
//						}
//					}
//				}

				break;
			}
		}
		
		if (!result) {
			LogHelper.Log("handleAcceptMerchantRequest.. err!");
			requestError();
		} else {
			
			StringBuilder sb = new StringBuilder();
			for (Merchant m : merchant_mgr.GetMerchantList()) {
				if (sb.length() == 0) {
					sb.append(m.GetInfo());
				} else {
					sb.append(';').append(m.GetInfo());
				}
			}
		
			FBEncrypt response = new FBEncrypt();
			response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
			response.addBinary(KeyID.KEY_USER_INFOS, GetUserInfo().getData(false));
			response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
			response.addBinary(KeyID.KEY_STOCKS + stock_id, GetStock(stock_id).getDataToClient());
			response.addString(KeyID.KEY_MERCHANT, sb.toString());
			
			if (_use_achievement && acm_index != -1)
			{
				response.addInt(KeyID.KEY_ACHIEVEMENT_ID, acm_index);
				response.addBinary(KeyID.KEY_ACHIEVEMENT_INDEX + acm_index, GetAchievementManager().GetAchievement(acm_index).getData());
			}
			
			if ((_use_event_halloween || _use_event_xmas_2014 || _use_event_xmas_tree || _use_event_new_year_2015 || _use_event_8_3_2015) && _use_stock_event)
			{
				response.addBinary(KeyID.KEY_STOCK_EVENT, stock_event.getDataToClient());
			}
			
			try 
			{
				_client.WriteZip(response.toByteArray());
			}
			catch (Exception ex) 
			{
				LogHelper.LogException("handleAcceptMerchantRequest", ex);
			}
		}
	}
	
	private void handleDiscardMerchantRequest(FBEncrypt encrypt)
	{
		int merchant_id = encrypt.getInt(KeyID.KEY_MERCHANT_ID);
		boolean result = false;
		for (Merchant m : merchant_mgr.GetMerchantList()) {
			if (m.GetMerchantID() == merchant_id) {
				// remove merchant
				merchant_mgr.RemoveMerchant(merchant_id);
				result = true;
			}
		}
		
		if (!result) {
			LogHelper.Log("handleAcceptMerchantRequest.. err!");
			requestError();
			return;
		}
		
		StringBuilder log = new StringBuilder();
		log.append(Misc.getCurrentDateTime());								//  1. thoi gian tieu tien
		log.append('\t').append(Misc.getActionName(_command_id));			//  2. hanh dong cua gamer
		log.append('\t').append(userInfo.getID());							//  3. id
		log.append('\t').append(userInfo.getID());							//  4. role id
		log.append('\t').append(userInfo.getName());						//  5. name
		log.append('\t').append(SkyGarden._server_id);											//  6. server id
		log.append('\t').append(userInfo.getLevel());						//  7. level
		LogHelper.Log(LogHelper.LogType.TRACKING_ACTION, log.toString());
		
		StringBuilder sb = new StringBuilder();
		for (Merchant m : merchant_mgr.GetMerchantList()) {
			if (sb.length() == 0) {
				sb.append(m.GetInfo());
			} else {
				sb.append(';').append(m.GetInfo());
			}
		}
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addString(KeyID.KEY_MERCHANT, sb.toString());
		try 
		{
			_client.WriteZip(response.toByteArray());
			LogHelper.Log("handleAcceptMerchantRequest.. response to client ok.");
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("handleAcceptMerchantRequest", ex);
		}
	}
	
	private void handleBuyItemsForMerchant(FBEncrypt encrypt)
	{
		int merchant_id = encrypt.getInt(KeyID.KEY_MERCHANT_ID);
		
		boolean result = false;
		for (Merchant m : merchant_mgr.GetMerchantList()) {
			if (m.GetMerchantID() == merchant_id) {
				// check if user has enough requested item in stock
				int req_item_type = m.GetRequestItemType();
				int req_item_id = m.GetRequestItemID();
				int req_item_num = m.GetRequestItemNum();
				
				int stock_id = -1;
				switch (req_item_type) {
					case DatabaseID.IT_PLANT:
						stock_id = DatabaseID.STOCK_SILO;
						break;
					case DatabaseID.IT_MATERIAL:
					case DatabaseID.IT_POT:
					case DatabaseID.IT_DECOR:
						stock_id = DatabaseID.STOCK_WAREHOUSE;
						break;
					case DatabaseID.IT_PRODUCT:
					case DatabaseID.IT_BUG:
						stock_id = DatabaseID.STOCK_BARN;
						break;
					default:
						LogHelper.Log("handleBuyItemsForMerchant.. invalid item type");
						_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
						requestError();
						return;
				}
				
				int required_num = req_item_num - GetStock(stock_id).getProductNum(req_item_type, req_item_id);
				if (required_num <= 0) {
					LogHelper.Log("handleBuyItemsForMerchant.. err! the required num should be > 0");
					requestError();
					return;
				}
				
				result = QuickBuyItemsWithDiamond(req_item_type, req_item_id, required_num, _command_id);
				if (!result) {
					LogHelper.Log("handleBuyItemsForMerchant.. err! buy items failed.");
					requestError();
					return;
				}
				
				// deliver to merchant
				handleAcceptMerchantRequest(encrypt);
				
				break;
			}
		}
		
		if (!result) {
			requestError();
		}
	}
	
	private void handleRequestMerchant() {
		try {
			if (merchant_mgr.GetMerchantSize() < DatabaseID.MERCHANT_MAX_CONCURRENT) {
				int retry = 0;
				while (merchant_mgr.GetMerchantSize() < DatabaseID.MERCHANT_MAX_CONCURRENT && retry < DatabaseID.MERCHANT_MAX_CONCURRENT) {
					// create next merchant
					int req_item_type = -1;
					int req_item_id = -1;
					int req_item_num = -1;
					int req_price = -1;
					int delay_time = -1;

					// create merchant
					if (!merchant_mgr.AddNewMerchant()) {
						LogHelper.Log("handleRequestMerchant.. can not create next merchant");
						requestError();
						return;
					} else {
//						LogHelper.Log("handleRequestMerchant.. create merchant ok!");
					}

					// calculate merchant details
					int size_list = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_NPC_MERCHANT][GetUserInfo().getLevel()][DatabaseID.MERCHANT_LIST_SIZE]);
					int min_percent = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_NPC_MERCHANT][GetUserInfo().getLevel()][DatabaseID.MERCHANT_MIN_PERCENT]);
					int max_percent = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_NPC_MERCHANT][GetUserInfo().getLevel()][DatabaseID.MERCHANT_MAX_PERCENT]);
//					LogHelper.Log("handleRequestMerchant.. size_list: " + size_list);
//					LogHelper.Log("handleRequestMerchant.. min_percent: " + min_percent);
//					LogHelper.Log("handleRequestMerchant.. max_percent: " + max_percent);
					
					switch (merchant_mgr.GetLastMerchant().GetMerchantID()) {
						case DatabaseID.MERCHANT_RED_HOOD:
						{
							// create a list that contains 5 items with max quantity in stock silo
							HashMap<String, Integer> list_silo = new HashMap();
							for (Entry<String,Integer> item: GetStock(DatabaseID.STOCK_SILO).getItems().entrySet()) {
								// debug
								String[] sa = item.getKey().split("_");
//								LogHelper.Log("handleRequestMerchant.. ###DEBUG: current item in stock: " + Misc.GetItemName(Integer.parseInt(sa[0]), Integer.parseInt(sa[1])) + ":" + item.getValue());
								
								if (list_silo.size() < size_list) {
									list_silo.put(item.getKey(), item.getValue());
								} else {
									String min_key = Misc.Min(list_silo);
									int min_value = list_silo.get(min_key);
									if (item.getValue() > min_value) {
										list_silo.remove(min_key);
										list_silo.put(item.getKey(), item.getValue());
									}
								}
								
								// debug
								StringBuilder sb = new StringBuilder();
								for (Entry<String, Integer> item_in_list_silo : list_silo.entrySet()) {
									String[] sa1 = item_in_list_silo.getKey().split("_");
									if (sb.length() == 0) {
										sb.append(Misc.GetItemName(Integer.parseInt(sa1[0]), Integer.parseInt(sa1[1]))).append(':').append(item_in_list_silo.getValue());
									} else {
										sb.append('\t').append(Misc.GetItemName(Integer.parseInt(sa1[0]), Integer.parseInt(sa1[1]))).append(':').append(item_in_list_silo.getValue());
									}
								}
//								LogHelper.Log("handleRequestMerchant.. ###DEBUG: item_in_list_silo = " + sb.toString());
							}

							// log
							StringBuilder log_silo = new StringBuilder();
							for (Entry<String,Integer> item: list_silo.entrySet())
							{
								String[] tmpString = item.getKey().split("_");
								log_silo.append('\t').append(Misc.GetItemName(Integer.parseInt(tmpString[0]), Integer.parseInt(tmpString[1])));
								log_silo.append(":").append(item.getValue());
							}
//							LogHelper.Log("handleRequestMerchant.. list silo: " + log_silo.toString());

							// determine which item will be requested
							if (list_silo.size() > 0) {
								// choose randomly in the list
								int r = Misc.RANDOM_RANGE(0, list_silo.size() - 1);
								int e = 0;
								for (Entry<String, Integer> item : list_silo.entrySet()) {
									if (e == r) {
										String[] aos = item.getKey().split("_");
										req_item_type = Integer.parseInt(aos[0]);
										req_item_id = Integer.parseInt(aos[1]);

										// determine how many item will be requested
										req_item_num = (int)((Misc.RANDOM_DOUBLE_RANGE(min_percent, max_percent) / 100) * item.getValue());
										if (req_item_num == 0) {
											req_item_num = 1;
										}
										break;
									} else {
										e++;
									}
								}
							} else {
								// list is empty, get some randoms item
								req_item_type = DatabaseID.IT_PLANT;
								req_item_id = Misc.RANDOM_RANGE(0, 1);
								req_item_num = Misc.RANDOM_RANGE(1, 20);
							}

							// check request num again
							int max_request_num_silo = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_NPC_MERCHANT][GetUserInfo().getLevel()][DatabaseID.MERCHANT_MAX_REQUEST_NUM_STOCK_SILO]);
							if (req_item_num > max_request_num_silo) {
								req_item_num = max_request_num_silo;
							}

							// determine price
							long basic_price = Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_SEED][req_item_id][DatabaseID.SEED_NPC_BUY_PRICE]);
							double ratio = (double)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_NPC_MERCHANT][GetUserInfo().getLevel()][DatabaseID.MERCHANT_PRICE_RATIO_STOCK_SILO]);
							req_price = (int)((basic_price * (ratio / 100))) * req_item_num;
							if (req_price == 0) {
								req_price = 1;
							}
						}
							break;
						case DatabaseID.MERCHANT_PUSS_IN_BOOST:
						{
							// create a list that contains 5 items with max quantity in stock barn
							HashMap<String, Integer> list_barn = new HashMap();
							for (Entry<String,Integer> item: GetStock(DatabaseID.STOCK_BARN).getItems().entrySet()) {
								// debug
								String[] sa = item.getKey().split("_");
//								LogHelper.Log("handleRequestMerchant.. ###DEBUG: current item in stock: " + Misc.GetItemName(Integer.parseInt(sa[0]), Integer.parseInt(sa[1])) + ":" + item.getValue());
								
								if (list_barn.size() < size_list) {
									list_barn.put(item.getKey(), item.getValue());
								} else {
									String min_key = Misc.Min(list_barn);
									int min_value = list_barn.get(min_key);
									if (item.getValue() > min_value) {
										list_barn.remove(min_key);
										list_barn.put(item.getKey(), item.getValue());
									}
								}
								
								// debug
								StringBuilder sb = new StringBuilder();
								for (Entry<String, Integer> item_in_list_barn : list_barn.entrySet()) {
									String[] sa1 = item_in_list_barn.getKey().split("_");
									if (sb.length() == 0) {
										sb.append(Misc.GetItemName(Integer.parseInt(sa1[0]), Integer.parseInt(sa1[1]))).append(':').append(item_in_list_barn.getValue());
									} else {
										sb.append('\t').append(Misc.GetItemName(Integer.parseInt(sa1[0]), Integer.parseInt(sa1[1]))).append(':').append(item_in_list_barn.getValue());
									}
								}
//								LogHelper.Log("handleRequestMerchant.. ###DEBUG: item_in_list_barn = " + sb.toString());
							}

							// log
							StringBuilder log_barn = new StringBuilder();
							for (Entry<String,Integer> item: list_barn.entrySet())
							{
								String[] tmpString = item.getKey().split("_");
								log_barn.append('\t').append(Misc.GetItemName(Integer.parseInt(tmpString[0]), Integer.parseInt(tmpString[1])));
								log_barn.append(":").append(item.getValue());
							}
//							LogHelper.Log("handleRequestMerchant.. list barn: " + log_barn.toString());

							if (list_barn.size() > 0) {
								// choose randomly in the list
								int r = Misc.RANDOM_RANGE(0, list_barn.size() - 1);
								int e = 0;
								for (Entry<String, Integer> item : list_barn.entrySet()) {
									if (e == r) {
										String[] aos = item.getKey().split("_");
										req_item_type = Integer.parseInt(aos[0]);
										req_item_id = Integer.parseInt(aos[1]);

										// determine how many item will be requested
										req_item_num = (int)((Misc.RANDOM_DOUBLE_RANGE(min_percent, max_percent) / 100) * item.getValue());
										if (req_item_num == 0) {
											req_item_num = 1;
										}

										break;
									} else {
										e++;
									}

								}
							} else {
								// list is empty, get some randoms item
								if (Misc.RANDOM_RANGE(0, 1) == 0) {
									req_item_type = DatabaseID.IT_PRODUCT;
									req_item_num = Misc.RANDOM_RANGE(1, 10);
								} else {
									req_item_type = DatabaseID.IT_BUG;
									req_item_num = Misc.RANDOM_RANGE(1, 5);
								}
								req_item_id = 0;
							}

							// check request num again
							int max_request_num_barn = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_NPC_MERCHANT][GetUserInfo().getLevel()][DatabaseID.MERCHANT_MAX_REQUEST_NUM_STOCK_BARN]);
							if (req_item_num > max_request_num_barn) {
								req_item_num = max_request_num_barn;
							}

							// determine price
							long basic_price = 0;
							if (req_item_type == DatabaseID.IT_PRODUCT) {
								basic_price = Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_PRODUCT][req_item_id][DatabaseID.PRODUCT_NPC_BUY_PRICE]);
							} else {
								basic_price = Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_PEST][req_item_id][DatabaseID.PEST_NPC_BUY_PRICE]);
							}

							double ratio = (double)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_NPC_MERCHANT][GetUserInfo().getLevel()][DatabaseID.MERCHANT_PRICE_RATIO_STOCK_BARN]);
							req_price = (int)((basic_price * (ratio / 100))) * req_item_num;
							if (req_price == 0) {
								req_price = 1;
							}
						}
							break;
						case DatabaseID.MERCHANT_GROUCHY:
						{
							HashMap<String, Integer> list_silo = new HashMap();
							for (Entry<String,Integer> item: GetStock(DatabaseID.STOCK_SILO).getItems().entrySet()) {
								// debug
								String[] sa = item.getKey().split("_");
//								LogHelper.Log("handleRequestMerchant.. ###DEBUG: current item in stock: " + Misc.GetItemName(Integer.parseInt(sa[0]), Integer.parseInt(sa[1])) + ":" + item.getValue());
								if (list_silo.size() < size_list) {
									list_silo.put(item.getKey(), item.getValue());
								} else {
									String min_key = Misc.Min(list_silo);
									int min_value = list_silo.get(min_key);
									if (item.getValue() > min_value) {
										list_silo.remove(min_key);
										list_silo.put(item.getKey(), item.getValue());
									}
								}
								
								// debug
								StringBuilder sb = new StringBuilder();
								for (Entry<String, Integer> item_in_list_silo : list_silo.entrySet()) {
									String[] sa1 = item_in_list_silo.getKey().split("_");
									if (sb.length() == 0) {
										sb.append(Misc.GetItemName(Integer.parseInt(sa1[0]), Integer.parseInt(sa1[1]))).append(':').append(item_in_list_silo.getValue());
									} else {
										sb.append('\t').append(Misc.GetItemName(Integer.parseInt(sa1[0]), Integer.parseInt(sa1[1]))).append(':').append(item_in_list_silo.getValue());
									}
								}
//								LogHelper.Log("handleRequestMerchant.. ###DEBUG: item_in_list_silo = " + sb.toString());
							}

							HashMap<String, Integer> list_barn = new HashMap();
							for (Entry<String,Integer> item: GetStock(DatabaseID.STOCK_BARN).getItems().entrySet()) {
								// debug
								String[] sa = item.getKey().split("_");
//								LogHelper.Log("handleRequestMerchant.. ###DEBUG: current item in stock: " + Misc.GetItemName(Integer.parseInt(sa[0]), Integer.parseInt(sa[1])) + ":" + item.getValue());
								if (list_barn.size() < size_list) {
									list_barn.put(item.getKey(), item.getValue());
								} else {
									String min_key = Misc.Min(list_barn);
									int min_value = list_barn.get(min_key);
									if (item.getValue() > min_value) {
										list_barn.remove(min_key);
										list_barn.put(item.getKey(), item.getValue());
									}
								}
								
								// debug
								StringBuilder sb = new StringBuilder();
								for (Entry<String, Integer> item_in_list_barn : list_barn.entrySet()) {
									String[] sa1 = item_in_list_barn.getKey().split("_");
									if (sb.length() == 0) {
										sb.append(Misc.GetItemName(Integer.parseInt(sa1[0]), Integer.parseInt(sa1[1]))).append(':').append(item_in_list_barn.getValue());
									} else {
										sb.append('\t').append(Misc.GetItemName(Integer.parseInt(sa1[0]), Integer.parseInt(sa1[1]))).append(':').append(item_in_list_barn.getValue());
									}
								}
//								LogHelper.Log("handleRequestMerchant.. ###DEBUG: item_in_list_barn = " + sb.toString());
							}

							HashMap<String, Integer> list_sum = new HashMap();
							for (Entry<String, Integer> item : list_silo.entrySet()) {
								list_sum.put(item.getKey(), item.getValue());
							}
							for (Entry<String, Integer> item : list_barn.entrySet()) {
								list_sum.put(item.getKey(), item.getValue());
							}

							StringBuilder log_sum = new StringBuilder();
							for (Entry<String,Integer> item: list_sum.entrySet())
							{
								String[] tmpString = item.getKey().split("_");
								log_sum.append('\t').append(Misc.GetItemName(Integer.parseInt(tmpString[0]), Integer.parseInt(tmpString[1])));
								log_sum.append(":").append(item.getValue());
							}
//							LogHelper.Log("handleRequestMerchant.. list sum: " + log_sum.toString());
							
							// create a list of unlocked plants, bugs, products
							ArrayList<String> unlocked_list = new ArrayList<String>();
							ArrayList<String> plant	= Misc.getItemsUnlock(userInfo.getLevel(), DatabaseID.USER_SEED_ID_UNLOCK);
							for (String s : plant) {
								unlocked_list.add(DatabaseID.IT_PLANT + "_" + s);

								int bug_id = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_SEED][Integer.parseInt(s)][DatabaseID.SEED_BUG_ID]);
								if (!unlocked_list.contains(DatabaseID.IT_BUG + "_" + bug_id)) {
									unlocked_list.add(DatabaseID.IT_BUG + "_" + bug_id);
								}
							}
							ArrayList<String> product	= Misc.getItemsUnlock(userInfo.getLevel(), DatabaseID.USER_PROD_ID_UNLOCK);
							for (String s : product) {
								int item_id = Integer.parseInt(s);
								if (item_id == DatabaseID.PRODUCT_ID_BORUA		|| 
									item_id == DatabaseID.PRODUCT_ID_DOMDOM		|| 
									item_id == DatabaseID.PRODUCT_ID_OCSEN		|| 
									item_id == DatabaseID.PRODUCT_ID_CHUONCHUON || 
									item_id == DatabaseID.PRODUCT_ID_BUOM		|| 
									item_id == DatabaseID.PRODUCT_ID_ONG) {
									continue;
								} else {
									unlocked_list.add(DatabaseID.IT_PRODUCT + "_" + s);
								}
							}
							unlocked_list.add(DatabaseID.IT_BUG + "_" + 3); // chuon chuon
							unlocked_list.add(DatabaseID.IT_BUG + "_" + 4); // buom
							unlocked_list.add(DatabaseID.IT_BUG + "_" + 5); // ong
							
							StringBuilder log_unlocked = new StringBuilder();
							for (String s : unlocked_list)
							{
								String[] sa = s.split("_");
								log_unlocked.append('\t').append(Misc.GetItemName(Integer.parseInt(sa[0]), Integer.parseInt(sa[1])));
							}
//							LogHelper.Log("handleRequestMerchant.. list unlocked: " + log_unlocked.toString());
							
							// choose randomly in the unlocked list
							String random_item = unlocked_list.get(Misc.RANDOM_RANGE(0, unlocked_list.size() - 1));
							String[] sa = random_item.split("_");
							req_item_type = Integer.parseInt(sa[0]);
							req_item_id = Integer.parseInt(sa[1]);
							
							if (list_sum.containsKey(random_item)) {
								req_item_num = (int)((Misc.RANDOM_DOUBLE_RANGE(min_percent, max_percent) / 100) * list_sum.get(random_item));
								if (req_item_num == 0) {
									req_item_num = 1;
								}
							} else {
								switch (req_item_type) {
									case DatabaseID.IT_PLANT:
										req_item_num = Misc.RANDOM_RANGE(1, 20);
										break;
									case DatabaseID.IT_BUG:
										req_item_num = Misc.RANDOM_RANGE(1, 5);
										break;
									case DatabaseID.IT_PRODUCT:
										req_item_num = Misc.RANDOM_RANGE(1, 10);
										break;
								}
							}

							/*
							if (list_sum.size() > 0) {
								// choose randomly in the list
								int r = Misc.RANDOM_RANGE(0, list_sum.size() - 1);
								int e = 0;
								for (Entry<String, Integer> item : list_sum.entrySet()) {
									if (e == r) {
										String[] aos = item.getKey().split("_");
										req_item_type = Integer.parseInt(aos[0]);
										req_item_id = Integer.parseInt(aos[1]);

										// determine how many item will be requested
										req_item_num = (int)((Misc.RANDOM_DOUBLE_RANGE(min_percent, max_percent) / 100) * item.getValue());
										if (req_item_num == 0) {
											req_item_num = 1;
										}

										break;
									} else {
										e++;
									}
								}
							} else {
								// list is empty, get some randoms item
								int r = Misc.RANDOM_RANGE(0, 2);
								if (r == 0) {
									req_item_type = DatabaseID.IT_PLANT;
									req_item_num = Misc.RANDOM_RANGE(1, 20);
								} else if (r == 1) {
									req_item_type = DatabaseID.IT_BUG;
									req_item_num = Misc.RANDOM_RANGE(1, 5);
								} else {
									req_item_type = DatabaseID.IT_PRODUCT;
									req_item_num = Misc.RANDOM_RANGE(1, 10);
								}

								switch (req_item_type) {
									case DatabaseID.IT_PLANT:
										req_item_id = Misc.RANDOM_RANGE(0, 1);
										break;
									case DatabaseID.IT_BUG:
									case DatabaseID.IT_PRODUCT:
										req_item_id = 0;
										break;
								}
							}
							*/

							// check request num again
							int max_request_num = 0;
							switch (req_item_type) {
								case DatabaseID.IT_PLANT:
									max_request_num = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_NPC_MERCHANT][GetUserInfo().getLevel()][DatabaseID.MERCHANT_MAX_REQUEST_NUM_STOCK_SILO]);
									break;
								case DatabaseID.IT_BUG:
								case DatabaseID.IT_PRODUCT:
									max_request_num = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_NPC_MERCHANT][GetUserInfo().getLevel()][DatabaseID.MERCHANT_MAX_REQUEST_NUM_STOCK_BARN]);
									break;
							}

							if (req_item_num > max_request_num) {
								req_item_num = max_request_num;
							}

							// determine price
							long basic_price = 0;
							double ratio = 0.0;
							switch (req_item_type) {
								case DatabaseID.IT_PLANT:
									basic_price = Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_SEED][req_item_id][DatabaseID.SEED_NPC_BUY_PRICE]);
									ratio = (double)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_NPC_MERCHANT][GetUserInfo().getLevel()][DatabaseID.MERCHANT_PRICE_RATIO_STOCK_SILO]);
									break;
								case DatabaseID.IT_BUG:
									basic_price = Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_PEST][req_item_id][DatabaseID.PEST_NPC_BUY_PRICE]);
									ratio = (double)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_NPC_MERCHANT][GetUserInfo().getLevel()][DatabaseID.MERCHANT_PRICE_RATIO_STOCK_BARN]);
									break;
								case DatabaseID.IT_PRODUCT:
									basic_price = Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_PRODUCT][req_item_id][DatabaseID.PRODUCT_NPC_BUY_PRICE]);
									ratio = (double)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_NPC_MERCHANT][GetUserInfo().getLevel()][DatabaseID.MERCHANT_PRICE_RATIO_STOCK_BARN]);
									break;
							}

							req_price = (int)((basic_price * (ratio / 100))) * req_item_num;
							if (req_price == 0) {
								req_price = 1;
							}
						}
							break;
					}

//					LogHelper.Log("handleRequestMerchant.. request item: " + Misc.GetItemName(req_item_type, req_item_id));
//					LogHelper.Log("handleRequestMerchant.. request num: " + req_item_num);
//					LogHelper.Log("handleRequestMerchant.. request price: " + req_price);

					delay_time = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_NPC_MERCHANT][GetUserInfo().getLevel()][DatabaseID.MERCHANT_APPEAR_TIME]);
//					LogHelper.Log("handleRequestMerchant.. delay time = " + delay_time);

					if (_use_event_new_year_2015)
					{
						req_item_type = DatabaseID.IT_DECOR;
						req_item_id = Misc.RANDOM_RANGE(17, 22);
						req_item_num = Misc.RANDOM_RANGE(2, 3);
						switch (req_item_id)
						{
							case 17:
								req_price = req_item_num * 1000;
								break;
							case 18:
								req_price = req_item_num * 2000;
								break;
							case 19:
								req_price = req_item_num * 3000;
								break;
							case 20:
								req_price = req_item_num * 5000;
								break;
							case 21:
								req_price = req_item_num * 2000;
								break;
							case 22:
								req_price = req_item_num * 3000;
								break;
							default:
								req_price = req_item_num * 4000;
								break;
						}
						
						LogHelper.LogHappy("NPC Request := " + req_item_type + ", " + req_item_id + ", " + req_item_num + ", " + req_price);
					}
					merchant_mgr.SetMerchantDetail(merchant_mgr.GetLastMerchant().GetMerchantID(), req_item_type, req_item_id, req_item_num, DatabaseID.IT_MONEY, DatabaseID.GOLD_ID, req_price, Misc.SECONDS() + delay_time);

					retry++;
				}

				merchant_mgr.SaveDataToDatabase(KeyID.KEY_MERCHANT);
			}
		} catch (Exception e) {
			LogHelper.LogException("handleRequestMerchant", e);
			requestError();
			return;
		}
		
		StringBuilder sb = new StringBuilder();
		for (Merchant m : merchant_mgr.GetMerchantList()) {
			if (sb.length() == 0) {
				sb.append(m.GetInfo());
			} else {
				sb.append(';').append(m.GetInfo());
			}
		}
//		LogHelper.Log("handleRequestMerchant.. merchant details: " + sb.toString());
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addString(KeyID.KEY_MERCHANT, sb.toString());
		try 
		{
			_client.WriteZip(response.toByteArray());
//			LogHelper.Log("handleRequestMerchant.. response done!");
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("handleRequestMerchant", ex);
		}
	}
	
	private void handleSetStateMerchant(FBEncrypt encrypt) {
		int merchant_id = encrypt.getInt(KeyID.KEY_MERCHANT_ID);
//		LogHelper.Log("handleSetStateMerchant.. merchant id: " + merchant_id);
		boolean result = false;
		for (Merchant m : merchant_mgr.GetMerchantList()) {
//			LogHelper.Log("handleSetStateMerchant.. m id:" + m.GetMerchantID());
			if (m.GetMerchantID() == merchant_id) {
				m.SetState(true);
				merchant_mgr.SaveDataToDatabase(KeyID.KEY_MERCHANT);
//				LogHelper.Log("handleSetStateMerchant.. done!");
				result = true;
				break;
			}
		}
		
		if (!result) {
			LogHelper.Log("handleSetStateMerchant.. err!");
			requestError();
		} else {
			StringBuilder sb = new StringBuilder();
			for (Merchant m : merchant_mgr.GetMerchantList()) {
				if (sb.length() == 0) {
					sb.append(m.GetInfo());
				} else {
					sb.append(';').append(m.GetInfo());
				}
			}
//			LogHelper.Log("handleSetStateMerchant.. merchant details: " + sb.toString());
			
			FBEncrypt response = new FBEncrypt();
			response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
			response.addString(KeyID.KEY_MERCHANT, sb.toString());
			try 
			{
				_client.WriteZip(response.toByteArray());
//				LogHelper.Log("handleSetStateMerchant.. response done!");
			} 
			catch (Exception ex) 
			{
				LogHelper.LogException("handleSetStateMerchant", ex);
			}
		}
	}
	
	private boolean QuickBuyItemsWithDiamond(int type, int id, int num, int command_id) {
		// determine stock type
		int stock_id = -1;
		switch (type) {
			case DatabaseID.IT_PLANT:
				stock_id = DatabaseID.STOCK_SILO;
				break;
			case DatabaseID.IT_MATERIAL:
			case DatabaseID.IT_POT:
			case DatabaseID.IT_DECOR:
				stock_id = DatabaseID.STOCK_WAREHOUSE;
				break;
			case DatabaseID.IT_PRODUCT:
			case DatabaseID.IT_BUG:
				stock_id = DatabaseID.STOCK_BARN;
				break;
			default:
				LogHelper.Log("QuickBuyItemsWithDiamond.. invalid item type");
				return false;
		}
		
		// get price
		int item_price = -1;
		int total_price = -1;
		switch (type) {
			case DatabaseID.IT_MATERIAL:
				item_price = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_MATERIAL][id][DatabaseID.MATERIAL_DIAMOND_BUY]);
				break;
			case DatabaseID.IT_BUG:
				item_price = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_PEST][id][DatabaseID.PEST_DIAMOND_BUY]);
				break;
			case DatabaseID.IT_PRODUCT:
				item_price = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_PRODUCT][id][DatabaseID.PRODUCT_DIAMOND_BUY]);
				break;
			case DatabaseID.IT_PLANT:
				item_price = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_SEED][id][DatabaseID.SEED_DIAMOND_BUY]);
				break;
			case DatabaseID.IT_DECOR:
				return false;
//				if (_use_event_new_year_2015) {
//					item_price = 1;
//				} else {
//					return false;
//				}
//				break;
			default:
				LogHelper.Log("QuickBuyItemsWithDiamond.. invalid item type.");
				return false;
		}

		// get total price
		total_price = item_price * num;
		if (total_price <= 0) {
			LogHelper.Log("QuickBuyItemsWithDiamond.. err! the total price should be > 0");
			return false;
		}

		// check if user has enough diamond
		if (total_price > money_mgr.GetRealMoney() + money_mgr.GetBonusMoney()) {
			LogHelper.Log("QuickBuyItemsWithDiamond.. not enough diamond");
			return false;
		}

		// reduce diamond
		UseMoneyResult use_money_result =	money_mgr.UseRealMoneyAndBonusMoney(total_price,				// log
											command_id,													//  2. hanh dong cua gamer
											userInfo.getName(),												//  3. ten tai khoan
											userInfo.getLevel(),											//  7. level cua gamer
											_ip,															//  9. ip login v4 cua gamer
											type,															// 10. id cua loai item
											id,																// 11. id cua item
											"00",															// 12. ten item
											item_price,														// 13. gia game coin cua item
											num);															// 14. so luong vat pham

		if (use_money_result._code == UseMoneyResult.CODE.SUCCESS) {
			if (GetStock(stock_id).addGift(type, id, num, command_id)) {
				LogHelper.Log("QuickBuyItemsWithDiamond.. add item to stock " + type + ":" + id + ": OK!");
				SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + stock_id, GetStock(stock_id).getDataToDatabase());
				return true;
			} else {
				LogHelper.Log("QuickBuyItemsWithDiamond.. add item to stock " + type + ":" + id + ": Fail! Should refund money to user");
			}
		} else {
			LogHelper.Log("QuickBuyItemsWithDiamond.. reduce user money fail");
		}
		
		return false;
	}
	
	private void handleRequestFeedInfo(FBEncrypt encrypt)
	{		
		String feed_key = encrypt.getString(KeyID.KEY_FEED);
		String feed_db = feed_key;
		
//		LogHelper.Log("handleRequestFeedInfo.. feed_key = " + feed_key);
		
		if (feed_key.equals(""))
		{
			LogHelper.Log("handleRequestFeedInfo.. err! invalid feed_key.");
			requestError();
			return;
		}
		else
		{
			try
			{
				String[] params = feed_key.split("_");
				
				if (params[0].equals(KeyID.FEED_TYPE_LEVEL))
				{
					if (params[1].equals(KeyID.FEED_ACTION_LEVEL_UP))
					{
						/*
						int user_level = Integer.parseInt(params[2]);
						
						if (user_level > 32)
						{
							user_level = Misc.RANDOM_RANGE(8, 32);				// follow database (feed info sheet)
							feed_db = params[0] + "_" + params[1] + "_" + user_level;
						}
						*/
					}
					else if (params[1].equals(KeyID.FEED_ACTION_OVERTAKE_FRIEND))
					{
						feed_db = params[0] + "_" + params[1] + "_" + 0;		// vuot level ban be
					}
				}
				else if (params[0].equals(KeyID.FEED_TYPE_POT))
				{
					// if (params[1].equals(KeyID.FEED_ACTION_UPGRADE_BLESSING))	// nang cap chau vuot cap
					// {
						// int rnd = Misc.RANDOM_RANGE(0, 4);						// follow database (feed info sheet)
						// feed_db = params[0] + "_" + params[1] + "_" + rnd;
					// }
					// else
					{
						// nhung action khac
					}
				}
				else if (params[0].equals(KeyID.FEED_TYPE_MACHINE))
				{
					if (params[1].equals(KeyID.FEED_ACTION_UPGRADE))				// nang cap may
					{
						// int rnd = Misc.RANDOM_RANGE(0, 100);
						// if (rnd > 50)
						// {
							// int rnd_feed = Misc.RANDOM_RANGE(0, 4);					// follow database (feed info sheet)
							// feed_db = params[0] + "_" + params[1] + "_r_" + rnd_feed;	// lay feed ngau nhien
						// }
					}
					else if (params[1].equals(KeyID.FEED_ACTION_UNLOCK_MACHINE))	// mo may
					{
						feed_db = params[0] + "_" + params[1] + "_" + params[2] + "_0";
					}
					else
					{
						// nhung action khac
					}
				}
				else if (params[0].equals(KeyID.FEED_TYPE_FLOOR))
				{
					if (params[1].equals(KeyID.FEED_ACTION_OPEN_FLOOR))				// mo tang may moi
					{
						int rnd_feed = Misc.RANDOM_RANGE(0, 3);
						feed_db = params[0] + "_" + params[1] + "_r_" + rnd_feed;	// lay feed ngau nhien
					}
					else
					{
						// nhung action khac
					}
				}
			}
			catch (Exception e)
			{
				LogHelper.Log("handleRequestFeedInfo.. err! invalid feed_key.");
				LogHelper.LogException("handleRequestFeedInfo", e);
				requestError();
				return;
			}
		}
		
		
		
		boolean random_feed		= false;
		boolean found 			= false;
		String feed_title		= "";
		String feed_des			= "";
		String feed_link		= "";
		String feed_img_link	= "";
		String feed_caption		= "";
		
		for (int i = 0; i < Server.s_globalDB[DatabaseID.SHEET_FEED_INFO].length && !found; i++)
		{
			String key = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_FEED_INFO][i][DatabaseID.FEED_KEY]);
			
			if (feed_db.equals(key))
			{
				found = true;
				
				feed_title		= Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_FEED_INFO][i][DatabaseID.FEED_TITLE]);
				feed_des		= Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_FEED_INFO][i][DatabaseID.FEED_DESCRIPTION]);
				feed_link		= Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_FEED_INFO][i][DatabaseID.FEED_LINK]);
				feed_img_link	= Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_FEED_INFO][i][DatabaseID.FEED_IMG_LINK]);
				feed_caption	= Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_FEED_INFO][i][DatabaseID.FEED_CAPTION]);
				
//				LogHelper.Log("handleRequestFeedInfo.. feed_title = "	+ feed_title);
//				LogHelper.Log("handleRequestFeedInfo.. feed_des = "		+ feed_des);
//				LogHelper.Log("handleRequestFeedInfo.. feed_link = "	+ feed_link);
//				LogHelper.Log("handleRequestFeedInfo.. feed_img_link = " + feed_img_link);
//				LogHelper.Log("handleRequestFeedInfo.. feed_caption = " + feed_caption);
				
				
				String[] params = feed_key.split("_");
				
				if (params[0].equals(KeyID.FEED_TYPE_MACHINE))
				{
					if (params[1].equals(KeyID.FEED_ACTION_UPGRADE))				// nang cap may
					{
						int rnd = Misc.RANDOM_RANGE(0, 100);
						if (rnd > 50)
						{
							int rnd_index = Misc.RANDOM_RANGE(0, 4);
							
							random_feed = true;
							feed_db = params[0] + "_" + params[1] + "_r_" + rnd_index;
						}
					}
				}
				else if (params[0].equals(KeyID.FEED_TYPE_POT))
				{
					if (params[1].equals(KeyID.FEED_ACTION_UPGRADE_BLESSING))	// nang cap chau vuot cap
					{
						int rnd_index = Misc.RANDOM_RANGE(0, 4);					// follow database (feed info sheet)
						
						random_feed = true;
						feed_db = params[0] + "_" + params[1] + "_r_" + rnd_index;	// lay feed ngau nhien
					}
				}
				else if (params[0].equals(KeyID.FEED_TYPE_LEVEL))
				{
					if (params[1].equals(KeyID.FEED_ACTION_LEVEL_UP))
					{
						int user_level = Integer.parseInt(params[2]);
						
						if (user_level > 32)
						{
							user_level = Misc.RANDOM_RANGE(8, 32);				// follow database (feed info sheet)
							
							random_feed = true;
							feed_db = params[0] + "_" + params[1] + "_" + user_level;
						}
					}
				}
				
				break;
			}
		}
		
		if (!found)
		{
			LogHelper.Log("handleRequestFeedInfo.. could not found feed info!");
			requestError();
			return;
		}
		else
		{
			if (random_feed)
			{
				for (int i = 0; i < Server.s_globalDB[DatabaseID.SHEET_FEED_INFO].length; i++)
				{
					String key = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_FEED_INFO][i][DatabaseID.FEED_KEY]);
					
					if (feed_db.equals(key))
					{
						feed_title		= Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_FEED_INFO][i][DatabaseID.FEED_TITLE]);
						feed_des		= Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_FEED_INFO][i][DatabaseID.FEED_DESCRIPTION]);
						
						LogHelper.Log("---------------------------------------------------------------------------------------------"); 
						LogHelper.Log("handleRequestFeedInfo.. feed_title = "	+ feed_title);
						LogHelper.Log("handleRequestFeedInfo.. feed_des = "		+ feed_des);
						
						break;
					}
				}
			}
			
			/* Request token if neccesary*/
//			if (userInfo.GetFacebookLongLivedToken().equals("null") || System.currentTimeMillis() < userInfo.GetFacebooTokenkExpiredTime()) {
//				_return_id = ReturnCode.RESPONSE_REQUIRE_FACEBOOK_LOGIN;
//			}
			
			FBEncrypt response = new FBEncrypt();
			response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
			response.addString(KeyID.KEY_FEED_TITLE, feed_title);
			response.addString(KeyID.KEY_FEED_DESCRIPTION, feed_des);
			response.addString(KeyID.KEY_FEED_LINK, feed_link);
			response.addString(KeyID.KEY_FEED_IMG_LINK, feed_img_link);
			response.addString(KeyID.KEY_FEED_CAPTION, feed_caption);
			response.addString(KeyID.KEY_FEED, feed_key);

			try 
			{
				_client.WriteZip(response.toByteArray());
				LogHelper.Log("handleRequestFeedInfo.. response done!");
			} 
			catch (Exception ex) 
			{
				LogHelper.LogException("handleRequestFeedInfo", ex);
			}
		}
	}

	private void handleAcceptGCMRegID(FBEncrypt encrypt) {
		String reg_id = encrypt.getString(KeyID.KEY_GCM_ID);
		if (reg_id.length() == 0 || reg_id.equals("") || reg_id.equals("ERROR") || reg_id.equals("null")) {
			LogHelper.Log("handleAcceptGCMRegID.. err! invalid reg id.");
			requestError();
			return;
		}
		
//		LogHelper.Log("handleAcceptGCMRegID.. gcm id = " + reg_id);
		
		boolean result = false;
		if (_device_platform.equals("ANDROID")) {
			result = DBConnector.GetMembaseServer(_user_id).Set(_user_id + "_" + KeyID.KEY_GCM_ID + "_" + "android", reg_id);
			userInfo.setRegisteredGCM(0);
//			LogHelper.Log("handleAcceptGCMRegID.. gcm id [android]= " + reg_id);
		} else if (_device_platform.equals("iOS")) {
			result = DBConnector.GetMembaseServer(_user_id).Set(_user_id + "_" + KeyID.KEY_GCM_ID + "_" + "ios", reg_id);
			userInfo.setRegisteredGCM(1);
//			LogHelper.Log("handleAcceptGCMRegID.. gcm id [ios]= " + reg_id);
		}
		
		if (!result) {
			LogHelper.Log("handleAcceptGCMRegID.. err! cant write db.");
			_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
			requestError();
			return;
		}
		
		if (!_use_lazy_sync_user_info)
		{
			result = SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, GetUserInfo().getData(true));
			if (!result) {
				LogHelper.Log("handleAcceptGCMRegID.. err! save user info error."); 
				_return_id = ReturnCode.RESPONSE_SAVE_ERROR;
				requestError();
				return;
			}
		}
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		try 
		{
			_client.WriteZip(response.toByteArray());
			LogHelper.Log("handleAcceptGCMRegID.. response done!");
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("handleAcceptGCMRegID", ex);
		}
	}
	
	private void handleGetActiveRankingInfo() {
		if (SkyGarden._ranking_info.get("active") == null) {
			LogHelper.Log("handleGetActiveRankingInfo.. err! invalid ranking info");
			_return_id = ReturnCode.RESPONSE_EMPTY_RANKING_INFO;
			requestError();
			return;
		}
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_RANKING_INFO, SkyGarden._ranking_info.get("active").GetData());
		response.addLong(KeyID.KEY_RANKING_ACCUMULATION, GetRankingTarget().Get(SkyGarden._ranking_info.get("active").GetRankingCommand()));
		try 
		{
			_client.WriteZip(response.toByteArray());
			LogHelper.Log("handleGetActiveRankingInfo.. response done!");
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("handleGetActiveRankingInfo", ex);
		}
	}
	
	private void handleGetPreviousRankingInfo() {
		if (SkyGarden._ranking_info.get("previous") == null) {
			_return_id = ReturnCode.RESPONSE_EMPTY_RANKING_INFO;
			LogHelper.Log("handleGetPreviousRankingInfo.. err! invalid ranking info");
			requestError();
			return;
		}
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_RANKING_INFO, SkyGarden._ranking_info.get("previous").GetData());
		response.addBinary(KeyID.KEY_RANKING_FINAL_RESULT, SkyGarden._ranking_info.get("previous").GetResult(100));
		try 
		{
			_client.WriteZip(response.toByteArray());
			LogHelper.Log("handleGetPreviousRankingInfo.. response done!");
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("handleGetPreviousRankingInfo", ex);
		}
	}
	
	private void handleGetAllRankingInfo() 
	{
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		
		if (_update_status == DatabaseID.VERSION_HAS_NOT_UPDATE)
		{
			// previous
			if (SkyGarden._ranking_info.get("previous") != null) 
			{
				response.addBinary(KeyID.KEY_RANKING_INFO_PREVIOUS, SkyGarden._ranking_info.get("previous").GetData());
				response.addBinary(KeyID.KEY_RANKING_FINAL_RESULT, SkyGarden._ranking_info.get("previous").GetResult(3));
			}

			// active
			if (SkyGarden._ranking_info.get("active") != null)
			{
				response.addBinary(KeyID.KEY_RANKING_INFO_ACTIVE, SkyGarden._ranking_info.get("active").GetData());
				response.addLong(KeyID.KEY_RANKING_ACCUMULATION, GetRankingTarget().Get(SkyGarden._ranking_info.get("active").GetRankingCommand()));
				response.addBoolean(KeyID.KEY_RANKING_RECEIVED_BASIC_GIFT, GetRankingTarget().IsReceivedGift(SkyGarden._ranking_info.get("active").GetID()));
			}
			else
			{
				if (SkyGarden._ranking_info.get("previous") != null)
				{
					response.addBinary(KeyID.KEY_RANKING_INFO_ACTIVE, SkyGarden._ranking_info.get("previous").GetData());
					response.addLong(KeyID.KEY_RANKING_ACCUMULATION, GetRankingTarget().Get(SkyGarden._ranking_info.get("previous").GetRankingCommand()));
					response.addBoolean(KeyID.KEY_RANKING_RECEIVED_BASIC_GIFT, GetRankingTarget().IsReceivedGift(SkyGarden._ranking_info.get("previous").GetID()));
				}
			}
		}
		
		try  
		{
			_client.WriteZip(response.toByteArray());
//			LogHelper.Log("handleGetAllRankingInfo.. response done!");
		}  
		catch (Exception ex)  
		{
			LogHelper.LogException("handleGetAllRankingInfo", ex);
		}
	}
	
	private void handleGetActiveRankingAccumulation() {
		if (SkyGarden._ranking_info.get("active") == null) {
			LogHelper.Log("handleGetActiveAccumulation.. err! invalid ranking info");
			_return_id = ReturnCode.RESPONSE_EMPTY_RANKING_INFO;
			requestError();
			return;
		}

		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addLong(KeyID.KEY_RANKING_ACCUMULATION, GetRankingTarget().Get(SkyGarden._ranking_info.get("active").GetRankingCommand()));
		try 
		{
			_client.WriteZip(response.toByteArray());
			LogHelper.Log("handleGetActiveAccumulation.. response done!");
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("handleGetActiveAccumulation", ex);
		}
	}
	
	private void handleGetActiveRankingResult() {
		if (SkyGarden._ranking_info.get("active") == null) {
			LogHelper.Log("handleGetActiveRankingResult.. err! invalid ranking info");
			_return_id = ReturnCode.RESPONSE_EMPTY_RANKING_INFO;
			requestError();
			return;
		}
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addLong(KeyID.KEY_RANKING_ACCUMULATION, GetRankingTarget().Get(SkyGarden._ranking_info.get("active").GetRankingCommand()));
		response.addBinary(KeyID.KEY_RANKING_FINAL_RESULT, SkyGarden._ranking_info.get("active").GetResult(100));
		
		try 
		{
			_client.WriteZip(response.toByteArray());
			LogHelper.Log("handleGetActiveRankingResult.. response done!");
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("handleGetActiveRankingResult", ex);
		}
	}
	
	private void handleGetRankingBasicGift() 
	{
		if (SkyGarden._ranking_info.get("active") == null) 
		{
			LogHelper.Log("handleGetActiveRankingResult.. err! invalid ranking info");
			_return_id = ReturnCode.RESPONSE_EMPTY_RANKING_INFO;
			requestError();
			return;
		}
		
		int current_ranking_command = SkyGarden._ranking_info.get("active").GetRankingCommand();
		int current_ranking_idx = SkyGarden._ranking_info.get("active").GetID();
		long current_basic_target = SkyGarden._ranking_info.get("active").GetBasicTarget();
		long user_current_accumulation = GetRankingTarget().Get(current_ranking_command);
		if (current_basic_target == -1) {
			LogHelper.Log("handleGetActiveRankingResult.. err! invalid ranking basic target");
			requestError();
			return;
		}
		
		if (GetRankingTarget().IsReceivedGift(current_ranking_idx)) {
			LogHelper.Log("handleGetActiveRankingResult.. err! already recieved this gift");
			requestError();
			return;
		}
		
		if (user_current_accumulation < current_basic_target) {
			LogHelper.Log("handleGetActiveRankingResult.. err! not enough requirement to received gift, user has = " + user_current_accumulation + ", target = " + current_basic_target);
			requestError();
			return;
		}
		
		String gift = SkyGarden._ranking_info.get("active").GetGift(101);
		if (gift.length() == 0 && gift.equals("")) {
			LogHelper.Log("handleGetActiveRankingResult.. err! invalid gift info");
			requestError();
			return;
		}
		
		// set received gift
		GetRankingTarget().SetReceivedGift(current_ranking_idx);
		SET_DB_VALUE_BINARY(KeyID.KEY_USER_RANKING_TARGET, GetRankingTarget().GetData());
		
		
		// add gift
		GetGiftManager().LoadFromDatabase(KeyID.KEY_GIFT);
		GetGiftManager().AddGiftBox(Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][24][DatabaseID.GIFT_INFO_NAME]),
							Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][24][DatabaseID.GIFT_INFO_DESCRIPTION]),
							gift);	
		GetGiftManager().SaveDataToDatabase(KeyID.KEY_GIFT);
		MoveGiftBoxToMailBox();
		
		// response
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		if (GetGiftManager()._gifts.size() > 0)
		{
			response.addInt(KeyID.KEY_GIFT_ID, GetGiftManager()._gifts.getLast().GetId());
			response.addString(KeyID.KEY_GIFT_NAME, GetGiftManager()._gifts.getLast().GetName());
			response.addString(KeyID.KEY_GIFT_DESCRIPTION, GetGiftManager()._gifts.getLast().GetDescription());
			response.addString(KeyID.KEY_GIFT_ITEM_LIST, GetGiftManager()._gifts.getLast().GetItemList());
		}
		response.addBoolean(KeyID.KEY_NEW_MAIL, true);

		try {
			_client.WriteZip(response.toByteArray());
		}  catch (Exception ex)  {
			LogHelper.LogException("handleGetActiveRankingResult", ex);
		}
	}
	
	private void handleUnlockAirship() 
	{
		if (!_use_airship) return;

		int next_level = GetAirship().GetId() + 1;
		int unlock_time = GetAirship().GetUnlockTime();
		int required_level = GetAirship().GetRequiredLevel(next_level);
		String required_items = GetAirship().GetRequiredItems(next_level);
		
		if (GetAirship().GetStatus() != DatabaseID.AIRSHIP_LOCKED) {
			LogHelper.Log("handleUnlockAirship.. err! airship is already unlocked, unlock time = " + unlock_time + ", now is = " + Misc.SECONDS());
			requestError();
			return;
		}
		
		if (GetUserInfo().getLevel() < required_level) {
			LogHelper.Log("handleUnlockAirship.. err! not enough level, required level = " + required_level +", current level = " + GetUserInfo().getLevel());
			requestError();
			return;
		}
		
		boolean has_enough_items = true;
		String[] sa = required_items.split(":");
		for (int i = 0; i <= sa.length - 2; i += 2) {
			int type	= Integer.parseInt(sa[i]);
			int id		= Integer.parseInt(sa[i+1]);
			int num		= Integer.parseInt(sa[i+2]);
			
			switch (type)
			{
				case DatabaseID.IT_MATERIAL:
					if (GetStock(DatabaseID.STOCK_WAREHOUSE).getProductNum(type, id) < num) {
						has_enough_items = false;
						LogHelper.Log("handleUnlockAirship.. err! not enough items " + type + ":" + id);
					}
					break;

				case DatabaseID.IT_MONEY:
					if (id == DatabaseID.DIAMOND_ID)
					{
						if ((money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()) < num) {
							has_enough_items = false;
							LogHelper.Log("handleUnlockAirship.. err! not enough diamond, require = " + num + ", current diamond = " + (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
						}
					}
					else if (id == DatabaseID.GOLD_ID)
					{
						if (GetUserInfo().getGold() < num) {
							has_enough_items = false;
							LogHelper.Log("handleUnlockAirship.. err! not enough gold, required = " + num + ", current gold = " + GetUserInfo().getGold());
						}
					}
					else if (id == DatabaseID.REPUTATION_ID)
					{
						if (GetUserInfo().getReputation()< num) {
							has_enough_items = false;
							LogHelper.Log("handleUnlockAirship.. err! not enough reputation, required = " + num + ", current reputation = " + GetUserInfo().getGold());
						}
					}
					break;

				default:
					LogHelper.Log("handleUnlockAirship.. err! invalid requirements.");
					has_enough_items = false;
					break;
			}
			if (!has_enough_items) {
				LogHelper.Log("handleUnlockAirship.. err! not enough quired items.");
				requestError();
				return;
			}
		}
		
		// everything is ok, start reduce item
		boolean result = true;
		for (int i = 0; i <= sa.length - 2; i += 2) 
		{
			int type	= Integer.parseInt(sa[i]);
			int id		= Integer.parseInt(sa[i+1]);
			int num		= Integer.parseInt(sa[i+2]);
			
			switch (type)
			{
				case DatabaseID.IT_MATERIAL:
					int new_value = GetStock(DatabaseID.STOCK_BARN).getProductNum(type, id) - num;
					GetStock(DatabaseID.STOCK_WAREHOUSE).updateValue(_command_id, type, id, new_value);
					break;

				case DatabaseID.IT_MONEY:
					if (id == DatabaseID.DIAMOND_ID) 
					{
						UseMoneyResult usemoney = money_mgr.UseRealMoneyAndBonusMoney(num,			// log
													_command_id,									//  2. hanh dong cua gamer
													userInfo.getName(),								//  3. ten tai khoan
													userInfo.getLevel(),							//  7. level cua gamer
													_ip,											//  9. ip login v4 cua gamer
													-1,												// 10. id cua loai item
													-1,												// 11. id cua item
													"",												// 12. ten item
													num,											// 13. gia game coin cua item
													1);												// 14. so luong vat pham
						if (usemoney._code != UseMoneyResult.CODE.SUCCESS) 
						{
							result = false;
						}
					} 
					else if (id == DatabaseID.GOLD_ID) 
					{
						long new_gold = GetUserInfo().getGold() - num;
						GetUserInfo().setGold(new_gold, 	// log
										_command_id,					//  2. hanh dong cua gamer
										-1,								// 11. id cua loai item
										-1,								// 12. id cua item
										"",								// 13. ten item
										0);
					} 
					else if (id == DatabaseID.REPUTATION_ID) 
					{
						long new_reputation = GetUserInfo().getReputation() - num;
						GetUserInfo().setReputation(new_reputation, 	// log
										_command_id,					//  2. hanh dong cua gamer
										-1,								// 11. id cua loai item
										-1,								// 12. id cua item
										"",								// 13. ten item
										0);
					}
					break;

				default:
					LogHelper.Log("handleUnlockAirship.. err! invalid requirements.");
					result = false;
					break;
			}
		}
		
		if (!result) 
		{
			LogHelper.Log("handleUnlockAirship.. err! reduce items failed");
			requestError();
			return;
		}
		
		GetAirship().SetStatus(DatabaseID.AIRSHIP_PENDING);
		
		// set airship
		GetAirship().SetUnlockTime(Misc.SECONDS() + GetAirship().GetUnlockDuration(next_level));
		GetAirship().SetId(next_level);
		
		// set landing & depart time
		GetAirship().SetLastLandingTime(Misc.SECONDS());
		GetAirship().SetNextLandingTime(GetAirship().GetUnlockTime());
		
		// generate first requirements
		GetAirship().GenerateRequest(GetUserInfo().getLevel(), ComboManager().GetAirshipBonusExp(), ComboManager().GetAirshipBonusGold());
		GetAirship().SetDepartTime(GetAirship().GetNextLandingTime() + GetAirship().GetStayDuration(GetAirship().GetId()));
		
		// save
		if (!_use_lazy_sync_user_info) {
			SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, GetUserInfo().getData(true));
		}
		SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, GetStock(DatabaseID.STOCK_WAREHOUSE).getDataToDatabase());
		GetAirship().Save();
		
		SetNotifyStatus(_user_id, GetNotifyIndex(DatabaseID.NOTIFY_TYPE_AIRSHIP, -1), false);
		
		// response
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, GetStock(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
		response.addBinary(KeyID.KEY_AIRSHIP, GetAirship().GetDataToClient());
		try {
			_client.WriteZip(response.toByteArray());
		}  catch (Exception ex)  {
			LogHelper.LogException("handleUnlockAirship", ex);
		}
	}
	
	private void handleSkipUnlockTimeAirship() 
	{
		if (!_use_airship) return;
		
		if (GetAirship().GetStatus() != DatabaseID.AIRSHIP_PENDING) {
			LogHelper.Log("handleSkipUnlockTimeAirship.. err! airship is not pending.");
			requestError();
			return;
		}
		
		int diamond = GetAirship().GetUnlockDiamond();
		if (diamond <= 0) {
			LogHelper.Log("handleSkipUnlockTimeAirship.. err! invalid diamond");
			requestError();
			return;
		}
		
		if ((money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()) < diamond) {
			LogHelper.Log("handleSkipUnlockTimeAirship.. err! not enough diamond");
			_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_DIAMOND;
			requestError();
			return;
		}
		
		UseMoneyResult usemoney = money_mgr.UseRealMoneyAndBonusMoney(diamond,				// log
													_command_id,							//  2. hanh dong cua gamer
													userInfo.getName(),						//  3. ten tai khoan
													userInfo.getLevel(),					//  7. level cua gamer
													_ip,									//  9. ip login v4 cua gamer
													-1,										// 10. id cua loai item
													-1,										// 11. id cua item
													"",										// 12. ten item
													diamond,								// 13. gia game coin cua item
													1);										// 14. so luong vat pham
		
		if (usemoney._code == UseMoneyResult.CODE.SUCCESS) 
		{
			GetAirship().SetStatus(DatabaseID.AIRSHIP_LANDING);
			GetAirship().SetUnlockTime(0);
			GetAirship().SetLastLandingTime(Misc.SECONDS() - 5);
			GetAirship().SetDepartTime(Misc.SECONDS() + GetAirship().GetStayDuration(GetAirship().GetId()));
			GetAirship().SetNextLandingTime(GetAirship().GetDepartTime() + GetAirship().GetLeaveDuration(GetAirship().GetId()));
			GetAirship().Save();
		} 
		else 
		{
			LogHelper.Log("handleSkipUnlockTimeAirship.. err! can not reduce diamond.");
			requestError();
			return;
		}
		
		// response
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		response.addLong(KeyID.KEY_DIAMOND_USED, diamond);
		response.addBinary(KeyID.KEY_AIRSHIP, GetAirship().GetDataToClient());
		try {
			_client.WriteZip(response.toByteArray());
		}  catch (Exception ex)  {
			LogHelper.LogException("handleSkipUnlockTimeAirship", ex);
		}
	}
	
	private void handleSkipDepartTimeAirship() 
	{
		if (!_use_airship) return;
		
		// check current status
		if (GetAirship().GetStatus() != DatabaseID.AIRSHIP_DEPARTING) {
			LogHelper.Log("handleSkipDepartTimeAirship.. err! airship is not departing");
			requestError();
			return;
		}
		
		if (GetAirship().GetCurrentAirshipNum() == GetAirship().GetMaxAirshipPerDay(userInfo.getLevel()))
		{
			LogHelper.Log("handleSkipDepartTimeAirship.. err! reach max airship per day");
			requestError();
			return;
		}
		
		// get diamond need
		int diamond = GetAirship().GetDiamondPriceSkipDepartTime();
		LogHelper.Log("handleSkipDepartTimeAirship.. diamond need = " + diamond);
		
		// check diamond
		if (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney() < diamond) {
			LogHelper.Log("handleSkipDepartTimeAirship.. err! not enough diamond");
			_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_DIAMOND;
			requestError();
			return;
		}
		
		// reduce diamond
		UseMoneyResult usemoney = money_mgr.UseRealMoneyAndBonusMoney(diamond,				// log
													_command_id,							//  2. hanh dong cua gamer
													userInfo.getName(),						//  3. ten tai khoan
													userInfo.getLevel(),					//  7. level cua gamer
													_ip,									//  9. ip login v4 cua gamer
													-1,										// 10. id cua loai item
													-1,										// 11. id cua item
													"",										// 12. ten item
													diamond,								// 13. gia game coin cua item
													1);										// 14. so luong vat pham
		
		// set last landing time, status
		if (usemoney._code == UseMoneyResult.CODE.SUCCESS) 
		{
			GetAirship().SetStatus(DatabaseID.AIRSHIP_LANDING);
			GetAirship().SetLastLandingTime(Misc.SECONDS() - 5);
			GetAirship().SetDepartTime(Misc.SECONDS() + GetAirship().GetStayDuration(GetAirship().GetId()));
			GetAirship().Save();
			LogHelper.Log("handleSkipDepartTimeAirship.. OK.");
		} 
		else 
		{
			LogHelper.Log("handleSkipDepartTimeAirship.. err! can not reduce diamond.");
			requestError();
			return;
		}
		
		// response
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		response.addLong(KeyID.KEY_DIAMOND_USED, diamond);
		response.addBinary(KeyID.KEY_AIRSHIP, GetAirship().GetDataToClient());
		try 
		{
			_client.WriteZip(response.toByteArray());
		}  catch (Exception ex)  
		{
			LogHelper.LogException("handleSkipDepartTimeAirship", ex);
		}
	}
	
	private void handleCompleteAirship() 
	{
		if (!_use_airship) return;
		
		// check current status
		if (GetAirship().Load() && GetAirship().GetStatus() == DatabaseID.AIRSHIP_FULL) 
		{
			// lock
			if (!base.Add(_user_id + "_" + KeyID.KEY_AIRSHIP_LOCKER, 1, DatabaseID.AIRSHIP_LOCK_TIME))
			{
				_return_id = ReturnCode.RESPONSE_PS_DATA_IS_LOCKED;
				requestError();
				return;
			}
			
			// give prize
			long new_gold = GetUserInfo().getGold() + GetAirship().GetGold();
			GetUserInfo().setGold(new_gold, _command_id, -1, -1, "", 0);

			long nex_exp = GetUserInfo().getExp() + GetAirship().GetExp();
			GetUserInfo().setExp(nex_exp, _command_id, -1, -1, "", 0);

			long new_rep = GetUserInfo().getReputation() + GetAirship().GetReputation();
			GetUserInfo().setReputation(new_rep, _command_id, -1, -1, "", 0);

			GetAirship().GetCargoList().clear();
			GetAirship().GenerateRequest(GetUserInfo().getLevel(), ComboManager().GetAirshipBonusExp(), ComboManager().GetAirshipBonusGold());
			GetAirship().SetAirshipNum(GetAirship().GetCurrentAirshipNum() + 1);
			GetAirship().SetLastLandingTime(Misc.SECONDS() - 20);
			GetAirship().SetNextLandingTime(Misc.SECONDS() + GetAirship().GetLeaveDuration(GetAirship().GetId()));
			GetAirship().SetDepartTime(GetAirship().GetNextLandingTime() + GetAirship().GetStayDuration(GetAirship().GetId()));
			GetAirship().SetStatus(DatabaseID.AIRSHIP_DEPARTING);
			GetAirship().Save();
			
			SetNotifyStatus(_user_id, GetNotifyIndex(DatabaseID.NOTIFY_TYPE_AIRSHIP, -1), false);
			
			if (!_use_lazy_sync_user_info) 
			{
				SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
			}

			LogHelper.Log("handleCompleteAirship.. OK.");
			

			if (_use_event_mid_autumn_festival)
			{
				SetEventScore(KeyID.KEY_EVENT_MID_AUTUMN_FESTIVAL, GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, DatabaseID.FEATURE_ID_AIRSHIP));
			}
			
			if (_use_event_20_11)
			{
				SetEventScore(KeyID.KEY_EVENT_20_11, GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, DatabaseID.FEATURE_ID_AIRSHIP));
			}
			
			if (_use_event_xmas_mini)
			{
				SetEventScore(KeyID.KEY_EVENT_XMAS_MINI, GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, DatabaseID.FEATURE_ID_AIRSHIP));
			}
			
			if (_use_event_xmas_tree)
			{
				stock_event.add(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_CANDLE, GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, DatabaseID.FEATURE_ID_AIRSHIP), _command_id);
				SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
				_event_item_num = GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, DatabaseID.FEATURE_ID_AIRSHIP);
			}
			
			if (_use_event_new_year_2015)
			{
				stock_event.add(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_BANH_CHUNG, GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, DatabaseID.FEATURE_ID_AIRSHIP), _command_id);
				SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
				_event_item_num = GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, DatabaseID.FEATURE_ID_AIRSHIP);
			}
			
			if (_use_event_8_3_2015)
			{
				stock_event.add(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_GLASS_ROSE, GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, DatabaseID.FEATURE_ID_AIRSHIP), _command_id);
				SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
				_event_item_num = GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, DatabaseID.FEATURE_ID_AIRSHIP);
			}
			
			if (_use_event_export)
			{
				SetEventScore(KeyID.KEY_EVENT_EXPORT, 10);
			}
			
			if (_use_event_halloween)
			{
				stock_event.addGift(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_HALLOWEEN_1, GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_HALLOWEEN_1, DatabaseID.FEATURE_ID_AIRSHIP));
				SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
			}
			
			if (_use_event_xmas_2014)
			{
				stock_event.addGift(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_XMAS_2014_2, GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_HALLOWEEN_1, DatabaseID.FEATURE_ID_AIRSHIP));
				SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
			}
			
			// check level up
			checkLevelUp();

			StringBuilder log = new StringBuilder();
			log.append(Misc.getCurrentDateTime());								//  1. thoi gian tieu tien
			log.append('\t').append(Misc.getActionName(_command_id));			//  2. hanh dong cua gamer
			log.append('\t').append(userInfo.getID());							//  3. id
			log.append('\t').append(userInfo.getID());							//  4. role id
			log.append('\t').append(userInfo.getName());						//  5. name
			log.append('\t').append(SkyGarden._server_id);											//  6. server id
			log.append('\t').append(userInfo.getLevel());						//  7. level
			LogHelper.Log(LogHelper.LogType.TRACKING_ACTION, log.toString());
		} 
		else 
		{
			LogHelper.Log("handleCompleteAirship.. err! airship is not full.");
		}
		
		base.Delete(_user_id + "_" + KeyID.KEY_AIRSHIP_LOCKER);
		
		if (user_level_up) checkAndUnlockItems();
		
		
		// response
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addBinary(KeyID.KEY_AIRSHIP, GetAirship().GetDataToClient());
		
		if (_use_event_mid_autumn_festival || _use_event_20_11 || _use_event_xmas_mini)
		{
			response.addString(GetEventKeyName(), GetEventItems());
		}
		
		if ((_use_event_halloween || _use_event_xmas_2014 || _use_event_xmas_tree || _use_event_new_year_2015 || _use_event_8_3_2015) && _use_stock_event)
		{
			response.addBinary(KeyID.KEY_STOCK_EVENT, stock_event.getDataToClient());
			response.addString(GetEventKeyName(), GetEventItems());
		}
		
		try 
		{	
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex)
		{
			LogHelper.LogException("handleCompleteAirship", ex);
		}
	}
	
	private void handleDisposeAirship() 
	{
		if (!_use_airship) return;
		
		GetAirship().Load();

		// check current status
		if (GetAirship().GetStatus() == DatabaseID.AIRSHIP_FULL) 
		{
			LogHelper.Log("handleDisposeAirship.. err! airship is already completed.");
			requestError();
			return;
		}
		
		// check if can dispose airship
		boolean can_dispose = true;
		for (Cargo c : GetAirship().GetCargoList()) 
		{
			if (c.isIsFinished()) 
			{
				can_dispose = false;
				break;
			}
		}
		
		if (can_dispose) 
		{
			// lock
			if (!base.Add(_user_id + "_" + KeyID.KEY_AIRSHIP_LOCKER, 1, DatabaseID.AIRSHIP_LOCK_TIME))
			{
				_return_id = ReturnCode.RESPONSE_PS_DATA_IS_LOCKED;
				requestError();
				return;
			}
			
			GetAirship().GetCargoList().clear();
			GetAirship().GenerateRequest(GetUserInfo().getLevel(), ComboManager().GetAirshipBonusExp(), ComboManager().GetAirshipBonusGold());
			GetAirship().SetAirshipNum(GetAirship().GetCurrentAirshipNum() + 1);
			GetAirship().SetLastLandingTime(Misc.SECONDS() - 20);
			GetAirship().SetNextLandingTime(Misc.SECONDS() + GetAirship().GetLeaveDuration(GetAirship().GetId()));
			GetAirship().SetDepartTime(GetAirship().GetNextLandingTime() + GetAirship().GetStayDuration(GetAirship().GetId()));
			GetAirship().SetStatus(DatabaseID.AIRSHIP_DEPARTING);
			GetAirship().Save();
			
			SetNotifyStatus(_user_id, GetNotifyIndex(DatabaseID.NOTIFY_TYPE_AIRSHIP, -1), false);

			StringBuilder log = new StringBuilder();
			log.append(Misc.getCurrentDateTime());								//  1. thoi gian tieu tien
			log.append('\t').append(Misc.getActionName(_command_id));			//  2. hanh dong cua gamer
			log.append('\t').append(userInfo.getID());							//  3. id
			log.append('\t').append(userInfo.getID());							//  4. role id
			log.append('\t').append(userInfo.getName());						//  5. name
			log.append('\t').append(SkyGarden._server_id);											//  6. server id
			log.append('\t').append(userInfo.getLevel());						//  7. level
			LogHelper.Log(LogHelper.LogType.TRACKING_ACTION, log.toString());
			
			LogHelper.Log("handleDisposeAirship.. OK!");
		}
		
		base.Delete(_user_id + "_" + KeyID.KEY_AIRSHIP_LOCKER);
		
		// response
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_AIRSHIP, GetAirship().GetDataToClient());

		try 
		{
			_client.WriteZip(response.toByteArray());
		}  
		catch (Exception ex)  
		{
			LogHelper.LogException("handleDisposeAirship", ex);
		}
	}
	
	private void handleCancelAirship() 
	{
		if (!_use_airship) return;
		
		if (Misc.SECONDS() >= (GetAirship().GetDepartTime() - 5))
		{
			if (!GetAirship().IsFinished())
			{
				// lock
				if (!base.Add(_user_id + "_" + KeyID.KEY_AIRSHIP_LOCKER, 1, DatabaseID.AIRSHIP_LOCK_TIME))
				{
					_return_id = ReturnCode.RESPONSE_PS_DATA_IS_LOCKED;
					requestError();
					return;
				}
			
				GetAirship().GetCargoList().clear();
				GetAirship().GenerateRequest(GetUserInfo().getLevel(), ComboManager().GetAirshipBonusExp(), ComboManager().GetAirshipBonusGold());
				GetAirship().SetAirshipNum(GetAirship().GetCurrentAirshipNum() + 1);
				GetAirship().SetLastLandingTime(Misc.SECONDS() - 20);
				GetAirship().SetNextLandingTime(Misc.SECONDS() + GetAirship().GetLeaveDuration(GetAirship().GetId()));
				GetAirship().SetDepartTime(GetAirship().GetNextLandingTime() + GetAirship().GetStayDuration(GetAirship().GetId()));
				GetAirship().SetStatus(DatabaseID.AIRSHIP_DEPARTING);
				GetAirship().Save();
				
				SetNotifyStatus(_user_id, GetNotifyIndex(DatabaseID.NOTIFY_TYPE_AIRSHIP, -1), false);

				StringBuilder log = new StringBuilder();
				log.append(Misc.getCurrentDateTime());								//  1. thoi gian tieu tien
				log.append('\t').append(Misc.getActionName(_command_id));			//  2. hanh dong cua gamer
				log.append('\t').append(userInfo.getID());							//  3. id
				log.append('\t').append(userInfo.getID());							//  4. role id
				log.append('\t').append(userInfo.getName());						//  5. name
				log.append('\t').append(SkyGarden._server_id);											//  6. server id
				log.append('\t').append(userInfo.getLevel());						//  7. level
				LogHelper.Log(LogHelper.LogType.TRACKING_ACTION, log.toString());

				LogHelper.Log("handleCancelAirship.. OK!");
			}
			else
			{
				LogHelper.Log("handleCancelAirship.. err! airship is already full");
			}
		}
		else
		{
			LogHelper.Log("handleCancelAirship.. err! not reach depart time => can not cancel airship");
		}
		
		base.Delete(_user_id + "_" + KeyID.KEY_AIRSHIP_LOCKER);
		
		// response
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_AIRSHIP, GetAirship().GetDataToClient());

		try {
			_client.WriteZip(response.toByteArray());
		}  catch (Exception ex)  {
			LogHelper.LogException("handleDisposeAirship", ex);
		}
	}
	
	private void handleCompleteCargo(FBEncrypt encrypt) 
	{
		if (!_use_airship) return;
		
		int acm_index = -1;
		int cargo_id = encrypt.getInt(KeyID.KEY_CARGO_ID);
		if (GetAirship().Load() && GetAirship().GetStatus() == DatabaseID.AIRSHIP_LANDING) 
		{
			// lock
			if (!base.Add(_user_id + "_" + KeyID.KEY_AIRSHIP_LOCKER, 1, DatabaseID.AIRSHIP_LOCK_TIME))
			{
				_return_id = ReturnCode.RESPONSE_PS_DATA_IS_LOCKED;
				requestError();
				return;
			}
			
			Cargo c = GetAirship().GetCargo(cargo_id);
			if (c != null) 
			{
				if (!c.isIsFinished())
				{
					int type = c.getItemType();
					int id = c.getItemId();
					int num = c.getItemNum();
					Stock tmp_stock = GetStockOfItemType(type);
					if (tmp_stock != null) 
					{
						int num_in_stock = tmp_stock.getProductNum(type, id);
						if (num_in_stock >= num)
						{
							// reduce item in stock
							tmp_stock.updateValue(_command_id, type, id, num_in_stock - num);

							// give exp
							long new_exp = GetUserInfo().getExp() + c.getExp();
							GetUserInfo().setExp(new_exp, _command_id, -1, -1, "", 0);

							// give gold
							long new_gold = GetUserInfo().getGold() + c.getGold();
							GetUserInfo().setGold(new_gold,  _command_id, -1, -1, "", 0);

							// set cargo as finished.
							c.setIsFinished(true);
//							c.setAskForHelp(false);
							if (c.isAskForHelp())
							{
								c.setFriendID(_user_id);
							}

							// save
							GetAirship().Save();
							if (!_use_lazy_sync_user_info) 
							{
								SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
							}
							SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToDatabase());
							SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToDatabase());
							SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToDatabase());

							// check level up
							checkLevelUp();

							// log
//							LogHelper.Log("handleCompleteCargo.. OK.");

							if (_use_achievement)
							{
								acm_index = GetAchievementManager().Increase(CommandID.CMD_COMPLETE_CARGO, 1);
							}
							
							if (_use_event_export)
							{
								SetEventScore(KeyID.KEY_EVENT_EXPORT, 1);
							}
						} 
						else 
						{
							LogHelper.Log("handleCompleteCargo.. err! not enough item " + Misc.GetItemName(type, id) + ", require = " + num + ", current in stock = " + num_in_stock);
							_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_PRODUCT;
						}
					} 
					else 
					{
						LogHelper.Log("handleCompleteCargo.. err! invalid item type");
						_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
					}
				}
				else
				{
					LogHelper.Log("handleCompleteCargo.. cargo is already finished, cargo id = " + cargo_id);
					_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
				}
			} 
			else
			{
				LogHelper.Log("handleCompleteCargo.. invalid cargo id, id = " + cargo_id + ", max cargo = " + GetAirship().GetCargoCount());
				_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
			}
		}
		else
		{
			LogHelper.Log("handleCompleteCargo.. airship is not LANDING, value = " + GetAirship().GetStatus());
			_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
		}
		
		base.Delete(_user_id + "_" + KeyID.KEY_AIRSHIP_LOCKER);
		
		if (user_level_up) checkAndUnlockItems();
		
		// response
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_AIRSHIP, GetAirship().GetDataToClient());
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
		response.addInt(KeyID.KEY_CARGO_ID, cargo_id);
		
		if (_use_achievement && acm_index != -1)
		{
			response.addInt(KeyID.KEY_ACHIEVEMENT_ID, acm_index);
			response.addBinary(KeyID.KEY_ACHIEVEMENT_INDEX + acm_index, GetAchievementManager().GetAchievement(acm_index).getData());
		}
		
		try 
		{
			_client.WriteZip(response.toByteArray());
		}  
		catch (Exception ex)  
		{
			LogHelper.LogException("handleCompleteCargo", ex);
		}
	}
	
	private void handleQuickCompleteCargo(FBEncrypt encrypt) 
	{
		if (!_use_airship) return;
		
		int diamond = 0;
		int cargo_id = encrypt.getInt(KeyID.KEY_CARGO_ID);
		if (GetAirship().Load() && GetAirship().GetStatus() == DatabaseID.AIRSHIP_LANDING) 
		{
			// lock
			if (!base.Add(_user_id + "_" + KeyID.KEY_AIRSHIP_LOCKER, 1, DatabaseID.AIRSHIP_LOCK_TIME))
			{
				_return_id = ReturnCode.RESPONSE_PS_DATA_IS_LOCKED;
				requestError();
				return;
			}
			
			Cargo c = GetAirship().GetCargo(cargo_id);
			if (c != null) 
			{
				if (!c.isIsFinished())
				{
					int type = c.getItemType();
					int id = c.getItemId();
					int num = c.getItemNum();
					Stock tmp_stock = GetStockOfItemType(type);
					if (tmp_stock != null) 
					{
						int num_in_stock = tmp_stock.getProductNum(type, id);
						if (num_in_stock >= num) 
						{
							LogHelper.Log("handleQuickCompleteCargo.. err! items are already enough");
							_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
						} 
						else 
						{
							diamond = c.GetDiamondPrice();
							if (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney() >= diamond) 
							{
								// reduce diamond
								UseMoneyResult usemoney = money_mgr.UseRealMoneyAndBonusMoney(diamond,				// log
																			_command_id,							//  2. hanh dong cua gamer
																			userInfo.getName(),						//  3. ten tai khoan
																			userInfo.getLevel(),					//  7. level cua gamer
																			_ip,									//  9. ip login v4 cua gamer
																			-1,										// 10. id cua loai item
																			-1,										// 11. id cua item
																			"",										// 12. ten item
																			diamond,								// 13. gia game coin cua item
																			1);										// 14. so luong vat pham
								if (usemoney._code == UseMoneyResult.CODE.SUCCESS) 
								{
									// reduce all items in stock
									tmp_stock.updateValue(_command_id, type, id, 0);

									// give exp
									long new_exp = GetUserInfo().getExp() + c.getExp();
									GetUserInfo().setExp(new_exp, _command_id, -1, -1, "", 0);

									// give gold
									long new_gold = GetUserInfo().getGold() + c.getGold();
									GetUserInfo().setGold(new_gold,  _command_id, -1, -1, "", 0);

									// set cargo as finished.
									c.setIsFinished(true);
//									c.setAskForHelp(false);
									if (c.isAskForHelp())
									{
										c.setFriendID(_user_id);
									}

									// save
									GetAirship().Save();
									if (!_use_lazy_sync_user_info) {
										SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
									}
									SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToDatabase());
									SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToDatabase());
									SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToDatabase());

									// check level up
									checkLevelUp();

									// log
									LogHelper.Log("handleQuickCompleteCargo.. OK.");
									
									if (_use_event_export)
									{
										SetEventScore(KeyID.KEY_EVENT_EXPORT, 1);
									}
								} 
								else 
								{
									LogHelper.Log("handleQuickCompleteCargo.. err! can not reduce diamond.");
									_return_id = ReturnCode.RESPONSE_ERROR;
								}
							} 
							else 
							{
								LogHelper.Log("handleQuickCompleteCargo.. not enough money");
								_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_DIAMOND;
							}
						}
					} 
					else 
					{
						LogHelper.Log("handleQuickCompleteCargo.. err! invalid item type");
						_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
					}
				}
				else
				{
					LogHelper.Log("handleCompleteCargo.. cargo is already finished, cargo id = " + cargo_id);
					_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
				}
			} 
			else 
			{
				LogHelper.Log("handleQuickCompleteCargo.. invalid cargo id, id = " + cargo_id + ", max cargo = " + GetAirship().GetCargoCount());
				_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
			}
		} 
		else 
		{
			LogHelper.Log("handleCompleteCargo.. airship is not LANDING, value = " + GetAirship().GetStatus());
			_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
		}
		
		base.Delete(_user_id + "_" + KeyID.KEY_AIRSHIP_LOCKER);
		
		if (user_level_up) checkAndUnlockItems();
		
		// response
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_AIRSHIP, GetAirship().GetDataToClient());
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		response.addLong(KeyID.KEY_DIAMOND_USED, diamond);
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
		response.addInt(KeyID.KEY_CARGO_ID, cargo_id);
		
		try 
		{
			_client.WriteZip(response.toByteArray());
		}  
		catch (Exception ex)  
		{
			LogHelper.LogException("handleQuickCompleteCargo", ex);
		}
	}
	
	private void handleLoadAirship() 
	{
		if (!_use_airship) return;
		
		// reload airship
		GetAirship().Load();
		
		// update airship status
		int status = GetAirship().GetStatus();
		switch (status)
		{
			case DatabaseID.AIRSHIP_PENDING:
				if (Misc.SECONDS() > GetAirship().GetUnlockTime())
				{
					GetAirship().SetStatus(DatabaseID.AIRSHIP_LANDING);
					GetAirship().Save();
				}
				break;
			case DatabaseID.AIRSHIP_DEPARTING:
				if (Misc.SECONDS() > GetAirship().GetNextLandingTime())
				{
					GetAirship().SetStatus(DatabaseID.AIRSHIP_LANDING);
					GetAirship().Save();
				}
				break;
		}
		
		// response
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_AIRSHIP, GetAirship().GetDataToClient());
		try 
		{
			_client.WriteZip(response.toByteArray());
		} 
		catch (Exception ex)  
		{
			LogHelper.LogException("handleLoadAirship", ex);
		}
	}
	
	private void handleAskForHelpAirship(FBEncrypt encrypt)
	{
		if (!_use_airship) return;
		
		int cargo_id = encrypt.getInt(KeyID.KEY_CARGO_ID);
		
		// check if it's still available to ask for friend's help
		int count = 0;
		if (GetAirship().GetStatus() == DatabaseID.AIRSHIP_LANDING) 
		{
			for (Cargo c : GetAirship().GetCargoList())
			{
				if (/*!c.isIsFinished() && */c.isAskForHelp())
				{
					count++;
				}
			}

			if (count <= DatabaseID.AIRSHIP_MAX_HELP)
			{
				// lock
				if (!base.Add(_user_id + "_" + KeyID.KEY_AIRSHIP_LOCKER, 1, DatabaseID.AIRSHIP_LOCK_TIME))
				{
					_return_id = ReturnCode.RESPONSE_PS_DATA_IS_LOCKED;
					requestError();
					return;
				}
					
				Cargo c = GetAirship().GetCargo(cargo_id);
				if (c != null) 
				{
					if (!c.isIsFinished() && !c.isAskForHelp())
					{
						c.setAskForHelp(true);
						GetAirship().Save();
						SetNotifyStatus(_user_id, GetNotifyIndex(DatabaseID.NOTIFY_TYPE_AIRSHIP, -1), true);
					}
					else
					{
						LogHelper.Log("cargo is either finished or already asked for help");
						_return_id = ReturnCode.RESPONSE_ERROR;
					}
				}
				else
				{
					LogHelper.Log("cargo is null, invalid cargo id = " + cargo_id);
					_return_id = ReturnCode.RESPONSE_ERROR;
				}
			}
			else
			{
				LogHelper.Log("ask for help not available, count = " + count);
				_return_id = ReturnCode.RESPONSE_AIRSHIP_ASK_FOR_HELP_FULL;
			}
		}
		else
		{
			LogHelper.Log("airship is not landing");
			_return_id = ReturnCode.RESPONSE_ERROR;
		}
		
		base.Delete(_user_id + "_" + KeyID.KEY_AIRSHIP_LOCKER);
		
		// response
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_AIRSHIP, GetAirship().GetDataToClient());
		response.addInt(KeyID.KEY_CARGO_ID, cargo_id);
		
		try 
		{
			_client.WriteZip(response.toByteArray());
		}  
		catch (Exception ex)  
		{
			LogHelper.LogException("handleAskForHelpAirship", ex);
		}
	}
	
	private void handleHelpFriendAirship(FBEncrypt encrypt)
	{
		long friend_uid = encrypt.getLong(KeyID.KEY_FRIEND_ID);
		int cargo_id = encrypt.getInt(KeyID.KEY_CARGO_ID);
		int acm_index = -1;
		Airship friend_airship = new Airship(friend_uid, KeyID.KEY_AIRSHIP, stock);
		if (friend_airship.Load())
		{
			// update friend's airship status
			int status = friend_airship.GetStatus();
			switch (status)
			{
				case DatabaseID.AIRSHIP_PENDING:
					if (Misc.SECONDS() > friend_airship.GetUnlockTime())
					{
						friend_airship.SetStatus(DatabaseID.AIRSHIP_LANDING);
					}
					break;
				case DatabaseID.AIRSHIP_DEPARTING:
					if (Misc.SECONDS() > friend_airship.GetNextLandingTime())
					{
						friend_airship.SetStatus(DatabaseID.AIRSHIP_LANDING);
					}
					break;
			}
			
			// check if i already helped this friend
			boolean available = true;
			for (Cargo c : friend_airship.GetCargoList())
			{
				if (c.getFriendID() == _user_id)
				{
					available = false;
					break;
				}
			}
			
			if (available)
			{
				if (friend_airship.GetStatus() == DatabaseID.AIRSHIP_LANDING) 
				{
					// lock friend airship
					if (!base.Add(friend_uid + "_" + KeyID.KEY_AIRSHIP_LOCKER, 1, DatabaseID.AIRSHIP_LOCK_TIME))
					{
						_return_id = ReturnCode.RESPONSE_PS_DATA_IS_LOCKED;
						requestError();
						return;
					}
					
					Cargo c = friend_airship.GetCargo(cargo_id);
					if (c != null) 
					{
						if (!c.isIsFinished() && c.isAskForHelp())
						{
							int type = c.getItemType();
							int id = c.getItemId();
							int num = c.getItemNum();
							Stock tmp_stock = GetStockOfItemType(type);
							if (tmp_stock != null) 
							{
								int num_in_stock = tmp_stock.getProductNum(type, id);
								if (num_in_stock >= num)
								{
									// reduce item in stock
									tmp_stock.updateValue(_command_id, type, id, num_in_stock - num);

									// give exp
									long new_exp = GetUserInfo().getExp() + c.getExp();
									GetUserInfo().setExp(new_exp, _command_id, -1, -1, "", 0);

									// give gold
									long new_gold = GetUserInfo().getGold() + c.getGold();
									GetUserInfo().setGold(new_gold,  _command_id, -1, -1, "", 0);

									// set cargo as finished.
									c.setIsFinished(true);
//									c.setAskForHelp(false);
									c.setFriendID(_user_id);

									// save friend airship
									friend_airship.Save();

									// save my info
									if (!_use_lazy_sync_user_info) 
									{
										SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
									}
									SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToDatabase());
									SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToDatabase());
									SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToDatabase());

									// check level up
									checkLevelUp();

									// log
									LogHelper.Log("handleHelpFriendAirship.. OK.");

									if (_use_achievement)
									{
										acm_index = GetAchievementManager().Increase(CommandID.CMD_HELP_FRIEND_AIRSHIP, 1);
									}
									
									if (_use_event_export)
									{
										SetEventScore(KeyID.KEY_EVENT_EXPORT, 1);
									}
								}
								else
								{
									LogHelper.Log("not enough item");
									_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_PRODUCT;
								}
							}
							else
							{
								LogHelper.Log("can not get stock from item type");
								_return_id = ReturnCode.RESPONSE_ERROR;
							}
						}
						else
						{
							LogHelper.Log("cargo is finished or not ask for help");
							_return_id = ReturnCode.RESPONSE_ERROR;
						}
					}
					else
					{
						LogHelper.Log("can not get cargo from cargo id");
						_return_id = ReturnCode.RESPONSE_ERROR;
					}
				}
				else
				{
					LogHelper.Log("friend airship is not landing");
					_return_id = ReturnCode.RESPONSE_ERROR;
				}
			}
			else
			{
				LogHelper.Log("already help this friend");
				_return_id = ReturnCode.RESPONSE_ERROR;
			}
		}
		else
		{
			LogHelper.Log("can not load friend airship");
			_return_id = ReturnCode.RESPONSE_ERROR;
		}
		
		//unlock
		DBConnector.GetMembaseServer(friend_uid).Delete(friend_uid + "_" + KeyID.KEY_AIRSHIP_LOCKER);
		
		if (user_level_up) checkAndUnlockItems();
		
		// response
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_FRIEND_AIRSHIP, friend_airship.GetDataToClient());
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
		response.addInt(KeyID.KEY_CARGO_ID, cargo_id);
		
		if (_use_achievement && acm_index != -1)
		{
			response.addInt(KeyID.KEY_ACHIEVEMENT_ID, acm_index);
			response.addBinary(KeyID.KEY_ACHIEVEMENT_INDEX + acm_index, GetAchievementManager().GetAchievement(acm_index).getData());
		}
		
		try 
		{
			_client.WriteZip(response.toByteArray());
		}  
		catch (Exception ex)  
		{
			LogHelper.LogException("handleHelpFriendAirship", ex);
		}
	}
	
	private void handleQuickHelpFriendAirship(FBEncrypt encrypt)
	{
		long friend_uid = encrypt.getLong(KeyID.KEY_FRIEND_ID);
		int cargo_id = encrypt.getInt(KeyID.KEY_CARGO_ID);
		int acm_index = -1;
		int diamond = 0;
		Airship friend_airship = new Airship(friend_uid, KeyID.KEY_AIRSHIP, stock);
		if (friend_airship.Load())
		{
			// update friend's airship status
			int status = friend_airship.GetStatus();
			switch (status)
			{
				case DatabaseID.AIRSHIP_PENDING:
					if (Misc.SECONDS() > friend_airship.GetUnlockTime())
					{
						friend_airship.SetStatus(DatabaseID.AIRSHIP_LANDING);
					}
					break;
				case DatabaseID.AIRSHIP_DEPARTING:
					if (Misc.SECONDS() > friend_airship.GetNextLandingTime())
					{
						friend_airship.SetStatus(DatabaseID.AIRSHIP_LANDING);
					}
					break;
			}
			
			// check if i already helped this friend
			boolean available = true;
			for (Cargo c : friend_airship.GetCargoList())
			{
				if (c.getFriendID() == _user_id)
				{
					available = false;
					break;
				}
			}
			
			if (available)
			{
				if (friend_airship.GetStatus() == DatabaseID.AIRSHIP_LANDING) 
				{
					// lock friend airship
					if (!base.Add(friend_uid + "_" + KeyID.KEY_AIRSHIP_LOCKER, 1, DatabaseID.AIRSHIP_LOCK_TIME))
					{
						_return_id = ReturnCode.RESPONSE_PS_DATA_IS_LOCKED;
						requestError();
						return;
					}
			
					Cargo c = friend_airship.GetCargo(cargo_id);
					if (c != null) 
					{
						if (!c.isIsFinished() && c.isAskForHelp())
						{
							int type = c.getItemType();
							int id = c.getItemId();
							int num = c.getItemNum();
							Stock tmp_stock = GetStockOfItemType(type);
							if (tmp_stock != null) 
							{
								int num_in_stock = tmp_stock.getProductNum(type, id);
								if (num_in_stock >= num) 
								{
									LogHelper.Log("handleQuickCompleteCargo.. err! items are already enough");
									_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
								}
								else 
								{
									diamond = c.GetDiamondPrice();
									if (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney() >= diamond) 
									{
										// reduce diamond
										UseMoneyResult usemoney = money_mgr.UseRealMoneyAndBonusMoney(diamond,				// log
																					_command_id,							//  2. hanh dong cua gamer
																					userInfo.getName(),						//  3. ten tai khoan
																					userInfo.getLevel(),					//  7. level cua gamer
																					_ip,									//  9. ip login v4 cua gamer
																					-1,										// 10. id cua loai item
																					-1,										// 11. id cua item
																					"",										// 12. ten item
																					diamond,								// 13. gia game coin cua item
																					1);										// 14. so luong vat pham
										if (usemoney._code == UseMoneyResult.CODE.SUCCESS) 
										{
											// reduce all items in stock
											tmp_stock.updateValue(_command_id, type, id, 0);

											// give exp
											long new_exp = GetUserInfo().getExp() + c.getExp();
											GetUserInfo().setExp(new_exp, _command_id, -1, -1, "", 0);

											// give gold
											long new_gold = GetUserInfo().getGold() + c.getGold();
											GetUserInfo().setGold(new_gold,  _command_id, -1, -1, "", 0);

											// set cargo as finished.
											c.setIsFinished(true);
//											c.setAskForHelp(false);
											c.setFriendID(_user_id);

											// save friend airship
											friend_airship.Save();

											if (!_use_lazy_sync_user_info) 
											{
												SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
											}
											SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToDatabase());
											SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToDatabase());
											SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToDatabase());

											// check level up
											checkLevelUp();

											// log
											LogHelper.Log("handleQuickHelpFriendAirship.. OK.");

											if (_use_achievement)
											{
												acm_index = GetAchievementManager().Increase(CommandID.CMD_QUICK_HELP_FRIEND_AIRSHIP, 1);
											}
											
											if (_use_event_export)
											{
												SetEventScore(KeyID.KEY_EVENT_EXPORT, 1);
											}
										} 
										else 
										{
											LogHelper.Log("handleQuickHelpFriendAirship.. err! can not reduce diamond.");
											_return_id = ReturnCode.RESPONSE_ERROR;
										}
									}
									else
									{
										LogHelper.Log("not enough diamond");
										_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_DIAMOND;
									}
								}
							}
							else
							{
								LogHelper.Log("can not get stock from item type");
								_return_id = ReturnCode.RESPONSE_ERROR;
							}
						}
						else
						{
							LogHelper.Log("cargo is finished or not ask for help");
							_return_id = ReturnCode.RESPONSE_ERROR;
						}
					}
					else
					{
						LogHelper.Log("can not get cargo from cargo id");
						_return_id = ReturnCode.RESPONSE_ERROR;
					}
				}
				else
				{
					LogHelper.Log("friend airship is not landing");
					_return_id = ReturnCode.RESPONSE_ERROR;
				}
			}
			else
			{
				LogHelper.Log("already help this friend");
				_return_id = ReturnCode.RESPONSE_ERROR;
			}
		}
		else
		{
			LogHelper.Log("can not load friend airship");
			_return_id = ReturnCode.RESPONSE_ERROR;
		}
		
		//unlock
		DBConnector.GetMembaseServer(friend_uid).Delete(friend_uid + "_" + KeyID.KEY_AIRSHIP_LOCKER);
		
		if (user_level_up) checkAndUnlockItems();
		
		// response
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_FRIEND_AIRSHIP, friend_airship.GetDataToClient());
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		response.addLong(KeyID.KEY_DIAMOND_USED, diamond);
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
		response.addInt(KeyID.KEY_CARGO_ID, cargo_id);
		if (_use_achievement && acm_index != -1)
		{
			response.addInt(KeyID.KEY_ACHIEVEMENT_ID, acm_index);
			response.addBinary(KeyID.KEY_ACHIEVEMENT_INDEX + acm_index, GetAchievementManager().GetAchievement(acm_index).getData());
		}
		
		try 
		{
			_client.WriteZip(response.toByteArray());
		}  
		catch (Exception ex)  
		{
			LogHelper.LogException("handleQuickHelpFriendAirship", ex);
		}
	}
	
	// for test purpose
	private void handleDeleteAirship() 
	{
		if (ProjectConfig.IS_SERVER_FREESTYLE != 1 || !_use_airship)
		{
			return;
		}
		
		DBConnector.GetMembaseServer(_user_id).Delete(_user_id + "_" + KeyID.KEY_AIRSHIP);
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		try 
		{
			_client.WriteZip(response.toByteArray());
		}  
		catch (Exception ex)  
		{
			LogHelper.LogException("handleDeleteAirship", ex);
		}
	}
	
	private void handleStartUsingTom() 
	{
		if (!_use_tomkid) 
		{
			return;
		}
		
		// check if this is first time using tom
		if (GetTomKid().isFirstUsed()) 
		{
			int duration = GetTomKid().getFirstUseDuration();
			if (userInfo.getDeviceOS().equals("WINPHONE") && GameUtil.GetUserMisc(_user_id).Get("hire_tomkid").equals(""))
			{
				GameUtil.GetUserMisc(_user_id).Set("hire_tomkid", Misc.getCurrentDateTime());
				duration = duration + (7 * 24 * 60 * 60);
				LogHelper.Log("First time hire tom, bonus duration := " + (10 * 24 * 60 * 60));
			}
			
			GetTomKid().setLastHireTime(Misc.SECONDS());
			GetTomKid().setExpiredHireTime(GetTomKid().getLastHireTime() + duration);
			GetTomKid().setFirstUsed(false);
			
			// save
			SET_DB_VALUE_BINARY(KeyID.KEY_TOM_KID, GetTomKid().GetData(true));
			
			StringBuilder log = new StringBuilder();
			log.append(Misc.getCurrentDateTime());								//  1. thoi gian tieu tien
			log.append('\t').append(Misc.getActionName(_command_id));			//  2. hanh dong cua gamer
			log.append('\t').append(userInfo.getID());							//  3. id
			log.append('\t').append(userInfo.getID());							//  4. role id
			log.append('\t').append(userInfo.getName());						//  5. name
			log.append('\t').append(SkyGarden._server_id);											//  6. server id
			log.append('\t').append(userInfo.getLevel());						//  7. level
			LogHelper.Log(LogHelper.LogType.TRACKING_ACTION, log.toString());
		}
		
		// response
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_TOM_KID, GetTomKid().GetData(false));
		try {
			_client.WriteZip(response.toByteArray());
		}  catch (Exception ex)  {
			LogHelper.LogException("handleStartUsingTom", ex);
		}
	}
	
	private void handleRequestFindItem(FBEncrypt encrypt) {
		if (!_use_tomkid) {
			return;
		}
		
		if (GetUserInfo().getLevel() < 13) {
			LogHelper.Log("handleRequestFindItem.. err! not enough level 13");
			requestError();
			return;
		}
		
		int type = encrypt.getInt(KeyID.KEY_TOM_KID_ITEM_TYPE);
		int id = encrypt.getInt(KeyID.KEY_TOM_KID_ITEM_ID);
		
		// check if item is already unlocked
		if (!Misc.IsItemUnlock(type, id, GetUserInfo().getLevel())) {
			LogHelper.Log("handleRequestFindItem.. err! item " + Misc.GetItemName(type, id) + " is not unlocked");
			requestError();
			return;
		}
		
		// check if this is first time using tom
		if (GetTomKid().isFirstUsed()) 
		{
			GetTomKid().setLastHireTime(Misc.SECONDS());
			GetTomKid().setExpiredHireTime(GetTomKid().getLastHireTime() + GetTomKid().getFirstUseDuration());
			GetTomKid().setFirstUsed(false);
		}
		
		// check if tom is ready for work
		if (GetTomKid().GetStatus() == DatabaseID.TOMKID_READY) 
		{
			// generate items
			GetTomKid().GenerateGoods(type, id);			
			// save
			SET_DB_VALUE_BINARY(KeyID.KEY_TOM_KID, GetTomKid().GetData(true));
			
			StringBuilder log = new StringBuilder();
			log.append(Misc.getCurrentDateTime());								//  1. thoi gian tieu tien
			log.append('\t').append(Misc.getActionName(_command_id));			//  2. hanh dong cua gamer
			log.append('\t').append(userInfo.getID());							//  3. id
			log.append('\t').append(userInfo.getID());							//  4. role id
			log.append('\t').append(userInfo.getName());						//  5. name
			log.append('\t').append(SkyGarden._server_id);											//  6. server id
			log.append('\t').append(userInfo.getLevel());						//  7. level
			LogHelper.Log(LogHelper.LogType.TRACKING_ACTION, log.toString());
		} else {
			LogHelper.Log("handleRequestFindItem.. err! Tom is not ready for work");
			_return_id = ReturnCode.RESPONSE_ERROR;
		}
		
		// response
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_TOM_KID, GetTomKid().GetData(false));
		try {
			_client.WriteZip(response.toByteArray());
		}  catch (Exception ex)  {
			LogHelper.LogException("handleRequestFindItem", ex);
		}
	}
	
	private void handleAcceptTomKidGoods(FBEncrypt encrypt) {
		if (!_use_tomkid) 
		{
			return;
		}
		
		int suggest_id = encrypt.getInt(KeyID.KEY_TOM_KID_SUGGEST_ITEM_ID);
		if (suggest_id < 0 || suggest_id > 2) 
		{
			LogHelper.Log("handleAcceptTomKidGoods.. err! invalid params, id = " + suggest_id);
			_return_id = ReturnCode.RESPONSE_INVALID_PARAMS;
			requestError();
			return;
		}
		
		for (SuggestItem sgi : GetTomKid().getSuggestList()) 
		{
			if (sgi.getId() == suggest_id) 
			{
				int type	= sgi.getType();
				int id		= sgi.getItemId();
				int num		= sgi.getNum();
				long gold	= sgi.getGold();
				if (GetUserInfo().getGold() > gold) 
				{
					// reduce gold
					long new_gold = GetUserInfo().getGold() - gold;
					GetUserInfo().setGold(new_gold,  _command_id, -1, -1, "", 0);
					
					// set tom kid new status
					GetTomKid().getSuggestList().clear();
					GetTomKid().setLastWorkingTime(Misc.SECONDS());
					GetTomKid().setNextWorkingTime(GetTomKid().getLastWorkingTime() + GetTomKid().getLongRestDuration());
                                        
					// save
					if (!_use_lazy_sync_user_info)
					{
						SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
					}
					
					SET_DB_VALUE_BINARY(KeyID.KEY_TOM_KID, GetTomKid().GetData(true));
					
					// add items to stock
					int stock_id = -1;
					switch (type)
					{
						case DatabaseID.IT_MATERIAL:
						case DatabaseID.IT_POT:
						case DatabaseID.IT_DECOR:
							stock_id = DatabaseID.STOCK_WAREHOUSE;
							break;
						case DatabaseID.IT_BUG:
						case DatabaseID.IT_PRODUCT:
							stock_id = DatabaseID.STOCK_BARN;
							break;
						case DatabaseID.IT_PLANT:
							stock_id = DatabaseID.STOCK_SILO;
							break;
						default:
							LogHelper.Log("handleAcceptTomKidGoods.. invalid item type.");
					}
					GetStock(stock_id).addGift(type, id, num, _command_id);
					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + stock_id, GetStock(stock_id).getDataToDatabase());
					
					if (_use_event_mid_autumn_festival)
					{
						SetEventScore(KeyID.KEY_EVENT_MID_AUTUMN_FESTIVAL, GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, 0));
					}
					
					if (_use_event_20_11)
					{
						SetEventScore(KeyID.KEY_EVENT_20_11, GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, 0));
					}
					
					if (_use_event_xmas_mini)
					{
						SetEventScore(KeyID.KEY_EVENT_XMAS_MINI, GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, 0));
					}
					
					if (_use_event_xmas_tree)
					{
						stock_event.add(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_CANDLE, GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, 0), _command_id);
						SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
						_event_item_num = GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, 0);
					}
					
					if (_use_event_new_year_2015)
					{
						stock_event.add(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_BANH_CHUNG, GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, 0), _command_id);
						SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
						_event_item_num = GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, 0);
					}
					
					if (_use_event_8_3_2015)
					{
						stock_event.add(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_GLASS_ROSE, GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, 0), _command_id);
						SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
						_event_item_num = GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, 0);
					}
					
					if (_use_event_halloween)
					{
						stock_event.addGift(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_HALLOWEEN_2, GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_HALLOWEEN_2, DatabaseID.FEATURE_ID_TOM));
						SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
					}
					
					if (_use_event_xmas_2014)
					{
						stock_event.addGift(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_XMAS_2014_1, GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_HALLOWEEN_2, DatabaseID.FEATURE_ID_TOM));
						SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
					}
				}
				break;
			}
		}
		
		// response
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addBinary(KeyID.KEY_TOM_KID, GetTomKid().GetData(false));
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToClient());
		if (_use_event_mid_autumn_festival || _use_event_20_11 || _use_event_xmas_mini)
		{
			response.addString(GetEventKeyName(), GetEventItems());
		}
		
		if ((_use_event_halloween || _use_event_xmas_2014 || _use_event_xmas_tree || _use_event_new_year_2015 || _use_event_8_3_2015) && _use_stock_event)
		{
			response.addBinary(KeyID.KEY_STOCK_EVENT, stock_event.getDataToClient());
			response.addString(GetEventKeyName(), GetEventItems());
		}
		
		try 
		{
			_client.WriteZip(response.toByteArray());
		}  
		catch (Exception ex)  
		{
			LogHelper.LogException("handleRequestFindItem", ex);
		}
	}
	
	private void handleDenyTomKidGoods() 
	{
		if (!_use_tomkid) 
		{
			return;
		}
		
		if (GetTomKid().GetStatus() != DatabaseID.TOMKID_PROVIDING_GOODS) 
		{
			LogHelper.Log(LogHelper.LogType.HACK, "Detect cheat TOM 1, user id = " + _user_id);
			requestError();
			return;
		}
		
		if (GetTomKid().getSuggestList().size() == 0)
		{
			LogHelper.Log(LogHelper.LogType.HACK, "Detect cheat TOM 2, user id = " + _user_id);
			requestError();
			return;
		}
		
		// set tom kid new status
		GetTomKid().getSuggestList().clear();
		GetTomKid().setLastWorkingTime(Misc.SECONDS());
		GetTomKid().setNextWorkingTime(GetTomKid().getLastWorkingTime() + GetTomKid().getShortRestDuration());
		
		// save
		SET_DB_VALUE_BINARY(KeyID.KEY_TOM_KID, GetTomKid().GetData(true));
		
		StringBuilder log = new StringBuilder();
		log.append(Misc.getCurrentDateTime());								//  1. thoi gian tieu tien
		log.append('\t').append(Misc.getActionName(_command_id));			//  2. hanh dong cua gamer
		log.append('\t').append(userInfo.getID());							//  3. id
		log.append('\t').append(userInfo.getID());							//  4. role id
		log.append('\t').append(userInfo.getName());						//  5. name
		log.append('\t').append(SkyGarden._server_id);											//  6. server id
		log.append('\t').append(userInfo.getLevel());						//  7. level
		LogHelper.Log(LogHelper.LogType.TRACKING_ACTION, log.toString());
		
		LogHelper.Log("handleDenyTomKidGoods.. OK.");
		
		// response
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_TOM_KID, GetTomKid().GetData(false));
		try 
		{
			_client.WriteZip(response.toByteArray());
		} 
		catch (Exception ex)  
		{
			LogHelper.LogException("handleDenyTomKidGoods", ex);
		}
	}
	
	private void handleRequestHireTomKid(FBEncrypt encrypt) 
	{
		if (!_use_tomkid) 
		{
			return;
		}
		
		int hire_pack = encrypt.getInt(KeyID.KEY_TOM_KID_HIRE_PACK);
		if (hire_pack < 0 || hire_pack > 3) {
			LogHelper.Log("handleRequestHireTomKid.. err! invalid params, value = " + hire_pack);
			requestError();
			return;
		}
		
		int diamond_used = 0;
		if (GetTomKid().GetStatus() == DatabaseID.TOMKID_NOT_HIRED)
		{
			// check diamond
			int duration = 0; // it's ok to hardcode here to save time
			if(_offer == null)//try to reload special offer
			{
				byte[] offerbin = null;
				try
				{
					offerbin = GET_DB_VALUE_BINARY(KeyID.KEY_SPECIAL_OFFER);
				}
				catch (Exception e)
				{
					LogHelper.Log("loadSpecialOffer.. can not get user data.");
					LogHelper.LogException("loadSpecialOffer", e);
					offerbin = null;
					requestError(ReturnCode.RESPONSE_LOAD_ERROR);
					return;
				}
				_offer = new Special_Offer(offerbin);
			}
			switch (hire_pack)
			{
				case DatabaseID.TOMKID_HIRE_PACK_1:
					if(_offer != null && _offer.isOfferring() && _offer.getOfferType() == DatabaseID.OFFER_CONTENT_TOM_KID)//offer tom kid hire
					{
						String[] offercontent = _offer.getOfferContent().split(":");
						diamond_used = Integer.parseInt(offercontent[0]);
					}
					else
					{
						diamond_used = GetTomKid().getHirePrice1Day();
					}
					duration = 24 * 60 * 60;
					break;
				case DatabaseID.TOMKID_HIRE_PACK_2:
					if(_offer != null && _offer.isOfferring() && _offer.getOfferType() == DatabaseID.OFFER_CONTENT_TOM_KID)//offer tom kid hire
					{
						String[] offercontent = _offer.getOfferContent().split(":");
						diamond_used = Integer.parseInt(offercontent[1]);
					}
					else
					{
						diamond_used = GetTomKid().getHirePrice3Day();
					}
					duration = 5 * 24 * 60 * 60;
					break;
				case DatabaseID.TOMKID_HIRE_PACK_3:
					if(_offer != null && _offer.isOfferring() && _offer.getOfferType() == DatabaseID.OFFER_CONTENT_TOM_KID)//offer tom kid hire
					{
						String[] offercontent = _offer.getOfferContent().split(":");
						diamond_used = Integer.parseInt(offercontent[2]);
					}
					else
					{
						diamond_used = GetTomKid().getHirePrice7Day();
					}
					duration = 10 * 24 * 60 * 60;
					break;
			}

			// double check
			if (diamond_used <= 0) 
			{
				LogHelper.Log("handleRequestHireTomKid.. err! invalid diamond, value = " + diamond_used);
				requestError();
				return;
			}

			if (money_mgr.GetRealMoney() + money_mgr.GetBonusMoney() < diamond_used) 
			{
				LogHelper.Log("handleRequestHireTomKid.. not enough dimond, need = " + diamond_used + ", current has = " + (money_mgr.GetRealMoney() + money_mgr.GetBonusMoney()));
				requestError();
				return;
			}

			// start reduce money
			UseMoneyResult usemoney = money_mgr.UseRealMoneyAndBonusMoney(diamond_used,								// log
																		_command_id, "" + hire_pack,			//  2. hanh dong cua gamer
																		userInfo.getName(),						//  3. ten tai khoan
																		userInfo.getLevel(),					//  7. level cua gamer
																		_ip,									//  9. ip login v4 cua gamer
																		-1,										// 10. id cua loai item
																		-1,										// 11. id cua item
																		"",										// 12. ten item
																		diamond_used,								// 13. gia game coin cua item
																		1);										// 14. so luong vat pham
			if (usemoney._code == UseMoneyResult.CODE.SUCCESS) 
			{
				GetTomKid().getSuggestList().clear();
				GetTomKid().setLastHireTime(Misc.SECONDS());
				GetTomKid().setNextWorkingTime(Misc.SECONDS());
				GetTomKid().setExpiredHireTime(GetTomKid().getLastHireTime() + duration);

				// save
				SET_DB_VALUE_BINARY(KeyID.KEY_TOM_KID, GetTomKid().GetData(true));
				LogHelper.Log("handleRequestHireTomKid.. OK.");
			} 
			else 
			{
				LogHelper.Log("handleRequestHireTomKid.. err! can not reduce diamond.");
				_return_id = ReturnCode.RESPONSE_ERROR;
			}
		}
		else
		{
			LogHelper.Log("handleRequestHireTomKid.. err! invalid status tom kid = " + GetTomKid().GetStatus());
			_return_id = ReturnCode.RESPONSE_ERROR;
		}
		
		// response
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		response.addLong(KeyID.KEY_DIAMOND_USED, diamond_used);
		response.addBinary(KeyID.KEY_TOM_KID, GetTomKid().GetData(false));
		try 
		{
			_client.WriteZip(response.toByteArray());
		}  
		catch (Exception ex)  
		{
			LogHelper.LogException("handleRequestHireTomKid", ex);
		}
	}
	
	private void handleLoadTomKid() 
	{
		if (!_use_tomkid) 
		{
			return;
		}
		
		// response
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_TOM_KID, GetTomKid().GetData(false));
		try {
			_client.WriteZip(response.toByteArray());
		}  catch (Exception ex)  {
			LogHelper.LogException("handleDenyTomKidGoods", ex);
		}
	}
	
	private void handleDeleteTomKid() 
	{
		if (ProjectConfig.IS_SERVER_FREESTYLE != 1 || !_use_tomkid)
		{
			return;
		}
		
		DBConnector.GetMembaseServer(_user_id).Delete(_user_id + "_" + KeyID.KEY_TOM_KID);
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		try {
			_client.WriteZip(response.toByteArray());
		}  catch (Exception ex)  {
			LogHelper.LogException("handleDeleteTomKid", ex);
		}
	}
	
	private void handleAcceptFBToken(FBEncrypt encrypt) {
		String token = encrypt.getString(KeyID.KEY_FACEBOOK_ACCESS_TOKEN);
		if (token.length() == 0 || token.equals("")) {
			LogHelper.Log("handleAcceptFBToken.. err! invalid fb access token.");
			requestError();
			return;
		}
		
		Server._task_queue.AddTask(new FBExchangeTokenTask(_client, _user_id, token));
	}
	
	private void handleReceiveAcmGift(FBEncrypt encrypt)
	{
		int acm_index = encrypt.getInt(KeyID.KEY_ACHIEVEMENT_ID);
		if (acm_index < 0 || acm_index >= acm_mgr.GetTotalAchievements())
		{
			LogHelper.Log("handleReceiveAcmGift.. invalid params, acm index = " + acm_index);
			requestError();
			return;
		}
		
		int gift_index = encrypt.getInt(KeyID.KEY_ACHIEVEMENT_GIFT_INDEX);
		if (gift_index < DatabaseID.ACHIEVEMENT_GIFT_INDEX_1 || gift_index > DatabaseID.ACHIEVEMENT_GIFT_INDEX_3)
		{
			LogHelper.Log("handleReceiveAcmGift.. invalid params, gift index = " + gift_index);
			requestError();
			return;
		}
		
		Achievement acm = acm_mgr.GetAchievement(acm_index);
		if (acm != null)
		{
			long require = acm.GetTarget(gift_index);
			long current_total = acm.getTotal();
			
			if (require == -1 || current_total < require)
			{
				LogHelper.Log(LogHelper.LogType.HACK, "detect cheat ACM, user id = " + _user_id + ", acm index = " + acm_index + ", gift index = " + gift_index + ", current = " + current_total + ", require = " + require);
				requestError();
				return;
			}
			
			if (!acm.IsReceivedGift(gift_index))
			{
				// check if user received the previous gift
				_return_id = ReturnCode.RESPONSE_OK;
				for (int i = DatabaseID.ACHIEVEMENT_GIFT_INDEX_1; i < gift_index; i++)
				{
					if (!acm.IsReceivedGift(i))
					{
						_return_id = ReturnCode.RESPONSE_ERROR;
						LogHelper.Log("handleReceiveAcmGift.. not received previous gift, previous gift index = " + i + ", gift index = " + gift_index + ", achievement index = " + acm_index);
						break;
					}
				}
				
				if (_return_id == ReturnCode.RESPONSE_OK)
				{
					acm.SetReceivedGift(gift_index);
					acm_mgr.SaveAll(true);
					
					String gift_list = acm.GetGiftList(acm_index, gift_index);
					LogHelper.Log("achievement_index = " + acm_index + ", gift_index = " + gift_index +  ", gift_list = " + gift_list);
					gift2Stock(gift_list, CommandID.CMD_RECEIVE_ACM_GIFT, "acm" + "_" + acm_index + "_" + gift_index);
					LogHelper.Log("handleReceiveAcmGift.. OK.");
				}
			}
			else
			{
				_return_id = ReturnCode.RESPONSE_ERROR;
				LogHelper.Log("handleReceiveAcmGift.. already received gift, gift index = " + gift_index + ", achievement index = " + acm_index);
			}
		}
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_ACHIEVEMENT, acm_mgr.getDataToClient());
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
		
		try 
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex)  
		{
			LogHelper.LogException("handleReceiveAcmGift", ex);
		}
	}
	
	private void handleDeleteAcm(FBEncrypt encrypt)
	{
		if (ProjectConfig.IS_SERVER_FREESTYLE != 1 || !_use_achievement)
		{
			return;
		}
		
		int acm_index = encrypt.getInt(KeyID.KEY_ACHIEVEMENT_ID);
		if (acm_index == 999)
		{
			int total_acm = acm_mgr.GetTotalAchievements();
			for (int i = 0; i < total_acm; i++)
			{
				String key = _user_id + "_" + KeyID.KEY_ACHIEVEMENT_INDEX + i;
				LogHelper.Log("handleDeleteAcm.. delete key " + key);
				DBConnector.GetMembaseServer(_user_id).Delete(key);
			}
		}
		else
		{
			String key = _user_id + "_" + KeyID.KEY_ACHIEVEMENT_INDEX + acm_index;
			DBConnector.GetMembaseServer(_user_id).Delete(key);
			LogHelper.Log("handleDeleteAcm.. delete key " + key);
		}
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		try 
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex)  
		{
			LogHelper.LogException("handleDeleteAcm", ex);
		}
	}
	
	private void handleLoadFortune()
	{
		if (!_use_fortune || fortune_manager == null)
		{
			return;
		}
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_FORTUNE, fortune_manager.GetDataToClient());
		try 
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex)  
		{
			LogHelper.LogException("handleLoadFortune", ex);
		}
	}
	
	private void handleBuyFortune(FBEncrypt encrypt)
	{
		int fortune_index = encrypt.getInt(KeyID.KEY_ROTA_FORTUNAE_ID);
		if (fortune_index < 0 || fortune_index > fortune_manager.GetTotalRotaFortunaes())
		{
			LogHelper.Log("err! invalid fortune index, value = " + fortune_index);
			requestError();
			return;
		}
		
		RotaFortunae rf = fortune_manager.GetRotaFortunae(fortune_index);
		if (rf != null)
		{
			boolean is_paid = rf.IsPaid();
			boolean is_bought = rf.isBought();
			if (is_paid && !is_bought)
			{
				int diamond = rf.getDiamond();
				LogHelper.LogHappy("diamond before sale off := " + diamond);
				
				if (rf.isSaleOff())
				{
					diamond = rf.getDiamondSaleOff();
				}
				
				LogHelper.LogHappy("diamond after sale off := " + diamond);
				
				UseMoneyResult usemoney = money_mgr.UseRealMoneyAndBonusMoney(diamond,								// log
																	_command_id, "" + fortune_index,			//  2. hanh dong cua gamer
																	userInfo.getName(),						//  3. ten tai khoan
																	userInfo.getLevel(),					//  7. level cua gamer
																	_ip,									//  9. ip login v4 cua gamer
																	-1,										// 10. id cua loai item
																	-1,										// 11. id cua item
																	"",										// 12. ten item
																	diamond,								// 13. gia game coin cua item
																	1);										// 14. so luong vat pham
				if (usemoney._code == UseMoneyResult.CODE.SUCCESS)
				{
					rf.setBought(true);
					fortune_manager.SaveRotaFortunae(fortune_index);
					LogHelper.Log("buy fortune ok!");
				}
				else
				{
					LogHelper.Log("can not reduce money");
					_return_id = ReturnCode.RESPONSE_ERROR;
				}
			}
			else
			{
				LogHelper.Log("err! invalid fortune state, is_paid = " + is_paid + ", is_bought = " + is_bought);
			}
		}
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_FORTUNE, fortune_manager.GetDataToClient());
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		try 
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex)  
		{
			LogHelper.LogException("handleBuyFortune", ex);
		}
	}
	
	private void handleUseFortune(FBEncrypt encrypt)
	{
		int fortune_index = encrypt.getInt(KeyID.KEY_ROTA_FORTUNAE_ID);
		if (fortune_index < 0 || fortune_index > fortune_manager.GetTotalRotaFortunaes())
		{
			LogHelper.Log("err! invalid fortune index, value = " + fortune_index);
			requestError();
			return;
		}
		
		RotaFortunae rf = fortune_manager.GetRotaFortunae(fortune_index);
		if (rf != null)
		{
			boolean is_paid = rf.IsPaid();
			boolean is_bought = rf.isBought();
			boolean is_used = rf.isUsed();
			if (!is_used)
			{
				String gift_list = "";
				if (!is_paid || (is_paid && is_bought))
				{
					String[] gift = rf.getGiftReal().split(":");
					int type = Integer.parseInt(gift[0]);
					int id = Integer.parseInt(gift[1]);
					if (type == DatabaseID.IT_MONEY && id == DatabaseID.GOLD_ID)
					{
						int current_star = 0;
						for (RotaFortunae inner_rf : fortune_manager.GetFortuneList())
						{
							String[] inner_gift = inner_rf.getGiftReal().split(":");
							int inner_type = Integer.parseInt(inner_gift[0]);
							if (inner_type == DatabaseID.IT_MONEY && inner_rf.isUsed())
							{
								current_star++;
								if (current_star > 2)
								{
									current_star = 2;
								}
							}
						}
						long gold = Long.parseLong(fortune_manager.GetGoldList().split(";")[current_star]);
						gift_list = type + ":" + id + ":" + gold;
					}
					else
					{
						gift_list = rf.getGiftReal();
					}
					
					rf.setUsed(true);
					fortune_manager.SaveRotaFortunae(fortune_index);
					gift2Stock(gift_list, CommandID.CMD_USE_FORTUNE, "fortune");
					
					if (_use_event_mid_autumn_festival)
					{
						SetEventScore(KeyID.KEY_EVENT_MID_AUTUMN_FESTIVAL, GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, 1));
					}
					
					if (_use_event_20_11)
					{
						SetEventScore(KeyID.KEY_EVENT_20_11, GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, 1));
					}
					
					if (_use_event_xmas_mini)
					{
						SetEventScore(KeyID.KEY_EVENT_XMAS_MINI, GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, 1));
					}
					
					if (_use_event_xmas_tree)
					{
						stock_event.add(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_CANDLE, GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, 1), _command_id);
						SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
						_event_item_num = GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, 1);
					}
					
					if (_use_event_new_year_2015)
					{
						stock_event.add(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_BANH_CHUNG, GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, 1), _command_id);
						SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
						_event_item_num = GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, 1);
					}
					
					if (_use_event_8_3_2015)
					{
						stock_event.add(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_GLASS_ROSE, GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, 1), _command_id);
						SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
						_event_item_num = GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_MOONCAKE, 1);
					}
					
					if (_use_event_halloween)
					{
						stock_event.addGift(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_HALLOWEEN_3, GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_HALLOWEEN_3, DatabaseID.FEATURE_ID_FORTUNE_WHEEL));
						SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
					}
					
					if (_use_event_xmas_2014)
					{
						stock_event.addGift(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_XMAS_2014_1, GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_HALLOWEEN_2, DatabaseID.FEATURE_ID_FORTUNE_WHEEL));
						SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
						LogHelper.LogHappy("ADD ITEM_EVENT_XMAS_2014_3 := " + GetEventDropNum(DatabaseID.CONSTANT_NUM_DROP_HALLOWEEN_3, DatabaseID.FEATURE_ID_FORTUNE_WHEEL));
					}
					
				}
				else
				{
					LogHelper.Log("err! invalid fortune state, is_paid = " + is_paid + ", is_bought = " + is_bought);
				}
			}
			else
			{
				LogHelper.Log("err! invalid fortune state, is_used = " + is_used);
			}
		}
		
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_FORTUNE, fortune_manager.GetDataToClient());
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		if (_use_event_mid_autumn_festival || _use_event_20_11 || _use_event_xmas_mini)
		{
			response.addString(GetEventKeyName(), GetEventItems());
		}
		
		if ((_use_event_halloween || _use_event_xmas_2014 || _use_event_xmas_tree || _use_event_new_year_2015 || _use_event_8_3_2015) && _use_stock_event)
		{
			response.addBinary(KeyID.KEY_STOCK_EVENT, stock_event.getDataToClient());
			response.addString(GetEventKeyName(), GetEventItems());
		}
		
		try 
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex)  
		{
			LogHelper.LogException("handleUseFortune", ex);
		}
	}
	
	private void handleLoadAchievement()
	{
		if (!_use_achievement)
		{
			return;
		}
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addInt(KeyID.KEY_ACHIEVEMENT_TOTAL, GetAchievementManager().GetTotalAchievements());
		response.addBinary(KeyID.KEY_ACHIEVEMENT, GetAchievementManager().getDataToClient());
		try 
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex)  
		{
			LogHelper.LogException("handleLoadAchievement", ex);
		}
	}
	
	private void handleAcceptFBBirthday(FBEncrypt encrypt) {
		String birthday = encrypt.getString(KeyID.KEY_FACEBOOK_BIRTHDAY);
		if (birthday.equals("") || birthday.length() == 0) {
			LogHelper.Log("handleAcceptFBBirthday.. err! invalid fb birthday.");
			requestError();
			return;
		}
		
		if (!userInfo.GetFacebookBirthday().equals("null")) {
			LogHelper.Log("handleAcceptFBBirthday.. already provide facebook birthday.");
			requestError();
			return;
		}
		
		LogHelper.Log("handleAcceptFBBirthday.. fb birthday = " + birthday);
		userInfo.SetFacebookBirthday(birthday);
		SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, GetUserInfo().getData(true));
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		try {
			_client.WriteZip(response.toByteArray());
			LogHelper.Log("handleAcceptFBBirthday.. response done!");
		} catch (Exception ex) {
			LogHelper.LogException("handleAcceptFBBirthday", ex);
		}
	}
	
	private void handleUnlinkZalo()
	{
		// get zalo id
		String zalo_id = userInfo.GetZaloID();
		
		// delete mapped key
		LogHelper.LogHappy("Unlink zalo id := " + zalo_id);
		boolean result = DBConnector.GetMembaseServerForGeneralData().Delete(userInfo.getID() + "_" + "zalo");
		LogHelper.LogHappy("Delete " + userInfo.getID() + "_" + "zalo := " + result);
		result = DBConnector.GetMembaseServerForGeneralData().Delete("zalo" + "_" + zalo_id + "_" + "u");
		LogHelper.LogHappy("Delete zalo" + "_" + zalo_id + "_" + "u := " + result);
		
		// reset user info
		SetAndSaveZaloInfo("null", "null", "null", "null");
		
		// return
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		try 
		{
			_client.WriteZip(response.toByteArray());
			LogHelper.Log("handleUnlinkZalo.. response done!");
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("handleUnlinkZalo", ex);
		}
	}
	
	private void handleReceiveGiftInviteFriend(FBEncrypt encrypt)
	{
		if (!_use_invite_friend || invite_friend == null)
		{
			LogHelper.Log("feature invite friend not in use");
			return;
		}
		
		int gift_index = encrypt.getInt(KeyID.KEY_GIFT_INVITE_FRIEND_INDEX);
		
		if (gift_index < 0 || gift_index >= 4)
		{
			LogHelper.Log("invalid params, gift index = " + gift_index);
			requestError();
			return;
		}
		
		if (!invite_friend.IsReceivedGift(gift_index))
		{
			invite_friend.SetReceiveGift(gift_index, true);
			
			SET_DB_VALUE_BINARY(KeyID.KEY_INVITE_FRIEND, invite_friend.GetData());
			
			String gift = invite_friend.GetGiftInviteFriend(gift_index);
			gift2Stock(gift, CommandID.CMD_RECEIVED_GIFT_INVITE_FRIEND, "invite_friend");
		}
		else
		{
			LogHelper.Log("already received gift index = " + gift_index);
			requestError();
			return;
		}
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_INVITE_FRIEND, invite_friend.GetData());
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
		response.addInt(KeyID.KEY_GIFT_INVITE_FRIEND_INDEX, gift_index);
		
		try 
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex)
		{
			LogHelper.LogException("handleReceiveGiftInviteFriend", ex);
		}
	}
	
	private void handleNotifyInviteFriend(FBEncrypt encrypt)
	{
		if (!_use_invite_friend || invite_friend == null)
		{
			LogHelper.Log("feature invite friend not in use");
			return;
		}
		
		int num_friend_invite = encrypt.getInt(KeyID.KEY_NUM_FRIEND_INVITED);
		if (num_friend_invite < 0)
		{
			LogHelper.Log("invalid params, num friend = " + num_friend_invite);
			requestError();
			return;
		}
		
		invite_friend.SetNumFriendInvited(invite_friend.GetNumFriendInvited() + num_friend_invite);
		SET_DB_VALUE_BINARY(KeyID.KEY_INVITE_FRIEND, invite_friend.GetData());
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_INVITE_FRIEND, invite_friend.GetData());
		
		try 
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex)
		{
			LogHelper.LogException("handleNotifyInviteFriend", ex);
		}
	}
	
	private void handleResetInviteFriend()
	{
		if (!_use_invite_friend || invite_friend == null)
		{
			LogHelper.Log("feature invite friend not in use");
			return;
		}
		
		invite_friend.SetNumFriendInvited(0);
		invite_friend.SetReceiveGift(0, false);
		invite_friend.SetReceiveGift(1, false);
		invite_friend.SetReceiveGift(2, false);
		invite_friend.SetReceiveGift(3, false);
		SET_DB_VALUE_BINARY(KeyID.KEY_INVITE_FRIEND, invite_friend.GetData());
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_INVITE_FRIEND, invite_friend.GetData());
		
		try 
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex)
		{
			LogHelper.LogException("handleReceiveGiftInviteFriend", ex);
		}
	}
	
	private void handleFilterZingFriend(FBEncrypt encrypt)
	{
		String zing_ids = encrypt.getString(KeyID.KEY_ZING_ID);
		String[] aos = zing_ids.split(":");
		List<String> all_zing_keys = new ArrayList<String>();
		for (String s : aos)
		{
			String key = "zing" + "_" + s + "_" + "u";
			all_zing_keys.add(key);
		}
		
		StringBuilder result = new StringBuilder();
		try
		{
			Map<String, Object> all_friend_uid = DBConnector.GetMembaseServerForGeneralData().GetMulti(all_zing_keys);
			for (Map.Entry<String, Object> e : all_friend_uid.entrySet())
			{
				String key = e.getKey();
				all_zing_keys.remove(key);
			}
			
			for (String s : all_zing_keys)
			{
				String[] inner_aos = s.split("_");
				if (result.length() > 0)
					result.append(":").append(inner_aos[1]);
				else
					result.append(inner_aos[1]);
			}
		}
		catch (Exception e)
		{
			LogHelper.LogException("load friend uid from zing id", e);
		}
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addString(KeyID.KEY_ZING_ID, result.toString());
		
		try
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex)
		{
			LogHelper.LogException("handleFilterZingFriend", ex);
		}
	}
	
	private void handleUpdatePhoneNumber(FBEncrypt encrypt)
	{
		String phone_number = encrypt.getString(KeyID.KEY_PHONE_NUMBER);
		if (private_info != null)
		{
			private_info.SetPhoneNumber(phone_number);
			SET_DB_VALUE_BINARY(KeyID.KEY_PRIVATE_INFO, private_info.GetData());
		}
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_PRIVATE_INFO, private_info.GetData());
		
		try
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex)
		{
			LogHelper.LogException("handleUpdatePhoneNumber", ex);
		}
	}
	
	private void handleReceivedBannerCrossInstall(FBEncrypt encrypt)
	{
		String package_name = encrypt.getString(KeyID.KEY_CROSS_PROMOTION_PACKAGE_NAME);
		if (package_name == null || package_name.length() == 0 && package_name.equals(""))
		{
			LogHelper.Log("invalid package name: " + package_name);
			requestError();
			return;
		}
		
		StringBuilder log = new StringBuilder();
		log.append(Misc.getCurrentDateTime());								//  1. thoi gian tieu tien
		log.append('\t').append("ViewBanner_").append(package_name);			//  2. hanh dong cua gamer
		log.append('\t').append(userInfo.getID());							//  3. id
		log.append('\t').append(userInfo.getID());							//  4. role id
		log.append('\t').append(userInfo.getName());						//  5. name
		log.append('\t').append(SkyGarden._server_id);											//  6. server id
		log.append('\t').append(userInfo.getLevel());						//  7. level
		LogHelper.Log(LogHelper.LogType.TRACKING_ACTION, log.toString());
				
		// send result to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());

		try 
		{
			_client.WriteZip(response.toByteArray());
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("handleReceivedBannerCrossInstall", ex);
		}
	}
	
	private void handleReceiveGiftCrossInstall(FBEncrypt encrypt)
	{
		if (!_use_cross_promotion)
			return;
		
		String package_name = encrypt.getString(KeyID.KEY_CROSS_PROMOTION_PACKAGE_NAME);
		if (package_name == null || package_name.length() == 0 && package_name.equals(""))
		{
			LogHelper.Log("invalid package name: " + package_name);
			requestError();
			return;
		}
		
		// check if the package name is in the promotion list
		String promotion_data = "null";
		try
		{
			if (_device_platform.equals("ANDROID"))
			{
				promotion_data = (String)DBConnector.GetMembaseServerForTemporaryData().Get(KeyID.KEY_CROSS_PROMOTION_ANDROID);
			}
			else
			{
				promotion_data = (String)DBConnector.GetMembaseServerForTemporaryData().Get(KeyID.KEY_CROSS_PROMOTION_IOS);
			}
		}
		catch (Exception e)
		{
			promotion_data = "null";
		}
		
		if (!promotion_data.contains(package_name))
		{
			LogHelper.Log("the package name is not in promotion: " + package_name);
			requestError();
			return;
		}
		
		// check if already received this gift
		if (userInfo.IsReceivedGiftInstall(package_name))
		{
			LogHelper.Log("already received gift, package name = " + package_name + ", received list = " + userInfo.GetReceivedGiftInstall());
			requestError();
			return;
		}
		
		// check if cross promotion is available
		if (!cross_promotion.isAvailable())
		{
			LogHelper.Log("cross promotion is not available");
			requestError();
			return;
		}
		
		userInfo.SetReceivedGiftInstall(package_name);
		String gift_name = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][25][DatabaseID.GIFT_INFO_NAME]);
		String gift_desc = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][25][DatabaseID.GIFT_INFO_DESCRIPTION]);
		String gift_list = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][25][DatabaseID.GIFT_INFO_ITEMS_LIST]);
		
		gift_mgr.AddGiftBox(gift_name, gift_desc, gift_list);
		gift_mgr.SaveDataToDatabase(KeyID.KEY_GIFT);
		MoveGiftBoxToMailBox();
		
		SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
		LogHelper.Log("received gift cross promotion ok.");
		
		// send result to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_USER_INFOS, GetUserInfo().getData(false));
		if (GetGiftManager()._gifts.size() > 0)
		{
			response.addInt(KeyID.KEY_GIFT_ID, GetGiftManager()._gifts.getLast().GetId());
			response.addString(KeyID.KEY_GIFT_NAME, GetGiftManager()._gifts.getLast().GetName());
			response.addString(KeyID.KEY_GIFT_DESCRIPTION, GetGiftManager()._gifts.getLast().GetDescription());
			response.addString(KeyID.KEY_GIFT_ITEM_LIST, GetGiftManager()._gifts.getLast().GetItemList());
		}
		response.addBoolean(KeyID.KEY_NEW_MAIL, true);

		try 
		{
			_client.WriteZip(response.toByteArray());
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("handleReceiveGiftCrossInstall", ex);
		}
	}
	
	private void handleRefillZalo()
	{
		long app_time				= System.currentTimeMillis();
		String app_transaction_id	= UUID.randomUUID().toString();
		long amount					= 0;
		String description			= "cgmz_pay_zalo";
		String embed_data			= Long.toString(_user_id);
		
		StringBuilder sb = new StringBuilder();
		sb.append(ProjectConfig.ZALO_APP_ID);
		sb.append(app_transaction_id);
		sb.append(amount);
		sb.append(app_time);
		sb.append(description);
		sb.append(embed_data);
		
		String mac = HMACHelper.HMacHexStringEncode(HMACHelper.HMACS.get(ProjectConfig.ZALO_PAYMENT_SECURE_METHOD), ProjectConfig.ZALO_PAYMENT_KEY_1, sb.toString());
		
		// send result to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addLong(KeyID.KEY_ZALO_PAYMENT_APP_TIME, app_time);
		response.addString(KeyID.KEY_ZALO_PAYMENT_APP_TRANSACTION_ID, app_transaction_id);
		response.addLong(KeyID.KEY_ZALO_PAYMENT_AMOUNT, amount);
		response.addString(KeyID.KEY_ZALO_PAYMENT_DESCRIPTION, description);
		response.addString(KeyID.KEY_ZALO_PAYMENT_EMBED_DATA, embed_data);
		response.addString(KeyID.KEY_ZALO_PAYMENT_MAC, mac);
		response.addString(KeyID.KEY_ZALO_SECRET_KEY, ProjectConfig.ZALO_PAYMENT_KEY_1);

		try 
		{
			_client.WriteZip(response.toByteArray());
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("handleRefillZalo", ex);
		}
	}
	
	private void handleGetZaloToken(FBEncrypt encrypt)
	{
		if (_zalo_token.equals(""))
		{
			Server._task_queue.AddTask(new ZaloGetTokenTask(_client, encrypt));
			return;
		}
		
		// send result to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addString(KeyID.KEY_ZALO_ACCESS_TOKEN, _zalo_token);
		
		try 
		{
			_client.WriteZip(response.toByteArray());
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("handleGetZaloToken", ex);
		}
	}
	
	private void handleReceiveGiftEventMidAutumnFestival()
	{
		if (!_use_event_mid_autumn_festival)
		{
			LogHelper.Log("handleReceiveGiftEventMidAutumnFestival .. not in event");
			requestError();
			return;
		}
		
		int current_gift_id = userInfo.GetGiftBoxReceivedEventMidAutumn();
		int next_gift_id	= current_gift_id + 1;
		
		if (next_gift_id >= Server.s_globalDB[DatabaseID.SHEET_EVENT_MID_AUTUMN].length)
		{
			LogHelper.Log("invalid gift id");
			requestError();
			return;
		}
		
		int num_moon_cake_required = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_EVENT_MID_AUTUMN][next_gift_id][DatabaseID.EVENT_MID_AUTUMN_NUM_REQUIRE]);
		
		if (userInfo.GetEventNum(KeyID.KEY_EVENT_MID_AUTUMN_FESTIVAL) < num_moon_cake_required)
		{
			LogHelper.Log("not enough moon cake, current moon cake = " + userInfo.GetEventNum(KeyID.KEY_EVENT_MID_AUTUMN_FESTIVAL));
			requestError();
			return;
		}
		
		userInfo.SetGiftBoxReceivedEventMidAutumn(next_gift_id);
		SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
		
		// get gift
		String gift_name = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][27][DatabaseID.GIFT_INFO_NAME]);
		String gift_description = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][27][DatabaseID.GIFT_INFO_DESCRIPTION]);
		gift_description = gift_description.replace("0xff", num_moon_cake_required + "");
		String gift_list = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_EVENT_MID_AUTUMN][next_gift_id][DatabaseID.EVENT_MID_AUTUMN_GIFT_ITEM]);
		
		// add gift box
		gift_mgr.AddGiftBox(gift_name, gift_description, gift_list);
		gift_mgr.SaveDataToDatabase(KeyID.KEY_GIFT);
		MoveGiftBoxToMailBox();
		
		StringBuilder log = new StringBuilder();
		log.append(Misc.getCurrentDateTime());								//  1. thoi gian tieu tien
		log.append('\t').append("ReceiveGiftEventMidAutumnFestival" + "_" + next_gift_id);			//  2. hanh dong cua gamer
		log.append('\t').append(userInfo.getID());							//  3. id
		log.append('\t').append(userInfo.getID());							//  4. role id
		log.append('\t').append(userInfo.getName());						//  5. name
		log.append('\t').append(0);											//  6. server id
		log.append('\t').append(userInfo.getLevel());						//  7. level
		LogHelper.Log(LogHelper.LogType.TRACKING_ACTION, log.toString());
		
		// send result to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_USER_INFOS, GetUserInfo().getData(false));
		if (GetGiftManager()._gifts.size() > 0)
		{
			response.addInt(KeyID.KEY_GIFT_ID, GetGiftManager()._gifts.getLast().GetId());
			response.addString(KeyID.KEY_GIFT_NAME, GetGiftManager()._gifts.getLast().GetName());
			response.addString(KeyID.KEY_GIFT_DESCRIPTION, GetGiftManager()._gifts.getLast().GetDescription());
			response.addString(KeyID.KEY_GIFT_ITEM_LIST, GetGiftManager()._gifts.getLast().GetItemList());
		}
		response.addBoolean(KeyID.KEY_NEW_MAIL, true);

		try 
		{
			_client.WriteZip(response.toByteArray());
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("handleNotifyShareFBFinish", ex);
		}
	}
	
	private void handleReceiveGiftEvent2011()
	{
		if (!_use_event_20_11)
		{
			LogHelper.Log("handleReceiveGiftEvent2011 .. not in event");
			requestError();
			return;
		}
		
		int current_gift_id = userInfo.GetGiftBoxReceived2011();
		int next_gift_id	= current_gift_id + 1;
		
		if (next_gift_id >= Server.s_globalDB[DatabaseID.SHEET_EVENT_MID_AUTUMN].length)
		{
			LogHelper.Log("invalid gift id");
			requestError();
			return;
		}
		
		int num_required = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_EVENT_MID_AUTUMN][next_gift_id][DatabaseID.EVENT_MID_AUTUMN_NUM_REQUIRE]);
		
		if (userInfo.GetEventNum(KeyID.KEY_EVENT_20_11) < num_required)
		{
			LogHelper.Log("not enough item, current value = " + userInfo.GetEventNum(KeyID.KEY_EVENT_20_11));
			requestError();
			return;
		}
		
		userInfo.SetGiftBoxReceived2011(next_gift_id);
		SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
		
		// get gift
		String gift_name = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][38][DatabaseID.GIFT_INFO_NAME]);
		String gift_description = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][38][DatabaseID.GIFT_INFO_DESCRIPTION]);
		gift_description = gift_description.replace("0xff", num_required + "");
		String gift_list = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_EVENT_MID_AUTUMN][next_gift_id][DatabaseID.EVENT_MID_AUTUMN_GIFT_ITEM]);
		
		// add gift box
		gift_mgr.AddGiftBox(gift_name, gift_description, gift_list);
		gift_mgr.SaveDataToDatabase(KeyID.KEY_GIFT);
		MoveGiftBoxToMailBox();
		
		StringBuilder log = new StringBuilder();
		log.append(Misc.getCurrentDateTime());								//  1. thoi gian tieu tien
		log.append('\t').append("ReceiveGiftEventMid2011" + "_" + next_gift_id);			//  2. hanh dong cua gamer
		log.append('\t').append(userInfo.getID());							//  3. id
		log.append('\t').append(userInfo.getID());							//  4. role id
		log.append('\t').append(userInfo.getName());						//  5. name
		log.append('\t').append(0);											//  6. server id
		log.append('\t').append(userInfo.getLevel());						//  7. level
		LogHelper.Log(LogHelper.LogType.TRACKING_ACTION, log.toString());
		
		// send result to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_USER_INFOS, GetUserInfo().getData(false));
		response.addBoolean(KeyID.KEY_NEW_MAIL, true);

		try 
		{
			_client.WriteZip(response.toByteArray());
		} 
		catch (Exception ex) 
		{
			LogHelper.LogException("handleReceiveGiftEvent2011", ex);
		}
	}
	
	private void checkReceiveGiftEvent2011()
	{
		if (!_use_event_20_11)
		{
			LogHelper.LogHappy("handleReceiveGiftEvent2011 .. not in event");
//			requestError();
			return;
		}
		
		int current_gift_id = userInfo.GetGiftBoxReceived2011();
		int next_gift_id	= current_gift_id + 1;
		
		if (next_gift_id >= Server.s_globalDB[DatabaseID.SHEET_EVENT_MID_AUTUMN].length)
		{
			LogHelper.LogHappy("invalid gift id");
//			requestError();
			return;
		}
		
		int num_required = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_EVENT_MID_AUTUMN][next_gift_id][DatabaseID.EVENT_MID_AUTUMN_NUM_REQUIRE]);
		
		if (userInfo.GetEventNum(KeyID.KEY_EVENT_20_11) < num_required)
		{
			LogHelper.LogHappy("not enough item, current value = " + userInfo.GetEventNum(KeyID.KEY_EVENT_20_11));
//			requestError();
			return;
		}
		
		userInfo.SetGiftBoxReceived2011(next_gift_id);
		SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
		
		// get gift
		String gift_name = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][38][DatabaseID.GIFT_INFO_NAME]);
		String gift_description = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][38][DatabaseID.GIFT_INFO_DESCRIPTION]);
		gift_description = gift_description.replace("0xff", num_required + "");
		String gift_list = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_EVENT_MID_AUTUMN][next_gift_id][DatabaseID.EVENT_MID_AUTUMN_GIFT_ITEM]);
		
		// add gift box
		gift_mgr.AddGiftBox(gift_name, gift_description, gift_list);
		gift_mgr.SaveDataToDatabase(KeyID.KEY_GIFT);
		MoveGiftBoxToMailBox();
		
		StringBuilder log = new StringBuilder();
		log.append(Misc.getCurrentDateTime());								//  1. thoi gian tieu tien
		log.append('\t').append("ReceiveGiftEventMid2011" + "_" + next_gift_id);			//  2. hanh dong cua gamer
		log.append('\t').append(userInfo.getID());							//  3. id
		log.append('\t').append(userInfo.getID());							//  4. role id
		log.append('\t').append(userInfo.getName());						//  5. name
		log.append('\t').append(0);											//  6. server id
		log.append('\t').append(userInfo.getLevel());						//  7. level
		LogHelper.Log(LogHelper.LogType.TRACKING_ACTION, log.toString());
		
//		// send result to client
//		FBEncrypt response = new FBEncrypt();
//		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
//		response.addBinary(KeyID.KEY_USER_INFOS, GetUserInfo().getData(false));
//		response.addBoolean(KeyID.KEY_NEW_MAIL, true);
//
//		try 
//		{
//			_client.WriteZip(response.toByteArray());
//		} 
//		catch (Exception ex) 
//		{
//			LogHelper.LogException("handleReceiveGiftEvent2011", ex);
//		}
	}
	
	private void checkReceiveGiftEventXmasMini()
	{
		if (!_use_event_xmas_mini)
		{
			LogHelper.LogHappy("checkReceiveGiftEventXmasMini .. not in event");
			return;
		}
		
		int current_gift_id = userInfo.GetGiftBoxReceivedXmasMini();
		int next_gift_id	= current_gift_id + 1;
		
		if (next_gift_id >= Server.s_globalDB[DatabaseID.SHEET_EVENT_MID_AUTUMN].length)
		{
			LogHelper.LogHappy("invalid gift id");
			return;
		}
		
		int num_required = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_EVENT_MID_AUTUMN][next_gift_id][DatabaseID.EVENT_MID_AUTUMN_NUM_REQUIRE]);
		if (userInfo.GetEventNum(KeyID.KEY_EVENT_XMAS_MINI) < num_required)
		{
			LogHelper.LogHappy("not enough item, current value = " + userInfo.GetEventNum(KeyID.KEY_EVENT_XMAS_MINI));
			return;
		}
		
		userInfo.SetGiftBoxReceivedXmasMini(next_gift_id);
		SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
		
		// get gift
		String gift_name = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][42][DatabaseID.GIFT_INFO_NAME]);
		String gift_description = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][42][DatabaseID.GIFT_INFO_DESCRIPTION]);
		gift_description = gift_description.replace("0xff", num_required + "");
		String gift_list = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_EVENT_MID_AUTUMN][next_gift_id][DatabaseID.EVENT_MID_AUTUMN_GIFT_ITEM]);
		
		// add gift box
		gift_mgr.AddGiftBox(gift_name, gift_description, gift_list);
		gift_mgr.SaveDataToDatabase(KeyID.KEY_GIFT);
		MoveGiftBoxToMailBox();
		
		StringBuilder log = new StringBuilder();
		log.append(Misc.getCurrentDateTime());								//  1. thoi gian tieu tien
		log.append('\t').append("ReceiveGiftEventXmasMini" + "_" + next_gift_id);			//  2. hanh dong cua gamer
		log.append('\t').append(userInfo.getID());							//  3. id
		log.append('\t').append(userInfo.getID());							//  4. role id
		log.append('\t').append(userInfo.getName());						//  5. name
		log.append('\t').append(0);											//  6. server id
		log.append('\t').append(userInfo.getLevel());						//  7. level
		LogHelper.Log(LogHelper.LogType.TRACKING_ACTION, log.toString());
	}
	
	private void handleReceiveGiftEventExport()
	{
		if (!_use_event_export)
		{
			LogHelper.Log("handleReceiveGiftEventMidAutumnFestival .. not in event");
//			requestError();
			return;
		}
		
		int current_gift_id = userInfo.GetGiftBoxReceivedEventExport();
		int next_gift_id	= current_gift_id + 1;
		
		if (next_gift_id >= Server.s_globalDB[DatabaseID.SHEET_EVENT_MID_AUTUMN].length)
		{
			LogHelper.Log("invalid gift id");
//			requestError();
			return;
		}
		
		int num_airship_point_required = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_EVENT_MID_AUTUMN][next_gift_id][DatabaseID.EVENT_MID_AUTUMN_NUM_REQUIRE]);
		
		if (userInfo.GetEventNum(KeyID.KEY_EVENT_EXPORT) < num_airship_point_required)
		{
			LogHelper.Log("not enough airship point, current airship point = " + userInfo.GetEventNum(KeyID.KEY_EVENT_EXPORT) + ", require = " + num_airship_point_required);
			return;
		}
		
		userInfo.SetGiftBoxReceivedEventExport(next_gift_id);
		SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
		
		// get gift
		String gift_name = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][30][DatabaseID.GIFT_INFO_NAME]);
		String gift_description = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][30][DatabaseID.GIFT_INFO_DESCRIPTION]);
		gift_description = gift_description.replace("0xff", num_airship_point_required + "");
		String gift_list = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_EVENT_MID_AUTUMN][next_gift_id][DatabaseID.EVENT_MID_AUTUMN_GIFT_ITEM]);
		
		// add gift box
		gift_mgr.AddGiftBox(gift_name, gift_description, gift_list);
		gift_mgr.SaveDataToDatabase(KeyID.KEY_GIFT);
		MoveGiftBoxToMailBox();
		
		StringBuilder log = new StringBuilder();
		log.append(Misc.getCurrentDateTime());								//  1. thoi gian tieu tien
		log.append('\t').append("ReceiveGiftEventExport" + "_" + next_gift_id);			//  2. hanh dong cua gamer
		log.append('\t').append(userInfo.getID());							//  3. id
		log.append('\t').append(userInfo.getID());							//  4. role id
		log.append('\t').append(userInfo.getName());						//  5. name
		log.append('\t').append(0);											//  6. server id
		log.append('\t').append(userInfo.getLevel());						//  7. level
		LogHelper.Log(LogHelper.LogType.TRACKING_ACTION, log.toString());
//		
//		// send result to client
//		FBEncrypt response = new FBEncrypt();
//		_command_id = CommandID.CMD_RECEIVED_GIFT_MID_AUTUMN_FESTIVAL;
//		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
//		response.addBinary(KeyID.KEY_USER_INFOS, GetUserInfo().getData(false));
//		if (GetGiftManager()._gifts.size() > 0)
//		{
//			response.addInt(KeyID.KEY_GIFT_ID, GetGiftManager()._gifts.getLast().GetId());
//			response.addString(KeyID.KEY_GIFT_NAME, GetGiftManager()._gifts.getLast().GetName());
//			response.addString(KeyID.KEY_GIFT_DESCRIPTION, GetGiftManager()._gifts.getLast().GetDescription());
//			response.addString(KeyID.KEY_GIFT_ITEM_LIST, GetGiftManager()._gifts.getLast().GetItemList());
//		}
//
//		try 
//		{
//			_client.WriteZip(response.toByteArray());
//		} 
//		catch (Exception ex) 
//		{
//			LogHelper.LogException("handleNotifyShareFBFinish", ex);
//		}
	}
	
	private void handleReceiveGiftEventHalloween()
	{
		if (!_use_event_halloween || !_use_stock_event)
		{
			LogHelper.Log("handleReceiveGiftEventHalloween .. not in event");
			return;
		}
		
		int current_gift_id = userInfo.GetGiftBoxReceivedEventHalloween();
		int next_gift_id	= current_gift_id + 1;
		
		if (next_gift_id >= Server.s_globalDB[DatabaseID.SHEET_EVENT_MID_AUTUMN].length)
		{
			LogHelper.Log("invalid gift id");
			return;
		}
		
		int item_required = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_EVENT_MID_AUTUMN][next_gift_id][DatabaseID.EVENT_MID_AUTUMN_NUM_REQUIRE]);
		int current_num = stock_event.getProductNum(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_HALLOWEEN_4);
		if (current_num < item_required)
		{
			LogHelper.Log("not enough item, current item num = " + current_num + ", require = " + item_required);
			return;
		}
		
		userInfo.SetGiftBoxReceivedEventHalloween(next_gift_id);
		SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
		
		// get gift
		String gift_name = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][36][DatabaseID.GIFT_INFO_NAME]);
		String gift_description = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][36][DatabaseID.GIFT_INFO_DESCRIPTION]);
		gift_description = gift_description.replace("0xff", item_required + "");
		String gift_list = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_EVENT_MID_AUTUMN][next_gift_id][DatabaseID.EVENT_MID_AUTUMN_GIFT_ITEM]);
		
		// add gift box
		gift_mgr.AddGiftBox(gift_name, gift_description, gift_list);
		gift_mgr.SaveDataToDatabase(KeyID.KEY_GIFT);
		MoveGiftBoxToMailBox();
		
		StringBuilder log = new StringBuilder();
		log.append(Misc.getCurrentDateTime());								//  1. thoi gian tieu tien
		log.append('\t').append("ReceiveGiftEventHalloween" + "_" + next_gift_id);			//  2. hanh dong cua gamer
		log.append('\t').append(userInfo.getID());							//  3. id
		log.append('\t').append(userInfo.getID());							//  4. role id
		log.append('\t').append(userInfo.getName());						//  5. name
		log.append('\t').append(0);											//  6. server id
		log.append('\t').append(userInfo.getLevel());						//  7. level
		LogHelper.Log(LogHelper.LogType.TRACKING_ACTION, log.toString());
		
		if (_command_id != CommandID.CMD_LOGIN)
		{
			// send result to client
			FBEncrypt response = new FBEncrypt();
			_command_id = CommandID.CMD_RECEIVED_GIFT_MID_AUTUMN_FESTIVAL;
			_return_id = ReturnCode.RESPONSE_OK;
			response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
			response.addBinary(KeyID.KEY_USER_INFOS, GetUserInfo().getData(false));

			MailBox mailbox = new MailBox(userInfo);
			mailbox.Load();
			response.addBinary(KeyID.KEY_MAIL_BOX, mailbox.GetData());

			try 
			{
				_client.WriteZip(response.toByteArray());
			} 
			catch (Exception ex) 
			{
				LogHelper.LogException("handleReceiveGiftEventHalloween", ex);
			}
		}
	}
	
	private void handleReceiveGiftEventXmas2014()
	{
		if (!_use_event_xmas_2014 || !_use_stock_event)
		{
			LogHelper.Log("handleReceiveGiftEventXmas2014 .. not in event");
			return;
		}
		
		int current_gift_id = userInfo.GetGiftBoxReceivedEventXmas2014();
		int next_gift_id	= current_gift_id + 1;
		
		if (next_gift_id >= Server.s_globalDB[DatabaseID.SHEET_EVENT_MID_AUTUMN].length)
		{
			LogHelper.Log("invalid gift id");
			return;
		}
		
		int item_required = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_EVENT_MID_AUTUMN][next_gift_id][DatabaseID.EVENT_MID_AUTUMN_NUM_REQUIRE]);
		int current_num = stock_event.getProductNum(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_XMAS_2014_4);
		if (current_num < item_required)
		{
			LogHelper.Log("not enough item, current item num = " + current_num + ", require = " + item_required);
			return;
		}
		
		userInfo.SetGiftBoxReceivedEventXmas2014(next_gift_id);
		SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
		
		// get gift
		String gift_name = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][40][DatabaseID.GIFT_INFO_NAME]);
		String gift_description = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][40][DatabaseID.GIFT_INFO_DESCRIPTION]);
		gift_description = gift_description.replace("0xff", item_required + "");
		String gift_list = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_EVENT_MID_AUTUMN][next_gift_id][DatabaseID.EVENT_MID_AUTUMN_GIFT_ITEM]);
		
		// add gift box
		gift_mgr.AddGiftBox(gift_name, gift_description, gift_list);
		gift_mgr.SaveDataToDatabase(KeyID.KEY_GIFT);
		MoveGiftBoxToMailBox();
		
		StringBuilder log = new StringBuilder();
		log.append(Misc.getCurrentDateTime());								//  1. thoi gian tieu tien
		log.append('\t').append("handleReceiveGiftEventXmas2014" + "_" + next_gift_id);			//  2. hanh dong cua gamer
		log.append('\t').append(userInfo.getID());							//  3. id
		log.append('\t').append(userInfo.getID());							//  4. role id
		log.append('\t').append(userInfo.getName());						//  5. name
		log.append('\t').append(0);											//  6. server id
		log.append('\t').append(userInfo.getLevel());						//  7. level
		LogHelper.Log(LogHelper.LogType.TRACKING_ACTION, log.toString());
		
		if (_command_id != CommandID.CMD_LOGIN)
		{
			// send result to client
			FBEncrypt response = new FBEncrypt();
			_command_id = CommandID.CMD_RECEIVED_GIFT_MID_AUTUMN_FESTIVAL;
			_return_id = ReturnCode.RESPONSE_OK;
			response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
			response.addBinary(KeyID.KEY_USER_INFOS, GetUserInfo().getData(false));

			MailBox mailbox = new MailBox(userInfo);
			mailbox.Load();
			response.addBinary(KeyID.KEY_MAIL_BOX, mailbox.GetData());

			try 
			{
				_client.WriteZip(response.toByteArray());
			} 
			catch (Exception ex) 
			{
				LogHelper.LogException("handleReceiveGiftEventXmas2014", ex);
			}
		}
	}
	
	private void handleReceiveGiftEventXmasTreeAllServer()
	{
		if (!_use_event_xmas_tree || !_use_stock_event) {
			return;
		}
		
		if (userInfo.GetEventNum(KeyID.KEY_EVENT_BIRTDAY_2015) <= 0) {
			return;
		}
		
		// gift server
		long current_num = GetTotalServerEventCounter();
		String[] server_require = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][41][DatabaseID.GIFT_INFO_ITEMS_LIST]).split(":");
		for (int i = 0; i < server_require.length; i++)
		{
			int require = Integer.parseInt(server_require[i]);
			LogHelper.LogHappy("GiftSever, require := " + require + ", current := " + current_num);
			if (current_num >= require)
			{
				if (GameUtil.GetUserMisc(_user_id).Get("happy_birthday_2015" + "_" + i).equals(""))
				{
					// set as received
					GameUtil.GetUserMisc(_user_id).Set("happy_birthday_2015" + "_" + i, "Received at " + Misc.getCurrentDateTime()); 
					
					// give gift
					String gift_name = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][44][DatabaseID.GIFT_INFO_NAME]);
					String gift_description = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][44][DatabaseID.GIFT_INFO_DESCRIPTION]);
					gift_description = gift_description.replace("0xff", require + "");
					String gift_list = "";
					switch (i)
					{
						case 0:
							gift_list = DatabaseID.IT_MONEY + ":" + DatabaseID.GOLD_ID + ":" + 10000; // 10000 gold
							break;
						case 1:
							gift_list = DatabaseID.IT_MONEY + ":" + DatabaseID.GOLD_ID + ":" + 30000; // 30000 gold
							break;
						case 2:
							gift_list = DatabaseID.IT_DECOR + ":" + 7 + ":" + 2; // butterfly
							break;
						case 3:
							gift_list = DatabaseID.IT_MATERIAL + ":" + 33 + ":" + 2; // 100000 gold
							break;
						case 4:
							gift_list = DatabaseID.IT_POT + ":" + 18 + ":" + 1 + ":" + DatabaseID.IT_POT + ":" + 19 + ":" + 1 + ":" + DatabaseID.IT_MATERIAL + ":" + 33 + ":" + 1;
							break;
						default:
							LogHelper.Log("ERROR! INVALID SERVER GIFT ID := " + i);
							return;
					}
					
					gift_mgr.AddGiftBox(gift_name, gift_description, gift_list);
					gift_mgr.SaveDataToDatabase(KeyID.KEY_GIFT);
					MoveGiftBoxToMailBox();

					StringBuilder log = new StringBuilder();
					log.append(Misc.getCurrentDateTime());								//  1. thoi gian tieu tien
					log.append('\t').append("handleReceiveGiftEventBirthdayTreeServer" + "_" + i);			//  2. hanh dong cua gamer
					log.append('\t').append(userInfo.getID());							//  3. id
					log.append('\t').append(userInfo.getID());							//  4. role id
					log.append('\t').append(userInfo.getName());						//  5. name
					log.append('\t').append(0);											//  6. server id
					log.append('\t').append(userInfo.getLevel());						//  7. level
					LogHelper.Log(LogHelper.LogType.TRACKING_ACTION, log.toString());
					
					LogHelper.LogHappy("Give gift id := " + i + ", gift list := " + gift_list);
				}
				else
				{
					LogHelper.LogHappy("Already received gift := " + i);
				}
			}
			else
			{
				break;
			}
		}
	}
	
	private void handleReceiveGiftEventXmasTree() // birtday2015
	{
		if (!_use_event_xmas_tree || !_use_stock_event){
			LogHelper.Log("handleReceiveGiftEventXmasTree .. not in event");
			return;
		}
		
		int current_gift_id = userInfo.GetGiftBoxReceivedEventBirthday2015();
		int next_gift_id	= current_gift_id + 1;
		
		if (next_gift_id >= Server.s_globalDB[DatabaseID.SHEET_EVENT_MID_AUTUMN].length)
		{
			LogHelper.Log("invalid gift id");
			return;
		}
		
		int item_required = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_EVENT_MID_AUTUMN][next_gift_id][DatabaseID.EVENT_MID_AUTUMN_NUM_REQUIRE]);
		int current_num = userInfo.GetEventNum(KeyID.KEY_EVENT_BIRTDAY_2015);
		if (current_num < item_required)
		{
			LogHelper.Log("not enough item, current item num = " + current_num + ", require = " + item_required);
			return;
		}
		
		userInfo.SetGiftBoxReceivedEventBirthday2015(next_gift_id);
		SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
		
		// get gift
		String gift_name = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][41][DatabaseID.GIFT_INFO_NAME]);
		String gift_description = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][41][DatabaseID.GIFT_INFO_DESCRIPTION]);
		gift_description = gift_description.replace("0xff", item_required + "");
		String gift_list = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_EVENT_MID_AUTUMN][next_gift_id][DatabaseID.EVENT_MID_AUTUMN_GIFT_ITEM]);
		
		// add gift box
		gift_mgr.AddGiftBox(gift_name, gift_description, gift_list);
		gift_mgr.SaveDataToDatabase(KeyID.KEY_GIFT);
		MoveGiftBoxToMailBox();
		
		StringBuilder log = new StringBuilder();
		log.append(Misc.getCurrentDateTime());								//  1. thoi gian tieu tien
		log.append('\t').append("handleReceiveGiftEventBirthday2015" + "_" + next_gift_id);			//  2. hanh dong cua gamer
		log.append('\t').append(userInfo.getID());							//  3. id
		log.append('\t').append(userInfo.getID());							//  4. role id
		log.append('\t').append(userInfo.getName());						//  5. name
		log.append('\t').append(0);											//  6. server id
		log.append('\t').append(userInfo.getLevel());						//  7. level
		LogHelper.Log(LogHelper.LogType.TRACKING_ACTION, log.toString());
		
		if (_command_id != CommandID.CMD_LOGIN && _command_id != CommandID.CMD_COME_BACK_HOME)
		{
			// send result to client
			FBEncrypt response = new FBEncrypt();
			_command_id = CommandID.CMD_RECEIVED_GIFT_MID_AUTUMN_FESTIVAL;
			_return_id = ReturnCode.RESPONSE_OK;
			response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
			response.addBinary(KeyID.KEY_USER_INFOS, GetUserInfo().getData(false));

			MailBox mailbox = new MailBox(userInfo);
			mailbox.Load();
			response.addBinary(KeyID.KEY_MAIL_BOX, mailbox.GetData());

			try 
			{
				_client.WriteZip(response.toByteArray());
			}
			catch (Exception ex) 
			{
				LogHelper.LogException("handleReceiveGiftEventXmasTree", ex);
			}
		}
	}
	
	private void handleReceiveGiftEventUpgradePot()
	{
		if (!_use_event_uprade_pot)
		{
			LogHelper.Log("handleReceiveGiftEventUpgradePot .. not in event");
			return;
		}
		
		int current_gift_id = userInfo.GetGiftBoxReceivedEventUpgradePot();
		int next_gift_id	= current_gift_id + 1;
		
		if (next_gift_id >= Server.s_globalDB[DatabaseID.SHEET_EVENT_MID_AUTUMN].length)
		{
			LogHelper.Log("invalid gift id");
			return;
		}
		
		int required = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_EVENT_MID_AUTUMN][next_gift_id][DatabaseID.EVENT_MID_AUTUMN_NUM_REQUIRE]);
		if (userInfo.GetEventNum(KeyID.KEY_EVENT_UPGRADE_POT) < required)
		{
			LogHelper.Log("not enough score, current score = " + userInfo.GetEventNum(KeyID.KEY_EVENT_UPGRADE_POT) + ", require = " + required);
			return;
		}
		
		userInfo.SetGiftBoxReceivedEventUpgradePot(next_gift_id);
		SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
		
		// get gift
		String gift_name = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][39][DatabaseID.GIFT_INFO_NAME]);
		String gift_description = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][39][DatabaseID.GIFT_INFO_DESCRIPTION]);
		gift_description = gift_description.replace("0xff", required + "");
		String gift_list = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_EVENT_MID_AUTUMN][next_gift_id][DatabaseID.EVENT_MID_AUTUMN_GIFT_ITEM]);
		
		// add gift box
		gift_mgr.AddGiftBox(gift_name, gift_description, gift_list);
		gift_mgr.SaveDataToDatabase(KeyID.KEY_GIFT);
		MoveGiftBoxToMailBox();
		
		
		StringBuilder log = new StringBuilder();
		log.append(Misc.getCurrentDateTime());								//  1. thoi gian tieu tien
		log.append('\t').append("ReceiveGiftEventUpgradePot" + "_" + next_gift_id);			//  2. hanh dong cua gamer
		log.append('\t').append(userInfo.getID());							//  3. id
		log.append('\t').append(userInfo.getID());							//  4. role id
		log.append('\t').append(userInfo.getName());						//  5. name
		log.append('\t').append(0);											//  6. server id
		log.append('\t').append(userInfo.getLevel());						//  7. level
		LogHelper.Log(LogHelper.LogType.TRACKING_ACTION, log.toString());
		
		if (_command_id != CommandID.CMD_LOGIN)
		{
			// send result to client
			FBEncrypt response = new FBEncrypt();
			_command_id = CommandID.CMD_RECEIVED_GIFT_MID_AUTUMN_FESTIVAL;
			_return_id = ReturnCode.RESPONSE_OK;
			response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
			response.addBinary(KeyID.KEY_USER_INFOS, GetUserInfo().getData(false));

			MailBox mailbox = new MailBox(userInfo);
			mailbox.Load();
			response.addBinary(KeyID.KEY_MAIL_BOX, mailbox.GetData());

			try 
			{
				_client.WriteZip(response.toByteArray());
			} 
			catch (Exception ex) 
			{
				LogHelper.LogException("handleReceiveGiftEventUpgradePot", ex);
			}
		}
	}
	
	private void handleReceiveGiftEventOrder()
	{
		if (!_use_event_order)
		{
			LogHelper.Log("handleReceiveGiftEventOrder .. not in event");
			return;
		}
		
		int current_gift_id = userInfo.GetGiftBoxReceivedEventOrderJan2015();
		int next_gift_id	= current_gift_id + 1;
		
		if (next_gift_id >= Server.s_globalDB[DatabaseID.SHEET_EVENT_MID_AUTUMN].length)
		{
			LogHelper.Log("invalid gift id");
			return;
		}
		
		int required = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_EVENT_MID_AUTUMN][next_gift_id][DatabaseID.EVENT_MID_AUTUMN_NUM_REQUIRE]);
		if (userInfo.GetEventNum(KeyID.KEY_EVENT_ORDER_JAN_2015) < required)
		{
			LogHelper.Log("not enough score, current score = " + userInfo.GetEventNum(KeyID.KEY_EVENT_ORDER_JAN_2015) + ", require = " + required);
			return;
		}
		
		userInfo.SetGiftBoxReceivedEventOrderJan2015(next_gift_id);
		SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
		
		// get gift
		String gift_name = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][50][DatabaseID.GIFT_INFO_NAME]);
		String gift_description = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][50][DatabaseID.GIFT_INFO_DESCRIPTION]);
		gift_description = gift_description.replace("0xff", required + "");
		String gift_list = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_EVENT_MID_AUTUMN][next_gift_id][DatabaseID.EVENT_MID_AUTUMN_GIFT_ITEM]);
		
		// add gift box
		gift_mgr.AddGiftBox(gift_name, gift_description, gift_list);
		gift_mgr.SaveDataToDatabase(KeyID.KEY_GIFT);
		MoveGiftBoxToMailBox();
		
		
		StringBuilder log = new StringBuilder();
		log.append(Misc.getCurrentDateTime());								//  1. thoi gian tieu tien
		log.append('\t').append("ReceiveGiftEventOrder" + "_" + next_gift_id);			//  2. hanh dong cua gamer
		log.append('\t').append(userInfo.getID());							//  3. id
		log.append('\t').append(userInfo.getID());							//  4. role id
		log.append('\t').append(userInfo.getName());						//  5. name
		log.append('\t').append(0);											//  6. server id
		log.append('\t').append(userInfo.getLevel());						//  7. level
		LogHelper.Log(LogHelper.LogType.TRACKING_ACTION, log.toString());
		
		if (_command_id != CommandID.CMD_LOGIN)
		{
			// send result to client
			FBEncrypt response = new FBEncrypt();
			_command_id = CommandID.CMD_RECEIVED_GIFT_MID_AUTUMN_FESTIVAL;
			_return_id = ReturnCode.RESPONSE_OK;
			response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
			response.addBinary(KeyID.KEY_USER_INFOS, GetUserInfo().getData(false));

			MailBox mailbox = new MailBox(userInfo);
			mailbox.Load();
			response.addBinary(KeyID.KEY_MAIL_BOX, mailbox.GetData());

			try 
			{
				_client.WriteZip(response.toByteArray());
			} 
			catch (Exception ex) 
			{
				LogHelper.LogException("handleReceiveGiftEventUpgradePot", ex);
			}
		}
	}
	
	private void handleViewEventScore()
	{
		int score = 0;
		String weblink = "";
		if (_use_event_halloween && _use_stock_event)
		{
			score = stock_event.getProductNum(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_HALLOWEEN_4);
			weblink = "http://kvtm.vn/event/x2airship.html";
		}
		else if (_use_event_xmas_2014 && _use_stock_event)
		{
			score = stock_event.getProductNum(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_XMAS_2014_4);
			weblink = "http://kvtm.vn/event/valentine2014.html";
		}
		else if (_use_event_20_11)
		{
			score = userInfo.GetEventNum(KeyID.KEY_EVENT_20_11);
			weblink = "http://kvtm.vn/event/x2airship.html";
		}
		else if (_use_event_xmas_mini)
		{
			score = userInfo.GetEventNum(KeyID.KEY_EVENT_XMAS_MINI);
			weblink = "http://kvtm.vn/event/x2airship.html";
		}
		else if (_use_event_uprade_pot)
		{
			score = userInfo.GetEventNum(KeyID.KEY_EVENT_UPGRADE_POT);
			weblink = "http://kvtm.vn/event/x2airship.html";
		}
		else if (_use_event_xmas_tree && _use_stock_event)
		{
			score = userInfo.GetEventNum(KeyID.KEY_EVENT_BIRTDAY_2015);
			weblink = "http://kvtm.vn/event/happybirthday2015.html";
		}
		else if (_use_event_new_year_2015)
		{
			String s = GameUtil.GetUserMisc(_user_id).Get(KeyID.KEY_EVENT_NEW_YEAR_2015 + "_" + "opened");
			score = s.equals("") ? 0 : Integer.parseInt(s);
//			score = userInfo.GetEventNum(KeyID.KEY_EVENT_NEW_YEAR_2015);
			weblink = "http://kvtm.vn/event/lunarnewyear2015.html";
		}
		else if (_use_event_8_3_2015) {
			score = userInfo.GetEventNum(KeyID.KEY_EVENT_8_3_2015);
			weblink = "http://kvtm.vn/event/happywomanday2015.html";
		}
		else if (_use_event_order) {
			score = userInfo.GetEventNum(KeyID.KEY_EVENT_ORDER_JAN_2015);
			weblink = "http://kvtm.vn/event/x2airship.html";
		} else if (_use_event_happy_weekend) {
			score = 0;
			weblink = "http://kvtm.vn/event/happyweekend28032015.html";
		}
		
		StringBuilder url = new StringBuilder();
		url.append(weblink);
		url.append("?score=").append(score);
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addStringANSI(KeyID.KEY_ATM_TARGET_URL, url.toString());
		
		try 
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("handleViewEventScore", ex);
		}
	}
	
	private boolean IsFacebookIdUsed(String fb_id)
	{
		String stored_user_id = "";
		try
		{
			stored_user_id = (String)DBConnector.GetMembaseServerForGeneralData().Get("fb" + "_" + fb_id + "_" + "u");
		}
		catch (Exception e)
		{
			stored_user_id = "";
		}

		if (stored_user_id != null && !stored_user_id.equals(""))
		{
//			LogHelper.Log("FB id [" + fb_id + "] is OLD, linked with uid " + stored_user_id);
			return true;
		}
		else
		{
//			LogHelper.Log("FB id [" + fb_id + "] is NEW.");
			return false;
		}
	}
	
	private boolean IsZingIdUsed(String zing_id)
	{
		String stored_user_id = "";
		try
		{
			stored_user_id = (String)DBConnector.GetMembaseServerForGeneralData().Get("zing" + "_" + zing_id + "_" + "u");
		}
		catch (Exception e)
		{
			stored_user_id = "";
		}

		if (stored_user_id != null && !stored_user_id.equals(""))
		{
//			LogHelper.Log("Zing id [" + zing_id + "] is OLD, linked with uid " + stored_user_id);
			return true;
		}
		else
		{
//			LogHelper.Log("Zing id [" + zing_id + "] is NEW.");
			return false;
		}
	}
	
	private boolean IsZaloIdUsed(String zalo_id)
	{
		String stored_user_id = "";
		try
		{
			stored_user_id = (String)DBConnector.GetMembaseServerForGeneralData().Get("zalo" + "_" + zalo_id + "_" + "u");
		}
		catch (Exception e)
		{
			stored_user_id = "";
		}

		if (stored_user_id != null && !stored_user_id.equals("")) // old zalo id
		{
//			LogHelper.Log("Zalo id [" + zalo_id + "] is OLD, linked with uid " + stored_user_id);
			return true;
		}
		else
		{
//			LogHelper.Log("Zalo id [" + zalo_id + "] is NEW.");
			return false;
		}
	}

	
	private void handleLoadUserInfo(FBEncrypt encrypt)
	{
		long id = encrypt.getLong(KeyID.KEY_FRIEND_ID);
		byte[] user_data = ServerHandler.GetUserData(id);
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		if (user_data != null)
		{
			response.addBinary(KeyID.KEY_USER_INFOS, user_data);
		}
		
		try 
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("handleLoadUserInfo", ex);
		}
	}
	
	private void handleLoadMailbox()
	{
		MailBox mailbox = new MailBox(userInfo);
		mailbox.Load();
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_MAIL_BOX, mailbox.GetData());
		
		try 
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("handleLoadMailbox", ex);
		}
	}
	
	private void handleSetMailRead(FBEncrypt encrypt)
	{
		// lock mailbox
		StringBuilder lock_info = new StringBuilder();
		lock_info.append(_user_id).append('_');
		lock_info.append("read").append('_');
		lock_info.append(Misc.SECONDS());
		
		if (!base.Add(_user_id + "_" + "lock_mailbox", lock_info.toString(), 3))
		{
			LogHelper.Log("handleSetMailRead.. error: mailbox data is being locked.");
			requestError();
			return;
		}
		
		MailBox mailbox = new MailBox(userInfo);
		mailbox.Load();
		
		int mail_index = encrypt.getInt(KeyID.KEY_MAIL_INDEX);
		Mail mail = mailbox.GetMailList().get(mail_index);
		if (mail != null)
		{
			mail.SetRead(true);
			mailbox.Save();
//			LogHelper.Log("Set mail index " + mail_index + " as read OK!");
		}
		else
		{
			_return_id = ReturnCode.RESPONSE_ERROR;
//			LogHelper.Log("Invalid mail index = " + mail_index);
		}
		
		base.Delete(_user_id + "_" + "lock_mailbox");
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_MAIL_BOX, mailbox.GetData());
		
		try 
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("handleSetMailRead", ex);
		}
	}
	
	private void handleDeleteMail(FBEncrypt encrypt)
	{
		// lock mailbox
		StringBuilder lock_info = new StringBuilder();
		lock_info.append(_user_id).append('_');
		lock_info.append("delete").append('_');
		lock_info.append(Misc.SECONDS());
		
		if (!base.Add(_user_id + "_" + "lock_mailbox", lock_info.toString(), 3))
		{
			LogHelper.Log("handleSetMailRead.. error: mailbox data is being locked.");
			requestError();
			return;
		}
		
		MailBox mailbox = new MailBox(userInfo);
		mailbox.Load();
		
		String mail_idx_list = encrypt.getString(KeyID.KEY_MAIL_INDEX);
		if (mail_idx_list != null && mail_idx_list.length() > 0)
		{
			String[] mail_index = mail_idx_list.split(";");
			for (String index : mail_index)
			{
				Mail mail = mailbox.GetMailList().get(Integer.parseInt(index));
				String gift_list = mail.GetGiftList();
				if (gift_list.length() > 0 && !gift_list.equals("")) {
					StringBuilder log = new StringBuilder();
					log.append(Misc.getCurrentDateTime());								//  1. thoi gian tieu tien
					log.append('\t').append(Misc.getActionName(_command_id));			//  2. hanh dong cua gamer
					log.append('\t').append(userInfo.getID());							//  3. id
					log.append('\t').append(userInfo.getID());							//  4. role id
					log.append('\t').append(userInfo.getName());						//  5. name
					log.append('\t').append(SkyGarden._server_id);						//  6. server id
					log.append('\t').append(userInfo.getLevel());						//  7. level
					log.append('\t').append(gift_list);									//  8. id item su dung
					log.append('\t').append(1);											//  9. so luong item su dung
					log.append('\t').append(1);											//  10. result
					LogHelper.Log(LogHelper.LogType.DROP_ITEM, log.toString());
				}
				
				mailbox.GetMailList().remove(Integer.parseInt(index));
			}
		}
		
		mailbox.Save();
		
		base.Delete(_user_id + "_" + "lock_mailbox");
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_MAIL_BOX, mailbox.GetData());
		
		try 
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("handleDeleteMail", ex);
		}
	}
	
	private void handleSendMail(FBEncrypt encrypt)
	{
		if (ProjectConfig.IS_SERVER_FREESTYLE != 1)
		{
			return;
		}
		
		long receiver_id = encrypt.getLong(KeyID.KEY_USER_ID);
		
		// lock mailbox
		StringBuilder lock_info = new StringBuilder();
		lock_info.append(_user_id).append('_');
		lock_info.append("delete").append('_');
		lock_info.append(Misc.SECONDS());
		
		if (!base.Add(receiver_id + "_" + "lock_mailbox", lock_info.toString(), 3))
		{
			LogHelper.Log("handleSetMailRead.. error: mailbox data is being locked.");
			requestError();
			return;
		}
		
		Mail mail = new Mail(0, "Chien FA di xe tay ga an banh da - Chien FA di xe tay ga an banh da", "This is a test mail content.", "5:0:10000:7:12:3:7:13:3:0:13:3");
		
		byte[] friend_data = ServerHandler.GetUserData(receiver_id);
		if (friend_data == null)
		{
			LogHelper.Log("Invalid receiver id = " + receiver_id);
			requestError();
			return;
		}
		
		UserInfo friend_info = new UserInfo(friend_data);
		MailBox mailbox = new MailBox(friend_info);
		mailbox.Load();
		mailbox.Add(mail);
		mailbox.Save();
		
		base.Delete(_user_id + "_" + "lock_mailbox");
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		
		try 
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("handleSendMail", ex);
		}
	}
	
	private void handleAcceptMailGift(FBEncrypt encrypt)
	{
		// lock mailbox
		StringBuilder lock_info = new StringBuilder();
		lock_info.append(_user_id).append('_');
		lock_info.append("accept_gift").append('_');
		lock_info.append(Misc.SECONDS());
		
		if (!base.Add(_user_id + "_" + "lock_mailbox", lock_info.toString(), 3))
		{
			LogHelper.Log("handleAcceptMailGift.. error: mailbox data is being locked.");
			requestError();
			return;
		}
		
		MailBox mailbox = new MailBox(userInfo);
		mailbox.Load();
		
		int mail_index = encrypt.getInt(KeyID.KEY_MAIL_INDEX);
		Mail mail = mailbox.GetMailList().get(mail_index);
		
		if (mail == null)
		{
			LogHelper.Log("handleAcceptMailGift.. error: can not get mail id " + mail_index);
			requestError();
			return;
		}
		
		String title = mail.GetTitle();
		String content = mail.GetContent();
		String gift_list = mail.GetGiftList();
		mailbox.GetMailList().remove(mail_index);
		mailbox.Save();
		
		if (gift_list.length() > 0 && !gift_list.equals(""))
		{
			gift2Stock(gift_list, _command_id, title);
		}
		
		base.Delete(_user_id + "_" + "lock_mailbox");
		
		// send result to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_MAIL_BOX, mailbox.GetData());
		response.addBinary(KeyID.KEY_USER_INFOS, GetUserInfo().getData(false));
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, GetStock(DatabaseID.STOCK_SILO).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, GetStock(DatabaseID.STOCK_BARN).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, GetStock(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
		if ((_use_event_halloween || _use_event_xmas_2014 || _use_event_xmas_tree || _use_event_new_year_2015 || _use_event_8_3_2015) && _use_stock_event)
		{
			response.addBinary(KeyID.KEY_STOCK_EVENT, stock_event.getDataToClient());
		}
		
		try 
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("handleAcceptMailGift", ex);
		}
	}
	
	public void MoveGiftBoxToMailBox()
	{
		try
		{
			// lock mailbox
			StringBuilder lock_info = new StringBuilder();
			lock_info.append(_user_id).append('_');
			lock_info.append("move_gift").append('_');
			lock_info.append(Misc.SECONDS());

			if (!base.Add(_user_id + "_" + "lock_mailbox", lock_info.toString(), 3))
			{
				LogHelper.Log("MoveGiftBoxToMailBox.. error: mailbox data is being locked.");
				return;
			}

			MailBox mailbox = new MailBox(userInfo);
			mailbox.Load();

			for (GiftBox gift_box : GetGiftManager()._gifts)
			{
				String name = gift_box.GetName();
				String description = gift_box.GetDescription();
				String gifts = gift_box.GetItemList();
				Mail mail = new Mail(0, name, description, gifts);
				mailbox.Add(mail);
				LogHelper.Log("Moved gift, gift name = " + name + ", description = " + description + ", gifts = " + gifts);
			}

			GetGiftManager()._gifts.clear();
			GetGiftManager().SaveDataToDatabase(KeyID.KEY_GIFT);

			mailbox.Save();

			base.Delete(_user_id + "_" + "lock_mailbox");
		}
		catch (Exception e)
		{
			LogHelper.LogException("MoveGiftBoxToMailBox", e);
		}
	}
	
	public void AppleValidatingReceiptTask(FBEncrypt encrypt)
	{
		String receipt_data = encrypt.getString(KeyID.KEY_RECEIPT_DATA);
		String password = encrypt.getString(KeyID.KEY_RECEIPT_PASSWORD);
		
		if (receipt_data.length() == 0)
		{
			LogHelper.Log("err! empty receipt data.");
			requestError();
			return;
		}
		
		LogHelper.Log("validating apple IAP, receipt = " + receipt_data + ", password = " + password);
		
		try
		{
			new AppleValidatingReceiptTask(_client, _user_id, receipt_data, password);
		}
		catch (Exception e)
		{
			LogHelper.LogException("AppleValidatingReceiptTask", e);
		}
	}
	
	public void AppleValidatingReceiptCallback(int result)
	{
		money_mgr.LoadFromDatabase(KeyID.KEY_MONEY_REAL, KeyID.KEY_MONEY_TOTAL, KeyID.KEY_MONEY_BONUS);
		
		LogHelper.LogHappy("AppleValidatingReceiptCallback");
		FBEncrypt response = new FBEncrypt();
		_command_id = CommandID.CMD_VALIDATE_APPLE_IAP;
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addInt(KeyID.KEY_PAYMENT_RESULT, result == 1 ? 0 : result);
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		
		//respone special offer
		byte[] offerbin = null;
		try
		{
			offerbin = DBConnector.GetMembaseServer(_user_id).GetRaw(_user_id + "_" + KeyID.KEY_SPECIAL_OFFER);
			if (offerbin != null && offerbin.length > 0) 
			{
				Special_Offer _offer = new Special_Offer(offerbin);
				response.addBinary(KeyID.KEY_SPECIAL_OFFER, _offer.getData());//update remaining time
			}
		} 
		catch (Exception e) 
		{
			LogHelper.LogException("AppleValidatingReceiptCallback.loadOfferBin", e);
		}
		
		try
		{
			String last_pay = (String)DBConnector.GetMembaseServer(_user_id).Get(_user_id + "_" + KeyID.KEY_LAST_PAY_TIME);
			response.addStringANSI(KeyID.KEY_LAST_PAY_TIME, last_pay);
		}
		catch (Exception e)
		{
			LogHelper.LogException("AppleValidatingReceiptCallback.ReadLastPay", e);
		}
		
		MailBox mailbox = new MailBox(userInfo);
		mailbox.Load();
		response.addBinary(KeyID.KEY_MAIL_BOX, mailbox.GetData());

		try 
		{
			_client.WriteZip(response.toByteArray());
			LogHelper.LogHappy("AppleValidatingReceiptCallback.. response OK!");
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("AppleValidatingReceiptCallback", ex);
		}
	}
	
	public void handleRequestAndroidDeveloperPayload(FBEncrypt encrypt)
	{
		String product_idx = encrypt.getString(KeyID.KEY_ANDROID_IAB_PRODUCT_ID);
		// gen and save developer payload
		String developer_payload = Misc.Hash(_device_id + _user_id + _session_id, "SHA-256");
		DBConnector.GetMembaseServer(_user_id).Set(_user_id + "_" + "developer_payload", developer_payload);
		LogHelper.LogHappy("developer_payload := " + developer_payload);
		LogHelper.LogHappy("product_idx := " + product_idx);
		
		// send result to client
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addString(KeyID.KEY_ANDROID_DEVELOPER_PAYLOAD, developer_payload);
		response.addString(KeyID.KEY_ANDROID_IAB_PRODUCT_ID, product_idx);

		try 
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("AppleValidatingReceiptCallback", ex);
		}
	}
	
	public void AndroidValidatingReceiptTask(FBEncrypt encrypt)
	{
		String response_code = encrypt.getString(KeyID.KEY_ANDROID_IAB_RESPONSE_CODE);
		String purchase_data = encrypt.getString(KeyID.KEY_ANDROID_IAB_PURCHASE_DATA);
		String data_signature = encrypt.getString(KeyID.KEY_ANDROID_IAP_DATA_SIGNATURE);
		_android_product_id = encrypt.getString(KeyID.KEY_ANDROID_IAB_PRODUCT_ID);
		LogHelper.Log("response_code := " + response_code);
		LogHelper.Log("purchase_data := " + purchase_data);
		LogHelper.Log("data_signature := " + data_signature);
		
		if (response_code.length() > 0 && response_code.equals("0"))
		{
			try
			{
				new AndroidValidatingReceiptTask(_client, _user_id, purchase_data, data_signature);
			}
			catch (Exception e)
			{
				LogHelper.LogException("AndroidValidatingReceiptTask", e);
			}
		}
		else
		{
			LogHelper.LogHappy("Invalid response code = " + response_code);
			requestError();
			return;
		}
	}
	
	public void AndroidValidatingReceiptCallback(int result)
	{
		money_mgr.LoadFromDatabase(KeyID.KEY_MONEY_REAL, KeyID.KEY_MONEY_TOTAL, KeyID.KEY_MONEY_BONUS);
		
		LogHelper.LogHappy("AndroidValidatingReceiptCallback");
		FBEncrypt response = new FBEncrypt();
		_command_id = CommandID.CMD_VALIDATE_ANDROID_RECEIPT;
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addInt(KeyID.KEY_PAYMENT_RESULT, result == 1 ? 0 : result);
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		
		//respone special offer
		byte[] offerbin = null;
		try
		{
			offerbin = DBConnector.GetMembaseServer(_user_id).GetRaw(_user_id + "_" + KeyID.KEY_SPECIAL_OFFER);
			if (offerbin != null && offerbin.length > 0) 
			{
				Special_Offer _offer = new Special_Offer(offerbin);
				response.addBinary(KeyID.KEY_SPECIAL_OFFER, _offer.getData());//update remaining time
			}
		} 
		catch (Exception e) 
		{
			LogHelper.LogException("AndroidValidatingReceiptCallback.loadOfferBin", e);
		}
		
		try
		{
			String last_pay = (String)DBConnector.GetMembaseServer(_user_id).Get(_user_id + "_" + KeyID.KEY_LAST_PAY_TIME);
			response.addStringANSI(KeyID.KEY_LAST_PAY_TIME, last_pay);
		}
		catch (Exception e)
		{
			LogHelper.LogException("AndroidValidatingReceiptCallback.ReadLastPay", e);
		}
		
		MailBox mailbox = new MailBox(userInfo);
		mailbox.Load();
		response.addBinary(KeyID.KEY_MAIL_BOX, mailbox.GetData());
		response.addString(KeyID.KEY_ANDROID_IAB_PRODUCT_ID, _android_product_id);

		try 
		{
			_client.WriteZip(response.toByteArray());
			LogHelper.LogHappy("AndroidValidatingReceiptCallback.. response OK!");
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("AndroidValidatingReceiptCallback", ex);
		}
	}
	
	public void WinPhoneValidatingReceiptTask(FBEncrypt encrypt)
	{
//		if (true)
//		{
//			LogHelper.Log("WINPHONE PAYMENT IS CURRENTLY DISABLED");
//			return;
//		}
		
		int[] aoi = encrypt.getIntArray(KeyID.KEY_RECEIPT_DATA);
		LogHelper.LogHappy("aoi length := " + aoi);
		String receipt_data = new String(aoi, 0, aoi.length);
		_win_product_id = encrypt.getString(KeyID.KEY_WIN_PRODUCT_ID);
		
		LogHelper.LogHappy("receipt_data := " + receipt_data);
		LogHelper.LogHappy("_win_product_id := " + _win_product_id);
		
		try
		{
			new WinValidatingReceiptTask(_client, _user_id, receipt_data);
		}
		catch (Exception e)
		{
			LogHelper.LogException("WinPhoneValidatingReceiptTask", e);
		}
	}
	
	public void WinPhoneValidatingReceiptCallback(String result) throws Exception
	{
		money_mgr.LoadFromDatabase(KeyID.KEY_MONEY_REAL, KeyID.KEY_MONEY_TOTAL, KeyID.KEY_MONEY_BONUS);
		
		LogHelper.LogHappy("WinPhoneValidatingReceiptCallback");
		FBEncrypt response = new FBEncrypt();
		_command_id = CommandID.CMD_VALIDATE_WP_RECEIPT;
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addInt(KeyID.KEY_PAYMENT_RESULT, result.contains("Success") ? 0 : 1);
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		
		//respone special offer
		byte[] offerbin = null;
		try
		{
			offerbin = DBConnector.GetMembaseServer(_user_id).GetRaw(_user_id + "_" + KeyID.KEY_SPECIAL_OFFER);
			if (offerbin != null && offerbin.length > 0) 
			{
				Special_Offer _offer = new Special_Offer(offerbin);
				response.addBinary(KeyID.KEY_SPECIAL_OFFER, _offer.getData());//update remaining time
			}
		}
		catch (Exception e) 
		{
			LogHelper.LogException("WinPhoneValidatingReceiptCallback.loadOfferBin", e);
		}
		
		try
		{
			String last_pay = (String)DBConnector.GetMembaseServer(_user_id).Get(_user_id + "_" + KeyID.KEY_LAST_PAY_TIME);
			response.addStringANSI(KeyID.KEY_LAST_PAY_TIME, last_pay);
		}
		catch (Exception e)
		{
			LogHelper.LogException("WinPhoneValidatingReceiptCallback.ReadLastPay", e);
		}
		
		MailBox mailbox = new MailBox(userInfo);
		mailbox.Load();
		response.addBinary(KeyID.KEY_MAIL_BOX, mailbox.GetData());
		response.addString(KeyID.KEY_WIN_PRODUCT_ID, _win_product_id);

		try 
		{
			_client.WriteZip(response.toByteArray());
			LogHelper.LogHappy("WinPhoneValidatingReceiptCallback.. response OK!");
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("WinPhoneValidatingReceiptCallback", ex);
		}
	}
	
	private void handleSetStateNewTutorial(FBEncrypt encrypt)
	{
		int state = encrypt.getInt(KeyID.KEY_TUTORIAL_STEP);
		
		int current_state = -1;
		try
		{
			Object obj = DBConnector.GetMembaseServer(_user_id).Get(_user_id + "_" + KeyID.KEY_TUTORIAL_STEP);
			if (obj != null) current_state = (int)obj;
		}
		catch (Exception e)
		{
			LogHelper.LogException("handleSetStateNewTutorial.ReadCurrentState", e);
		}
		LogHelper.LogHappy("State := " + state);
		LogHelper.LogHappy("Current state := " + current_state);
		boolean valid = true;
		if (state < 0 || state <= current_state)
		{
			valid = false;
		}
		LogHelper.LogHappy("Valid := " + valid);
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		
		if (valid)
		{
			switch (state)
			{
				case 0:
				{
					GetStockOfItemType(DatabaseID.IT_PLANT).addGift(DatabaseID.IT_PLANT, 0, 6); // + 6 hoa hong
					GetStockOfItemType(DatabaseID.IT_BUG).addGift(DatabaseID.IT_BUG, 0, 1); // + 1 bo rua
					
					long exp = Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_USER_LEVEL][2][DatabaseID.USER_EXP_LVL]);
					LogHelper.LogHappy("EXP := " + exp);
					userInfo.setExp(exp + 1);
					
					// check level up
					checkLevelUp();

					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToDatabase());
					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToDatabase());
					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToDatabase());
					SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));

					// response to client
					response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
					response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToClient());
					response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToClient());
					response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
					response.addLong(KeyID.KEY_USER_EXP, userInfo.getExp());
					
					// save state tutorial
					DBConnector.GetMembaseServer(_user_id).Set(_user_id + "_" + KeyID.KEY_TUTORIAL_STEP, state);
				}
					break;
				case 1:
				{
					GetStockOfItemType(DatabaseID.IT_PRODUCT).addGift(DatabaseID.IT_PRODUCT, 0, 1); // + 1 hong say
					GetStockOfItemType(DatabaseID.IT_PLANT).updateValue(_command_id, DatabaseID.IT_PLANT, 0, GetStockOfItemType(DatabaseID.IT_PLANT).getProductNum(DatabaseID.IT_PLANT, 0) - 2); // - 2 hoa hong
					long exp = Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_USER_LEVEL][3][DatabaseID.USER_EXP_LVL]);
					LogHelper.LogHappy("EXP := " + exp);
					userInfo.setExp(exp + 1);
					
					Machine mc = machine.get(0);
					MachineDurability md = machineDurability.get(0);
					mc.setStatus(DatabaseID.MACHINE_READY);
					md.setDurability(md.getDurabilityMax());
					
					// check level up
					checkLevelUp();

					SET_DB_VALUE_BINARY(KeyID.KEY_MACHINES + 0, mc.getData());
					SET_DB_VALUE_BINARY(KeyID.KEY_MACHINES_DURABILITY + 0, md.getData());
					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToDatabase());
					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToDatabase());
					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToDatabase());
					SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
					money_mgr.UseRealMoneyAndBonusMoney((int)2,		// log
													// _command_id, "" + floorIndex + "_" + slotIndex + "_" + plant_id,//  2. hanh dong cua gamer
													_command_id, "" + 0,//  2. hanh dong cua gamer
													userInfo.getName(),										//  3. ten tai khoan
													userInfo.getLevel(),									//  7. level cua gamer
													_ip,													//  9. ip login v4 cua gamer
													DatabaseID.IT_PLANT,									// 10. id cua loai item
													0,												// 11. id cua item
													Misc.GetItemName(DatabaseID.IT_PLANT, 0),		// 12. ten item
													(int)2,									// 13. gia game coin cua item
													1);		
					
					// response to client
					response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
					response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToClient());
					response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToClient());
					response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
					response.addLong(KeyID.KEY_USER_EXP, userInfo.getExp());
					response.addBinary(KeyID.KEY_MACHINES, mc.getData());
					response.addBinary(KeyID.KEY_MACHINES_DURABILITY, md.getData());
					response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
					
					// save state tutorial
					DBConnector.GetMembaseServer(_user_id).Set(_user_id + "_" + KeyID.KEY_TUTORIAL_STEP, state);
				}
					break;
				case 2:
				{
					GetStockOfItemType(DatabaseID.IT_PLANT).updateValue(_command_id, DatabaseID.IT_PLANT, 0, GetStockOfItemType(DatabaseID.IT_PLANT).getProductNum(DatabaseID.IT_PLANT, 0) - 1); // - 2 hoa hong
					long exp = Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_USER_LEVEL][4][DatabaseID.USER_EXP_LVL]);
					LogHelper.LogHappy("EXP := " + exp);
					userInfo.setExp(exp + 1);
					userInfo.setGold(userInfo.getGold() + 320);
					
					// check level up
					checkLevelUp();
					
					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToDatabase());
					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToDatabase());
					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToDatabase());
					SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
					
					// response to client
					response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
					response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToClient());
					response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToClient());
					response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
					response.addLong(KeyID.KEY_USER_EXP, userInfo.getExp());
					
					// save state tutorial
					DBConnector.GetMembaseServer(_user_id).Set(_user_id + "_" + KeyID.KEY_TUTORIAL_STEP, state);
				}
					break;
				case 3:
				{
					long exp = Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_USER_LEVEL][5][DatabaseID.USER_EXP_LVL]);
					LogHelper.LogHappy("EXP := " + exp);
					userInfo.setExp(exp + 1);
					userInfo.setGold(userInfo.getGold() - 210);
					userInfo.setReputation(userInfo.getReputation() + 1);
					
					userInfo.increaseFloorNumber();
					int newFloorIndex = userInfo.getTotalFloor() - 1;
					Floor f = new Floor(newFloorIndex);
					for (int i = 0; i < DatabaseID.MAX_SLOT_PER_FLOOR; i++)
					{
						f.slot[i].pot.createNewPot(0);
					}
					floor.add(newFloorIndex, f);

					Machine mc = new Machine(newFloorIndex);
					machine.add(newFloorIndex, mc);

					MachineDurability md = new MachineDurability(newFloorIndex);
					machineDurability.add(newFloorIndex, md);
					
					// check level up
					checkLevelUp();
		
					// save to db
					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToDatabase());
					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToDatabase());
					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToDatabase());
					SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
					SET_DB_VALUE_BINARY(KeyID.KEY_FLOORS + newFloorIndex, floor.get(newFloorIndex).getData(true));
					SET_DB_VALUE_BINARY(KeyID.KEY_MACHINES + newFloorIndex, machine.get(newFloorIndex).getData());
					SET_DB_VALUE_BINARY(KeyID.KEY_MACHINES_DURABILITY + newFloorIndex, machineDurability.get(newFloorIndex).getData());
					
					// response to client
					response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
					response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToClient());
					response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToClient());
					response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
					response.addLong(KeyID.KEY_USER_EXP, userInfo.getExp());
					response.addBinary(KeyID.KEY_MACHINES, mc.getData());
					response.addBinary(KeyID.KEY_MACHINES_DURABILITY, md.getData());
					response.addShort(KeyID.KEY_TOTAL_FLOOR_CHANGED, 1);
					response.addBinary(KeyID.KEY_FLOORS + 0, floor.get(newFloorIndex).getData(false));
					
					// save state tutorial
					DBConnector.GetMembaseServer(_user_id).Set(_user_id + "_" + KeyID.KEY_TUTORIAL_STEP, state);
				}
					break;
				case 4:
				{
					long exp = Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_USER_LEVEL][6][DatabaseID.USER_EXP_LVL]);
					LogHelper.LogHappy("EXP := " + exp);
					userInfo.setExp(exp + 1);
					
					// check level up
					checkLevelUp();

					SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));

					// response to client
					response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
					response.addLong(KeyID.KEY_USER_EXP, userInfo.getExp());
					
					// save state tutorial
					DBConnector.GetMembaseServer(_user_id).Set(_user_id + "_" + KeyID.KEY_TUTORIAL_STEP, state);
				}
					break;
			}
		}
		
		if (user_level_up) checkAndUnlockItems();
		
		try
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("handleSetStateNewTutorial", ex);
		}
	}
	
	private void handlePlaceItemXmasTree()
	{
		if (!SkyGarden._is_use_server_event)
		{
			LogHelper.LogHappy("Out of time");
			requestError();
			return;
		}
		
		int val = stock_event.getProductNum(DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_CANDLE);
		LogHelper.LogHappy("val := " + val);
		if (val <= 0)
		{
			LogHelper.LogHappy("Insufficient value.");
			requestError();
			return;
		}
		
		// update item in stock
		stock_event.updateValue(_command_id, DatabaseID.IT_EVENT, DatabaseID.ITEM_EVENT_CANDLE, 0);
		SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
		
		// personal record & ranking
		SetEventScore(KeyID.KEY_EVENT_BIRTDAY_2015, val);
		
		// server record
		SkyGarden._event_counter.addAndGet(val);
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
		response.addBinary(KeyID.KEY_STOCK_EVENT, stock_event.getDataToClient());
		
		try
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("handlePlaceItemXmasTree", ex);
		}
	}
	
	private long GetTotalServerEventCounter()
	{
		try
		{
			long v = 0;
			for (int i = 1; i <= 7; i++)
			{
				Object obj = DBConnector.GetMembaseServerForTemporaryData().Get("birthday_2015" + "_" + i);
				if (obj != null)
				{
					LogHelper.LogHappy("birthday_2015" + "_" + SkyGarden._server_id + " := " + (long)obj);
					v += (long)obj;
				}
			}
			LogHelper.LogHappy("Total value := " + v);
			return v;
		}
		catch (Exception e)
		{
			LogHelper.LogException("GetTotalServerEventCounter", e);
			return 0;
		}
	}

	private byte[] GetCDNContent(FBEncrypt encrypt) throws Exception
	{
		String client_platform		= encrypt.getString(KeyID.KEY_VERSION_PLATFORM);
		String client_resolution	= encrypt.getString(KeyID.KEY_VERSION_RESOLUTION);
		
		FBEncrypt result = new FBEncrypt();
		int max_cdn = 0;
		
		for (int i = 0; i < Server.s_globalDB[DatabaseID.SHEET_CDN].length; i++)
		{
			String server_platform			= Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_CDN][i][DatabaseID.CDN_PLATFORM]);
			String server_resolution		= Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_CDN][i][DatabaseID.CDN_RESOLUTION]);
			boolean active						= (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_CDN][i][DatabaseID.CDN_ACTIVE]) == 1;
			if (!active)
			{
//				LogHelper.LogHappy("CDN " + i + " is inactive. Proceed.");
				continue;
			}

//			if (client_platform.equals(server_platform) && client_resolution.equals(server_resolution))
			{
				String download_link	= Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_CDN][i][DatabaseID.CDN_LINK]);
				int sprite_id			= (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_CDN][i][DatabaseID.CDN_SPRITE_ID]);
				String name				= Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_CDN][i][DatabaseID.CDN_NAME]);
				String md5				= Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_CDN][i][DatabaseID.CDN_MD5]);
				int type				= (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_CDN][i][DatabaseID.CDN_TYPE]);
				int id					= (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_CDN][i][DatabaseID.CDN_ID]);

				result.addStringANSI(KeyID.KEY_CDN_LINK + max_cdn, download_link);
				result.addInt(KeyID.KEY_CDN_SPRITE_ID + max_cdn, sprite_id);
				result.addStringANSI(KeyID.KEY_CDN_NAME + max_cdn, name);
				result.addStringANSI(KeyID.KEY_CDN_MD5 + max_cdn, md5);
				result.addStringANSI(KeyID.KEY_CDN_PLATFORM + max_cdn, server_platform);
				result.addStringANSI(KeyID.KEY_CDN_RESOLUTION + max_cdn, server_resolution);
				result.addInt(KeyID.KEY_CDN_TYPE + max_cdn, type);
				result.addInt(KeyID.KEY_CDN_ID + max_cdn, id);
				
//				LogHelper.LogHappy("max_cdn := " + max_cdn);
//				LogHelper.LogHappy("download_link := " + download_link);
//				LogHelper.LogHappy("sprite_id := " + sprite_id);
//				LogHelper.LogHappy("name := " + name);
//				LogHelper.LogHappy("md5 := " + md5);
//				LogHelper.LogHappy("server_platform := " + server_platform);
//				LogHelper.LogHappy("server_resolution := " + server_resolution);

				max_cdn++;
			}
		}
		result.addInt(KeyID.KEY_MAX_ROW, max_cdn);
		
		return result.toByteArray();
	}

	private void handleCDNLoader(FBEncrypt encrypt)
	{
		String client_platform		= encrypt.getString(KeyID.KEY_VERSION_PLATFORM);
		String client_resolution	= encrypt.getString(KeyID.KEY_VERSION_RESOLUTION);
		String client_number		= encrypt.getString(KeyID.KEY_VERSION_NUMBER);
		String client_distributor	= encrypt.getString(KeyID.KEY_DISTRIBUTOR);
		
		String cdn_link = "";
		int cdn_sprite_id = -1;
		String cdn_name = "";
		String cdn_md5 = "";

		FBEncrypt cdn_enc = new FBEncrypt();
		int max_cdn = 0;
		
		try
		{
			for (int i = 0; i < Server.s_globalDB[DatabaseID.SHEET_CDN].length; i++)
			{
				String server_platform			= Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_CDN][i][DatabaseID.CDN_PLATFORM]);
				String server_resolution		= Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_CDN][i][DatabaseID.CDN_RESOLUTION]);
				String server_distributor		= Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_CDN][i][DatabaseID.CDN_DISTRIBUTOR]);
				String server_newest_version	= Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_CDN][i][DatabaseID.CDN_NEWEST_VERSION]);
				
				if (client_platform.equals(server_platform) && client_resolution.equals(server_resolution))	// && client_distributor.equals(server_distributor))
				{
					cdn_link = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_CDN][i][DatabaseID.CDN_LINK]);
					cdn_sprite_id = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_CDN][i][DatabaseID.CDN_SPRITE_ID]);
					cdn_name = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_CDN][i][DatabaseID.CDN_NAME]);
					cdn_md5 = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_CDN][i][DatabaseID.CDN_MD5]);
					int type				= (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_CDN][i][DatabaseID.CDN_TYPE]);
					int id					= (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_CDN][i][DatabaseID.CDN_ID]);
					
					cdn_enc.addStringANSI(KeyID.KEY_CDN_LINK + max_cdn, cdn_link);
					cdn_enc.addInt(KeyID.KEY_CDN_SPRITE_ID + max_cdn, cdn_sprite_id);
					cdn_enc.addStringANSI(KeyID.KEY_CDN_NAME + max_cdn, cdn_name);
					cdn_enc.addStringANSI(KeyID.KEY_CDN_MD5 + max_cdn, cdn_md5);
					cdn_enc.addInt(KeyID.KEY_CDN_TYPE + max_cdn, type);
					cdn_enc.addInt(KeyID.KEY_CDN_ID + max_cdn, id);
					
					max_cdn++;
				}
			}
			
			cdn_enc.addInt(KeyID.KEY_MAX_ROW, 0);
		}
		catch (Exception e)
		{
			LogHelper.LogException("handleCDNLoader", e);
		}
		
//		FBEncrypt result = new FBEncrypt();
//		_command_id = CommandID.CMD_LOGIN;
//		_return_id = ReturnCode.RESPONSE_OK;
//		result.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
//		result.addBinary(KeyID.KEY_CDN, cdn_enc.toByteArray());
//		
//	// response server list
//		FBEncrypt server_list = new FBEncrypt();
//		String[] list = SkyGarden._server_list.split("_");
//		for (int i = 0; i < list.length ; i++)
//		{
//			String[] s = list[i].split(":");
//
//			FBEncrypt server_info = new FBEncrypt();
//			server_info.addStringANSI(KeyID.KEY_SERVER_ADDRESS, s[0]);
//			server_info.addInt(KeyID.KEY_SERVER_PORT, Integer.parseInt(s[1]));
//			server_list.addBinary(KeyID.KEY_SERVER_INDEX + i, server_info.toByteArray());
//		}
//		result.addInt(KeyID.KEY_TOTAL_SERVER, list.length);
//		result.addBinary(KeyID.KEY_SERVER_LIST, server_list.toByteArray());
//		
//		try
//		{
//			_client.WriteZip(result.toByteArray());
//			LogHelper.Log("handleCDNLoader.. FAKE_LOGIN: response to client OK.");
//		}
//		catch (Exception ex) 
//		{
//			LogHelper.LogException("requestError.Response", ex);
//		}
		
		FBEncrypt response = new FBEncrypt();
//		_command_id = CommandID.CMD_CDN_LOADER;
//		_return_id = ReturnCode.RESPONSE_OK;
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_CDN, cdn_enc.toByteArray());
		
		try
		{
			_client.WriteZip(response.toByteArray());
			LogHelper.Log("handleCDNLoader.. CDN_LOADER: response to client OK.");
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("requestError.Response", ex);
		}
	}
	
	public boolean ADD_DB_VALUE_BINARY(String key, byte[] value) //throws Exception
	{
//		String uInfo = _user_id + "_" + _device_id + "_" + _command_id;
		
		if (_is_stable_user)
		{
//			LogHelper.LogWriteDB("ADD_DB_VALUE_BINARY_U [" + key + ": " + value.length + "] of " + uInfo);
			return base.AddRaw(_user_id + "_" + key, value);
		}
		
//		LogHelper.LogWriteDB("ADD_DB_VALUE_BINARY_D [" + key + ": " + value.length + "] of " + uInfo);
		return base.AddRaw(_device_id + "_" + key, value, NEW_USER_EXPIRE_TIME);
	}
	
	public boolean ADD_DB_VALUE_BINARY(String key, byte[] value, int expire)
	{
//		String uInfo = _user_id + "_" + _device_id + "_" + _command_id;
		
		if (_is_stable_user)
		{
//			LogHelper.LogWriteDB("ADD_DB_VALUE_BINARY_EXP_U [" + key + ": " + value.length + "] of " + uInfo);
			return base.AddRaw(_user_id + "_" + key, value, expire);
		}
		
//		LogHelper.LogWriteDB("ADD_DB_VALUE_BINARY_EXP_D [" + key + ": " + value.length + "] of " + uInfo);
		return base.AddRaw(_device_id + "_" + key, value, expire);
	}
	
	public boolean SET_DB_VALUE_BINARY(String key, byte[] value) //throws Exception
	{
//		String uInfo = _user_id + "_" + _device_id + "_" + _command_id;
		
		if (_is_stable_user)
		{
//			LogHelper.LogWriteDB("SET_DB_VALUE_BINARY_U [" + key + ": " + value.length + "] of " + uInfo);
			return base.SetRaw(_user_id + "_" + key, value);
		}
	
//		LogHelper.LogWriteDB("SET_DB_VALUE_BINARY_D [" + key + ": " + value.length + "] of " + uInfo);
		return base.SetRaw(_device_id + "_" + key, value, NEW_USER_EXPIRE_TIME);
	}
	
	public boolean SET_DB_VALUE_BINARY(String key, byte[] value, int expire)
	{
//		String uInfo = _user_id + "_" + _device_id + "_" + _command_id;
		
		if (_is_stable_user)
		{
//			LogHelper.LogWriteDB("SET_DB_VALUE_BINARY_EXP_U [" + key + ": " + value.length + "] of " + uInfo);
			return base.SetRaw(_user_id + "_" + key, value, expire);
		}
	
//		LogHelper.LogWriteDB("SET_DB_VALUE_BINARY_EXP_D [" + key + ": " + value.length + "] of " + uInfo);
		return base.SetRaw(_device_id + "_" + key, value, expire);
	}
	
	public byte[] GET_DB_VALUE_BINARY(String key) throws Exception
	{
		byte[] val;
		
		try
		{
			if (_is_stable_user)
			{
				val = base.GetRaw(_user_id + "_" + key);
			}
			else
			{
				val = base.GetRaw(_device_id + "_" + key);
			}
			
			return val;
		}
		catch (Exception ex)
		{
			LogHelper.LogException("GET_DB_VALUE_BINARY", ex);
		}
		
		return null;
	}
	
	public boolean DEL_DB_VALUE_BINARY(String key)
	{
		if (_is_stable_user)
		{
			return base.Delete(_user_id + "_" + key);
		}
	
		return base.Delete(_device_id + "_" + key);
	}

	public boolean SET_DB_VALUE_BINARY_FRIEND(String key, byte[] value)
	{
//		String uInfo = _user_id + "_" + _device_id + "_" + _command_id;

		long friend_user_id = GetUserID(_friend_device_id);
		
		if (friend_user_id >= 0)
		{
//			LogHelper.LogWriteDB("SET_DB_VALUE_BINARY_FRIEND_U [" + key + ": " + value.length + "] of " + _friend_id + " " + uInfo);
			return DBConnector.GetMembaseServer(friend_user_id).SetRaw(friend_user_id + "_" + key, value);
		}
		else
		{
//			LogHelper.LogWriteDB("SET_DB_VALUE_BINARY_FRIEND_D [" + key + ": " + value.length + "] of " + _friend_device_id + " " + uInfo);
			return DBConnector.GetMembaseServerForTemporaryData().SetRaw(_friend_device_id + "_" + key, value, NEW_USER_EXPIRE_TIME);
		}
	}
	
	public boolean SET_DB_VALUE_BINARY_FRIEND(String key, byte[] value, int expire)
	{
//		String uInfo = _user_id + "_" + _device_id + "_" + _command_id;
		
		if (_is_stable_user)
		{
//			LogHelper.LogWriteDB("SET_DB_VALUE_BINARY_FRIEND_EXP_U [" + key + ": " + value.length + "] of " + _friend_id + " " + uInfo);
			return base.SetRaw(_friend_id + "_" + key, value, expire);
		}
	
//		LogHelper.LogWriteDB("SET_DB_VALUE_BINARY_FRIEND_EXP_D [" + key + ": " + value.length + "] of " + _friend_device_id + " " + uInfo);
		return base.SetRaw(_friend_device_id + "_" + key, value, expire);
	}
	
	public byte[] GET_DB_VALUE_BINARY_FRIEND(String friend_device_id, String key) throws Exception
	{
		byte[] val;
		
		long friend_user_id = GetUserID(friend_device_id);
		
		if (friend_user_id >= 0)
		{
			val = DBConnector.GetMembaseServer(friend_user_id).GetRaw(friend_user_id + "_" + key);
		}
		else
		{
			val = DBConnector.GetMembaseServerForTemporaryData().GetRaw(friend_device_id + "_" + key);
		}
		
		return val;
	}
	
	private boolean checkValidRequest(long request_id, String session_id)
	{
		//check request id
		if (_command_id == CommandID.CMD_GET_ALL_RANKING_INFO 
			|| _command_id == CommandID.CMD_LOAD_FORTUNE 
			|| _command_id == CommandID.CMD_RECEIVED_BANNER_CROSS_INSTALL
			|| _command_id == CommandID.CMD_PRELOAD_IMG_SPECIAL_OFFER 
			|| _command_id == CommandID.CMD_LOAD_MAIL_BOX 
			|| _command_id == CommandID.CMD_GET_GAME_CONSTANT
			|| _command_id == CommandID.CMD_LOAD_SPECIAL_OFFER
			|| _command_id == CommandID.CMD_SET_STATE_MERCHANT
			|| _command_id == CommandID.CMD_PRODUCT_COMPLETED_OPTIMIZE_DATA_OUT
			|| _command_id == CommandID.CMD_CREATE_PRODUCT_OPTIMIZE_DATA_OUT
			|| _command_id == CommandID.CMD_COMPLETE_ITEMS_TO_PRODUCT
			|| _command_id == CommandID.CMD_REQUEST_MERCHANT
			|| _command_id == CommandID.CMD_GET_ZALO_TOKEN
			|| _command_id == CommandID.CMD_REQUEST_OFFER_GOLD
			|| _command_id == CommandID.CMD_LOAD_TOM_KID)
		{
			return true;
		}
		if ((request_id < _request_id) || (request_id - _request_id > USER_REQUEST_DELTA))
		{
			_return_id = ReturnCode.RESPONSE_WRONG_REQUEST_ID;
			return false;
		}
		
		_request_id++;
		
		if (_command_id == CommandID.CMD_CONFIRM_LOGIN && !_new_session_id.equals(""))
		{
			boolean save_ok = base.Set(_user_id + "_" + KeyID.KEY_USER_SESSION_ID, _new_session_id);
			if (save_ok)
			{
				_session_id = _new_session_id;
				_new_session_id = "";
			}
		}
                
		return true;
	}
	
	private void requestError(int error_code)
	{
		_return_id = error_code;
		requestError();
	}
	
	private void requestError()
	{
		if (ProjectConfig.IS_SERVER_FREESTYLE == 1)
		{
			Thread.dumpStack();
		}
		
		if (_return_id == ReturnCode.RESPONSE_OK)
		{
			_return_id = ReturnCode.RESPONSE_ERROR;
		}
		
		FBEncrypt enc = new FBEncrypt();
		enc.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		
		try
		{
			if (_return_id == ReturnCode.RESPONSE_SERVER_OVERLOADED)
			{
				String title = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_NOTIFY_TEXT][DatabaseID.NOTIFY_SERVER_OVERLOADED][DatabaseID.NOTIFY_TEXT_TITLE]);
				String description = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_NOTIFY_TEXT][DatabaseID.NOTIFY_SERVER_OVERLOADED][DatabaseID.NOTIFY_TEXT_DESCRIPTION]);
				enc.addStringUNICODE(KeyID.KEY_NOTIFY_TITLE_TEXT, title);
				enc.addStringUNICODE(KeyID.KEY_NOTIFY_DESCRIPTION_TEXT, description);
			}

			if (_return_id == ReturnCode.RESPONSE_SERVER_MAINTAIN)
			{
				String title = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_NOTIFY_TEXT][DatabaseID.NOTIFY_SERVER_MAINTAINED][DatabaseID.NOTIFY_TEXT_TITLE]);
				String description = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_NOTIFY_TEXT][DatabaseID.NOTIFY_SERVER_MAINTAINED][DatabaseID.NOTIFY_TEXT_DESCRIPTION]);

				enc.addStringUNICODE(KeyID.KEY_NOTIFY_TITLE_TEXT, title);
				enc.addStringUNICODE(KeyID.KEY_NOTIFY_DESCRIPTION_TEXT, description);
			}
		}
		catch (Exception e)
		{
			LogHelper.LogException("requestError.ParseNotifyString", e);
		}
		
		try
		{
			_client.WriteZip(enc.toByteArray());
			
			LogHelper.Log("request error! error code = " + _return_id + ", command = " + Misc.GetCommandString(_command_id));
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("requestError.Response", ex);
		}
	}
	
	private void RequestLoginError(long user_id, int return_code, String message)
	{
		if (_return_id == ReturnCode.RESPONSE_OK)
		{
			_return_id = ReturnCode.RESPONSE_ERROR;
		}
		
		FBEncrypt enc = new FBEncrypt();
		enc.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		
		// return facebook id & zingme id if any
		try
		{
			LogHelper.Log("RequestLoginError.. uid = " + user_id + ", return code = " + return_code + ", message = " + message);
		
			byte[] userbin = DBConnector.GetMembaseServer(user_id).GetRaw(user_id + "_" + KeyID.KEY_USER_INFOS);
			if (userbin != null)
            {
                UserInfo uinfo = new UserInfo(userbin);
				// facebook
				if (!uinfo.GetFacebookName().equals("null"))
				{
					LogHelper.Log("RequestLoginError.. Facebook Name = " + uinfo.GetFacebookName());
					LogHelper.Log("RequestLoginError.. Facebook ID = " + uinfo.getFaceBookID());
					enc.addString(KeyID.KEY_FACEBOOK_NAME, uinfo.GetFacebookName());
					enc.addString(KeyID.KEY_FACEBOOK_ID, uinfo.getFaceBookID());
				}
				
				// zing
				if (!uinfo.GetZingDisplayName().equals("null"))
				{
					LogHelper.Log("RequestLoginError.. Zing Display Name = " + uinfo.GetZingDisplayName());
					enc.addString(KeyID.KEY_ZING_DISPLAY_NAME, uinfo.GetZingDisplayName());
					enc.addString(KeyID.KEY_ZING_AVATAR, uinfo.GetZingAvatar());
				}
				
				// zalo
				// ...
            }
			else
			{
				LogHelper.Log("RequestLoginError.. user bin = null" + ", return code = " + return_code + ", message = " + message);
			}
		}
		catch (Exception e)
		{
			LogHelper.LogException("RequestLoginError", e);
		}
		
		try
		{
			_client.WriteZip(enc.toByteArray());
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("RequestLoginError", ex);
		}
	}

	private void requestError(byte[] data)
	{		
		if (_return_id == ReturnCode.RESPONSE_OK)
		{
			_return_id = ReturnCode.RESPONSE_ERROR;
		}
		
		FBEncrypt enc = new FBEncrypt();
		enc.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		enc.addBinary(KeyID.KEY_CLIENT_DATA, data);
		
		try
		{
			_client.WriteZip(enc.toByteArray());
			
			LogHelper.Log("request error! error code = " + _return_id + ", command = " + Misc.GetCommandString(_command_id));
		}
		catch (Exception ex) 
		{
		}
	}
	
	public void forceQuit(int return_code)
	{
		_command_id = CommandID.CMD_FORCE_QUIT;
		_return_id = return_code;
		
		String response = "";
		switch (_return_id)
		{
			case ReturnCode.RESPONSE_FORCE_QUIT:
				response = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_NOTIFY_TEXT][12][DatabaseID.NOTIFY_TEXT_DESCRIPTION]);
				break;
			case ReturnCode.RESPONSE_SERVER_MAINTAIN:
				response = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_NOTIFY_TEXT][10][DatabaseID.NOTIFY_TEXT_DESCRIPTION]);
				break;
			case ReturnCode.RESPONSE_MULTIPLE_LOGIN:
				response = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_NOTIFY_TEXT][11][DatabaseID.NOTIFY_TEXT_DESCRIPTION]);
				break;
		}
		
		FBEncrypt res = new FBEncrypt();
		res.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		res.addString(KeyID.KEY_RESPONSE_STRING, response);
		
		LogHelper.LogHappy("force quit, user id := " + _user_id + ", return code := " + _return_id + ", response content := " + response);
		
		try
		{
			_client.WriteZip(res.toByteArray());
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("forceQuit", ex);
		}
	}
	
	public String getSessionID()
	{
		return _session_id;
	}
	
	public long getRequestID()
	{
		return _request_id;
	}
	
	public void handleCommandTest(FBEncrypt encrypt)
	{
		//get params
		LogHelper.Log("txt = " + encrypt.getString("txt"));
		LogHelper.Log("byte = " + encrypt.getByte("byte"));
		LogHelper.Log("short = " + encrypt.getShort("short"));
		LogHelper.Log("int = " + encrypt.getInt("int"));
		LogHelper.Log("long = " + encrypt.getLong("long"));
		LogHelper.Log("float = " + encrypt.getFloat("float"));
		
		//process
		
		//write response
		FBEncrypt encode = new FBEncrypt();
		
		encode.addByte("code", _return_id);
		encode.addShort("cmd", _command_id);
		encode.addString("txt", "Firebat");
		encode.addByte("byte", 8);
		encode.addShort("short", 2345);
		encode.addInt("int", 12345678);
		encode.addLong("long", 9123456789L);
		encode.addFloat("float", (float)3.14);
		
		try
		{
			_client.WriteRaw(encode.toByteArray());
		}
		catch (Exception ex)
		{
		}
		
		Server._task_queue.AddTask(new LazyTask(_client));
	}
	
	public String GetUserDeviceID()
	{
//		if (userInfo != null)
//		{
//			return userInfo.getDeviceID();
//		}
//		else
//		{
//			return _device_id;
//		}
		
		return userInfo.getDeviceID();
	}
	
	public void SetUserDeviceID(String device_id)
	{
		_device_id = device_id;
	}
	
	public long GetUserID()
	{
		return _user_id;
	}
	
	public long GetUserID(String device_id)
	{
		long uid = -1;
		
		byte[] uid_data = null;
		try
		{
			uid_data = DBConnector.GetMembaseServerForGeneralData().GetRaw(device_id + "_" + KeyID.KEY_USER_ID);
		}
		catch (Exception e)
		{
			uid_data = null;
		}
		
		if (uid_data == null || uid_data.length == 0)
		{
			uid = -1;
		}
		else
		{
			uid =	((uid_data[0]&0xFF)<<56) |
					((uid_data[1]&0xFF)<<48) |
					((uid_data[2]&0xFF)<<40) |
					((uid_data[3]&0xFF)<<32) |
					((uid_data[4]&0xFF)<<24) |
					((uid_data[5]&0xFF)<<16) |
					((uid_data[6]&0xFF)<<8)  |
					(uid_data[7]&0xFF);
		}

		return uid;
	}
	
	public void SetStableUser(boolean stable_user)
	{
		_is_stable_user = stable_user;
	}
	
	public void SetUserID(long user_id)
	{
		_user_id = user_id;
	}
	
	public void SetDBKeyValue(DBKeyValue base)
	{
		this.base = base;
	}
	
	public byte[] GetUserData()
	{
		return userInfo.getData(false);
	}
	
	public UserInfo GetUserInfo()
	{
		if (userInfo != null)
		{
			return userInfo;
		}
		
		return null;
	}
	
	public boolean SetAndSaveFacebookID(String id)
	{
		userInfo.setFaceBookID(id);
		
		return SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
	}
	
	public boolean SetAndSaveFacebookInfo(String name, String gender)
	{
		userInfo.SetFacebookName(name);
		userInfo.SetFacebookGender(gender);
		
		return SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
	}
	
	public boolean SetAndSaveZingInfo(String zing_id, String zing_name, String zing_display_name, String zing_avatar)
	{
		userInfo.SetZingInfo(zing_id, zing_name, zing_display_name, zing_avatar);
		
		return SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
	}
	
	public boolean SetAndSaveZaloInfo(String zalo_id, String zalo_name, String zalo_display_name, String zalo_avatar)
	{
		userInfo.SetZaloInfo(zalo_id, zalo_name, zalo_display_name, zalo_avatar);
		
		return SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
	}
	
	public boolean SetAndSaveUsername(String name)
	{
		userInfo.setName(name);
		
		return SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
	}
	
	public boolean SetAndSaveFBLongLivedToken(String token) {
		userInfo.SetFacebookLongLivedToken(token);
		return SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
	}
	
	public Client getClient()
	{
		return _client;
	}
	
	public NewsBoard getUserNewsBoard()
	{
		return newsBoard;
	}
	
	public Floor GetFloor(int idx)
	{
		return floor.get(idx);
	}
	
	public Slot GetSlot(int floor_idx, int slot_idx)
	{
		return floor.get(floor_idx).slot[slot_idx];
	}
	
	public Pot GetPot(int floor_idx, int slot_idx)
	{
		return floor.get(floor_idx).slot[slot_idx].pot;
	}
	
	public Decor GetDecor(int fid, int sid)
	{
		return floor.get(fid).slot[sid].decor;
	}
	
	public Plant GetPlant(int floor_idx, int slot_idx)
	{
		return floor.get(floor_idx).slot[slot_idx].pot.plant;
	}
	
	public Stock GetStock(int stock_idx)
	{
		return stock.get(stock_idx);
	}
	
	public int GetProductNumInStock(int item_type, int item_id) {
		switch (item_type)
		{
			case DatabaseID.IT_POT:
			case DatabaseID.IT_MATERIAL:
			case DatabaseID.IT_DECOR:
				return GetStock(DatabaseID.STOCK_WAREHOUSE).getProductNum(item_type, item_id);
			case DatabaseID.IT_BUG:
			case DatabaseID.IT_PRODUCT:
				return GetStock(DatabaseID.STOCK_BARN).getProductNum(item_type, item_id);
			case DatabaseID.IT_PLANT:
				return GetStock(DatabaseID.STOCK_SILO).getProductNum(item_type, item_id);
			default:
				return -1;
		}
	}
	
	public Machine GetMachine(int id)
	{
		return machine.get(id);
	}
	
	public Stock GetStockOfItemType(int item_type)
	{
		switch (item_type)
		{
			case DatabaseID.IT_POT:
			case DatabaseID.IT_MATERIAL:
			case DatabaseID.IT_DECOR:
				return GetStock(DatabaseID.STOCK_WAREHOUSE);
			case DatabaseID.IT_BUG:
			case DatabaseID.IT_PRODUCT:
				return GetStock(DatabaseID.STOCK_BARN);
			case DatabaseID.IT_PLANT:
				return GetStock(DatabaseID.STOCK_SILO);
			default:
				return null;
		}
	}
	
	public MoneyManager GetMoneyManager()
	{
		return money_mgr;
	}
	
	public GiftManager GetGiftManager()
	{
		return gift_mgr;
	}
	
	public FriendManager GetFriendManager()
	{
		return friend_mgr;
	}
	
	public RankingTarget GetRankingTarget() {
		if (this.ranking_target == null) {
			ranking_target = new RankingTarget(_user_id);
		}
		return ranking_target;
	}
	
	public AchievementManager GetAchievementManager()
	{
		if (this.acm_mgr == null)
		{
			acm_mgr = new AchievementManager(userInfo);
			acm_mgr.Load();
		}
		
		return acm_mgr;
	}
	
	public Airship GetAirship() {
		if (this.airship == null) {
			airship = new Airship(userInfo, KeyID.KEY_AIRSHIP, stock, machine, floor);
		}
		return this.airship;
	}
	
	public TomKid GetTomKid() {
		if (this.tomkid == null) {
			byte[] tom = null;
			try {
				tom = GET_DB_VALUE_BINARY(KeyID.KEY_TOM_KID);
			} catch (Exception e) {
				LogHelper.LogException("loadUserData.LoadTomKid", e);
				tom = null;
			}
			if (tom == null || tom.length == 0) {
				tomkid = new TomKid();
			} else {
				tomkid = new TomKid(tom);
			}
		}
		return tomkid;
	}
	
	public void SetFBFriendList(String list)
	{
		this.FBFriendList = list;
	}
	
	public void SetZingFriendList(String list)
	{
		this.ZingFriendList = list;
	}
	
	public void SetZaloFriendList(String list)
	{
		this.ZaloFriendList = list;
	}
	
	public String GetIP()
	{
		return _ip;
	}
	
	public String GetDeviceName()
	{
		return _device_name;
	}
	
	public String GetDeviceFirmware()
	{
		return _device_firmware;
	}
	
	public boolean GetLoadResult()
	{
		return _load_result;
	}
	
	public void PrintUserDebugInfo(int line)
	{
		StringBuilder sb = new StringBuilder();
		sb.append("###DEBUG:	uid=").append(_user_id);
		sb.append('\t').append("device_id=").append(_device_id);
		sb.append('\t').append("command_id=").append(_command_id);
		sb.append('\t').append("line_number=").append(line);
		LogHelper.Log(sb.toString());
	}
	
	private void DumpDailySnapshot() throws Exception
	{
		if (userInfo.isLoadSuccess())
		{
			// create a list of items that need to count
			List<String> count_list = new LinkedList<String>();
			ConcurrentHashMap<String, Integer> count_items = new ConcurrentHashMap(256);

			// pot
			for (int j = 0; j < Server.s_globalDB[DatabaseID.SHEET_POT].length; j++)
			{
				count_list.add(DatabaseID.IT_POT + "_" + j);
				count_items.put(DatabaseID.IT_POT + "_" + j, 0);
			}

			// material
			for (int j = 0; j < Server.s_globalDB[DatabaseID.SHEET_MATERIAL].length; j++)
			{
				count_list.add(DatabaseID.IT_MATERIAL + "_" + j);
				count_items.put(DatabaseID.IT_MATERIAL + "_" + j, 0);
			}

			// bug
			for (int j = 0; j < Server.s_globalDB[DatabaseID.SHEET_PEST].length; j++)
			{
				count_list.add(DatabaseID.IT_BUG + "_" + j);
				count_items.put(DatabaseID.IT_BUG + "_" + j, 0);
			}

			// product
			for (int j = 0; j < Server.s_globalDB[DatabaseID.SHEET_PRODUCT].length; j++)
			{
				count_list.add(DatabaseID.IT_PRODUCT + "_" + j);
				count_items.put(DatabaseID.IT_PRODUCT + "_" + j, 0);
			}
			
			StringBuilder info = new StringBuilder(64);
			info.append(Misc.getCurrentDateTime());						// 1. current time
			info.append('\t').append("DailyTotalSnapshot");				// 2. action name
			info.append('\t').append(_user_id);							// 3. account name
			info.append('\t').append(_user_id);							// 4. role id
			info.append('\t').append(userInfo.getName());				// 5. role name
			info.append('\t').append(1);								// 6. server id
			info.append('\t').append(userInfo.getLevel());				// 7. user level
			info.append('\t').append(userInfo.GetEmail());
			info.append('\t').append(userInfo.getFaceBookID());
			info.append('\t').append(userInfo.GetZingID());
			info.append('\t').append(userInfo.GetFacebookGender());
			
			// diamond
			info.append('\t').append(money_mgr.GetBonusMoney() + money_mgr.GetRealMoney());
			
			// gold
			info.append('\t').append(userInfo.getGold());

			// reputation
			info.append('\t').append(userInfo.getReputation());

			// floor
			info.append('\t').append(userInfo.getTotalFloor());
			
			// stock
			Stock stock = null;
			for (int j = 0; j < DatabaseID.STOCK_MAX; j++)
			{
				stock = GetStock(j);

				// count items in stock
				ConcurrentHashMap<String, Integer> list_items_in_stock = stock.getItems();
				for (Map.Entry<String,Integer> item: list_items_in_stock.entrySet())
				{
					String item_name = item.getKey();
					if (count_items.containsKey(item_name))
					{
						int current_value = count_items.get(item_name);
						int in_stock_value = item.getValue();
						count_items.replace(item_name, current_value + in_stock_value);
					}
				}
			}
			
			// floors
			Floor f = null;
			for (int j = 0; j < userInfo.getTotalFloor(); j++)
			{
				f = GetFloor(j);

				if (f != null)
				{
					for (int slot_idx = 0; slot_idx < DatabaseID.MAX_SLOT_PER_FLOOR; slot_idx++)
					{
						// count pot
						int pod_id = f.getSlot(slot_idx).getPot().getID();

						if (pod_id < 0)
							continue;;

						String pot_name = DatabaseID.IT_POT + "_" + pod_id;
						if (count_items.containsKey(pot_name))
						{
							int current_value = count_items.get(pot_name);
							count_items.replace(pot_name, current_value + 1);
						}
					}
				}
			}
			
			for (String item_name : count_list)
			{
				if (count_items.containsKey(item_name))
					info.append('\t').append(count_items.get(item_name));
				else
					info.append('\t').append("error");
			}
			
			info.append('\t').append(garden_appraisal);
			LogHelper.Log(LogHelper.LogType.USER_DATA, info.toString());
		}
	}
	
	public void LazySync()
	{
		if (_use_lazy_sync_user_info)
		{
			if (userInfo.isChanged()) SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
		}
		
		if (_use_lazy_sync_achievement)
		{
			if (acm_mgr != null) acm_mgr.SaveAll(true);
		}
		
		LogHelper.Log("Lazy sync user " + _user_id + " completed.");
	}
	
	public void SetNotifyStatus(long user_id, int bit_index, boolean value)
	{
		if (bit_index == 0) 
		{
			return;
		}
		
		boolean is_npc = user_id == 10000;
//		LogHelper.Log("update notify, user id = " + user_id + ", bit index = " + bit_index + ", value = " + value + ", npc = " + is_npc);
		
		String key = "";
		DBKeyValue inner_base = null;
		if (is_npc)
		{
			key = _user_id + "_" + "npc" + "_" + KeyID.KEY_NOTIFY;
			inner_base = DBConnector.GetMembaseServer(_user_id);
		}
		else
		{
			key = user_id + "_" + KeyID.KEY_NOTIFY;
			inner_base = DBConnector.GetMembaseServer(user_id);
		}
		
		long l = 0L;
		try
		{
			l = (long)inner_base.Get(key);
		}
		catch (Exception e)
		{
			LogHelper.Log("exception in update notify status, id = " + key);
			l = 0L;
		}

		BitSet bitset = BitSet.valueOf(new long[]{l});
		if (l == 0)
		{
			bitset.set(0, true);
		}
		bitset.set(bit_index, value);
		inner_base.Set(key, bitset.toLongArray()[0]);
	}
	
	public int GetEventMarkers()
	{
		return DatabaseID.EVENT_MARKER_TOM | DatabaseID.EVENT_MARKER_FORTUNE_WHEEL | DatabaseID.EVENT_MARKER_DAILY_ORDER | DatabaseID.EVENT_MARKER_AIRSHIP;
//		return 0;
	}
	
	public int GetBonusMarkers()
	{
		int v = 0;
		
		if (ServerConfig().containsKey(KeyID.KEY_BONUS_PLANT))
		{
			v = v | DatabaseID.BONUS_PLANT;
			LogHelper.LogHappy("KEY_BONUS_PLANT, v := " + v);
		}
		
		if (ServerConfig().containsKey(KeyID.KEY_BONUS_ORDER_DAILY))
		{
			v = v | DatabaseID.BONUS_ORDER_DAILY;
			LogHelper.LogHappy("KEY_BONUS_ORDER_DAILY, v := " + v);
		}
		
		if (ServerConfig().containsKey(KeyID.KEY_BONUS_ORDER_NORMAL))
		{
			v = v | DatabaseID.BONUS_ORDER_NORMAL;
			LogHelper.LogHappy("KEY_BONUS_ORDER_NORMAL, v := " + v);
		}
		
		if (ServerConfig().containsKey(KeyID.KEY_BONUS_AIRSHIP_GOLD))
		{
			v = v | DatabaseID.BONUS_AIRSHIP_GOLD;
			LogHelper.LogHappy("KEY_BONUS_AIRSHIP_GOLD, v := " + v);
		}
		
		if (ServerConfig().containsKey(KeyID.KEY_BONUS_AIRSHIP_EXP))
		{
			v = v | DatabaseID.BONUS_AIRSHIP_EXP;
			LogHelper.LogHappy("KEY_BONUS_AIRSHIP_EXP, v := " + v);
		}
		
		return v;
	}
	
	public void SetEventScore(String key_event_name, int value)
	{
		SetEventScore(key_event_name, value, CommandID.CMD_UPDATE_GARDEN_APPRAISAL);
	}
	
	public void SetEventScore(String key_event_name, int value, int command)
	{
		_event_item_num = value;
		userInfo.IncreaseEventNum(key_event_name, value);
		SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
		
		// ranking
		GetRankingTarget().Set(command, -1, userInfo.GetEventNum(key_event_name));
		SET_DB_VALUE_BINARY(KeyID.KEY_USER_RANKING_TARGET, GetRankingTarget().GetData());
	}
	
	public String GetEventItems()
	{
		StringBuilder sb = new StringBuilder();
		sb.append(DatabaseID.IT_EVENT);
		if (_use_event_xmas_tree) {
			sb.append(':').append(DatabaseID.ITEM_EVENT_CANDLE);
		} else if (_use_event_new_year_2015) {
			sb.append(':').append(DatabaseID.ITEM_EVENT_BANH_CHUNG);
		} else if (_use_event_8_3_2015) {
			sb.append(':').append(DatabaseID.ITEM_EVENT_GLASS_ROSE);
		} else if (_use_event_20_11) {
			sb.append(':').append(DatabaseID.ITEM_EVENT_FLOWER_20_11);
		} else if (_use_event_xmas_mini) {
			sb.append(':').append(DatabaseID.ITEM_EVENT_XMAS_2014_1);
		} else {
			sb.append(':').append(DatabaseID.ITEM_EVENT_FLOWER_20_11);
		}
		
		sb.append(':').append(_event_item_num);
		
		_event_item_num = 0;
		return sb.toString();
	}
	
	public String GetEventKeyName()
	{
		if (_use_event_mid_autumn_festival)
			return KeyID.KEY_EVENT_MID_AUTUMN_FESTIVAL;
		else if (_use_event_20_11)
			return KeyID.KEY_EVENT_20_11;
		else if (_use_event_xmas_tree)
			return KeyID.KEY_EVENT_BIRTDAY_2015;
		else if (_use_event_new_year_2015)
			return KeyID.KEY_EVENT_NEW_YEAR_2015;
		else if (_use_event_8_3_2015)
			return KeyID.KEY_EVENT_8_3_2015;
		else if (_use_event_xmas_mini)
			return KeyID.KEY_EVENT_XMAS_MINI;
		
		return "";
	}
	
	public int GetEventDropNum(int drop_id, int feature_id)
	{
		String event_gift_list = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_CONSTANT][userInfo.getLevel()][drop_id]);
		String[] aos = event_gift_list.split(":");
		if (feature_id >= aos.length)
			return 0;
		
		return Integer.parseInt(aos[feature_id]);
	}
	
	public boolean GetNotifyStatus(long user_id)
	{
		boolean is_npc = user_id == 10000;
		String key = "";
		DBKeyValue inner_base = null;
		if (is_npc)
		{
			key = _user_id + "_" + "npc" + "_" + KeyID.KEY_NOTIFY;
			inner_base = DBConnector.GetMembaseServer(_user_id);
		}
		else
		{
			key = user_id + "_" + KeyID.KEY_NOTIFY;
			inner_base = DBConnector.GetMembaseServer(user_id);
		}
		
		long l = 0L;
		try
		{
			l = (long)inner_base.Get(key);
		}
		catch (Exception e)
		{
			LogHelper.Log("exception in get notify status, id = " + key);
			l = 0L;
		}
		
		if (l == 0)
		{
			inner_base.Set(key, 1L);
			return false;
		}
		
		return (l > 1);
	}
	
	public int GetNotifyIndex(int type, int id)
	{
		switch (type)
		{
			case DatabaseID.NOTIFY_TYPE_MACHINE:
			{
				switch (id)
				{
					case 0: return DatabaseID.NOTIFY_INDEX_MACHINE_0;
					case 1: return DatabaseID.NOTIFY_INDEX_MACHINE_1;
					case 2: return DatabaseID.NOTIFY_INDEX_MACHINE_2;
					case 3: return DatabaseID.NOTIFY_INDEX_MACHINE_3;
					case 4: return DatabaseID.NOTIFY_INDEX_MACHINE_4;
					case 5: return DatabaseID.NOTIFY_INDEX_MACHINE_5;
					case 6: return DatabaseID.NOTIFY_INDEX_MACHINE_6;
					case 7: return DatabaseID.NOTIFY_INDEX_MACHINE_7;
					case 8: return DatabaseID.NOTIFY_INDEX_MACHINE_8;
					case 9: return DatabaseID.NOTIFY_INDEX_MACHINE_9;
					case 10: return DatabaseID.NOTIFY_INDEX_MACHINE_10;
					case 11: return DatabaseID.NOTIFY_INDEX_MACHINE_11;
					case 12: return DatabaseID.NOTIFY_INDEX_MACHINE_12;
					case 13: return DatabaseID.NOTIFY_INDEX_MACHINE_13;
					case 14: return DatabaseID.NOTIFY_INDEX_MACHINE_14;
					case 15: return DatabaseID.NOTIFY_INDEX_MACHINE_15;
					case 16: return DatabaseID.NOTIFY_INDEX_MACHINE_16;
					case 17: return DatabaseID.NOTIFY_INDEX_MACHINE_17;
					case 18: return DatabaseID.NOTIFY_INDEX_MACHINE_18;
					case 19: return DatabaseID.NOTIFY_INDEX_MACHINE_19;
				}
			}
			case DatabaseID.NOTIFY_TYPE_AIRSHIP:
			{
				return DatabaseID.NOTIFY_INDEX_AIRSHIP;
			}
		}
		return 0;
	}
	
	private void GMMessageExecute(FBEncrypt encrypt)
	{
		short gm_command = encrypt.getShort(KeyID.KEY_GM_COMMAND);
		
		switch (gm_command)
		{
			case CommandID.CMD_BROADCAST:
				LogHelper.Log("GMMessageExecute.. received CMD_BROADCAST");
				Server._task_queue.AddTask(new BroadcastTask(_client, encrypt));
				break;
				
			case CommandID.CMD_KICK_USER:
				LogHelper.Log("GMMessageExecute.. received CMD_KICK_USER");
				KickUser(encrypt);
				break;
				
			case CommandID.CMD_SET_SERVER_STATUS:
				LogHelper.Log("GMMessageExecute.. received CMD_SET_SERVER_STATUS");
				SetServerStatus(encrypt);
				break;
				
			case CommandID.CMD_SET_EVENT_NOTIFICATION:
				LogHelper.Log("GMMessageExecute.. received CMD_SET_EVENT_NOTIFICATION");
				SetEventNotification(encrypt);
				break;
				
			case CommandID.CMD_PUSH_CLOUD_MESSAGE:
				LogHelper.Log("GMMessageExecute.. received CMD_PUSH_CLOUD_MESSAGE");
				Server._task_queue.AddTask(new PushCloudMessageTask(_client, encrypt));
				break;
				
			default:
				LogHelper.Log("GMMessageExecute.. invalid command.");
				break;
		}
		
		return;
	}
	
	private void KickUser(FBEncrypt encrypt)
	{
		if (encrypt.hasKey(KeyID.KEY_DEVICE_ID))
		{
			String device_id = encrypt.getString(KeyID.KEY_DEVICE_ID);
			
			if (ServerHandler.isUserOnline(device_id))
			{
				ServerHandler.removeUser(device_id, ReturnCode.RESPONSE_FORCE_QUIT);
//				LogHelper.Log("KickUser.. kick " + device_id + " ok.");
			}
			else
			{
				LogHelper.Log("KickUser.. err! user " + device_id + " is not online.");
				long uid = Misc.GetUserID(device_id);
				DBConnector.GetMembaseServerForTemporaryData().Delete(device_id + "_" + KeyID.ONLINE);
				DBConnector.GetMembaseServer(uid).Delete(uid + "_" + KeyID.ONLINE);
				LogHelper.Log("removeUser.. delete online key done.");
			}
		}
		else
		{
			LogHelper.Log("KickUser.. err! can't find device id");
		}
	}
	
	private void SetServerStatus(FBEncrypt encrypt)
	{
		if (encrypt.hasKey("server_status"))
		{
			int new_status = encrypt.getInt("server_status");
			Server._server_status = new_status;
			
			if (new_status == DatabaseID.SERVER_STATUS_FORWARD)
			{
				SkyGarden.UpdateServerStatus(SkyGarden.s_server_local_address, SkyGarden.s_serverPort, "Forward");
				Server._forward_server_ip = encrypt.getString("forward_server_ip");
				Server._forward_server_port = encrypt.getInt("forward_server_port");
			}
			else if (new_status == DatabaseID.SERVER_STATUS_PAUSE)
			{
				SkyGarden.UpdateServerStatus(SkyGarden.s_server_local_address, SkyGarden.s_serverPort, "Pause");
			}
			else if (new_status == DatabaseID.SERVER_STATUS_READY)
			{
				SkyGarden.UpdateServerStatus(SkyGarden.s_server_local_address, SkyGarden.s_serverPort, "Ready");
			}

			LogHelper.Log("SetServerStatus.. set server status [" + Server._server_status + "] ok.");
		}
		else
		{
			LogHelper.Log("SetServerStatus.. err! can't find key server status");
		}
	}
	
	private void SetEventNotification(FBEncrypt encrypt)
	{
	}
	
	private int GetPaymentStatus(String platform, String version)
	{
		if (ProjectConfig.IS_SERVER_FREESTYLE == 1 || ProjectConfig.IS_SERVER_ZALO_LOGIC == 1 || ProjectConfig.IS_SERVER_ZALO_HAPPY == 1) 
		{
			return 1;
		}
		
		try
		{
			String iOS	= Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_VERSION][8][DatabaseID.VERSION_PLATFORM]);
			Object obj = null;
			if (platform.equals(iOS)) 
			{
				if (version == null || version.equals("") || version.length() == 0) 
				{
					return 0;
				} 
				else
				{
					obj = DBConnector.GetMembaseServerForTemporaryData().Get(KeyID.KEY_PAYMENT_APPSTORE_ENABLE + "_" + version);
				}
			}
			else 
			{
				obj = DBConnector.GetMembaseServerForTemporaryData().Get(KeyID.KEY_PAYMENT_ENABLE + "_" + version);
			}

			if (obj == null)
			{
				LogHelper.Log("Warn! Payment for " + platform + "_" + version + " is disabled.");
				return 0;
			}
			else
			{
//				LogHelper.Log("Warn! Payment for " + platform + "_" + version + " is := " + (int)obj);
				return (int)obj;
			}
		}
		catch (Exception e) 
		{
			LogHelper.LogException("GetPaymentStatus" + "_" + platform + "_" + version, e);
		}
		
		LogHelper.Log("Warn! Payment for " + platform + "_" + version + " is disabled.");
		return 0;
	}
	
	private boolean GetChatStatus(String platform, String version)
	{
		if (ProjectConfig.IS_SERVER_FREESTYLE == 1 || ProjectConfig.IS_SERVER_ZALO_LOGIC == 1 || ProjectConfig.IS_SERVER_ZALO_HAPPY == 1) 
		{
			return true;
		}
		
		try
		{
			String iOS	= Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_VERSION][8][DatabaseID.VERSION_PLATFORM]);
			Object obj = null;
			if (platform.equals(iOS)) 
			{
				obj = DBConnector.GetMembaseServerForTemporaryData().Get("chat_enable_ios" + "_" + version);
			} 
			else 
			{
				obj = DBConnector.GetMembaseServerForTemporaryData().Get("chat_enable_android" + "_" + version);
			}

			if (obj == null)
			{
				LogHelper.Log("Warn! Chat for " + platform + "_" + version + " is disabled.");
				return false;
			}
			else
			{
				return true;
			}
		}
		catch (Exception e) 
		{
			LogHelper.LogException("GetChatStatus" + "_" + platform + "_" + version, e);
		}
		
		LogHelper.Log("Warn! Chat for " + platform + "_" + version + " is disabled.");
		return false;
	}
	
	private OfferManager ServerOffer()
	{
		return SkyGarden._offer_manager;
	}
	
	private OfferManager UserOffer()
	{
		if (_user_offer_manager == null)
		{
			_user_offer_manager = new OfferManager();
			try
			{
				byte[] b = DBConnector.GetMembaseServer(_user_id).GetRaw(_user_id + "_" + KeyID.KEY_OFFER_MANAGER);
				if (b != null && b.length > 0)
				{
					_user_offer_manager.Load(b);
				}
			}
			catch (Exception e)
			{
				LogHelper.LogException("LoadUserOfferManager",e );
			}
		}
		
		return this._user_offer_manager;
	}
	
	private ConcurrentHashMap<String, Integer> ServerConfig()
	{
		return SkyGarden._server_config;
	}

	private void handleReceiveGiftEventNewYear2015() {
		if (!_use_event_new_year_2015)
		{
			LogHelper.Log("handleReceiveGiftEventNewYear2015 .. not in event");
			return;
		}
		
		int current_gift_id = userInfo.GetGiftBoxReceivedEventLunarYear2015();
		int next_gift_id	= current_gift_id + 1;
		
		if (next_gift_id >= Server.s_globalDB[DatabaseID.SHEET_EVENT_MID_AUTUMN].length)
		{
			LogHelper.Log("invalid gift id");
			return;
		}
		
		int item_required = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_EVENT_MID_AUTUMN][next_gift_id][DatabaseID.EVENT_MID_AUTUMN_NUM_REQUIRE]);
		String s = GameUtil.GetUserMisc(_user_id).Get(KeyID.KEY_EVENT_NEW_YEAR_2015 + "_" + "opened");
		int current_num = s.equals("") ? 0 : Integer.parseInt(s);
//		int current_num = userInfo.GetEventNum(KeyID.KEY_EVENT_NEW_YEAR_2015);
		if (current_num < item_required)
		{
			LogHelper.Log("not enough item, current item num = " + current_num + ", require = " + item_required);
			return;
		}
		
		userInfo.SetGiftBoxReceivedEventLunarYear2015(next_gift_id);
		SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
		
		// get gift
		String gift_name = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][41][DatabaseID.GIFT_INFO_NAME]);
		String gift_description = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][41][DatabaseID.GIFT_INFO_DESCRIPTION]);
		gift_description = gift_description.replace("0xff", item_required + "");
		String gift_list = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_EVENT_MID_AUTUMN][next_gift_id][DatabaseID.EVENT_MID_AUTUMN_GIFT_ITEM]);
		
		// add gift box
		gift_mgr.AddGiftBox(gift_name, gift_description, gift_list);
		gift_mgr.SaveDataToDatabase(KeyID.KEY_GIFT);
		MoveGiftBoxToMailBox();
		
		StringBuilder log = new StringBuilder();
		log.append(Misc.getCurrentDateTime());								//  1. thoi gian tieu tien
		log.append('\t').append("handleReceiveGiftEventNewYear2015" + "_" + next_gift_id);			//  2. hanh dong cua gamer
		log.append('\t').append(userInfo.getID());							//  3. id
		log.append('\t').append(userInfo.getID());							//  4. role id
		log.append('\t').append(userInfo.getName());						//  5. name
		log.append('\t').append(0);											//  6. server id
		log.append('\t').append(userInfo.getLevel());						//  7. level
		LogHelper.Log(LogHelper.LogType.TRACKING_ACTION, log.toString());
		
		if (_command_id != CommandID.CMD_LOGIN && _command_id != CommandID.CMD_COME_BACK_HOME)
		{
			// send result to client
			FBEncrypt response = new FBEncrypt();
			_command_id = CommandID.CMD_RECEIVED_GIFT_MID_AUTUMN_FESTIVAL;
			_return_id = ReturnCode.RESPONSE_OK;
			response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
			response.addBinary(KeyID.KEY_USER_INFOS, GetUserInfo().getData(false));

			MailBox mailbox = new MailBox(userInfo);
			mailbox.Load();
			response.addBinary(KeyID.KEY_MAIL_BOX, mailbox.GetData());

			try 
			{
				_client.WriteZip(response.toByteArray());
			}
			catch (Exception ex) 
			{
				LogHelper.LogException("handleReceiveGiftEventNewYear2015", ex);
			}
		}
	}
	
	private void handleReceiveGiftEvent8March2015() {
		if (!_use_event_8_3_2015)
		{
			LogHelper.Log("handleReceiveGiftEvent8March2015 .. not in event");
			return;
		}
		
		int current_gift_id = userInfo.GetGiftBoxReceivedEvent8March2015();
		int next_gift_id	= current_gift_id + 1;
		
		if (next_gift_id >= Server.s_globalDB[DatabaseID.SHEET_EVENT_MID_AUTUMN].length)
		{
			LogHelper.Log("invalid gift id");
			return;
		}
		
		int item_required = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_EVENT_MID_AUTUMN][next_gift_id][DatabaseID.EVENT_MID_AUTUMN_NUM_REQUIRE]);
		int current_num = userInfo.GetEventNum(KeyID.KEY_EVENT_8_3_2015);
		if (current_num < item_required)
		{
			LogHelper.Log("not enough item, current item num = " + current_num + ", require = " + item_required);
			return;
		}
		
		userInfo.SetGiftBoxReceivedEvent8March2015(next_gift_id);
		SET_DB_VALUE_BINARY(KeyID.KEY_USER_INFOS, userInfo.getData(true));
		
		// get gift
		String gift_name = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][55][DatabaseID.GIFT_INFO_NAME]);
		String gift_description = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][55][DatabaseID.GIFT_INFO_DESCRIPTION]);
		gift_description = gift_description.replace("0xff", item_required + "");
		String gift_list = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_EVENT_MID_AUTUMN][next_gift_id][DatabaseID.EVENT_MID_AUTUMN_GIFT_ITEM]);
		
		// add gift box
		gift_mgr.AddGiftBox(gift_name, gift_description, gift_list);
		gift_mgr.SaveDataToDatabase(KeyID.KEY_GIFT);
		MoveGiftBoxToMailBox();
		
		StringBuilder log = new StringBuilder();
		log.append(Misc.getCurrentDateTime());								//  1. thoi gian tieu tien
		log.append('\t').append("handleReceiveGiftEvent8March2015" + "_" + next_gift_id);			//  2. hanh dong cua gamer
		log.append('\t').append(userInfo.getID());							//  3. id
		log.append('\t').append(userInfo.getID());							//  4. role id
		log.append('\t').append(userInfo.getName());						//  5. name
		log.append('\t').append(0);											//  6. server id
		log.append('\t').append(userInfo.getLevel());						//  7. level
		LogHelper.Log(LogHelper.LogType.TRACKING_ACTION, log.toString());
		
		if (_command_id != CommandID.CMD_LOGIN && _command_id != CommandID.CMD_COME_BACK_HOME)
		{
			// send result to client
			FBEncrypt response = new FBEncrypt();
			_command_id = CommandID.CMD_RECEIVED_GIFT_MID_AUTUMN_FESTIVAL;
			_return_id = ReturnCode.RESPONSE_OK;
			response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
			response.addBinary(KeyID.KEY_USER_INFOS, GetUserInfo().getData(false));

			MailBox mailbox = new MailBox(userInfo);
			mailbox.Load();
			response.addBinary(KeyID.KEY_MAIL_BOX, mailbox.GetData());

			try 
			{
				_client.WriteZip(response.toByteArray());
			}
			catch (Exception ex) 
			{
				LogHelper.LogException("handleReceiveGiftEvent8March2015", ex);
			}
		}
	}
	
	private int GetNumGiftGiveFriendPerTime()
	{
		return 10;
	}
	
	private void handleGiveFriendEventGift(FBEncrypt encrypt)
	{
		if (!_use_event_new_year_2015 && !_use_event_8_3_2015)
			return;
				
		int num_used = encrypt.getInt(KeyID.KEY_ITEM_NUM_USED);
		
		if (num_used <= 0 || _friend_user_id < 10000)
		{
			LogHelper.Log("Invalid params, num := " + num_used + ", friend_id := " + _friend_user_id);
			requestError();
			return;
		}
		
		// base on current event, get type and id of item used
		int type_used = -1;
		int id_used = -1;
		if (_use_event_new_year_2015) {
			type_used = DatabaseID.IT_EVENT;
			id_used = DatabaseID.ITEM_EVENT_BANH_CHUNG;
		} else if (_use_event_8_3_2015) {
			type_used = DatabaseID.IT_EVENT;
			id_used = DatabaseID.ITEM_EVENT_GLASS_ROSE;
		}
		
		LogHelper.LogHappy("type := " + type_used + ", id := " + id_used);
		
		StringBuilder drop_list = new StringBuilder();
		// check quality
		if (id_used >= 0)
		{
			int num_current = stock_event.getProductNum(type_used, id_used);
			if (num_current >= num_used)
			{
				// reduce item in stock
				stock_event.updateValue(_command_id, type_used, id_used, num_current - num_used);
				SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
				
				int num_received = num_used / GetNumGiftGiveFriendPerTime();
				int type_received = -1;
				int id_recevied = -1;
				
				// handle logic base on current event
				if (_use_event_new_year_2015)
				{
					// base on total lixi received, decide which gift user receive
					long total_lixipao_received = 0;
					try
					{
						total_lixipao_received = DBConnector.GetMembaseServer(_user_id).Increase(_user_id + "_" + "lixi_pao_received", num_received, 0);
						LogHelper.LogHappy("Received bao li xi normal, total received := " + total_lixipao_received);

					}
					catch (Exception e)
					{
						total_lixipao_received = 0;
					}
					
					boolean at_mark_point = false;
					String mark_list = "10;25;39;52;64;75;90;102;115;126;136;150;163;174;184;199;211;223;236;246;260;271;286;298;312;323;333;346;361;371;386;400;413;425;436;451;463;476;487;497;511;524;535;545;560;572;584;597;607;621;632;647;659;673;684;694;707;722;732;747;761;774;786;797;812;824;837;848;858;872;885;896;906;921;933;945;958;968;982;993;1008;1020;1034;1045;1055;1068;1083;1102;1117;1129;1146;1157;1173;1183;1203;1216;1234;1248;1267;1282;1294;1311;1322;1338;1348;1368;1381;1399;1413;1513;1613;1713;1813;1913;2013;2113;2213;2313;2413;2613;2813;3013;3213;3413;3613;3813;4013;4213;4413;4713;5013;5313;5613;5913;6213;6513;6813;7113;7413;7713;8213;8713;9213;9713;10213;10713;11213;11713;12213;12713";
					String[] aos = mark_list.split(";");					
					for (String s1 : aos)
					{
						if (total_lixipao_received == Integer.parseInt(s1))
						{
							at_mark_point = true;
							break;
						}
						
						if (Integer.parseInt(s1) > total_lixipao_received)
							break;
					}
					
					if (at_mark_point)
					{
						type_received = DatabaseID.IT_EVENT;
						id_recevied = DatabaseID.ITEM_EVENT_BAO_LIXI_SILVER;
					}
					else
					{
						type_received = DatabaseID.IT_EVENT;
						id_recevied = DatabaseID.ITEM_EVENT_BAO_LIXI_NORMAL;
					}
					
					// add gifts
					stock_event.addGift(type_received, id_recevied, num_received, _command_id);
					SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase());
					LogHelper.LogHappy("Give gift type := " + type_received + ", id := " + id_recevied + ", num := " + num_received);

					drop_list.append(type_received).append(':');
					drop_list.append(id_recevied).append(':');
					drop_list.append(num_received);

					try
					{
						int score_friend_received = num_used / GetNumGiftGiveFriendPerTime();
						long l = DBConnector.GetMembaseServer(_friend_user_id).Increase(_friend_user_id + "_" + "event_new_year_2015_given_score", score_friend_received, 1L);
						LogHelper.LogHappy("Friend ID := " + _friend_user_id + ", score friend received := " + score_friend_received + ", total score := " + l);
					}
					catch (Exception e)
					{
						LogHelper.LogException("GiveFriendGift", e);
					}
				}
				else if (_use_event_8_3_2015) {
					SetEventScore(KeyID.KEY_EVENT_8_3_2015, num_used);
				}
			}
			else
			{
				_return_id = ReturnCode.RESPONSE_NOT_ENOUGH_PRODUCT;
				LogHelper.LogHappy("Not enough item, require := " + num_used + ", current := " + stock_event.getProductNum(type_used, id_used));
			}
		}
		else
		{
			_return_id = ReturnCode.RESPONSE_ERROR;
			LogHelper.Log("Invalid item type := " + type_used + ", id := " + id_used);
		}
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_STOCK_EVENT, stock_event.getDataToClient());
		response.addString(KeyID.KEY_DROP_BONUS_ITEM, drop_list.toString());
		
		try
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("handlePlaceItemXmasTree", ex);
		}
	}
	
	private void handleReceiveEventGiftFromFriend()
	{
		if (!_use_event_new_year_2015)
			return;
		
		// get num
		int old_score = 0;
		int num = 0;
		try
		{
			Object oldscore = DBConnector.GetMembaseServer(_user_id).Get(_user_id + "_" + "event_new_year_2015");
			if (oldscore != null)
			{
				if (oldscore instanceof String)
				{
					LogHelper.LogHappy("Old Score string := " + Integer.parseInt((String)oldscore));
					old_score = Integer.parseInt((String)oldscore);
				}
				else
				{
					LogHelper.LogHappy("Old Score int := " + (int)oldscore);
					old_score = (int)oldscore;
				}
			}
			
			Object obj = DBConnector.GetMembaseServer(_user_id).Get(_user_id + "_" + "event_new_year_2015_given_score");
			if (obj != null)
			{
				if (obj instanceof String)
					num = Integer.parseInt((String)obj);
				else
					num = (int)obj;
			}
			
			num += old_score;
		}
		catch (Exception e)
		{
			LogHelper.LogException("GetEventGift", e);
		}
		
		if (num > 0)
		{
			try
			{
				DBConnector.GetMembaseServer(_user_id).Delete(_user_id + "_" + "event_new_year_2015");
				DBConnector.GetMembaseServer(_user_id).Delete(_user_id + "_" + "event_new_year_2015_given_score");
				SetEventScore(KeyID.KEY_EVENT_NEW_YEAR_2015, num);
			}
			catch (Exception e)
			{
				LogHelper.LogException("SetEvetGift", e);
			}
		}
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_USER_INFOS, GetUserInfo().getData(false));
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		response.addInt(KeyID.KEY_EVENT_CURRENT_TOTAL_NUM, userInfo.GetEventNum(KeyID.KEY_EVENT_NEW_YEAR_2015));
		
		try 
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("handleAcceptMailGift", ex);
		}
	}
	
	private void handleOpenItemEvent(FBEncrypt encrypt)
	{
		if (!_use_event_new_year_2015 && !IsServerHappy())
			return;
		
		int id = encrypt.getInt(KeyID.KEY_EVENT_ITEM_ID);
		
		StringBuilder sb = new StringBuilder();
		if (stock_event.getProductNum(DatabaseID.IT_EVENT, id) > 0 &&
			stock_event.decreaseObject(_command_id, DatabaseID.IT_EVENT, id) &&
			SET_DB_VALUE_BINARY(KeyID.KEY_STOCKS + DatabaseID.STOCK_EVENT, stock_event.getDataToDatabase()))
		{
			if (_use_event_new_year_2015 || IsServerHappy())
			{
				String s = GameUtil.GetUserMisc(_user_id).Get(KeyID.KEY_EVENT_NEW_YEAR_2015 + "_" + "opened");
				int num_opened = s.equals("") ? 0 : Integer.parseInt(s);
				
				num_opened++;
				GameUtil.GetUserMisc(_user_id).Set(KeyID.KEY_EVENT_NEW_YEAR_2015 + "_" + "opened", "" + num_opened);
				
				int gift_num = 5;
				SetEventScore(KeyID.KEY_EVENT_NEW_YEAR_2015, gift_num);
				
				// compute receive gifts
				// choose group percent base on number of attempt user used item
				int group_column = -1;
				
				for (int i = DatabaseID.OPEN_EVENT_ITEM_PERCENT_GROUP_0; i < Server.s_globalDB[DatabaseID.SHEET_OPEN_EVENT_ITEM][0].length; i++)
				{
					String cell = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_OPEN_EVENT_ITEM][0][i]);
					String[] aos = cell.split(":");
					if (num_opened >= Integer.parseInt(aos[0]) && num_opened < Integer.parseInt(aos[1]))
					{
						group_column = i;
						break;
					}
				}
				
				if (group_column < 0)
				{
					LogHelper.Log("Invalid group := " + group_column + ", num opened := " + num_opened);
					return;
				}
				
				int start = -1;
				int end = -1;
				if (id == DatabaseID.ITEM_EVENT_BAO_LIXI_NORMAL)
				{
					start = 0;
					end = 11;
				}
				else if (id == DatabaseID.ITEM_EVENT_BAO_LIXI_SILVER)
				{
					start = 12;
					end = 23;
				}
				else if (id == DatabaseID.ITEM_EVENT_BAO_LIXI_GOLD)
				{
					start = 24;
					end = 35;
				}
				
				if (GameUtil.GetUserMisc(_user_id).Get("1st_receive_pot_lixipao" + "_" + id).equals(""))
				{
					LogHelper.LogHappy("first time open lixi pao : " + id);
					if (Misc.RANDOM_RANGE(0, 100) < 70)
					{
						int receive_pot_id = -1;
						int r = Misc.RANDOM_RANGE(0, 100);
						switch (id)
						{
							case DatabaseID.ITEM_EVENT_BAO_LIXI_NORMAL:
								if (r <= 70) {
									receive_pot_id = 11; // dai duong
								} else if (r > 70 && r < 95) {
									receive_pot_id = 14; // nguyet thuc
								} else {
									receive_pot_id = 16; // sao bang
								}
								break;
							case DatabaseID.ITEM_EVENT_BAO_LIXI_SILVER:
								if (r <= 80) {
									receive_pot_id = 12; // dung nham
								} else if (r > 80 && r < 99) {
									receive_pot_id = 15; // mat troi
								} else {
									receive_pot_id = 19; // phuong hoang
								}
								break;
							case DatabaseID.ITEM_EVENT_BAO_LIXI_GOLD:
								if (r <= 80) {
									receive_pot_id = 13; // trang non
								} else if (r > 80 && r < 99) {
									receive_pot_id = 17; // hoa tuyet
								} else {
									receive_pot_id = 18; // thanh long
								}
								break;
						}
						
						sb.append(DatabaseID.IT_POT).append(':');
						sb.append(receive_pot_id).append(':');
						sb.append(1);
						
						LogHelper.LogHappy("gift fist time lixi pao := " + sb.toString());

						gift2Stock(sb.toString(), _command_id, "open_lixi");
						GameUtil.GetUserMisc(_user_id).Set("1st_receive_pot_lixipao" + "_" + id, sb.toString());
					}
				}
				else
				{
					// random gift item base on percent group
					double r = Misc.RANDOM_DOUBLE_RANGE(0.0, 100.0);
					double current = 0;
					for (int i = start; i <= end; i++)
					{
						String cell = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_OPEN_EVENT_ITEM][i][group_column]);
						String[] aos = cell.split(":");
						current += Double.parseDouble(aos[2]);
						LogHelper.LogHappy("cell := " + cell + ", random := " + r + ", current := " + current);
						if (r <= current)
						{
							String result = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_OPEN_EVENT_ITEM][i][DatabaseID.OPEN_EVENT_ITEM_NAME]);
							LogHelper.LogHappy("result := " + result);
							String[] aos2 = result.split(":");
							sb.append(aos2[0]).append(':');
							sb.append(aos2[1]).append(':');
							sb.append(aos2[2]);

							gift2Stock(sb.toString(), _command_id, "open_lixi");

							if (Integer.parseInt(aos2[0]) == DatabaseID.IT_POT) {
								StringBuilder log = new StringBuilder();
								log.append(Misc.getCurrentDateTime());								//  1. thoi gian tieu tien
								log.append('\t').append("OpenLixiPao_" + aos2[0] + "_" + aos2[1]);			//  2. hanh dong cua gamer
								log.append('\t').append(userInfo.getID());							//  3. id
								log.append('\t').append(userInfo.getID());							//  4. role id
								log.append('\t').append(userInfo.getName());						//  5. name
								log.append('\t').append(0);											//  6. server id
								log.append('\t').append(userInfo.getLevel());						//  7. level
								LogHelper.Log(LogHelper.LogType.TRACKING_ACTION, log.toString());
							}
							break;
						}
					}
				}
				
				StringBuilder log = new StringBuilder();
				log.append(Misc.getCurrentDateTime());								//  1. thoi gian tieu tien
				log.append('\t').append("OpenLixiPao_" + id);			//  2. hanh dong cua gamer
				log.append('\t').append(userInfo.getID());							//  3. id
				log.append('\t').append(userInfo.getID());							//  4. role id
				log.append('\t').append(userInfo.getName());						//  5. name
				log.append('\t').append(0);											//  6. server id
				log.append('\t').append(userInfo.getLevel());						//  7. level
				LogHelper.Log(LogHelper.LogType.TRACKING_ACTION, log.toString());
			}
		}
		else
		{
			LogHelper.LogHappy("Not enough item id := " + id);
		}
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_USER_INFOS, GetUserInfo().getData(false));
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		response.addBinary(KeyID.KEY_STOCK_EVENT, stock_event.getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
		response.addInt(KeyID.KEY_EVENT_CURRENT_TOTAL_NUM, userInfo.GetEventNum(KeyID.KEY_EVENT_NEW_YEAR_2015));
		response.addString(KeyID.KEY_DROP_BONUS_ITEM, sb.toString());
		response.addInt(KeyID.KEY_EVENT_ITEM_ID, id);
		
		try 
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("handleOpenItemEvent", ex);
		}
	}
	
	private int GetNumEventGiftFromFriend()
	{
		int old_score = 0;
		try
		{
			Object oldscore = DBConnector.GetMembaseServer(_user_id).Get(_user_id + "_" + "event_new_year_2015");
			if (oldscore != null)
			{
				if (oldscore instanceof String)
				{
					LogHelper.LogHappy("Old Score string := " + Integer.parseInt((String)oldscore));
					old_score = Integer.parseInt((String)oldscore);
				}
				else
				{
					LogHelper.LogHappy("Old Score int := " + (int)oldscore);
					old_score = (int)oldscore;
				}
			}
			
			Object obj = DBConnector.GetMembaseServer(_user_id).Get(_user_id + "_" + "event_new_year_2015_given_score");
			if (obj != null)
			{
				if (obj instanceof String)
				{
					LogHelper.LogHappy("Score string := " + Integer.parseInt((String)obj));
					return (old_score + Integer.parseInt((String)obj));
				}
				else
				{
					LogHelper.LogHappy("Score int := " + (int)obj);
					return (old_score + (int)obj);
				}
			}
			else
			{
				return 0;
			}
		}
		catch (Exception e)
		{
			LogHelper.LogException("GetEventGift", e);
			return 0;
		}
	}
	
	private void handleGetEventGiftList(FBEncrypt encrypt)
	{
		int item_id = encrypt.getInt(KeyID.KEY_EVENT_ITEM_ID);
		
		StringBuilder sb = new StringBuilder();
		if (_use_event_new_year_2015 || IsServerHappy())
		{
			if (item_id == DatabaseID.ITEM_EVENT_BAO_LIXI_NORMAL)
			{
				for (int i = 0; i <= 11 && i < Server.s_globalDB[DatabaseID.SHEET_OPEN_EVENT_ITEM].length; i++)
				{
					String item = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_OPEN_EVENT_ITEM][i][DatabaseID.OPEN_EVENT_ITEM_NAME]);
					if (sb.length() == 0)
					{
						sb.append(item);
					}
					else
					{
						sb.append(':').append(item);
					}
				}
			}
			else if (item_id == DatabaseID.ITEM_EVENT_BAO_LIXI_SILVER)
			{
				for (int i = 12; i <= 23 && i < Server.s_globalDB[DatabaseID.SHEET_OPEN_EVENT_ITEM].length; i++)
				{
					String item = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_OPEN_EVENT_ITEM][i][DatabaseID.OPEN_EVENT_ITEM_NAME]);
					if (sb.length() == 0)
					{
						sb.append(item);
					}
					else
					{
						sb.append(':').append(item);
					}
				}
			}
			else if (item_id == DatabaseID.ITEM_EVENT_BAO_LIXI_GOLD)
			{
				for (int i = 24; i <= 35 && i < Server.s_globalDB[DatabaseID.SHEET_OPEN_EVENT_ITEM].length; i++)
				{
					String item = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_OPEN_EVENT_ITEM][i][DatabaseID.OPEN_EVENT_ITEM_NAME]);
					if (sb.length() == 0)
					{
						sb.append(item);
					}
					else
					{
						sb.append(':').append(item);
					}
				}
			}
		}
		LogHelper.LogHappy("Event item list := " + sb.toString());
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addString(KeyID.KEY_GIFT_ITEM_LIST, sb.toString());
		response.addInt(KeyID.KEY_EVENT_ITEM_ID, item_id);
		
		try 
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("handleGetEventGiftList", ex);
		}
	}
	
	private void handleReattend()
	{
//		if (!_use_new_dailygift || ProjectConfig.IS_SERVER_FREESTYLE != 1)
//		{
//			return;
//		}
//		
//		int diamond = NewDailyGift().GetDiamondReattend();
//		
//		if (diamond > 0 && (money_mgr.GetRealMoney() + money_mgr.GetBonusMoney()) >= diamond)
//		{
//			UseMoneyResult usemoney = money_mgr.UseRealMoneyAndBonusMoney(diamond,									// log
//																			_command_id,							//  2. hanh dong cua gamer
//																			userInfo.getName(),						//  3. ten tai khoan
//																			userInfo.getLevel(),					//  7. level cua gamer
//																			_ip,									//  9. ip login v4 cua gamer
//																			-1,										// 10. id cua loai item
//																			-1,										// 11. id cua item
//																			"",										// 12. ten item
//																			diamond,								// 13. gia game coin cua item
//																			1);										// 14. so luong vat pham
//			if (usemoney._code == UseMoneyResult.CODE.SUCCESS)
//			{
//				String[] sa = NewDailyGift().getUnattendDays().split(";");
//				for (String s : sa)
//				{
//					int id = Integer.parseInt(s.split(":")[0]);
//					gift_mgr.AddGiftBox("Daily gift", "Enjoy your day!", NewDailyGift().GetDay(id).getGift());
//					NewDailyGift().GetDay(id).setAttend(true);
//					NewDailyGift().GetDay(id).setReceivedGift(true);
//				}
//
//				NewDailyGift().setUnattendDays("");
//				SET_DB_VALUE_BINARY(KeyID.KEY_NEW_DAILYGIFT, NewDailyGift().GetData());
//				
//				MoveGiftBoxToMailBox();
//			}
//			else
//			{
//				LogHelper.Log("Use money failed");
//				requestError();
//				return;
//			}
//		}
//		
//		// response
//		FBEncrypt response = new FBEncrypt();
//		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
//		response.addBinary(KeyID.KEY_NEW_DAILYGIFT, NewDailyGift().GetData());
//		response.addBinary(KeyID.KEY_USER_INFOS, userInfo.getData(false));
//		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
//		MailBox mailbox = new MailBox(userInfo);
//		mailbox.Load();
//		response.addBinary(KeyID.KEY_MAIL_BOX, mailbox.GetData());
//		
//		try 
//		{
//			_client.WriteZip(response.toByteArray());
//		}  
//		catch (Exception ex)  
//		{
//			LogHelper.LogException("handleReattend", ex);
//		}
	}
	
	private void handleAddCloseFriend(FBEncrypt encrypt) {
		long id = encrypt.getLong(KeyID.KEY_FRIEND_ID);
		if (id <= 10000) {
			LogHelper.LogHappy("Invalid friend id := " + id);
			requestError();
			return;
		}
		
		if (CloseFriend().GetCloseFriend() > -1) {
			LogHelper.LogHappy("Already has closed friend, details := " + CloseFriend().ToString());
			requestError();
			return;
		}
		
		// update friend's closefriend list
		try {
			CloseFriend cf;
			byte[] ba = DBConnector.GetMembaseServer(id).GetRaw(id + "_" + KeyID.KEY_CLOSE_FRIEND);
			if (ba != null && ba.length > 0) {
				cf = new CloseFriend(ba);
			} else {
				cf = new CloseFriend();
			}
			
			if (cf.FriendList().size() >= 10) {
				LogHelper.LogHappy("Friend is full, details := " + cf.ToString());
				requestError(ReturnCode.RESPONSE_ROOM_FULL);
				return;
			}
			
			cf.AddFriend(_user_id);
			DBConnector.GetMembaseServer(id).SetRaw(id + "_" + KeyID.KEY_CLOSE_FRIEND, cf.GetData());
			LogHelper.LogHappy("Updated close friend list id := " + id + ", details := " + cf.ToString());
		} catch (Exception e) {
			LogHelper.LogException("SaveCloseFriend",e );
		}
		
		// set my close friend
		CloseFriend().SetCloseFriend(id);
		SET_DB_VALUE_BINARY(KeyID.KEY_CLOSE_FRIEND, CloseFriend().GetData());
		
		// log here
		
		// add gift
		GameUtil.AddGiftToMailBox("01/01/2015 06:00:00", "01/01/2020 24:00:00", userInfo, "close_friend_" + id,
			Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][56][DatabaseID.GIFT_INFO_NAME]),
			Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][56][DatabaseID.GIFT_INFO_DESCRIPTION]).replace("%s", GameUtil.GetUserInfo(id).getName()),
			Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][56][DatabaseID.GIFT_INFO_ITEMS_LIST]),
			Misc.getActionName(_command_id),
			SkyGarden._server_id);
		
		GameUtil.AddGiftToMailBox("01/01/2015 06:00:00", "01/01/2020 24:00:00", GameUtil.GetUserInfo(id), "close_friend_" + _user_id,
			Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][57][DatabaseID.GIFT_INFO_NAME]),
			Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][57][DatabaseID.GIFT_INFO_DESCRIPTION]).replace("%s", userInfo.getName()),
			Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_GIFTS_INFO][57][DatabaseID.GIFT_INFO_ITEMS_LIST]),
			Misc.getActionName(_command_id),
			SkyGarden._server_id);
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_CLOSE_FRIEND, CloseFriend().GetData());
		MailBox mailbox = new MailBox(userInfo);
		mailbox.Load();
		response.addBinary(KeyID.KEY_MAIL_BOX, mailbox.GetData());
		
		try 
		{
			_client.WriteZip(response.toByteArray());
		}  
		catch (Exception ex)  
		{
			LogHelper.LogException("handleAddCloseFriend", ex);
		}
	}
	
	private void handleOpenTreasureTrunk(FBEncrypt encrypt) {
		int id = encrypt.getInt(KeyID.KEY_ID);
		if (id != DatabaseID.MATERIAL_ITEM_TRUNK_BRONZE &&
			id != DatabaseID.MATERIAL_ITEM_TRUNK_SILVER &&
			id != DatabaseID.MATERIAL_ITEM_TRUNK_GOLD) {
			requestError();
			LogHelper.Log("Invalid trunk id := " + id);
			return;
		}
		
		StringBuilder gift = new StringBuilder();
		if (Trunk().UseTrunk(id)) {
			int count = Trunk().IncreaseCount(id);
			int column_percent = -1;
			if (count == 0 || count % 10 == 0) {
				column_percent = DatabaseID.TREASURE_TRUNK_COUNT_0;
			} else if (count >= 1 && count <= 5) {
				column_percent = count + 2;
			} else if (count >= 6) {
				column_percent = DatabaseID.TREASURE_TRUNK_COUNT_6;
			}
			
			int row_start = -1;
			int row_end = -1;
			switch (id) {
				case DatabaseID.MATERIAL_ITEM_TRUNK_BRONZE:
					row_start = 0;
					row_end = 7;
					break;
				case DatabaseID.MATERIAL_ITEM_TRUNK_SILVER:
					row_start = 8;
					row_end = 15;
					break;
				case DatabaseID.MATERIAL_ITEM_TRUNK_GOLD:
					row_start = 16;
					row_end = 23;
					break;
			}
			
			LogHelper.LogHappy("column_percent := " + column_percent + ", row_start := " + row_start + ", row_end := " + row_end);
			
			int item_type = -1;
			int item_id = -1;
			int item_num = -1;
			boolean is_special = false;
			int rand = Misc.RANDOM_RANGE(0, 100);
			int current = 0;
			for (int i = row_start; i <= row_end; i++) {
				int percent = (int)Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_TREASURE_TRUNK][i][column_percent]);
				current += percent;
				LogHelper.LogHappy("percent := " + percent + ", current := " + current + ", rand := " + rand);
				
				if (rand <= current) {
					String[] sa = Misc.PARSE_STRING(Server.s_globalDB[DatabaseID.SHEET_TREASURE_TRUNK][i][DatabaseID.TREASURE_TRUNK_ITEM]).split(":");
					item_type = Integer.parseInt(sa[0]);
					item_id = Integer.parseInt(sa[1]);
					item_num = Integer.parseInt(sa[2]);
					is_special = sa[3].equals("1");
					break;
				}
			}
			
			LogHelper.Log("result: type := " + item_type + ", id := " + item_id + ", num := " + item_num + ", special := " + is_special);
			if (item_type == -1 || item_id == -1 || item_num == -1) {
				LogHelper.Log("Invalid result");
				requestError();
				return;
			}
			
			if (is_special) {
				Trunk().ResetCount(id);
			}
			SET_DB_VALUE_BINARY(KeyID.KEY_TREASURE, Trunk().GetData());
			
			gift.append(item_type).append(":").append(item_id).append(":").append(item_num);
			gift2Stock(gift.toString(), _command_id, "open_trunk");

			StringBuilder log = new StringBuilder();
			log.append(Misc.getCurrentDateTime());								//  1. thoi gian tieu tien
			log.append('\t').append("OpenTrunk_" + id + "_" + item_type + "_" + item_id);	//  2. hanh dong cua gamer
			log.append('\t').append(userInfo.getID());							//  3. id
			log.append('\t').append(userInfo.getID());							//  4. role id
			log.append('\t').append(userInfo.getName());						//  5. name
			log.append('\t').append(0);											//  6. server id
			log.append('\t').append(userInfo.getLevel());						//  7. level
			LogHelper.Log(LogHelper.LogType.TRACKING_ACTION, log.toString());
		} else {
			LogHelper.Log("Can not open trunk id := " + id);
			requestError();
			return;
		}
		
		FBEncrypt response = new FBEncrypt();
		response.addBinary(KeyID.KEY_REQUEST_STATUS, getResponseStatus());
		response.addBinary(KeyID.KEY_USER_INFOS, GetUserInfo().getData(false));
		response.addInt(KeyID.KEY_USER_DIAMOND, (money_mgr.GetBonusMoney() + money_mgr.GetRealMoney()));
		if (_use_stock_event) {
			response.addBinary(KeyID.KEY_STOCK_EVENT, stock_event.getDataToClient());
		}
		
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_SILO, stock.get(DatabaseID.STOCK_SILO).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_BARN, stock.get(DatabaseID.STOCK_BARN).getDataToClient());
		response.addBinary(KeyID.KEY_STOCKS + DatabaseID.STOCK_WAREHOUSE, stock.get(DatabaseID.STOCK_WAREHOUSE).getDataToClient());
		response.addBinary(KeyID.KEY_TREASURE, Trunk().GetData());
		response.addString(KeyID.KEY_GIFT, gift.toString()); // type:id:num
		
		try 
		{
			_client.WriteZip(response.toByteArray());
		}
		catch (Exception ex) 
		{
			LogHelper.LogException("handleOpenItemEvent", ex);
		}
	}
	
	private int GetBugBonusLevel(int plant_id, int level) {
		int bug_id = (int) Misc.PARSE_LONG(Server.s_globalDB[DatabaseID.SHEET_SEED][plant_id][DatabaseID.SEED_BUG_ID]);
		if (bug_id < 0 || bug_id > 2)
			return 0;
		
		if (SkyGarden._bug_bonus.containsKey(level)) {
			return Integer.parseInt(SkyGarden._bug_bonus.get(level)[bug_id]);
		}
		
		return 0;
	}
	
	private boolean IsServerHappy()
	{
		return (ProjectConfig.IS_SERVER_FREESTYLE == 1);
	}
	
	private boolean isClientAndroid()
	{
		return _client_OS.equals("ANDROID");
	}
	
	private boolean isClientIOS()
	{
		return _client_OS.equals("iOS");
	}

    private boolean isClientWinPhone()
    {
        return _client_OS.equals("WINPHONE");
    }
	
	private IBShopManager IBShopManager()
	{
		return Server.s_ibShopManager;
	}
	
	private NewDailyGift NewDailyGift()
	{
		return _new_dailygift;
	}
	
	private ComboManager ComboManager()
	{
		return _combo_manager;
	}
	
	private CloseFriend CloseFriend() {
		return _close_friend;
	}
	
	private TreasureTrunk Trunk() {
		return _trunk;
	}
}